// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/three/build/three.module.js":[function(require,module,exports) {
var define;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CameraHelper = exports.Camera = exports.Cache = exports.ByteType = exports.BufferGeometryLoader = exports.BufferGeometry = exports.BufferAttribute = exports.BoxHelper = exports.BoxGeometry = exports.BoxBufferGeometry = exports.Box3Helper = exports.Box3 = exports.Box2 = exports.BoundingBoxHelper = exports.BooleanKeyframeTrack = exports.Bone = exports.BinaryTextureLoader = exports.BasicShadowMap = exports.BasicDepthPacking = exports.BackSide = exports.AxisHelper = exports.AxesHelper = exports.AudioLoader = exports.AudioListener = exports.AudioContext = exports.AudioAnalyser = exports.Audio = exports.ArrowHelper = exports.ArrayCamera = exports.ArcCurve = exports.AnimationUtils = exports.AnimationObjectGroup = exports.AnimationMixer = exports.AnimationLoader = exports.AnimationClip = exports.AmbientLightProbe = exports.AmbientLight = exports.AlwaysStencilFunc = exports.AlwaysDepth = exports.AlphaFormat = exports.AdditiveBlending = exports.AdditiveAnimationBlendMode = exports.AddOperation = exports.AddEquation = exports.ACESFilmicToneMapping = void 0;
exports.CanvasRenderer = CanvasRenderer;
exports.DodecahedronGeometry = exports.DodecahedronBufferGeometry = exports.DiscreteInterpolant = exports.DirectionalLightHelper = exports.DirectionalLight = exports.DepthTexture = exports.DepthStencilFormat = exports.DepthFormat = exports.DefaultLoadingManager = exports.DecrementWrapStencilOp = exports.DecrementStencilOp = exports.DataUtils = exports.DataTextureLoader = exports.DataTexture3D = exports.DataTexture2DArray = exports.DataTexture = exports.DataArrayTexture = exports.Data3DTexture = exports.Cylindrical = exports.CylinderGeometry = exports.CylinderBufferGeometry = exports.CustomToneMapping = exports.CustomBlending = exports.CurvePath = exports.Curve = exports.CullFaceNone = exports.CullFaceFrontBack = exports.CullFaceFront = exports.CullFaceBack = exports.CubicInterpolant = exports.CubicBezierCurve3 = exports.CubicBezierCurve = exports.CubeUVReflectionMapping = exports.CubeTextureLoader = exports.CubeTexture = exports.CubeRefractionMapping = exports.CubeReflectionMapping = exports.CubeCamera = exports.ConeGeometry = exports.ConeBufferGeometry = exports.CompressedTextureLoader = exports.CompressedTexture = exports.ColorManagement = exports.ColorKeyframeTrack = exports.Color = exports.Clock = exports.ClampToEdgeWrapping = exports.CircleGeometry = exports.CircleBufferGeometry = exports.CineonToneMapping = exports.CatmullRomCurve3 = exports.CapsuleGeometry = exports.CapsuleBufferGeometry = exports.CanvasTexture = void 0;
exports.FogExp2 = exports.Fog = exports.FloatType = exports.Float64BufferAttribute = exports.Float64Attribute = exports.Float32BufferAttribute = exports.Float32Attribute = exports.Float16BufferAttribute = exports.FlatShading = exports.FileLoader = exports.FaceColors = exports.ExtrudeGeometry = exports.ExtrudeBufferGeometry = exports.EventDispatcher = exports.Euler = exports.EquirectangularRefractionMapping = exports.EquirectangularReflectionMapping = exports.EqualStencilFunc = exports.EqualDepth = exports.EllipseCurve = exports.EdgesHelper = exports.EdgesGeometry = exports.DynamicReadUsage = exports.DynamicDrawUsage = exports.DynamicCopyUsage = exports.DynamicBufferAttribute = exports.DstColorFactor = exports.DstAlphaFactor = exports.DoubleSide = void 0;
exports.Font = Font;
exports.FontLoader = FontLoader;
exports.ImageUtils = exports.ImageLoader = exports.ImageBitmapLoader = exports.IcosahedronGeometry = exports.IcosahedronBufferGeometry = exports.HemisphereLightProbe = exports.HemisphereLightHelper = exports.HemisphereLight = exports.HalfFloatType = exports.Group = exports.GridHelper = exports.GreaterStencilFunc = exports.GreaterEqualStencilFunc = exports.GreaterEqualDepth = exports.GreaterDepth = exports.GLSL3 = exports.GLSL1 = exports.GLBufferAttribute = exports.Frustum = exports.FrontSide = exports.FramebufferTexture = void 0;
exports.ImmediateRenderObject = ImmediateRenderObject;
exports.InvertStencilOp = exports.InterpolateSmooth = exports.InterpolateLinear = exports.InterpolateDiscrete = exports.Interpolant = exports.InterleavedBufferAttribute = exports.InterleavedBuffer = exports.IntType = exports.Int8BufferAttribute = exports.Int8Attribute = exports.Int32BufferAttribute = exports.Int32Attribute = exports.Int16BufferAttribute = exports.Int16Attribute = exports.InstancedMesh = exports.InstancedInterleavedBuffer = exports.InstancedBufferGeometry = exports.InstancedBufferAttribute = exports.IncrementWrapStencilOp = exports.IncrementStencilOp = void 0;
exports.JSONLoader = JSONLoader;
exports.Layers = exports.LatheGeometry = exports.LatheBufferGeometry = exports.LOD = exports.KeyframeTrack = exports.KeepStencilOp = void 0;
exports.LensFlare = LensFlare;
exports.LinearInterpolant = exports.LinearFilter = exports.LinearEncoding = exports.LineStrip = exports.LineSegments = exports.LinePieces = exports.LineLoop = exports.LineDashedMaterial = exports.LineCurve3 = exports.LineCurve = exports.LineBasicMaterial = exports.Line3 = exports.Line = exports.LightProbe = exports.Light = exports.LessStencilFunc = exports.LessEqualStencilFunc = exports.LessEqualDepth = exports.LessDepth = void 0;
exports.MeshDistanceMaterial = exports.MeshDepthMaterial = exports.MeshBasicMaterial = exports.Mesh = exports.MaxEquation = exports.Matrix4 = exports.Matrix3 = exports.MathUtils = exports.Math = exports.MaterialLoader = exports.Material = exports.MOUSE = exports.LuminanceFormat = exports.LuminanceAlphaFormat = exports.LoopRepeat = exports.LoopPingPong = exports.LoopOnce = exports.LoadingManager = exports.LoaderUtils = exports.Loader = exports.LinearToneMapping = exports.LinearSRGBColorSpace = exports.LinearMipmapNearestFilter = exports.LinearMipmapLinearFilter = exports.LinearMipMapNearestFilter = exports.LinearMipMapLinearFilter = void 0;
exports.MeshFaceMaterial = MeshFaceMaterial;
exports.MixOperation = exports.MirroredRepeatWrapping = exports.MinEquation = exports.MeshToonMaterial = exports.MeshStandardMaterial = exports.MeshPhysicalMaterial = exports.MeshPhongMaterial = exports.MeshNormalMaterial = exports.MeshMatcapMaterial = exports.MeshLambertMaterial = void 0;
exports.MultiMaterial = MultiMaterial;
exports.RGBADepthPacking = exports.REVISION = exports.QuaternionLinearInterpolant = exports.QuaternionKeyframeTrack = exports.Quaternion = exports.QuadraticBezierCurve3 = exports.QuadraticBezierCurve = exports.PropertyMixer = exports.PropertyBinding = exports.PositionalAudio = exports.PolyhedronGeometry = exports.PolyhedronBufferGeometry = exports.PolarGridHelper = exports.PointsMaterial = exports.Points = exports.PointLightHelper = exports.PointLight = exports.PointCloudMaterial = exports.PointCloud = exports.PlaneHelper = exports.PlaneGeometry = exports.PlaneBufferGeometry = exports.Plane = exports.PerspectiveCamera = exports.Path = exports.ParticleSystemMaterial = exports.ParticleSystem = exports.ParticleBasicMaterial = exports.Particle = exports.ParametricGeometry = exports.PMREMGenerator = exports.PCFSoftShadowMap = exports.PCFShadowMap = exports.OrthographicCamera = exports.OneMinusSrcColorFactor = exports.OneMinusSrcAlphaFactor = exports.OneMinusDstColorFactor = exports.OneMinusDstAlphaFactor = exports.OneFactor = exports.OctahedronGeometry = exports.OctahedronBufferGeometry = exports.ObjectSpaceNormalMap = exports.ObjectLoader = exports.Object3D = exports.NumberKeyframeTrack = exports.NotEqualStencilFunc = exports.NotEqualDepth = exports.NormalBlending = exports.NormalAnimationBlendMode = exports.NoToneMapping = exports.NoColors = exports.NoColorSpace = exports.NoBlending = exports.NeverStencilFunc = exports.NeverDepth = exports.NearestMipmapNearestFilter = exports.NearestMipmapLinearFilter = exports.NearestMipMapNearestFilter = exports.NearestMipMapLinearFilter = exports.NearestFilter = exports.MultiplyOperation = exports.MultiplyBlending = void 0;
exports.TubeBufferGeometry = exports.TrianglesDrawMode = exports.TriangleStripDrawMode = exports.TriangleFanDrawMode = exports.Triangle = exports.TorusKnotGeometry = exports.TorusKnotBufferGeometry = exports.TorusGeometry = exports.TorusBufferGeometry = exports.TextureLoader = exports.Texture = exports.TextGeometry = exports.TetrahedronGeometry = exports.TetrahedronBufferGeometry = exports.TangentSpaceNormalMap = exports.TOUCH = exports.SubtractiveBlending = exports.SubtractEquation = exports.StringKeyframeTrack = exports.StreamReadUsage = exports.StreamDrawUsage = exports.StreamCopyUsage = exports.StereoCamera = exports.StaticReadUsage = exports.StaticDrawUsage = exports.StaticCopyUsage = exports.SrcColorFactor = exports.SrcAlphaSaturateFactor = exports.SrcAlphaFactor = exports.SpriteMaterial = exports.Sprite = exports.SpotLightHelper = exports.SpotLight = exports.SplineCurve = exports.SphericalHarmonics3 = exports.Spherical = exports.SphereGeometry = exports.SphereBufferGeometry = exports.Sphere = exports.Source = exports.SmoothShading = exports.SkinnedMesh = exports.SkeletonHelper = exports.Skeleton = exports.ShortType = exports.ShapeUtils = exports.ShapePath = exports.ShapeGeometry = exports.ShapeBufferGeometry = exports.Shape = exports.ShadowMaterial = exports.ShaderMaterial = exports.ShaderLib = exports.ShaderChunk = exports.SceneUtils = exports.Scene = exports.SRGBColorSpace = exports.RingGeometry = exports.RingBufferGeometry = exports.ReverseSubtractEquation = exports.ReplaceStencilOp = exports.RepeatWrapping = exports.ReinhardToneMapping = exports.RedIntegerFormat = exports.RedFormat = exports.RectAreaLight = exports.Raycaster = exports.Ray = exports.RawShaderMaterial = exports.RGIntegerFormat = exports.RGFormat = exports.RGB_S3TC_DXT1_Format = exports.RGB_PVRTC_4BPPV1_Format = exports.RGB_PVRTC_2BPPV1_Format = exports.RGB_ETC2_Format = exports.RGB_ETC1_Format = exports.RGBFormat = exports.RGBA_S3TC_DXT5_Format = exports.RGBA_S3TC_DXT3_Format = exports.RGBA_S3TC_DXT1_Format = exports.RGBA_PVRTC_4BPPV1_Format = exports.RGBA_PVRTC_2BPPV1_Format = exports.RGBA_ETC2_EAC_Format = exports.RGBA_BPTC_Format = exports.RGBA_ASTC_8x8_Format = exports.RGBA_ASTC_8x6_Format = exports.RGBA_ASTC_8x5_Format = exports.RGBA_ASTC_6x6_Format = exports.RGBA_ASTC_6x5_Format = exports.RGBA_ASTC_5x5_Format = exports.RGBA_ASTC_5x4_Format = exports.RGBA_ASTC_4x4_Format = exports.RGBA_ASTC_12x12_Format = exports.RGBA_ASTC_12x10_Format = exports.RGBA_ASTC_10x8_Format = exports.RGBA_ASTC_10x6_Format = exports.RGBA_ASTC_10x5_Format = exports.RGBA_ASTC_10x10_Format = exports.RGBAIntegerFormat = exports.RGBAFormat = void 0;
exports.WebGLRenderTargetCube = exports.WebGLRenderTarget = exports.WebGLMultisampleRenderTarget = exports.WebGLMultipleRenderTargets = exports.WebGLCubeRenderTarget = exports.WebGLArrayRenderTarget = exports.WebGL3DRenderTarget = exports.WebGL1Renderer = exports.VideoTexture = exports.VertexColors = exports.Vertex = exports.VectorKeyframeTrack = exports.Vector4 = exports.Vector3 = exports.Vector2 = exports.VSMShadowMap = exports.UnsignedShortType = exports.UnsignedShort5551Type = exports.UnsignedShort4444Type = exports.UnsignedIntType = exports.UnsignedInt248Type = exports.UnsignedByteType = exports.UniformsUtils = exports.UniformsLib = exports.Uniform = exports.Uint8ClampedBufferAttribute = exports.Uint8ClampedAttribute = exports.Uint8BufferAttribute = exports.Uint8Attribute = exports.Uint32BufferAttribute = exports.Uint32Attribute = exports.Uint16BufferAttribute = exports.Uint16Attribute = exports.UVMapping = exports.TubeGeometry = void 0;
exports.WebGLRenderer = WebGLRenderer;
exports.WebGLUtils = WebGLUtils;
exports.sRGBEncoding = exports._SRGBAFormat = exports.ZeroStencilOp = exports.ZeroSlopeEnding = exports.ZeroFactor = exports.ZeroCurvatureEnding = exports.XHRLoader = exports.WrapAroundEnding = exports.WireframeHelper = exports.WireframeGeometry = void 0;

var _FN;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
var REVISION = '139';
exports.REVISION = REVISION;
var MOUSE = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2,
  ROTATE: 0,
  DOLLY: 1,
  PAN: 2
};
exports.MOUSE = MOUSE;
var TOUCH = {
  ROTATE: 0,
  PAN: 1,
  DOLLY_PAN: 2,
  DOLLY_ROTATE: 3
};
exports.TOUCH = TOUCH;
var CullFaceNone = 0;
exports.CullFaceNone = CullFaceNone;
var CullFaceBack = 1;
exports.CullFaceBack = CullFaceBack;
var CullFaceFront = 2;
exports.CullFaceFront = CullFaceFront;
var CullFaceFrontBack = 3;
exports.CullFaceFrontBack = CullFaceFrontBack;
var BasicShadowMap = 0;
exports.BasicShadowMap = BasicShadowMap;
var PCFShadowMap = 1;
exports.PCFShadowMap = PCFShadowMap;
var PCFSoftShadowMap = 2;
exports.PCFSoftShadowMap = PCFSoftShadowMap;
var VSMShadowMap = 3;
exports.VSMShadowMap = VSMShadowMap;
var FrontSide = 0;
exports.FrontSide = FrontSide;
var BackSide = 1;
exports.BackSide = BackSide;
var DoubleSide = 2;
exports.DoubleSide = DoubleSide;
var FlatShading = 1;
exports.FlatShading = FlatShading;
var SmoothShading = 2;
exports.SmoothShading = SmoothShading;
var NoBlending = 0;
exports.NoBlending = NoBlending;
var NormalBlending = 1;
exports.NormalBlending = NormalBlending;
var AdditiveBlending = 2;
exports.AdditiveBlending = AdditiveBlending;
var SubtractiveBlending = 3;
exports.SubtractiveBlending = SubtractiveBlending;
var MultiplyBlending = 4;
exports.MultiplyBlending = MultiplyBlending;
var CustomBlending = 5;
exports.CustomBlending = CustomBlending;
var AddEquation = 100;
exports.AddEquation = AddEquation;
var SubtractEquation = 101;
exports.SubtractEquation = SubtractEquation;
var ReverseSubtractEquation = 102;
exports.ReverseSubtractEquation = ReverseSubtractEquation;
var MinEquation = 103;
exports.MinEquation = MinEquation;
var MaxEquation = 104;
exports.MaxEquation = MaxEquation;
var ZeroFactor = 200;
exports.ZeroFactor = ZeroFactor;
var OneFactor = 201;
exports.OneFactor = OneFactor;
var SrcColorFactor = 202;
exports.SrcColorFactor = SrcColorFactor;
var OneMinusSrcColorFactor = 203;
exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
var SrcAlphaFactor = 204;
exports.SrcAlphaFactor = SrcAlphaFactor;
var OneMinusSrcAlphaFactor = 205;
exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
var DstAlphaFactor = 206;
exports.DstAlphaFactor = DstAlphaFactor;
var OneMinusDstAlphaFactor = 207;
exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
var DstColorFactor = 208;
exports.DstColorFactor = DstColorFactor;
var OneMinusDstColorFactor = 209;
exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
var SrcAlphaSaturateFactor = 210;
exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
var NeverDepth = 0;
exports.NeverDepth = NeverDepth;
var AlwaysDepth = 1;
exports.AlwaysDepth = AlwaysDepth;
var LessDepth = 2;
exports.LessDepth = LessDepth;
var LessEqualDepth = 3;
exports.LessEqualDepth = LessEqualDepth;
var EqualDepth = 4;
exports.EqualDepth = EqualDepth;
var GreaterEqualDepth = 5;
exports.GreaterEqualDepth = GreaterEqualDepth;
var GreaterDepth = 6;
exports.GreaterDepth = GreaterDepth;
var NotEqualDepth = 7;
exports.NotEqualDepth = NotEqualDepth;
var MultiplyOperation = 0;
exports.MultiplyOperation = MultiplyOperation;
var MixOperation = 1;
exports.MixOperation = MixOperation;
var AddOperation = 2;
exports.AddOperation = AddOperation;
var NoToneMapping = 0;
exports.NoToneMapping = NoToneMapping;
var LinearToneMapping = 1;
exports.LinearToneMapping = LinearToneMapping;
var ReinhardToneMapping = 2;
exports.ReinhardToneMapping = ReinhardToneMapping;
var CineonToneMapping = 3;
exports.CineonToneMapping = CineonToneMapping;
var ACESFilmicToneMapping = 4;
exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
var CustomToneMapping = 5;
exports.CustomToneMapping = CustomToneMapping;
var UVMapping = 300;
exports.UVMapping = UVMapping;
var CubeReflectionMapping = 301;
exports.CubeReflectionMapping = CubeReflectionMapping;
var CubeRefractionMapping = 302;
exports.CubeRefractionMapping = CubeRefractionMapping;
var EquirectangularReflectionMapping = 303;
exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
var EquirectangularRefractionMapping = 304;
exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
var CubeUVReflectionMapping = 306;
exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
var RepeatWrapping = 1000;
exports.RepeatWrapping = RepeatWrapping;
var ClampToEdgeWrapping = 1001;
exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
var MirroredRepeatWrapping = 1002;
exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
var NearestFilter = 1003;
exports.NearestFilter = NearestFilter;
var NearestMipmapNearestFilter = 1004;
exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
var NearestMipMapNearestFilter = 1004;
exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
var NearestMipmapLinearFilter = 1005;
exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
var NearestMipMapLinearFilter = 1005;
exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
var LinearFilter = 1006;
exports.LinearFilter = LinearFilter;
var LinearMipmapNearestFilter = 1007;
exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
var LinearMipMapNearestFilter = 1007;
exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
var LinearMipmapLinearFilter = 1008;
exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
var LinearMipMapLinearFilter = 1008;
exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
var UnsignedByteType = 1009;
exports.UnsignedByteType = UnsignedByteType;
var ByteType = 1010;
exports.ByteType = ByteType;
var ShortType = 1011;
exports.ShortType = ShortType;
var UnsignedShortType = 1012;
exports.UnsignedShortType = UnsignedShortType;
var IntType = 1013;
exports.IntType = IntType;
var UnsignedIntType = 1014;
exports.UnsignedIntType = UnsignedIntType;
var FloatType = 1015;
exports.FloatType = FloatType;
var HalfFloatType = 1016;
exports.HalfFloatType = HalfFloatType;
var UnsignedShort4444Type = 1017;
exports.UnsignedShort4444Type = UnsignedShort4444Type;
var UnsignedShort5551Type = 1018;
exports.UnsignedShort5551Type = UnsignedShort5551Type;
var UnsignedInt248Type = 1020;
exports.UnsignedInt248Type = UnsignedInt248Type;
var AlphaFormat = 1021;
exports.AlphaFormat = AlphaFormat;
var RGBFormat = 1022;
exports.RGBFormat = RGBFormat;
var RGBAFormat = 1023;
exports.RGBAFormat = RGBAFormat;
var LuminanceFormat = 1024;
exports.LuminanceFormat = LuminanceFormat;
var LuminanceAlphaFormat = 1025;
exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
var DepthFormat = 1026;
exports.DepthFormat = DepthFormat;
var DepthStencilFormat = 1027;
exports.DepthStencilFormat = DepthStencilFormat;
var RedFormat = 1028;
exports.RedFormat = RedFormat;
var RedIntegerFormat = 1029;
exports.RedIntegerFormat = RedIntegerFormat;
var RGFormat = 1030;
exports.RGFormat = RGFormat;
var RGIntegerFormat = 1031;
exports.RGIntegerFormat = RGIntegerFormat;
var RGBAIntegerFormat = 1033;
exports.RGBAIntegerFormat = RGBAIntegerFormat;
var RGB_S3TC_DXT1_Format = 33776;
exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
var RGBA_S3TC_DXT1_Format = 33777;
exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
var RGBA_S3TC_DXT3_Format = 33778;
exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
var RGBA_S3TC_DXT5_Format = 33779;
exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
var RGB_PVRTC_4BPPV1_Format = 35840;
exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
var RGB_PVRTC_2BPPV1_Format = 35841;
exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
var RGBA_PVRTC_4BPPV1_Format = 35842;
exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
var RGBA_PVRTC_2BPPV1_Format = 35843;
exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
var RGB_ETC1_Format = 36196;
exports.RGB_ETC1_Format = RGB_ETC1_Format;
var RGB_ETC2_Format = 37492;
exports.RGB_ETC2_Format = RGB_ETC2_Format;
var RGBA_ETC2_EAC_Format = 37496;
exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;
var RGBA_ASTC_4x4_Format = 37808;
exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
var RGBA_ASTC_5x4_Format = 37809;
exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
var RGBA_ASTC_5x5_Format = 37810;
exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
var RGBA_ASTC_6x5_Format = 37811;
exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
var RGBA_ASTC_6x6_Format = 37812;
exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
var RGBA_ASTC_8x5_Format = 37813;
exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
var RGBA_ASTC_8x6_Format = 37814;
exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
var RGBA_ASTC_8x8_Format = 37815;
exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
var RGBA_ASTC_10x5_Format = 37816;
exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
var RGBA_ASTC_10x6_Format = 37817;
exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
var RGBA_ASTC_10x8_Format = 37818;
exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
var RGBA_ASTC_10x10_Format = 37819;
exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
var RGBA_ASTC_12x10_Format = 37820;
exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
var RGBA_ASTC_12x12_Format = 37821;
exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
var RGBA_BPTC_Format = 36492;
exports.RGBA_BPTC_Format = RGBA_BPTC_Format;
var LoopOnce = 2200;
exports.LoopOnce = LoopOnce;
var LoopRepeat = 2201;
exports.LoopRepeat = LoopRepeat;
var LoopPingPong = 2202;
exports.LoopPingPong = LoopPingPong;
var InterpolateDiscrete = 2300;
exports.InterpolateDiscrete = InterpolateDiscrete;
var InterpolateLinear = 2301;
exports.InterpolateLinear = InterpolateLinear;
var InterpolateSmooth = 2302;
exports.InterpolateSmooth = InterpolateSmooth;
var ZeroCurvatureEnding = 2400;
exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
var ZeroSlopeEnding = 2401;
exports.ZeroSlopeEnding = ZeroSlopeEnding;
var WrapAroundEnding = 2402;
exports.WrapAroundEnding = WrapAroundEnding;
var NormalAnimationBlendMode = 2500;
exports.NormalAnimationBlendMode = NormalAnimationBlendMode;
var AdditiveAnimationBlendMode = 2501;
exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;
var TrianglesDrawMode = 0;
exports.TrianglesDrawMode = TrianglesDrawMode;
var TriangleStripDrawMode = 1;
exports.TriangleStripDrawMode = TriangleStripDrawMode;
var TriangleFanDrawMode = 2;
exports.TriangleFanDrawMode = TriangleFanDrawMode;
var LinearEncoding = 3000;
exports.LinearEncoding = LinearEncoding;
var sRGBEncoding = 3001;
exports.sRGBEncoding = sRGBEncoding;
var BasicDepthPacking = 3200;
exports.BasicDepthPacking = BasicDepthPacking;
var RGBADepthPacking = 3201;
exports.RGBADepthPacking = RGBADepthPacking;
var TangentSpaceNormalMap = 0;
exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
var ObjectSpaceNormalMap = 1; // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.

exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
var NoColorSpace = '';
exports.NoColorSpace = NoColorSpace;
var SRGBColorSpace = 'srgb';
exports.SRGBColorSpace = SRGBColorSpace;
var LinearSRGBColorSpace = 'srgb-linear';
exports.LinearSRGBColorSpace = LinearSRGBColorSpace;
var ZeroStencilOp = 0;
exports.ZeroStencilOp = ZeroStencilOp;
var KeepStencilOp = 7680;
exports.KeepStencilOp = KeepStencilOp;
var ReplaceStencilOp = 7681;
exports.ReplaceStencilOp = ReplaceStencilOp;
var IncrementStencilOp = 7682;
exports.IncrementStencilOp = IncrementStencilOp;
var DecrementStencilOp = 7683;
exports.DecrementStencilOp = DecrementStencilOp;
var IncrementWrapStencilOp = 34055;
exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
var DecrementWrapStencilOp = 34056;
exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
var InvertStencilOp = 5386;
exports.InvertStencilOp = InvertStencilOp;
var NeverStencilFunc = 512;
exports.NeverStencilFunc = NeverStencilFunc;
var LessStencilFunc = 513;
exports.LessStencilFunc = LessStencilFunc;
var EqualStencilFunc = 514;
exports.EqualStencilFunc = EqualStencilFunc;
var LessEqualStencilFunc = 515;
exports.LessEqualStencilFunc = LessEqualStencilFunc;
var GreaterStencilFunc = 516;
exports.GreaterStencilFunc = GreaterStencilFunc;
var NotEqualStencilFunc = 517;
exports.NotEqualStencilFunc = NotEqualStencilFunc;
var GreaterEqualStencilFunc = 518;
exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
var AlwaysStencilFunc = 519;
exports.AlwaysStencilFunc = AlwaysStencilFunc;
var StaticDrawUsage = 35044;
exports.StaticDrawUsage = StaticDrawUsage;
var DynamicDrawUsage = 35048;
exports.DynamicDrawUsage = DynamicDrawUsage;
var StreamDrawUsage = 35040;
exports.StreamDrawUsage = StreamDrawUsage;
var StaticReadUsage = 35045;
exports.StaticReadUsage = StaticReadUsage;
var DynamicReadUsage = 35049;
exports.DynamicReadUsage = DynamicReadUsage;
var StreamReadUsage = 35041;
exports.StreamReadUsage = StreamReadUsage;
var StaticCopyUsage = 35046;
exports.StaticCopyUsage = StaticCopyUsage;
var DynamicCopyUsage = 35050;
exports.DynamicCopyUsage = DynamicCopyUsage;
var StreamCopyUsage = 35042;
exports.StreamCopyUsage = StreamCopyUsage;
var GLSL1 = '100';
exports.GLSL1 = GLSL1;
var GLSL3 = '300 es';
exports.GLSL3 = GLSL3;
var _SRGBAFormat = 1035; // fallback for WebGL 1

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

exports._SRGBAFormat = _SRGBAFormat;

var EventDispatcher = /*#__PURE__*/function () {
  function EventDispatcher() {
    _classCallCheck(this, EventDispatcher);
  }

  _createClass(EventDispatcher, [{
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      if (this._listeners === undefined) this._listeners = {};
      var listeners = this._listeners;

      if (listeners[type] === undefined) {
        listeners[type] = [];
      }

      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
  }, {
    key: "hasEventListener",
    value: function hasEventListener(type, listener) {
      if (this._listeners === undefined) return false;
      var listeners = this._listeners;
      return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, listener) {
      if (this._listeners === undefined) return;
      var listeners = this._listeners;
      var listenerArray = listeners[type];

      if (listenerArray !== undefined) {
        var index = listenerArray.indexOf(listener);

        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      if (this._listeners === undefined) return;
      var listeners = this._listeners;
      var listenerArray = listeners[event.type];

      if (listenerArray !== undefined) {
        event.target = this; // Make a copy, in case listeners are removed while iterating.

        var array = listenerArray.slice(0);

        for (var i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }

        event.target = null;
      }
    }
  }]);

  return EventDispatcher;
}();

exports.EventDispatcher = EventDispatcher;
var _lut = [];

for (var i = 0; i < 256; i++) {
  _lut[i] = (i < 16 ? '0' : '') + i.toString(16);
}

var _seed = 1234567;
var DEG2RAD = Math.PI / 180;
var RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

function generateUUID() {
  var d0 = Math.random() * 0xffffffff | 0;
  var d1 = Math.random() * 0xffffffff | 0;
  var d2 = Math.random() * 0xffffffff | 0;
  var d3 = Math.random() * 0xffffffff | 0;
  var uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toLowerCase() here flattens concatenated strings to save heap memory space.

  return uuid.toLowerCase();
}

function clamp(value, min, max) {
  return Math.max(min, Math.min(max, value));
} // compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation


function euclideanModulo(n, m) {
  return (n % m + m) % m;
} // Linear mapping from range <a1, a2> to range <b1, b2>


function mapLinear(x, a1, a2, b1, b2) {
  return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/


function inverseLerp(x, y, value) {
  if (x !== y) {
    return (value - x) / (y - x);
  } else {
    return 0;
  }
} // https://en.wikipedia.org/wiki/Linear_interpolation


function lerp(x, y, t) {
  return (1 - t) * x + t * y;
} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/


function damp(x, y, lambda, dt) {
  return lerp(x, y, 1 - Math.exp(-lambda * dt));
} // https://www.desmos.com/calculator/vcsjnyz7x4


function pingpong(x, length = 1) {
  return length - Math.abs(euclideanModulo(x, length * 2) - length);
} // http://en.wikipedia.org/wiki/Smoothstep


function smoothstep(x, min, max) {
  if (x <= min) return 0;
  if (x >= max) return 1;
  x = (x - min) / (max - min);
  return x * x * (3 - 2 * x);
}

function smootherstep(x, min, max) {
  if (x <= min) return 0;
  if (x >= max) return 1;
  x = (x - min) / (max - min);
  return x * x * x * (x * (x * 6 - 15) + 10);
} // Random integer from <low, high> interval


function randInt(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1));
} // Random float from <low, high> interval


function randFloat(low, high) {
  return low + Math.random() * (high - low);
} // Random float from <-range/2, range/2> interval


function randFloatSpread(range) {
  return range * (0.5 - Math.random());
} // Deterministic pseudo-random float in the interval [ 0, 1 ]


function seededRandom(s) {
  if (s !== undefined) _seed = s; // Mulberry32 generator

  var t = _seed += 0x6D2B79F5;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}

function degToRad(degrees) {
  return degrees * DEG2RAD;
}

function radToDeg(radians) {
  return radians * RAD2DEG;
}

function isPowerOfTwo(value) {
  return (value & value - 1) === 0 && value !== 0;
}

function ceilPowerOfTwo(value) {
  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}

function floorPowerOfTwo(value) {
  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}

function setQuaternionFromProperEuler(q, a, b, c, order) {
  // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
  // rotations are applied to the axes in the order specified by 'order'
  // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
  // angles are in radians
  var cos = Math.cos;
  var sin = Math.sin;
  var c2 = cos(b / 2);
  var s2 = sin(b / 2);
  var c13 = cos((a + c) / 2);
  var s13 = sin((a + c) / 2);
  var c1_3 = cos((a - c) / 2);
  var s1_3 = sin((a - c) / 2);
  var c3_1 = cos((c - a) / 2);
  var s3_1 = sin((c - a) / 2);

  switch (order) {
    case 'XYX':
      q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
      break;

    case 'YZY':
      q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
      break;

    case 'ZXZ':
      q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
      break;

    case 'XZX':
      q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
      break;

    case 'YXY':
      q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
      break;

    case 'ZYZ':
      q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
      break;

    default:
      console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
  }
}

function denormalize$1(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;

    case Uint16Array:
      return value / 65535.0;

    case Uint8Array:
      return value / 255.0;

    case Int16Array:
      return Math.max(value / 32767.0, -1.0);

    case Int8Array:
      return Math.max(value / 127.0, -1.0);

    default:
      throw new Error('Invalid component type.');
  }
}

function normalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;

    case Uint16Array:
      return Math.round(value * 65535.0);

    case Uint8Array:
      return Math.round(value * 255.0);

    case Int16Array:
      return Math.round(value * 32767.0);

    case Int8Array:
      return Math.round(value * 127.0);

    default:
      throw new Error('Invalid component type.');
  }
}

var MathUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  DEG2RAD: DEG2RAD,
  RAD2DEG: RAD2DEG,
  generateUUID: generateUUID,
  clamp: clamp,
  euclideanModulo: euclideanModulo,
  mapLinear: mapLinear,
  inverseLerp: inverseLerp,
  lerp: lerp,
  damp: damp,
  pingpong: pingpong,
  smoothstep: smoothstep,
  smootherstep: smootherstep,
  randInt: randInt,
  randFloat: randFloat,
  randFloatSpread: randFloatSpread,
  seededRandom: seededRandom,
  degToRad: degToRad,
  radToDeg: radToDeg,
  isPowerOfTwo: isPowerOfTwo,
  ceilPowerOfTwo: ceilPowerOfTwo,
  floorPowerOfTwo: floorPowerOfTwo,
  setQuaternionFromProperEuler: setQuaternionFromProperEuler,
  normalize: normalize,
  denormalize: denormalize$1
});
exports.MathUtils = exports.Math = MathUtils;

var Vector2 = /*#__PURE__*/function (_Symbol$iterator) {
  function Vector2(x = 0, y = 0) {
    _classCallCheck(this, Vector2);

    this.x = x;
    this.y = y;
  }

  _createClass(Vector2, [{
    key: "width",
    get: function get() {
      return this.x;
    },
    set: function set(value) {
      this.x = value;
    }
  }, {
    key: "height",
    get: function get() {
      return this.y;
    },
    set: function set(value) {
      this.y = value;
    }
  }, {
    key: "set",
    value: function set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
  }, {
    key: "setScalar",
    value: function setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
  }, {
    key: "setX",
    value: function setX(x) {
      this.x = x;
      return this;
    }
  }, {
    key: "setY",
    value: function setY(y) {
      this.y = y;
      return this;
    }
  }, {
    key: "setComponent",
    value: function setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;

        case 1:
          this.y = value;
          break;

        default:
          throw new Error('index is out of range: ' + index);
      }

      return this;
    }
  }, {
    key: "getComponent",
    value: function getComponent(index) {
      switch (index) {
        case 0:
          return this.x;

        case 1:
          return this.y;

        default:
          throw new Error('index is out of range: ' + index);
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this.x, this.y);
    }
  }, {
    key: "copy",
    value: function copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
  }, {
    key: "add",
    value: function add(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
        return this.addVectors(v, w);
      }

      this.x += v.x;
      this.y += v.y;
      return this;
    }
  }, {
    key: "addScalar",
    value: function addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
  }, {
    key: "addVectors",
    value: function addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
  }, {
    key: "addScaledVector",
    value: function addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
        return this.subVectors(v, w);
      }

      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
  }, {
    key: "subScalar",
    value: function subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
  }, {
    key: "subVectors",
    value: function subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
  }, {
    key: "divide",
    value: function divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
  }, {
    key: "divideScalar",
    value: function divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
  }, {
    key: "applyMatrix3",
    value: function applyMatrix3(m) {
      var x = this.x,
          y = this.y;
      var e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
  }, {
    key: "min",
    value: function min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
  }, {
    key: "max",
    value: function max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
  }, {
    key: "clamp",
    value: function clamp(min, max) {
      // assumes min < max, componentwise
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      return this;
    }
  }, {
    key: "clampScalar",
    value: function clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      return this;
    }
  }, {
    key: "clampLength",
    value: function clampLength(min, max) {
      var length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
  }, {
    key: "floor",
    value: function floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
  }, {
    key: "ceil",
    value: function ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
  }, {
    key: "round",
    value: function round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
  }, {
    key: "roundToZero",
    value: function roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      return this;
    }
  }, {
    key: "negate",
    value: function negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
  }, {
    key: "dot",
    value: function dot(v) {
      return this.x * v.x + this.y * v.y;
    }
  }, {
    key: "cross",
    value: function cross(v) {
      return this.x * v.y - this.y * v.x;
    }
  }, {
    key: "lengthSq",
    value: function lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
  }, {
    key: "length",
    value: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
  }, {
    key: "manhattanLength",
    value: function manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      return this.divideScalar(this.length() || 1);
    }
  }, {
    key: "angle",
    value: function angle() {
      // computes the angle in radians with respect to the positive x-axis
      var angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
  }, {
    key: "distanceToSquared",
    value: function distanceToSquared(v) {
      var dx = this.x - v.x,
          dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
  }, {
    key: "manhattanDistanceTo",
    value: function manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
  }, {
    key: "setLength",
    value: function setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
  }, {
    key: "lerp",
    value: function lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
  }, {
    key: "lerpVectors",
    value: function lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
  }, {
    key: "equals",
    value: function equals(v) {
      return v.x === this.x && v.y === this.y;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
  }, {
    key: "fromBufferAttribute",
    value: function fromBufferAttribute(attribute, index, offset) {
      if (offset !== undefined) {
        console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
      }

      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
  }, {
    key: "rotateAround",
    value: function rotateAround(center, angle) {
      var c = Math.cos(angle),
          s = Math.sin(angle);
      var x = this.x - center.x;
      var y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
  }, {
    key: "random",
    value: function random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
  }, {
    key: _Symbol$iterator,
    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
      return _regeneratorRuntime().wrap(function value$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.x;

            case 2:
              _context2.next = 4;
              return this.y;

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, value, this);
    })
  }]);

  return Vector2;
}(Symbol.iterator);

exports.Vector2 = Vector2;
Vector2.prototype.isVector2 = true;

var Matrix3 = /*#__PURE__*/function () {
  function Matrix3() {
    _classCallCheck(this, Matrix3);

    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];

    if (arguments.length > 0) {
      console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
    }
  }

  _createClass(Matrix3, [{
    key: "set",
    value: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      var te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
  }, {
    key: "identity",
    value: function identity() {
      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(m) {
      var te = this.elements;
      var me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
  }, {
    key: "extractBasis",
    value: function extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
  }, {
    key: "setFromMatrix4",
    value: function setFromMatrix4(m) {
      var me = m.elements;
      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(m) {
      return this.multiplyMatrices(this, m);
    }
  }, {
    key: "premultiply",
    value: function premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
  }, {
    key: "multiplyMatrices",
    value: function multiplyMatrices(a, b) {
      var ae = a.elements;
      var be = b.elements;
      var te = this.elements;
      var a11 = ae[0],
          a12 = ae[3],
          a13 = ae[6];
      var a21 = ae[1],
          a22 = ae[4],
          a23 = ae[7];
      var a31 = ae[2],
          a32 = ae[5],
          a33 = ae[8];
      var b11 = be[0],
          b12 = be[3],
          b13 = be[6];
      var b21 = be[1],
          b22 = be[4],
          b23 = be[7];
      var b31 = be[2],
          b32 = be[5],
          b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(s) {
      var te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
  }, {
    key: "determinant",
    value: function determinant() {
      var te = this.elements;
      var a = te[0],
          b = te[1],
          c = te[2],
          d = te[3],
          e = te[4],
          f = te[5],
          g = te[6],
          h = te[7],
          i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
  }, {
    key: "invert",
    value: function invert() {
      var te = this.elements,
          n11 = te[0],
          n21 = te[1],
          n31 = te[2],
          n12 = te[3],
          n22 = te[4],
          n32 = te[5],
          n13 = te[6],
          n23 = te[7],
          n33 = te[8],
          t11 = n33 * n22 - n32 * n23,
          t12 = n32 * n13 - n33 * n12,
          t13 = n23 * n12 - n22 * n13,
          det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      var detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
  }, {
    key: "transpose",
    value: function transpose() {
      var tmp;
      var m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
  }, {
    key: "getNormalMatrix",
    value: function getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
  }, {
    key: "transposeIntoArray",
    value: function transposeIntoArray(r) {
      var m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
  }, {
    key: "setUvTransform",
    value: function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      var c = Math.cos(rotation);
      var s = Math.sin(rotation);
      this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
      return this;
    }
  }, {
    key: "scale",
    value: function scale(sx, sy) {
      var te = this.elements;
      te[0] *= sx;
      te[3] *= sx;
      te[6] *= sx;
      te[1] *= sy;
      te[4] *= sy;
      te[7] *= sy;
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(theta) {
      var c = Math.cos(theta);
      var s = Math.sin(theta);
      var te = this.elements;
      var a11 = te[0],
          a12 = te[3],
          a13 = te[6];
      var a21 = te[1],
          a22 = te[4],
          a23 = te[7];
      te[0] = c * a11 + s * a21;
      te[3] = c * a12 + s * a22;
      te[6] = c * a13 + s * a23;
      te[1] = -s * a11 + c * a21;
      te[4] = -s * a12 + c * a22;
      te[7] = -s * a13 + c * a23;
      return this;
    }
  }, {
    key: "translate",
    value: function translate(tx, ty) {
      var te = this.elements;
      te[0] += tx * te[2];
      te[3] += tx * te[5];
      te[6] += tx * te[8];
      te[1] += ty * te[2];
      te[4] += ty * te[5];
      te[7] += ty * te[8];
      return this;
    }
  }, {
    key: "equals",
    value: function equals(matrix) {
      var te = this.elements;
      var me = matrix.elements;

      for (var _i = 0; _i < 9; _i++) {
        if (te[_i] !== me[_i]) return false;
      }

      return true;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      for (var _i2 = 0; _i2 < 9; _i2++) {
        this.elements[_i2] = array[_i2 + offset];
      }

      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      var te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().fromArray(this.elements);
    }
  }]);

  return Matrix3;
}();

exports.Matrix3 = Matrix3;
Matrix3.prototype.isMatrix3 = true;

function arrayNeedsUint32(array) {
  // assumes larger values usually on last
  for (var _i3 = array.length - 1; _i3 >= 0; --_i3) {
    if (array[_i3] > 65535) return true;
  }

  return false;
}

var TYPED_ARRAYS = {
  Int8Array: Int8Array,
  Uint8Array: Uint8Array,
  Uint8ClampedArray: Uint8ClampedArray,
  Int16Array: Int16Array,
  Uint16Array: Uint16Array,
  Int32Array: Int32Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array
};

function getTypedArray(type, buffer) {
  return new TYPED_ARRAYS[type](buffer);
}

function createElementNS(name) {
  return document.createElementNS('http://www.w3.org/1999/xhtml', name);
}

function SRGBToLinear(c) {
  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}

function LinearToSRGB(c) {
  return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
} // JavaScript RGB-to-RGB transforms, defined as
// FN[InputColorSpace][OutputColorSpace] callback functions.


var FN = (_FN = {}, _defineProperty(_FN, SRGBColorSpace, _defineProperty({}, LinearSRGBColorSpace, SRGBToLinear)), _defineProperty(_FN, LinearSRGBColorSpace, _defineProperty({}, SRGBColorSpace, LinearToSRGB)), _FN);
var ColorManagement = {
  legacyMode: true,

  get workingColorSpace() {
    return LinearSRGBColorSpace;
  },

  set workingColorSpace(colorSpace) {
    console.warn('THREE.ColorManagement: .workingColorSpace is readonly.');
  },

  convert: function convert(color, sourceColorSpace, targetColorSpace) {
    if (this.legacyMode || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
      return color;
    }

    if (FN[sourceColorSpace] && FN[sourceColorSpace][targetColorSpace] !== undefined) {
      var fn = FN[sourceColorSpace][targetColorSpace];
      color.r = fn(color.r);
      color.g = fn(color.g);
      color.b = fn(color.b);
      return color;
    }

    throw new Error('Unsupported color space conversion.');
  },
  fromWorkingColorSpace: function fromWorkingColorSpace(color, targetColorSpace) {
    return this.convert(color, this.workingColorSpace, targetColorSpace);
  },
  toWorkingColorSpace: function toWorkingColorSpace(color, sourceColorSpace) {
    return this.convert(color, sourceColorSpace, this.workingColorSpace);
  }
};
exports.ColorManagement = ColorManagement;
var _colorKeywords = {
  'aliceblue': 0xF0F8FF,
  'antiquewhite': 0xFAEBD7,
  'aqua': 0x00FFFF,
  'aquamarine': 0x7FFFD4,
  'azure': 0xF0FFFF,
  'beige': 0xF5F5DC,
  'bisque': 0xFFE4C4,
  'black': 0x000000,
  'blanchedalmond': 0xFFEBCD,
  'blue': 0x0000FF,
  'blueviolet': 0x8A2BE2,
  'brown': 0xA52A2A,
  'burlywood': 0xDEB887,
  'cadetblue': 0x5F9EA0,
  'chartreuse': 0x7FFF00,
  'chocolate': 0xD2691E,
  'coral': 0xFF7F50,
  'cornflowerblue': 0x6495ED,
  'cornsilk': 0xFFF8DC,
  'crimson': 0xDC143C,
  'cyan': 0x00FFFF,
  'darkblue': 0x00008B,
  'darkcyan': 0x008B8B,
  'darkgoldenrod': 0xB8860B,
  'darkgray': 0xA9A9A9,
  'darkgreen': 0x006400,
  'darkgrey': 0xA9A9A9,
  'darkkhaki': 0xBDB76B,
  'darkmagenta': 0x8B008B,
  'darkolivegreen': 0x556B2F,
  'darkorange': 0xFF8C00,
  'darkorchid': 0x9932CC,
  'darkred': 0x8B0000,
  'darksalmon': 0xE9967A,
  'darkseagreen': 0x8FBC8F,
  'darkslateblue': 0x483D8B,
  'darkslategray': 0x2F4F4F,
  'darkslategrey': 0x2F4F4F,
  'darkturquoise': 0x00CED1,
  'darkviolet': 0x9400D3,
  'deeppink': 0xFF1493,
  'deepskyblue': 0x00BFFF,
  'dimgray': 0x696969,
  'dimgrey': 0x696969,
  'dodgerblue': 0x1E90FF,
  'firebrick': 0xB22222,
  'floralwhite': 0xFFFAF0,
  'forestgreen': 0x228B22,
  'fuchsia': 0xFF00FF,
  'gainsboro': 0xDCDCDC,
  'ghostwhite': 0xF8F8FF,
  'gold': 0xFFD700,
  'goldenrod': 0xDAA520,
  'gray': 0x808080,
  'green': 0x008000,
  'greenyellow': 0xADFF2F,
  'grey': 0x808080,
  'honeydew': 0xF0FFF0,
  'hotpink': 0xFF69B4,
  'indianred': 0xCD5C5C,
  'indigo': 0x4B0082,
  'ivory': 0xFFFFF0,
  'khaki': 0xF0E68C,
  'lavender': 0xE6E6FA,
  'lavenderblush': 0xFFF0F5,
  'lawngreen': 0x7CFC00,
  'lemonchiffon': 0xFFFACD,
  'lightblue': 0xADD8E6,
  'lightcoral': 0xF08080,
  'lightcyan': 0xE0FFFF,
  'lightgoldenrodyellow': 0xFAFAD2,
  'lightgray': 0xD3D3D3,
  'lightgreen': 0x90EE90,
  'lightgrey': 0xD3D3D3,
  'lightpink': 0xFFB6C1,
  'lightsalmon': 0xFFA07A,
  'lightseagreen': 0x20B2AA,
  'lightskyblue': 0x87CEFA,
  'lightslategray': 0x778899,
  'lightslategrey': 0x778899,
  'lightsteelblue': 0xB0C4DE,
  'lightyellow': 0xFFFFE0,
  'lime': 0x00FF00,
  'limegreen': 0x32CD32,
  'linen': 0xFAF0E6,
  'magenta': 0xFF00FF,
  'maroon': 0x800000,
  'mediumaquamarine': 0x66CDAA,
  'mediumblue': 0x0000CD,
  'mediumorchid': 0xBA55D3,
  'mediumpurple': 0x9370DB,
  'mediumseagreen': 0x3CB371,
  'mediumslateblue': 0x7B68EE,
  'mediumspringgreen': 0x00FA9A,
  'mediumturquoise': 0x48D1CC,
  'mediumvioletred': 0xC71585,
  'midnightblue': 0x191970,
  'mintcream': 0xF5FFFA,
  'mistyrose': 0xFFE4E1,
  'moccasin': 0xFFE4B5,
  'navajowhite': 0xFFDEAD,
  'navy': 0x000080,
  'oldlace': 0xFDF5E6,
  'olive': 0x808000,
  'olivedrab': 0x6B8E23,
  'orange': 0xFFA500,
  'orangered': 0xFF4500,
  'orchid': 0xDA70D6,
  'palegoldenrod': 0xEEE8AA,
  'palegreen': 0x98FB98,
  'paleturquoise': 0xAFEEEE,
  'palevioletred': 0xDB7093,
  'papayawhip': 0xFFEFD5,
  'peachpuff': 0xFFDAB9,
  'peru': 0xCD853F,
  'pink': 0xFFC0CB,
  'plum': 0xDDA0DD,
  'powderblue': 0xB0E0E6,
  'purple': 0x800080,
  'rebeccapurple': 0x663399,
  'red': 0xFF0000,
  'rosybrown': 0xBC8F8F,
  'royalblue': 0x4169E1,
  'saddlebrown': 0x8B4513,
  'salmon': 0xFA8072,
  'sandybrown': 0xF4A460,
  'seagreen': 0x2E8B57,
  'seashell': 0xFFF5EE,
  'sienna': 0xA0522D,
  'silver': 0xC0C0C0,
  'skyblue': 0x87CEEB,
  'slateblue': 0x6A5ACD,
  'slategray': 0x708090,
  'slategrey': 0x708090,
  'snow': 0xFFFAFA,
  'springgreen': 0x00FF7F,
  'steelblue': 0x4682B4,
  'tan': 0xD2B48C,
  'teal': 0x008080,
  'thistle': 0xD8BFD8,
  'tomato': 0xFF6347,
  'turquoise': 0x40E0D0,
  'violet': 0xEE82EE,
  'wheat': 0xF5DEB3,
  'white': 0xFFFFFF,
  'whitesmoke': 0xF5F5F5,
  'yellow': 0xFFFF00,
  'yellowgreen': 0x9ACD32
};
var _rgb = {
  r: 0,
  g: 0,
  b: 0
};
var _hslA = {
  h: 0,
  s: 0,
  l: 0
};
var _hslB = {
  h: 0,
  s: 0,
  l: 0
};

function hue2rgb(p, q, t) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1 / 6) return p + (q - p) * 6 * t;
  if (t < 1 / 2) return q;
  if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
  return p;
}

function toComponents(source, target) {
  target.r = source.r;
  target.g = source.g;
  target.b = source.b;
  return target;
}

var Color = /*#__PURE__*/function () {
  function Color(r, g, b) {
    _classCallCheck(this, Color);

    if (g === undefined && b === undefined) {
      // r is THREE.Color, hex or string
      return this.set(r);
    }

    return this.setRGB(r, g, b);
  }

  _createClass(Color, [{
    key: "set",
    value: function set(value) {
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === 'number') {
        this.setHex(value);
      } else if (typeof value === 'string') {
        this.setStyle(value);
      }

      return this;
    }
  }, {
    key: "setScalar",
    value: function setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
  }, {
    key: "setHex",
    value: function setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
  }, {
    key: "setRGB",
    value: function setRGB(r, g, b, colorSpace = LinearSRGBColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
  }, {
    key: "setHSL",
    value: function setHSL(h, s, l, colorSpace = LinearSRGBColorSpace) {
      // h,s,l ranges are in 0.0 - 1.0
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);

      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        var q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }

      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
  }, {
    key: "setStyle",
    value: function setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === undefined) return;

        if (parseFloat(string) < 1) {
          console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
        }
      }

      var m;

      if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
        // rgb / hsl
        var color;
        var name = m[1];
        var components = m[2];

        switch (name) {
          case 'rgb':
          case 'rgba':
            if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              // rgb(255,0,0) rgba(255,0,0,0.5)
              this.r = Math.min(255, parseInt(color[1], 10)) / 255;
              this.g = Math.min(255, parseInt(color[2], 10)) / 255;
              this.b = Math.min(255, parseInt(color[3], 10)) / 255;
              ColorManagement.toWorkingColorSpace(this, colorSpace);
              handleAlpha(color[4]);
              return this;
            }

            if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
              this.r = Math.min(100, parseInt(color[1], 10)) / 100;
              this.g = Math.min(100, parseInt(color[2], 10)) / 100;
              this.b = Math.min(100, parseInt(color[3], 10)) / 100;
              ColorManagement.toWorkingColorSpace(this, colorSpace);
              handleAlpha(color[4]);
              return this;
            }

            break;

          case 'hsl':
          case 'hsla':
            if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
              var h = parseFloat(color[1]) / 360;
              var s = parseInt(color[2], 10) / 100;
              var l = parseInt(color[3], 10) / 100;
              handleAlpha(color[4]);
              return this.setHSL(h, s, l, colorSpace);
            }

            break;
        }
      } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
        // hex color
        var hex = m[1];
        var size = hex.length;

        if (size === 3) {
          // #ff0
          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
          ColorManagement.toWorkingColorSpace(this, colorSpace);
          return this;
        } else if (size === 6) {
          // #ff0000
          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
          ColorManagement.toWorkingColorSpace(this, colorSpace);
          return this;
        }
      }

      if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }

      return this;
    }
  }, {
    key: "setColorName",
    value: function setColorName(style, colorSpace = SRGBColorSpace) {
      // color keywords
      var hex = _colorKeywords[style.toLowerCase()];

      if (hex !== undefined) {
        // red
        this.setHex(hex, colorSpace);
      } else {
        // unknown color
        console.warn('THREE.Color: Unknown color ' + style);
      }

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
  }, {
    key: "copy",
    value: function copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
  }, {
    key: "copySRGBToLinear",
    value: function copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
  }, {
    key: "copyLinearToSRGB",
    value: function copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
  }, {
    key: "convertSRGBToLinear",
    value: function convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
  }, {
    key: "convertLinearToSRGB",
    value: function convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
  }, {
    key: "getHex",
    value: function getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);
      return clamp(_rgb.r * 255, 0, 255) << 16 ^ clamp(_rgb.g * 255, 0, 255) << 8 ^ clamp(_rgb.b * 255, 0, 255) << 0;
    }
  }, {
    key: "getHexString",
    value: function getHexString(colorSpace = SRGBColorSpace) {
      return ('000000' + this.getHex(colorSpace).toString(16)).slice(-6);
    }
  }, {
    key: "getHSL",
    value: function getHSL(target, colorSpace = LinearSRGBColorSpace) {
      // h,s,l ranges are in 0.0 - 1.0
      ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);
      var r = _rgb.r,
          g = _rgb.g,
          b = _rgb.b;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var hue, saturation;
      var lightness = (min + max) / 2.0;

      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        var delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;

          case g:
            hue = (b - r) / delta + 2;
            break;

          case b:
            hue = (r - g) / delta + 4;
            break;
        }

        hue /= 6;
      }

      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
  }, {
    key: "getRGB",
    value: function getRGB(target, colorSpace = LinearSRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);
      target.r = _rgb.r;
      target.g = _rgb.g;
      target.b = _rgb.b;
      return target;
    }
  }, {
    key: "getStyle",
    value: function getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);

      if (colorSpace !== SRGBColorSpace) {
        // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
        return "color(".concat(colorSpace, " ").concat(_rgb.r, " ").concat(_rgb.g, " ").concat(_rgb.b, ")");
      }

      return "rgb(".concat(_rgb.r * 255 | 0, ",").concat(_rgb.g * 255 | 0, ",").concat(_rgb.b * 255 | 0, ")");
    }
  }, {
    key: "offsetHSL",
    value: function offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      _hslA.h += h;
      _hslA.s += s;
      _hslA.l += l;
      this.setHSL(_hslA.h, _hslA.s, _hslA.l);
      return this;
    }
  }, {
    key: "add",
    value: function add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
  }, {
    key: "addColors",
    value: function addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
  }, {
    key: "addScalar",
    value: function addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
  }, {
    key: "lerp",
    value: function lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
  }, {
    key: "lerpColors",
    value: function lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
  }, {
    key: "lerpHSL",
    value: function lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      var h = lerp(_hslA.h, _hslB.h, alpha);
      var s = lerp(_hslA.s, _hslB.s, alpha);
      var l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
  }, {
    key: "equals",
    value: function equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
  }, {
    key: "fromBufferAttribute",
    value: function fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);

      if (attribute.normalized === true) {
        // assuming Uint8Array
        this.r /= 255;
        this.g /= 255;
        this.b /= 255;
      }

      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.getHex();
    }
  }]);

  return Color;
}();

exports.Color = Color;
Color.NAMES = _colorKeywords;
Color.prototype.isColor = true;
Color.prototype.r = 1;
Color.prototype.g = 1;
Color.prototype.b = 1;

var _canvas;

var ImageUtils = /*#__PURE__*/function () {
  function ImageUtils() {
    _classCallCheck(this, ImageUtils);
  }

  _createClass(ImageUtils, null, [{
    key: "getDataURL",
    value: function getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }

      if (typeof HTMLCanvasElement == 'undefined') {
        return image.src;
      }

      var canvas;

      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === undefined) _canvas = createElementNS('canvas');
        _canvas.width = image.width;
        _canvas.height = image.height;

        var context = _canvas.getContext('2d');

        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }

        canvas = _canvas;
      }

      if (canvas.width > 2048 || canvas.height > 2048) {
        console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);
        return canvas.toDataURL('image/jpeg', 0.6);
      } else {
        return canvas.toDataURL('image/png');
      }
    }
  }, {
    key: "sRGBToLinear",
    value: function sRGBToLinear(image) {
      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
        var canvas = createElementNS('canvas');
        canvas.width = image.width;
        canvas.height = image.height;
        var context = canvas.getContext('2d');
        context.drawImage(image, 0, 0, image.width, image.height);
        var imageData = context.getImageData(0, 0, image.width, image.height);
        var data = imageData.data;

        for (var _i4 = 0; _i4 < data.length; _i4++) {
          data[_i4] = SRGBToLinear(data[_i4] / 255) * 255;
        }

        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        var _data = image.data.slice(0);

        for (var _i5 = 0; _i5 < _data.length; _i5++) {
          if (_data instanceof Uint8Array || _data instanceof Uint8ClampedArray) {
            _data[_i5] = Math.floor(SRGBToLinear(_data[_i5] / 255) * 255);
          } else {
            // assuming float
            _data[_i5] = SRGBToLinear(_data[_i5]);
          }
        }

        return {
          data: _data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');
        return image;
      }
    }
  }]);

  return ImageUtils;
}();

exports.ImageUtils = ImageUtils;

var Source = /*#__PURE__*/function () {
  function Source(data = null) {
    _classCallCheck(this, Source);

    this.uuid = generateUUID();
    this.data = data;
    this.version = 0;
  }

  _createClass(Source, [{
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) this.version++;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var isRootObject = meta === undefined || typeof meta === 'string';

      if (!isRootObject && meta.images[this.uuid] !== undefined) {
        return meta.images[this.uuid];
      }

      var output = {
        uuid: this.uuid,
        url: ''
      };
      var data = this.data;

      if (data !== null) {
        var url;

        if (Array.isArray(data)) {
          // cube texture
          url = [];

          for (var _i6 = 0, l = data.length; _i6 < l; _i6++) {
            if (data[_i6].isDataTexture) {
              url.push(serializeImage(data[_i6].image));
            } else {
              url.push(serializeImage(data[_i6]));
            }
          }
        } else {
          // texture
          url = serializeImage(data);
        }

        output.url = url;
      }

      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }

      return output;
    }
  }]);

  return Source;
}();

exports.Source = Source;

function serializeImage(image) {
  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
    // default images
    return ImageUtils.getDataURL(image);
  } else {
    if (image.data) {
      // images of DataTexture
      return {
        data: Array.prototype.slice.call(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn('THREE.Texture: Unable to serialize Texture.');
      return {};
    }
  }
}

Source.prototype.isSource = true;
var textureId = 0;

var Texture = /*#__PURE__*/function (_EventDispatcher) {
  _inherits(Texture, _EventDispatcher);

  var _super = _createSuper(Texture);

  function Texture(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
    var _this2;

    _classCallCheck(this, Texture);

    _this2 = _super.call(this);
    Object.defineProperty(_assertThisInitialized(_this2), 'id', {
      value: textureId++
    });
    _this2.uuid = generateUUID();
    _this2.name = '';
    _this2.source = new Source(image);
    _this2.mipmaps = [];
    _this2.mapping = mapping;
    _this2.wrapS = wrapS;
    _this2.wrapT = wrapT;
    _this2.magFilter = magFilter;
    _this2.minFilter = minFilter;
    _this2.anisotropy = anisotropy;
    _this2.format = format;
    _this2.internalFormat = null;
    _this2.type = type;
    _this2.offset = new Vector2(0, 0);
    _this2.repeat = new Vector2(1, 1);
    _this2.center = new Vector2(0, 0);
    _this2.rotation = 0;
    _this2.matrixAutoUpdate = true;
    _this2.matrix = new Matrix3();
    _this2.generateMipmaps = true;
    _this2.premultiplyAlpha = false;
    _this2.flipY = true;
    _this2.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
    // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
    //
    // Also changing the encoding after already used by a Material will not automatically make the Material
    // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.

    _this2.encoding = encoding;
    _this2.userData = {};
    _this2.version = 0;
    _this2.onUpdate = null;
    _this2.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not

    _this2.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

    return _this2;
  }

  _createClass(Texture, [{
    key: "image",
    get: function get() {
      return this.source.data;
    },
    set: function set(value) {
      this.source.data = value;
    }
  }, {
    key: "updateMatrix",
    value: function updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.encoding = source.encoding;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var isRootObject = meta === undefined || typeof meta === 'string';

      if (!isRootObject && meta.textures[this.uuid] !== undefined) {
        return meta.textures[this.uuid];
      }

      var output = {
        metadata: {
          version: 4.5,
          type: 'Texture',
          generator: 'Texture.toJSON'
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        type: this.type,
        encoding: this.encoding,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;

      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }

      return output;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.dispatchEvent({
        type: 'dispose'
      });
    }
  }, {
    key: "transformUv",
    value: function transformUv(uv) {
      if (this.mapping !== UVMapping) return uv;
      uv.applyMatrix3(this.matrix);

      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;

          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;

          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }

            break;
        }
      }

      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;

          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;

          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }

            break;
        }
      }

      if (this.flipY) {
        uv.y = 1 - uv.y;
      }

      return uv;
    }
  }, {
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
  }]);

  return Texture;
}(EventDispatcher);

exports.Texture = Texture;
Texture.DEFAULT_IMAGE = null;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.prototype.isTexture = true;

var Vector4 = /*#__PURE__*/function (_Symbol$iterator2) {
  function Vector4(x = 0, y = 0, z = 0, w = 1) {
    _classCallCheck(this, Vector4);

    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }

  _createClass(Vector4, [{
    key: "width",
    get: function get() {
      return this.z;
    },
    set: function set(value) {
      this.z = value;
    }
  }, {
    key: "height",
    get: function get() {
      return this.w;
    },
    set: function set(value) {
      this.w = value;
    }
  }, {
    key: "set",
    value: function set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
  }, {
    key: "setScalar",
    value: function setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
  }, {
    key: "setX",
    value: function setX(x) {
      this.x = x;
      return this;
    }
  }, {
    key: "setY",
    value: function setY(y) {
      this.y = y;
      return this;
    }
  }, {
    key: "setZ",
    value: function setZ(z) {
      this.z = z;
      return this;
    }
  }, {
    key: "setW",
    value: function setW(w) {
      this.w = w;
      return this;
    }
  }, {
    key: "setComponent",
    value: function setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;

        case 1:
          this.y = value;
          break;

        case 2:
          this.z = value;
          break;

        case 3:
          this.w = value;
          break;

        default:
          throw new Error('index is out of range: ' + index);
      }

      return this;
    }
  }, {
    key: "getComponent",
    value: function getComponent(index) {
      switch (index) {
        case 0:
          return this.x;

        case 1:
          return this.y;

        case 2:
          return this.z;

        case 3:
          return this.w;

        default:
          throw new Error('index is out of range: ' + index);
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
  }, {
    key: "copy",
    value: function copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== undefined ? v.w : 1;
      return this;
    }
  }, {
    key: "add",
    value: function add(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
        return this.addVectors(v, w);
      }

      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
  }, {
    key: "addScalar",
    value: function addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
  }, {
    key: "addVectors",
    value: function addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
  }, {
    key: "addScaledVector",
    value: function addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
        return this.subVectors(v, w);
      }

      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
  }, {
    key: "subScalar",
    value: function subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
  }, {
    key: "subVectors",
    value: function subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(m) {
      var x = this.x,
          y = this.y,
          z = this.z,
          w = this.w;
      var e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
  }, {
    key: "divideScalar",
    value: function divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
  }, {
    key: "setAxisAngleFromQuaternion",
    value: function setAxisAngleFromQuaternion(q) {
      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
      // q is assumed to be normalized
      this.w = 2 * Math.acos(q.w);
      var s = Math.sqrt(1 - q.w * q.w);

      if (s < 0.0001) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }

      return this;
    }
  }, {
    key: "setAxisAngleFromRotationMatrix",
    value: function setAxisAngleFromRotationMatrix(m) {
      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
      var angle, x, y, z; // variables for result

      var epsilon = 0.01,
          // margin to allow for rounding errors
      epsilon2 = 0.1,
          // margin to distinguish between 0 and 180 degrees
      te = m.elements,
          m11 = te[0],
          m12 = te[4],
          m13 = te[8],
          m21 = te[1],
          m22 = te[5],
          m23 = te[9],
          m31 = te[2],
          m32 = te[6],
          m33 = te[10];

      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        // singularity found
        // first check for identity matrix which must have +1 for all terms
        // in leading diagonal and zero in other terms
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          // this singularity is identity matrix so angle = 0
          this.set(1, 0, 0, 0);
          return this; // zero angle, arbitrary axis
        } // otherwise this singularity is angle = 180


        angle = Math.PI;
        var xx = (m11 + 1) / 2;
        var yy = (m22 + 1) / 2;
        var zz = (m33 + 1) / 2;
        var xy = (m12 + m21) / 4;
        var xz = (m13 + m31) / 4;
        var yz = (m23 + m32) / 4;

        if (xx > yy && xx > zz) {
          // m11 is the largest diagonal term
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z = xz / x;
          }
        } else if (yy > zz) {
          // m22 is the largest diagonal term
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z = yz / y;
          }
        } else {
          // m33 is the largest diagonal term so base result on this
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x = xz / z;
            y = yz / z;
          }
        }

        this.set(x, y, z, angle);
        return this; // return 180 deg rotation
      } // as we have reached here there are no singularities so we can handle normally


      var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize

      if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be
      // caught by singularity test above, but I've left it in just in case

      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
  }, {
    key: "min",
    value: function min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
  }, {
    key: "max",
    value: function max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
  }, {
    key: "clamp",
    value: function clamp(min, max) {
      // assumes min < max, componentwise
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      this.w = Math.max(min.w, Math.min(max.w, this.w));
      return this;
    }
  }, {
    key: "clampScalar",
    value: function clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      this.w = Math.max(minVal, Math.min(maxVal, this.w));
      return this;
    }
  }, {
    key: "clampLength",
    value: function clampLength(min, max) {
      var length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
  }, {
    key: "floor",
    value: function floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
  }, {
    key: "ceil",
    value: function ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
  }, {
    key: "round",
    value: function round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
  }, {
    key: "roundToZero",
    value: function roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
      return this;
    }
  }, {
    key: "negate",
    value: function negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
  }, {
    key: "dot",
    value: function dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
  }, {
    key: "lengthSq",
    value: function lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
  }, {
    key: "length",
    value: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
  }, {
    key: "manhattanLength",
    value: function manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      return this.divideScalar(this.length() || 1);
    }
  }, {
    key: "setLength",
    value: function setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
  }, {
    key: "lerp",
    value: function lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
  }, {
    key: "lerpVectors",
    value: function lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
  }, {
    key: "equals",
    value: function equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
  }, {
    key: "fromBufferAttribute",
    value: function fromBufferAttribute(attribute, index, offset) {
      if (offset !== undefined) {
        console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');
      }

      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
  }, {
    key: "random",
    value: function random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
  }, {
    key: _Symbol$iterator2,
    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
      return _regeneratorRuntime().wrap(function value$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.x;

            case 2:
              _context3.next = 4;
              return this.y;

            case 4:
              _context3.next = 6;
              return this.z;

            case 6:
              _context3.next = 8;
              return this.w;

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, value, this);
    })
  }]);

  return Vector4;
}(Symbol.iterator);

exports.Vector4 = Vector4;
Vector4.prototype.isVector4 = true;
/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/

var WebGLRenderTarget = /*#__PURE__*/function (_EventDispatcher2) {
  _inherits(WebGLRenderTarget, _EventDispatcher2);

  var _super2 = _createSuper(WebGLRenderTarget);

  function WebGLRenderTarget(width, height, options = {}) {
    var _this3;

    _classCallCheck(this, WebGLRenderTarget);

    _this3 = _super2.call(this);
    _this3.width = width;
    _this3.height = height;
    _this3.depth = 1;
    _this3.scissor = new Vector4(0, 0, width, height);
    _this3.scissorTest = false;
    _this3.viewport = new Vector4(0, 0, width, height);
    var image = {
      width: width,
      height: height,
      depth: 1
    };
    _this3.texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
    _this3.texture.isRenderTargetTexture = true;
    _this3.texture.flipY = false;
    _this3.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
    _this3.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
    _this3.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
    _this3.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
    _this3.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
    _this3.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
    _this3.samples = options.samples !== undefined ? options.samples : 0;
    return _this3;
  }

  _createClass(WebGLRenderTarget, [{
    key: "setSize",
    value: function setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.texture.image.width = width;
        this.texture.image.height = height;
        this.texture.image.depth = depth;
        this.dispose();
      }

      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.viewport.copy(source.viewport);
      this.texture = source.texture.clone();
      this.texture.isRenderTargetTexture = true; // ensure image object is not shared, see #20328

      this.texture.image = Object.assign({}, source.texture.image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.dispatchEvent({
        type: 'dispose'
      });
    }
  }]);

  return WebGLRenderTarget;
}(EventDispatcher);

exports.WebGLRenderTarget = WebGLRenderTarget;
WebGLRenderTarget.prototype.isWebGLRenderTarget = true;

var DataArrayTexture = /*#__PURE__*/function (_Texture) {
  _inherits(DataArrayTexture, _Texture);

  var _super3 = _createSuper(DataArrayTexture);

  function DataArrayTexture(data = null, width = 1, height = 1, depth = 1) {
    var _this4;

    _classCallCheck(this, DataArrayTexture);

    _this4 = _super3.call(this, null);
    _this4.image = {
      data: data,
      width: width,
      height: height,
      depth: depth
    };
    _this4.magFilter = NearestFilter;
    _this4.minFilter = NearestFilter;
    _this4.wrapR = ClampToEdgeWrapping;
    _this4.generateMipmaps = false;
    _this4.flipY = false;
    _this4.unpackAlignment = 1;
    return _this4;
  }

  return _createClass(DataArrayTexture);
}(Texture);

exports.DataArrayTexture = DataArrayTexture;
DataArrayTexture.prototype.isDataArrayTexture = true;

var WebGLArrayRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {
  _inherits(WebGLArrayRenderTarget, _WebGLRenderTarget);

  var _super4 = _createSuper(WebGLArrayRenderTarget);

  function WebGLArrayRenderTarget(width, height, depth) {
    var _this5;

    _classCallCheck(this, WebGLArrayRenderTarget);

    _this5 = _super4.call(this, width, height);
    _this5.depth = depth;
    _this5.texture = new DataArrayTexture(null, width, height, depth);
    _this5.texture.isRenderTargetTexture = true;
    return _this5;
  }

  return _createClass(WebGLArrayRenderTarget);
}(WebGLRenderTarget);

exports.WebGLArrayRenderTarget = WebGLArrayRenderTarget;
WebGLArrayRenderTarget.prototype.isWebGLArrayRenderTarget = true;

var Data3DTexture = /*#__PURE__*/function (_Texture2) {
  _inherits(Data3DTexture, _Texture2);

  var _super5 = _createSuper(Data3DTexture);

  function Data3DTexture(data = null, width = 1, height = 1, depth = 1) {
    var _this6;

    _classCallCheck(this, Data3DTexture);

    // We're going to add .setXXX() methods for setting properties later.
    // Users can still set in DataTexture3D directly.
    //
    //	const texture = new THREE.DataTexture3D( data, width, height, depth );
    // 	texture.anisotropy = 16;
    //
    // See #14839
    _this6 = _super5.call(this, null);
    _this6.image = {
      data: data,
      width: width,
      height: height,
      depth: depth
    };
    _this6.magFilter = NearestFilter;
    _this6.minFilter = NearestFilter;
    _this6.wrapR = ClampToEdgeWrapping;
    _this6.generateMipmaps = false;
    _this6.flipY = false;
    _this6.unpackAlignment = 1;
    return _this6;
  }

  return _createClass(Data3DTexture);
}(Texture);

exports.Data3DTexture = Data3DTexture;
Data3DTexture.prototype.isData3DTexture = true;

var WebGL3DRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget2) {
  _inherits(WebGL3DRenderTarget, _WebGLRenderTarget2);

  var _super6 = _createSuper(WebGL3DRenderTarget);

  function WebGL3DRenderTarget(width, height, depth) {
    var _this7;

    _classCallCheck(this, WebGL3DRenderTarget);

    _this7 = _super6.call(this, width, height);
    _this7.depth = depth;
    _this7.texture = new Data3DTexture(null, width, height, depth);
    _this7.texture.isRenderTargetTexture = true;
    return _this7;
  }

  return _createClass(WebGL3DRenderTarget);
}(WebGLRenderTarget);

exports.WebGL3DRenderTarget = WebGL3DRenderTarget;
WebGL3DRenderTarget.prototype.isWebGL3DRenderTarget = true;

var WebGLMultipleRenderTargets = /*#__PURE__*/function (_WebGLRenderTarget3) {
  _inherits(WebGLMultipleRenderTargets, _WebGLRenderTarget3);

  var _super7 = _createSuper(WebGLMultipleRenderTargets);

  function WebGLMultipleRenderTargets(width, height, count, options = {}) {
    var _this8;

    _classCallCheck(this, WebGLMultipleRenderTargets);

    _this8 = _super7.call(this, width, height, options);
    var texture = _this8.texture;
    _this8.texture = [];

    for (var _i7 = 0; _i7 < count; _i7++) {
      _this8.texture[_i7] = texture.clone();
      _this8.texture[_i7].isRenderTargetTexture = true;
    }

    return _this8;
  }

  _createClass(WebGLMultipleRenderTargets, [{
    key: "setSize",
    value: function setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;

        for (var _i8 = 0, il = this.texture.length; _i8 < il; _i8++) {
          this.texture[_i8].image.width = width;
          this.texture[_i8].image.height = height;
          this.texture[_i8].image.depth = depth;
        }

        this.dispose();
      }

      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.dispose();
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.viewport.set(0, 0, this.width, this.height);
      this.scissor.set(0, 0, this.width, this.height);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.depthTexture = source.depthTexture;
      this.texture.length = 0;

      for (var _i9 = 0, il = source.texture.length; _i9 < il; _i9++) {
        this.texture[_i9] = source.texture[_i9].clone();
      }

      return this;
    }
  }]);

  return WebGLMultipleRenderTargets;
}(WebGLRenderTarget);

exports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;
WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;

var Quaternion = /*#__PURE__*/function () {
  function Quaternion(x = 0, y = 0, z = 0, w = 1) {
    _classCallCheck(this, Quaternion);

    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
  }

  _createClass(Quaternion, [{
    key: "x",
    get: function get() {
      return this._x;
    },
    set: function set(value) {
      this._x = value;

      this._onChangeCallback();
    }
  }, {
    key: "y",
    get: function get() {
      return this._y;
    },
    set: function set(value) {
      this._y = value;

      this._onChangeCallback();
    }
  }, {
    key: "z",
    get: function get() {
      return this._z;
    },
    set: function set(value) {
      this._z = value;

      this._onChangeCallback();
    }
  }, {
    key: "w",
    get: function get() {
      return this._w;
    },
    set: function set(value) {
      this._w = value;

      this._onChangeCallback();
    }
  }, {
    key: "set",
    value: function set(x, y, z, w) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
  }, {
    key: "copy",
    value: function copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "setFromEuler",
    value: function setFromEuler(euler, update) {
      if (!(euler && euler.isEuler)) {
        throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
      }

      var x = euler._x,
          y = euler._y,
          z = euler._z,
          order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/
      // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
      //	content/SpinCalc.m

      var cos = Math.cos;
      var sin = Math.sin;
      var c1 = cos(x / 2);
      var c2 = cos(y / 2);
      var c3 = cos(z / 2);
      var s1 = sin(x / 2);
      var s2 = sin(y / 2);
      var s3 = sin(z / 2);

      switch (order) {
        case 'XYZ':
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;

        case 'YXZ':
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;

        case 'ZXY':
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;

        case 'ZYX':
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;

        case 'YZX':
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;

        case 'XZY':
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;

        default:
          console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
      }

      if (update !== false) this._onChangeCallback();
      return this;
    }
  }, {
    key: "setFromAxisAngle",
    value: function setFromAxisAngle(axis, angle) {
      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
      // assumes axis is normalized
      var halfAngle = angle / 2,
          s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "setFromRotationMatrix",
    value: function setFromRotationMatrix(m) {
      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
      var te = m.elements,
          m11 = te[0],
          m12 = te[4],
          m13 = te[8],
          m21 = te[1],
          m22 = te[5],
          m23 = te[9],
          m31 = te[2],
          m32 = te[6],
          m33 = te[10],
          trace = m11 + m22 + m33;

      if (trace > 0) {
        var s = 0.5 / Math.sqrt(trace + 1.0);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        var _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);

        this._w = (m32 - m23) / _s;
        this._x = 0.25 * _s;
        this._y = (m12 + m21) / _s;
        this._z = (m13 + m31) / _s;
      } else if (m22 > m33) {
        var _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);

        this._w = (m13 - m31) / _s2;
        this._x = (m12 + m21) / _s2;
        this._y = 0.25 * _s2;
        this._z = (m23 + m32) / _s2;
      } else {
        var _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);

        this._w = (m21 - m12) / _s3;
        this._x = (m13 + m31) / _s3;
        this._y = (m23 + m32) / _s3;
        this._z = 0.25 * _s3;
      }

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "setFromUnitVectors",
    value: function setFromUnitVectors(vFrom, vTo) {
      // assumes direction vectors vFrom and vTo are normalized
      var r = vFrom.dot(vTo) + 1;

      if (r < Number.EPSILON) {
        // vFrom and vTo point in opposite directions
        r = 0;

        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }

      return this.normalize();
    }
  }, {
    key: "angleTo",
    value: function angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
  }, {
    key: "rotateTowards",
    value: function rotateTowards(q, step) {
      var angle = this.angleTo(q);
      if (angle === 0) return this;
      var t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
  }, {
    key: "identity",
    value: function identity() {
      return this.set(0, 0, 0, 1);
    }
  }, {
    key: "invert",
    value: function invert() {
      // quaternion is assumed to have unit length
      return this.conjugate();
    }
  }, {
    key: "conjugate",
    value: function conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "dot",
    value: function dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
  }, {
    key: "lengthSq",
    value: function lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
  }, {
    key: "length",
    value: function length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      var l = this.length();

      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(q, p) {
      if (p !== undefined) {
        console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
        return this.multiplyQuaternions(q, p);
      }

      return this.multiplyQuaternions(this, q);
    }
  }, {
    key: "premultiply",
    value: function premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
  }, {
    key: "multiplyQuaternions",
    value: function multiplyQuaternions(a, b) {
      // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
      var qax = a._x,
          qay = a._y,
          qaz = a._z,
          qaw = a._w;
      var qbx = b._x,
          qby = b._y,
          qbz = b._z,
          qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "slerp",
    value: function slerp(qb, t) {
      if (t === 0) return this;
      if (t === 1) return this.copy(qb);
      var x = this._x,
          y = this._y,
          z = this._z,
          w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

      var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }

      if (cosHalfTheta >= 1.0) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z;
        return this;
      }

      var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

      if (sqrSinHalfTheta <= Number.EPSILON) {
        var s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z + t * this._z;
        this.normalize();

        this._onChangeCallback();

        return this;
      }

      var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
          ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "slerpQuaternions",
    value: function slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
  }, {
    key: "random",
    value: function random() {
      // Derived from http://planning.cs.uiuc.edu/node198.html
      // Note, this source uses w, x, y, z ordering,
      // so we swap the order below.
      var u1 = Math.random();
      var sqrt1u1 = Math.sqrt(1 - u1);
      var sqrtu1 = Math.sqrt(u1);
      var u2 = 2 * Math.PI * Math.random();
      var u3 = 2 * Math.PI * Math.random();
      return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
    }
  }, {
    key: "equals",
    value: function equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
  }, {
    key: "fromBufferAttribute",
    value: function fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      return this;
    }
  }, {
    key: "_onChange",
    value: function _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
  }, {
    key: "_onChangeCallback",
    value: function _onChangeCallback() {}
  }], [{
    key: "slerp",
    value: function slerp(qa, qb, qm, t) {
      console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');
      return qm.slerpQuaternions(qa, qb, t);
    }
  }, {
    key: "slerpFlat",
    value: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      // fuzz-free, array-based Quaternion SLERP operation
      var x0 = src0[srcOffset0 + 0],
          y0 = src0[srcOffset0 + 1],
          z0 = src0[srcOffset0 + 2],
          w0 = src0[srcOffset0 + 3];
      var x1 = src1[srcOffset1 + 0],
          y1 = src1[srcOffset1 + 1],
          z1 = src1[srcOffset1 + 2],
          w1 = src1[srcOffset1 + 3];

      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }

      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }

      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        var s = 1 - t;
        var cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
            dir = cos >= 0 ? 1 : -1,
            sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:

        if (sqrSin > Number.EPSILON) {
          var sin = Math.sqrt(sqrSin),
              len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }

        var tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:

        if (s === 1 - t) {
          var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }

      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
  }, {
    key: "multiplyQuaternionsFlat",
    value: function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      var x0 = src0[srcOffset0];
      var y0 = src0[srcOffset0 + 1];
      var z0 = src0[srcOffset0 + 2];
      var w0 = src0[srcOffset0 + 3];
      var x1 = src1[srcOffset1];
      var y1 = src1[srcOffset1 + 1];
      var z1 = src1[srcOffset1 + 2];
      var w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
  }]);

  return Quaternion;
}();

exports.Quaternion = Quaternion;
Quaternion.prototype.isQuaternion = true;

var Vector3 = /*#__PURE__*/function (_Symbol$iterator3) {
  function Vector3(x = 0, y = 0, z = 0) {
    _classCallCheck(this, Vector3);

    this.x = x;
    this.y = y;
    this.z = z;
  }

  _createClass(Vector3, [{
    key: "set",
    value: function set(x, y, z) {
      if (z === undefined) z = this.z; // sprite.scale.set(x,y)

      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
  }, {
    key: "setScalar",
    value: function setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
  }, {
    key: "setX",
    value: function setX(x) {
      this.x = x;
      return this;
    }
  }, {
    key: "setY",
    value: function setY(y) {
      this.y = y;
      return this;
    }
  }, {
    key: "setZ",
    value: function setZ(z) {
      this.z = z;
      return this;
    }
  }, {
    key: "setComponent",
    value: function setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;

        case 1:
          this.y = value;
          break;

        case 2:
          this.z = value;
          break;

        default:
          throw new Error('index is out of range: ' + index);
      }

      return this;
    }
  }, {
    key: "getComponent",
    value: function getComponent(index) {
      switch (index) {
        case 0:
          return this.x;

        case 1:
          return this.y;

        case 2:
          return this.z;

        default:
          throw new Error('index is out of range: ' + index);
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
  }, {
    key: "copy",
    value: function copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
  }, {
    key: "add",
    value: function add(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
        return this.addVectors(v, w);
      }

      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
  }, {
    key: "addScalar",
    value: function addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
  }, {
    key: "addVectors",
    value: function addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
  }, {
    key: "addScaledVector",
    value: function addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
        return this.subVectors(v, w);
      }

      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
  }, {
    key: "subScalar",
    value: function subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
  }, {
    key: "subVectors",
    value: function subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
        return this.multiplyVectors(v, w);
      }

      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
  }, {
    key: "multiplyVectors",
    value: function multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
  }, {
    key: "applyEuler",
    value: function applyEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
      }

      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
  }, {
    key: "applyAxisAngle",
    value: function applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
  }, {
    key: "applyMatrix3",
    value: function applyMatrix3(m) {
      var x = this.x,
          y = this.y,
          z = this.z;
      var e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z;
      this.y = e[1] * x + e[4] * y + e[7] * z;
      this.z = e[2] * x + e[5] * y + e[8] * z;
      return this;
    }
  }, {
    key: "applyNormalMatrix",
    value: function applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(m) {
      var x = this.x,
          y = this.y,
          z = this.z;
      var e = m.elements;
      var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
  }, {
    key: "applyQuaternion",
    value: function applyQuaternion(q) {
      var x = this.x,
          y = this.y,
          z = this.z;
      var qx = q.x,
          qy = q.y,
          qz = q.z,
          qw = q.w; // calculate quat * vector

      var ix = qw * x + qy * z - qz * y;
      var iy = qw * y + qz * x - qx * z;
      var iz = qw * z + qx * y - qy * x;
      var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return this;
    }
  }, {
    key: "project",
    value: function project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
  }, {
    key: "unproject",
    value: function unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
  }, {
    key: "transformDirection",
    value: function transformDirection(m) {
      // input: THREE.Matrix4 affine matrix
      // vector interpreted as a direction
      var x = this.x,
          y = this.y,
          z = this.z;
      var e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z;
      this.y = e[1] * x + e[5] * y + e[9] * z;
      this.z = e[2] * x + e[6] * y + e[10] * z;
      return this.normalize();
    }
  }, {
    key: "divide",
    value: function divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
  }, {
    key: "divideScalar",
    value: function divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
  }, {
    key: "min",
    value: function min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
  }, {
    key: "max",
    value: function max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
  }, {
    key: "clamp",
    value: function clamp(min, max) {
      // assumes min < max, componentwise
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      return this;
    }
  }, {
    key: "clampScalar",
    value: function clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      return this;
    }
  }, {
    key: "clampLength",
    value: function clampLength(min, max) {
      var length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
  }, {
    key: "floor",
    value: function floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
  }, {
    key: "ceil",
    value: function ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
  }, {
    key: "round",
    value: function round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
  }, {
    key: "roundToZero",
    value: function roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      return this;
    }
  }, {
    key: "negate",
    value: function negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
  }, {
    key: "dot",
    value: function dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    } // TODO lengthSquared?

  }, {
    key: "lengthSq",
    value: function lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
  }, {
    key: "length",
    value: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
  }, {
    key: "manhattanLength",
    value: function manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      return this.divideScalar(this.length() || 1);
    }
  }, {
    key: "setLength",
    value: function setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
  }, {
    key: "lerp",
    value: function lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
  }, {
    key: "lerpVectors",
    value: function lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
  }, {
    key: "cross",
    value: function cross(v, w) {
      if (w !== undefined) {
        console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
        return this.crossVectors(v, w);
      }

      return this.crossVectors(this, v);
    }
  }, {
    key: "crossVectors",
    value: function crossVectors(a, b) {
      var ax = a.x,
          ay = a.y,
          az = a.z;
      var bx = b.x,
          by = b.y,
          bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
  }, {
    key: "projectOnVector",
    value: function projectOnVector(v) {
      var denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      var scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
  }, {
    key: "projectOnPlane",
    value: function projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);

      return this.sub(_vector$c);
    }
  }, {
    key: "reflect",
    value: function reflect(normal) {
      // reflect incident vector off plane orthogonal to normal
      // normal is assumed to have unit length
      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
  }, {
    key: "angleTo",
    value: function angleTo(v) {
      var denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      var theta = this.dot(v) / denominator; // clamp, to handle numerical problems

      return Math.acos(clamp(theta, -1, 1));
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
  }, {
    key: "distanceToSquared",
    value: function distanceToSquared(v) {
      var dx = this.x - v.x,
          dy = this.y - v.y,
          dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
  }, {
    key: "manhattanDistanceTo",
    value: function manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
  }, {
    key: "setFromSpherical",
    value: function setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
  }, {
    key: "setFromSphericalCoords",
    value: function setFromSphericalCoords(radius, phi, theta) {
      var sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
  }, {
    key: "setFromCylindrical",
    value: function setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
  }, {
    key: "setFromCylindricalCoords",
    value: function setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
  }, {
    key: "setFromMatrixPosition",
    value: function setFromMatrixPosition(m) {
      var e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
  }, {
    key: "setFromMatrixScale",
    value: function setFromMatrixScale(m) {
      var sx = this.setFromMatrixColumn(m, 0).length();
      var sy = this.setFromMatrixColumn(m, 1).length();
      var sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
  }, {
    key: "setFromMatrixColumn",
    value: function setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
  }, {
    key: "setFromMatrix3Column",
    value: function setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
  }, {
    key: "setFromEuler",
    value: function setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
  }, {
    key: "equals",
    value: function equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
  }, {
    key: "fromBufferAttribute",
    value: function fromBufferAttribute(attribute, index, offset) {
      if (offset !== undefined) {
        console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
      }

      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
  }, {
    key: "random",
    value: function random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
  }, {
    key: "randomDirection",
    value: function randomDirection() {
      // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
      var u = (Math.random() - 0.5) * 2;
      var t = Math.random() * Math.PI * 2;
      var f = Math.sqrt(1 - Math.pow(u, 2));
      this.x = f * Math.cos(t);
      this.y = f * Math.sin(t);
      this.z = u;
      return this;
    }
  }, {
    key: _Symbol$iterator3,
    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {
      return _regeneratorRuntime().wrap(function value$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.x;

            case 2:
              _context4.next = 4;
              return this.y;

            case 4:
              _context4.next = 6;
              return this.z;

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, value, this);
    })
  }]);

  return Vector3;
}(Symbol.iterator);

exports.Vector3 = Vector3;
Vector3.prototype.isVector3 = true;

var _vector$c = /*@__PURE__*/new Vector3();

var _quaternion$4 = /*@__PURE__*/new Quaternion();

var Box3 = /*#__PURE__*/function () {
  function Box3(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
    _classCallCheck(this, Box3);

    this.min = min;
    this.max = max;
  }

  _createClass(Box3, [{
    key: "set",
    value: function set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
  }, {
    key: "setFromArray",
    value: function setFromArray(array) {
      var minX = +Infinity;
      var minY = +Infinity;
      var minZ = +Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var maxZ = -Infinity;

      for (var _i10 = 0, l = array.length; _i10 < l; _i10 += 3) {
        var x = array[_i10];
        var y = array[_i10 + 1];
        var z = array[_i10 + 2];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (z < minZ) minZ = z;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
        if (z > maxZ) maxZ = z;
      }

      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
  }, {
    key: "setFromBufferAttribute",
    value: function setFromBufferAttribute(attribute) {
      var minX = +Infinity;
      var minY = +Infinity;
      var minZ = +Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var maxZ = -Infinity;

      for (var _i11 = 0, l = attribute.count; _i11 < l; _i11++) {
        var x = attribute.getX(_i11);
        var y = attribute.getY(_i11);
        var z = attribute.getZ(_i11);
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (z < minZ) minZ = z;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
        if (z > maxZ) maxZ = z;
      }

      this.min.set(minX, minY, minZ);
      this.max.set(maxX, maxY, maxZ);
      return this;
    }
  }, {
    key: "setFromPoints",
    value: function setFromPoints(points) {
      this.makeEmpty();

      for (var _i12 = 0, il = points.length; _i12 < il; _i12++) {
        this.expandByPoint(points[_i12]);
      }

      return this;
    }
  }, {
    key: "setFromCenterAndSize",
    value: function setFromCenterAndSize(center, size) {
      var halfSize = _vector$b.copy(size).multiplyScalar(0.5);

      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
  }, {
    key: "setFromObject",
    value: function setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
  }, {
    key: "makeEmpty",
    value: function makeEmpty() {
      this.min.x = this.min.y = this.min.z = +Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
  }, {
    key: "getCenter",
    value: function getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
  }, {
    key: "getSize",
    value: function getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
  }, {
    key: "expandByPoint",
    value: function expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
  }, {
    key: "expandByVector",
    value: function expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
  }, {
    key: "expandByScalar",
    value: function expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
  }, {
    key: "expandByObject",
    value: function expandByObject(object, precise = false) {
      // Computes the world-axis-aligned bounding box of an object (including its children),
      // accounting for both the object's, and children's, world transforms
      object.updateWorldMatrix(false, false);
      var geometry = object.geometry;

      if (geometry !== undefined) {
        if (precise && geometry.attributes != undefined && geometry.attributes.position !== undefined) {
          var position = geometry.attributes.position;

          for (var _i13 = 0, l = position.count; _i13 < l; _i13++) {
            _vector$b.fromBufferAttribute(position, _i13).applyMatrix4(object.matrixWorld);

            this.expandByPoint(_vector$b);
          }
        } else {
          if (geometry.boundingBox === null) {
            geometry.computeBoundingBox();
          }

          _box$3.copy(geometry.boundingBox);

          _box$3.applyMatrix4(object.matrixWorld);

          this.union(_box$3);
        }
      }

      var children = object.children;

      for (var _i14 = 0, _l = children.length; _i14 < _l; _i14++) {
        this.expandByObject(children[_i14], precise);
      }

      return this;
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
  }, {
    key: "containsBox",
    value: function containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
  }, {
    key: "getParameter",
    value: function getParameter(point, target) {
      // This can potentially have a divide by zero if the box
      // has a size dimension of 0.
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      // using 6 splitting planes to rule out intersections.
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
  }, {
    key: "intersectsSphere",
    value: function intersectsSphere(sphere) {
      // Find the point on the AABB closest to the sphere center.
      this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.

      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
  }, {
    key: "intersectsPlane",
    value: function intersectsPlane(plane) {
      // We compute the minimum and maximum dot product values. If those values
      // are on the same side (back or front) of the plane, then there is no intersection.
      var min, max;

      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }

      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }

      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }

      return min <= -plane.constant && max >= -plane.constant;
    }
  }, {
    key: "intersectsTriangle",
    value: function intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      } // compute box center and extents


      this.getCenter(_center);

      _extents.subVectors(this.max, _center); // translate triangle to aabb origin


      _v0$2.subVectors(triangle.a, _center);

      _v1$7.subVectors(triangle.b, _center);

      _v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle


      _f0.subVectors(_v1$7, _v0$2);

      _f1.subVectors(_v2$3, _v1$7);

      _f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
      // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
      // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)


      var axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];

      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
        return false;
      } // test 3 face normals from the aabb


      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];

      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {
        return false;
      } // finally testing the face normal of the triangle
      // use already existing triangle edge vectors here


      _triangleNormal.crossVectors(_f0, _f1);

      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);
    }
  }, {
    key: "clampPoint",
    value: function clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
  }, {
    key: "distanceToPoint",
    value: function distanceToPoint(point) {
      var clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);

      return clampedPoint.sub(point).length();
    }
  }, {
    key: "getBoundingSphere",
    value: function getBoundingSphere(target) {
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$b).length() * 0.5;
      return target;
    }
  }, {
    key: "intersect",
    value: function intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.

      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
  }, {
    key: "union",
    value: function union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix) {
      // transform of empty box is an empty box.
      if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below

      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000


      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001


      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010


      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011


      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100


      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101


      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110


      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111


      this.setFromPoints(_points);
      return this;
    }
  }, {
    key: "translate",
    value: function translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
  }, {
    key: "equals",
    value: function equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  }]);

  return Box3;
}();

exports.Box3 = Box3;
Box3.prototype.isBox3 = true;
var _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];

var _vector$b = /*@__PURE__*/new Vector3();

var _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices


var _v0$2 = /*@__PURE__*/new Vector3();

var _v1$7 = /*@__PURE__*/new Vector3();

var _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors


var _f0 = /*@__PURE__*/new Vector3();

var _f1 = /*@__PURE__*/new Vector3();

var _f2 = /*@__PURE__*/new Vector3();

var _center = /*@__PURE__*/new Vector3();

var _extents = /*@__PURE__*/new Vector3();

var _triangleNormal = /*@__PURE__*/new Vector3();

var _testAxis = /*@__PURE__*/new Vector3();

function satForAxes(axes, v0, v1, v2, extents) {
  for (var _i15 = 0, j = axes.length - 3; _i15 <= j; _i15 += 3) {
    _testAxis.fromArray(axes, _i15); // project the aabb onto the separating axis


    var r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the separating axis

    var p0 = v0.dot(_testAxis);
    var p1 = v1.dot(_testAxis);
    var p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r

    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
      // points of the projected triangle are outside the projected half-length of the aabb
      // the axis is separating and we can exit
      return false;
    }
  }

  return true;
}

var _box$2 = /*@__PURE__*/new Box3();

var _v1$6 = /*@__PURE__*/new Vector3();

var _toFarthestPoint = /*@__PURE__*/new Vector3();

var _toPoint = /*@__PURE__*/new Vector3();

var Sphere = /*#__PURE__*/function () {
  function Sphere(center = new Vector3(), radius = -1) {
    _classCallCheck(this, Sphere);

    this.center = center;
    this.radius = radius;
  }

  _createClass(Sphere, [{
    key: "set",
    value: function set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
  }, {
    key: "setFromPoints",
    value: function setFromPoints(points, optionalCenter) {
      var center = this.center;

      if (optionalCenter !== undefined) {
        center.copy(optionalCenter);
      } else {
        _box$2.setFromPoints(points).getCenter(center);
      }

      var maxRadiusSq = 0;

      for (var _i16 = 0, il = points.length; _i16 < il; _i16++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[_i16]));
      }

      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.radius < 0;
    }
  }, {
    key: "makeEmpty",
    value: function makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
  }, {
    key: "distanceToPoint",
    value: function distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
  }, {
    key: "intersectsSphere",
    value: function intersectsSphere(sphere) {
      var radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      return box.intersectsSphere(this);
    }
  }, {
    key: "intersectsPlane",
    value: function intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
  }, {
    key: "clampPoint",
    value: function clampPoint(point, target) {
      var deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);

      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }

      return target;
    }
  }, {
    key: "getBoundingBox",
    value: function getBoundingBox(target) {
      if (this.isEmpty()) {
        // Empty sphere produces empty bounding box
        target.makeEmpty();
        return target;
      }

      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
  }, {
    key: "translate",
    value: function translate(offset) {
      this.center.add(offset);
      return this;
    }
  }, {
    key: "expandByPoint",
    value: function expandByPoint(point) {
      // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
      _toPoint.subVectors(point, this.center);

      var lengthSq = _toPoint.lengthSq();

      if (lengthSq > this.radius * this.radius) {
        var length = Math.sqrt(lengthSq);
        var missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,
        // and the other half to position. This gives a tighter enclosure, instead of if
        // the whole missing distance were just added to radius.

        this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));
        this.radius += missingRadiusHalf;
      }

      return this;
    }
  }, {
    key: "union",
    value: function union(sphere) {
      // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
      // To enclose another sphere into this sphere, we only need to enclose two points:
      // 1) Enclose the farthest point on the other sphere into this sphere.
      // 2) Enclose the opposite point of the farthest point into this sphere.
      if (this.center.equals(sphere.center) === true) {
        _toFarthestPoint.set(0, 0, 1).multiplyScalar(sphere.radius);
      } else {
        _toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);
      }

      this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));
      this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));
      return this;
    }
  }, {
    key: "equals",
    value: function equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Sphere;
}();

exports.Sphere = Sphere;

var _vector$a = /*@__PURE__*/new Vector3();

var _segCenter = /*@__PURE__*/new Vector3();

var _segDir = /*@__PURE__*/new Vector3();

var _diff = /*@__PURE__*/new Vector3();

var _edge1 = /*@__PURE__*/new Vector3();

var _edge2 = /*@__PURE__*/new Vector3();

var _normal$1 = /*@__PURE__*/new Vector3();

var Ray = /*#__PURE__*/function () {
  function Ray(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
    _classCallCheck(this, Ray);

    this.origin = origin;
    this.direction = direction;
  }

  _createClass(Ray, [{
    key: "set",
    value: function set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
  }, {
    key: "at",
    value: function at(t, target) {
      return target.copy(this.direction).multiplyScalar(t).add(this.origin);
    }
  }, {
    key: "lookAt",
    value: function lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
  }, {
    key: "recast",
    value: function recast(t) {
      this.origin.copy(this.at(t, _vector$a));
      return this;
    }
  }, {
    key: "closestPointToPoint",
    value: function closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      var directionDistance = target.dot(this.direction);

      if (directionDistance < 0) {
        return target.copy(this.origin);
      }

      return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    }
  }, {
    key: "distanceToPoint",
    value: function distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
  }, {
    key: "distanceSqToPoint",
    value: function distanceSqToPoint(point) {
      var directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray


      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }

      _vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

      return _vector$a.distanceToSquared(point);
    }
  }, {
    key: "distanceSqToSegment",
    value: function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
      // It returns the min distance between the ray and the segment
      // defined by v0 and v1
      // It can also set two optional targets :
      // - The closest point on the ray
      // - The closest point on the segment
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);

      _segDir.copy(v1).sub(v0).normalize();

      _diff.copy(this.origin).sub(_segCenter);

      var segExtent = v0.distanceTo(v1) * 0.5;
      var a01 = -this.direction.dot(_segDir);

      var b0 = _diff.dot(this.direction);

      var b1 = -_diff.dot(_segDir);

      var c = _diff.lengthSq();

      var det = Math.abs(1 - a01 * a01);
      var s0, s1, sqrDist, extDet;

      if (det > 0) {
        // The ray and segment are not parallel.
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;

        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              // region 0
              // Minimum at interior points of ray and segment.
              var invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              // region 1
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            // region 5
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            // region 4
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            // region 3
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            // region 2
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        // Ray and segment are parallel.
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }

      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
      }

      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
      }

      return sqrDist;
    }
  }, {
    key: "intersectSphere",
    value: function intersectSphere(sphere, target) {
      _vector$a.subVectors(sphere.center, this.origin);

      var tca = _vector$a.dot(this.direction);

      var d2 = _vector$a.dot(_vector$a) - tca * tca;
      var radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2) return null;
      var thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere

      var t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere

      var t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null

      if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
      // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
      // in order to always return an intersect point that is in front of the ray.

      if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0

      return this.at(t0, target);
    }
  }, {
    key: "intersectsSphere",
    value: function intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
  }, {
    key: "distanceToPlane",
    value: function distanceToPlane(plane) {
      var denominator = plane.normal.dot(this.direction);

      if (denominator === 0) {
        // line is coplanar, return origin
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        } // Null is preferable to undefined since undefined means.... it is undefined


        return null;
      }

      var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane

      return t >= 0 ? t : null;
    }
  }, {
    key: "intersectPlane",
    value: function intersectPlane(plane, target) {
      var t = this.distanceToPlane(plane);

      if (t === null) {
        return null;
      }

      return this.at(t, target);
    }
  }, {
    key: "intersectsPlane",
    value: function intersectsPlane(plane) {
      // check if the ray lies on the plane first
      var distToPoint = plane.distanceToPoint(this.origin);

      if (distToPoint === 0) {
        return true;
      }

      var denominator = plane.normal.dot(this.direction);

      if (denominator * distToPoint < 0) {
        return true;
      } // ray origin is behind the plane (and is pointing behind it)


      return false;
    }
  }, {
    key: "intersectBox",
    value: function intersectBox(box, target) {
      var tmin, tmax, tymin, tymax, tzmin, tzmax;
      var invdirx = 1 / this.direction.x,
          invdiry = 1 / this.direction.y,
          invdirz = 1 / this.direction.z;
      var origin = this.origin;

      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }

      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }

      if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN
      // (result of 0 * Infinity). x !== x returns true if x is NaN

      if (tymin > tmin || tmin !== tmin) tmin = tymin;
      if (tymax < tmax || tmax !== tmax) tmax = tymax;

      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }

      if (tmin > tzmax || tzmin > tmax) return null;
      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)

      if (tmax < 0) return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      return this.intersectBox(box, _vector$a) !== null;
    }
  }, {
    key: "intersectTriangle",
    value: function intersectTriangle(a, b, c, backfaceCulling, target) {
      // Compute the offset origin, edges, and normal.
      // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
      _edge1.subVectors(b, a);

      _edge2.subVectors(c, a);

      _normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
      //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
      //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
      //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)


      var DdN = this.direction.dot(_normal$1);
      var sign;

      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }

      _diff.subVectors(this.origin, a);

      var DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection

      if (DdQxE2 < 0) {
        return null;
      }

      var DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection

      if (DdE1xQ < 0) {
        return null;
      } // b1+b2 > 1, no intersection


      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      } // Line intersects triangle, check if ray does.


      var QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection


      if (QdN < 0) {
        return null;
      } // Ray intersects triangle.


      return this.at(QdN / DdN, target);
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
  }, {
    key: "equals",
    value: function equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Ray;
}();

exports.Ray = Ray;

var Matrix4 = /*#__PURE__*/function () {
  function Matrix4() {
    _classCallCheck(this, Matrix4);

    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

    if (arguments.length > 0) {
      console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
    }
  }

  _createClass(Matrix4, [{
    key: "set",
    value: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      var te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
  }, {
    key: "identity",
    value: function identity() {
      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Matrix4().fromArray(this.elements);
    }
  }, {
    key: "copy",
    value: function copy(m) {
      var te = this.elements;
      var me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
  }, {
    key: "copyPosition",
    value: function copyPosition(m) {
      var te = this.elements,
          me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
  }, {
    key: "setFromMatrix3",
    value: function setFromMatrix3(m) {
      var me = m.elements;
      this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "extractBasis",
    value: function extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
  }, {
    key: "makeBasis",
    value: function makeBasis(xAxis, yAxis, zAxis) {
      this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "extractRotation",
    value: function extractRotation(m) {
      // this method does not support reflection matrices
      var te = this.elements;
      var me = m.elements;

      var scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();

      var scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();

      var scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();

      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
  }, {
    key: "makeRotationFromEuler",
    value: function makeRotationFromEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
      }

      var te = this.elements;
      var x = euler.x,
          y = euler.y,
          z = euler.z;
      var a = Math.cos(x),
          b = Math.sin(x);
      var c = Math.cos(y),
          d = Math.sin(y);
      var e = Math.cos(z),
          f = Math.sin(z);

      if (euler.order === 'XYZ') {
        var ae = a * e,
            af = a * f,
            be = b * e,
            bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === 'YXZ') {
        var ce = c * e,
            cf = c * f,
            de = d * e,
            df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === 'ZXY') {
        var _ce = c * e,
            _cf = c * f,
            _de = d * e,
            _df = d * f;

        te[0] = _ce - _df * b;
        te[4] = -a * f;
        te[8] = _de + _cf * b;
        te[1] = _cf + _de * b;
        te[5] = a * e;
        te[9] = _df - _ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === 'ZYX') {
        var _ae = a * e,
            _af = a * f,
            _be = b * e,
            _bf = b * f;

        te[0] = c * e;
        te[4] = _be * d - _af;
        te[8] = _ae * d + _bf;
        te[1] = c * f;
        te[5] = _bf * d + _ae;
        te[9] = _af * d - _be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === 'YZX') {
        var ac = a * c,
            ad = a * d,
            bc = b * c,
            bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === 'XZY') {
        var _ac = a * c,
            _ad = a * d,
            _bc = b * c,
            _bd = b * d;

        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = _ac * f + _bd;
        te[5] = a * e;
        te[9] = _ad * f - _bc;
        te[2] = _bc * f - _ad;
        te[6] = b * e;
        te[10] = _bd * f + _ac;
      } // bottom row


      te[3] = 0;
      te[7] = 0;
      te[11] = 0; // last column

      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
  }, {
    key: "makeRotationFromQuaternion",
    value: function makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
  }, {
    key: "lookAt",
    value: function lookAt(eye, target, up) {
      var te = this.elements;

      _z.subVectors(eye, target);

      if (_z.lengthSq() === 0) {
        // eye and target are in the same position
        _z.z = 1;
      }

      _z.normalize();

      _x.crossVectors(up, _z);

      if (_x.lengthSq() === 0) {
        // up and z are parallel
        if (Math.abs(up.z) === 1) {
          _z.x += 0.0001;
        } else {
          _z.z += 0.0001;
        }

        _z.normalize();

        _x.crossVectors(up, _z);
      }

      _x.normalize();

      _y.crossVectors(_z, _x);

      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply(m, n) {
      if (n !== undefined) {
        console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
        return this.multiplyMatrices(m, n);
      }

      return this.multiplyMatrices(this, m);
    }
  }, {
    key: "premultiply",
    value: function premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
  }, {
    key: "multiplyMatrices",
    value: function multiplyMatrices(a, b) {
      var ae = a.elements;
      var be = b.elements;
      var te = this.elements;
      var a11 = ae[0],
          a12 = ae[4],
          a13 = ae[8],
          a14 = ae[12];
      var a21 = ae[1],
          a22 = ae[5],
          a23 = ae[9],
          a24 = ae[13];
      var a31 = ae[2],
          a32 = ae[6],
          a33 = ae[10],
          a34 = ae[14];
      var a41 = ae[3],
          a42 = ae[7],
          a43 = ae[11],
          a44 = ae[15];
      var b11 = be[0],
          b12 = be[4],
          b13 = be[8],
          b14 = be[12];
      var b21 = be[1],
          b22 = be[5],
          b23 = be[9],
          b24 = be[13];
      var b31 = be[2],
          b32 = be[6],
          b33 = be[10],
          b34 = be[14];
      var b41 = be[3],
          b42 = be[7],
          b43 = be[11],
          b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(s) {
      var te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
  }, {
    key: "determinant",
    value: function determinant() {
      var te = this.elements;
      var n11 = te[0],
          n12 = te[4],
          n13 = te[8],
          n14 = te[12];
      var n21 = te[1],
          n22 = te[5],
          n23 = te[9],
          n24 = te[13];
      var n31 = te[2],
          n32 = te[6],
          n33 = te[10],
          n34 = te[14];
      var n41 = te[3],
          n42 = te[7],
          n43 = te[11],
          n44 = te[15]; //TODO: make this more efficient
      //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
  }, {
    key: "transpose",
    value: function transpose() {
      var te = this.elements;
      var tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
  }, {
    key: "setPosition",
    value: function setPosition(x, y, z) {
      var te = this.elements;

      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z;
      }

      return this;
    }
  }, {
    key: "invert",
    value: function invert() {
      // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
      var te = this.elements,
          n11 = te[0],
          n21 = te[1],
          n31 = te[2],
          n41 = te[3],
          n12 = te[4],
          n22 = te[5],
          n32 = te[6],
          n42 = te[7],
          n13 = te[8],
          n23 = te[9],
          n33 = te[10],
          n43 = te[11],
          n14 = te[12],
          n24 = te[13],
          n34 = te[14],
          n44 = te[15],
          t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
          t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
          t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
          t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      var detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
  }, {
    key: "scale",
    value: function scale(v) {
      var te = this.elements;
      var x = v.x,
          y = v.y,
          z = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
  }, {
    key: "getMaxScaleOnAxis",
    value: function getMaxScaleOnAxis() {
      var te = this.elements;
      var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
  }, {
    key: "makeTranslation",
    value: function makeTranslation(x, y, z) {
      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "makeRotationX",
    value: function makeRotationX(theta) {
      var c = Math.cos(theta),
          s = Math.sin(theta);
      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "makeRotationY",
    value: function makeRotationY(theta) {
      var c = Math.cos(theta),
          s = Math.sin(theta);
      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "makeRotationZ",
    value: function makeRotationZ(theta) {
      var c = Math.cos(theta),
          s = Math.sin(theta);
      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "makeRotationAxis",
    value: function makeRotationAxis(axis, angle) {
      // Based on http://www.gamedev.net/reference/articles/article1199.asp
      var c = Math.cos(angle);
      var s = Math.sin(angle);
      var t = 1 - c;
      var x = axis.x,
          y = axis.y,
          z = axis.z;
      var tx = t * x,
          ty = t * y;
      this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "makeScale",
    value: function makeScale(x, y, z) {
      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "makeShear",
    value: function makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
      return this;
    }
  }, {
    key: "compose",
    value: function compose(position, quaternion, scale) {
      var te = this.elements;
      var x = quaternion._x,
          y = quaternion._y,
          z = quaternion._z,
          w = quaternion._w;
      var x2 = x + x,
          y2 = y + y,
          z2 = z + z;
      var xx = x * x2,
          xy = x * y2,
          xz = x * z2;
      var yy = y * y2,
          yz = y * z2,
          zz = z * z2;
      var wx = w * x2,
          wy = w * y2,
          wz = w * z2;
      var sx = scale.x,
          sy = scale.y,
          sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
  }, {
    key: "decompose",
    value: function decompose(position, quaternion, scale) {
      var te = this.elements;

      var sx = _v1$5.set(te[0], te[1], te[2]).length();

      var sy = _v1$5.set(te[4], te[5], te[6]).length();

      var sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale


      var det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14]; // scale the rotation part

      _m1$2.copy(this);

      var invSX = 1 / sx;
      var invSY = 1 / sy;
      var invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
  }, {
    key: "makePerspective",
    value: function makePerspective(left, right, top, bottom, near, far) {
      if (far === undefined) {
        console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
      }

      var te = this.elements;
      var x = 2 * near / (right - left);
      var y = 2 * near / (top - bottom);
      var a = (right + left) / (right - left);
      var b = (top + bottom) / (top - bottom);
      var c = -(far + near) / (far - near);
      var d = -2 * far * near / (far - near);
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
  }, {
    key: "makeOrthographic",
    value: function makeOrthographic(left, right, top, bottom, near, far) {
      var te = this.elements;
      var w = 1.0 / (right - left);
      var h = 1.0 / (top - bottom);
      var p = 1.0 / (far - near);
      var x = (right + left) * w;
      var y = (top + bottom) * h;
      var z = (far + near) * p;
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = -2 * p;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
  }, {
    key: "equals",
    value: function equals(matrix) {
      var te = this.elements;
      var me = matrix.elements;

      for (var _i17 = 0; _i17 < 16; _i17++) {
        if (te[_i17] !== me[_i17]) return false;
      }

      return true;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      for (var _i18 = 0; _i18 < 16; _i18++) {
        this.elements[_i18] = array[_i18 + offset];
      }

      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      var te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  }]);

  return Matrix4;
}();

exports.Matrix4 = Matrix4;
Matrix4.prototype.isMatrix4 = true;

var _v1$5 = /*@__PURE__*/new Vector3();

var _m1$2 = /*@__PURE__*/new Matrix4();

var _zero = /*@__PURE__*/new Vector3(0, 0, 0);

var _one = /*@__PURE__*/new Vector3(1, 1, 1);

var _x = /*@__PURE__*/new Vector3();

var _y = /*@__PURE__*/new Vector3();

var _z = /*@__PURE__*/new Vector3();

var _matrix$1 = /*@__PURE__*/new Matrix4();

var _quaternion$3 = /*@__PURE__*/new Quaternion();

var Euler = /*#__PURE__*/function () {
  function Euler(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
    _classCallCheck(this, Euler);

    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order;
  }

  _createClass(Euler, [{
    key: "x",
    get: function get() {
      return this._x;
    },
    set: function set(value) {
      this._x = value;

      this._onChangeCallback();
    }
  }, {
    key: "y",
    get: function get() {
      return this._y;
    },
    set: function set(value) {
      this._y = value;

      this._onChangeCallback();
    }
  }, {
    key: "z",
    get: function get() {
      return this._z;
    },
    set: function set(value) {
      this._z = value;

      this._onChangeCallback();
    }
  }, {
    key: "order",
    get: function get() {
      return this._order;
    },
    set: function set(value) {
      this._order = value;

      this._onChangeCallback();
    }
  }, {
    key: "set",
    value: function set(x, y, z, order = this._order) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
  }, {
    key: "copy",
    value: function copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "setFromRotationMatrix",
    value: function setFromRotationMatrix(m, order = this._order, update = true) {
      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
      var te = m.elements;
      var m11 = te[0],
          m12 = te[4],
          m13 = te[8];
      var m21 = te[1],
          m22 = te[5],
          m23 = te[9];
      var m31 = te[2],
          m32 = te[6],
          m33 = te[10];

      switch (order) {
        case 'XYZ':
          this._y = Math.asin(clamp(m13, -1, 1));

          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }

          break;

        case 'YXZ':
          this._x = Math.asin(-clamp(m23, -1, 1));

          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }

          break;

        case 'ZXY':
          this._x = Math.asin(clamp(m32, -1, 1));

          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }

          break;

        case 'ZYX':
          this._y = Math.asin(-clamp(m31, -1, 1));

          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }

          break;

        case 'YZX':
          this._z = Math.asin(clamp(m21, -1, 1));

          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }

          break;

        case 'XZY':
          this._z = Math.asin(-clamp(m12, -1, 1));

          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }

          break;

        default:
          console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
      }

      this._order = order;
      if (update === true) this._onChangeCallback();
      return this;
    }
  }, {
    key: "setFromQuaternion",
    value: function setFromQuaternion(q, order, update) {
      _matrix$1.makeRotationFromQuaternion(q);

      return this.setFromRotationMatrix(_matrix$1, order, update);
    }
  }, {
    key: "setFromVector3",
    value: function setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
  }, {
    key: "reorder",
    value: function reorder(newOrder) {
      // WARNING: this discards revolution information -bhouston
      _quaternion$3.setFromEuler(this);

      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
  }, {
    key: "equals",
    value: function equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
  }, {
    key: "fromArray",
    value: function fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== undefined) this._order = array[3];

      this._onChangeCallback();

      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
  }, {
    key: "_onChange",
    value: function _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
  }, {
    key: "_onChangeCallback",
    value: function _onChangeCallback() {}
  }]);

  return Euler;
}();

exports.Euler = Euler;
Euler.prototype.isEuler = true;
Euler.DefaultOrder = 'XYZ';
Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];

var Layers = /*#__PURE__*/function () {
  function Layers() {
    _classCallCheck(this, Layers);

    this.mask = 1 | 0;
  }

  _createClass(Layers, [{
    key: "set",
    value: function set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
  }, {
    key: "enable",
    value: function enable(channel) {
      this.mask |= 1 << channel | 0;
    }
  }, {
    key: "enableAll",
    value: function enableAll() {
      this.mask = 0xffffffff | 0;
    }
  }, {
    key: "toggle",
    value: function toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
  }, {
    key: "disable",
    value: function disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
  }, {
    key: "disableAll",
    value: function disableAll() {
      this.mask = 0;
    }
  }, {
    key: "test",
    value: function test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
  }, {
    key: "isEnabled",
    value: function isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  }]);

  return Layers;
}();

exports.Layers = Layers;
var _object3DId = 0;

var _v1$4 = /*@__PURE__*/new Vector3();

var _q1 = /*@__PURE__*/new Quaternion();

var _m1$1 = /*@__PURE__*/new Matrix4();

var _target = /*@__PURE__*/new Vector3();

var _position$3 = /*@__PURE__*/new Vector3();

var _scale$2 = /*@__PURE__*/new Vector3();

var _quaternion$2 = /*@__PURE__*/new Quaternion();

var _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);

var _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);

var _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);

var _addedEvent = {
  type: 'added'
};
var _removedEvent = {
  type: 'removed'
};

var Object3D = /*#__PURE__*/function (_EventDispatcher3) {
  _inherits(Object3D, _EventDispatcher3);

  var _super8 = _createSuper(Object3D);

  function Object3D() {
    var _this9;

    _classCallCheck(this, Object3D);

    _this9 = _super8.call(this);
    Object.defineProperty(_assertThisInitialized(_this9), 'id', {
      value: _object3DId++
    });
    _this9.uuid = generateUUID();
    _this9.name = '';
    _this9.type = 'Object3D';
    _this9.parent = null;
    _this9.children = [];
    _this9.up = Object3D.DefaultUp.clone();
    var position = new Vector3();
    var rotation = new Euler();
    var quaternion = new Quaternion();
    var scale = new Vector3(1, 1, 1);

    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }

    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, undefined, false);
    }

    rotation._onChange(onRotationChange);

    quaternion._onChange(onQuaternionChange);

    Object.defineProperties(_assertThisInitialized(_this9), {
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: scale
      },
      modelViewMatrix: {
        value: new Matrix4()
      },
      normalMatrix: {
        value: new Matrix3()
      }
    });
    _this9.matrix = new Matrix4();
    _this9.matrixWorld = new Matrix4();
    _this9.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
    _this9.matrixWorldNeedsUpdate = false;
    _this9.layers = new Layers();
    _this9.visible = true;
    _this9.castShadow = false;
    _this9.receiveShadow = false;
    _this9.frustumCulled = true;
    _this9.renderOrder = 0;
    _this9.animations = [];
    _this9.userData = {};
    return _this9;
  }

  _createClass(Object3D, [{
    key: "onBeforeRender",
    value: function
      /* renderer, scene, camera, geometry, material, group */
    onBeforeRender() {}
  }, {
    key: "onAfterRender",
    value: function
      /* renderer, scene, camera, geometry, material, group */
    onAfterRender() {}
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
  }, {
    key: "applyQuaternion",
    value: function applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
  }, {
    key: "setRotationFromAxisAngle",
    value: function setRotationFromAxisAngle(axis, angle) {
      // assumes axis is normalized
      this.quaternion.setFromAxisAngle(axis, angle);
    }
  }, {
    key: "setRotationFromEuler",
    value: function setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
  }, {
    key: "setRotationFromMatrix",
    value: function setRotationFromMatrix(m) {
      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
      this.quaternion.setFromRotationMatrix(m);
    }
  }, {
    key: "setRotationFromQuaternion",
    value: function setRotationFromQuaternion(q) {
      // assumes q is normalized
      this.quaternion.copy(q);
    }
  }, {
    key: "rotateOnAxis",
    value: function rotateOnAxis(axis, angle) {
      // rotate object on axis in object space
      // axis is assumed to be normalized
      _q1.setFromAxisAngle(axis, angle);

      this.quaternion.multiply(_q1);
      return this;
    }
  }, {
    key: "rotateOnWorldAxis",
    value: function rotateOnWorldAxis(axis, angle) {
      // rotate object on axis in world space
      // axis is assumed to be normalized
      // method assumes no rotated parent
      _q1.setFromAxisAngle(axis, angle);

      this.quaternion.premultiply(_q1);
      return this;
    }
  }, {
    key: "rotateX",
    value: function rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
  }, {
    key: "rotateY",
    value: function rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
  }, {
    key: "rotateZ",
    value: function rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
  }, {
    key: "translateOnAxis",
    value: function translateOnAxis(axis, distance) {
      // translate object by distance along axis in object space
      // axis is assumed to be normalized
      _v1$4.copy(axis).applyQuaternion(this.quaternion);

      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
  }, {
    key: "translateX",
    value: function translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
  }, {
    key: "translateY",
    value: function translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
  }, {
    key: "translateZ",
    value: function translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
  }, {
    key: "localToWorld",
    value: function localToWorld(vector) {
      return vector.applyMatrix4(this.matrixWorld);
    }
  }, {
    key: "worldToLocal",
    value: function worldToLocal(vector) {
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
  }, {
    key: "lookAt",
    value: function lookAt(x, y, z) {
      // This method does not support objects having non-uniformly-scaled parent(s)
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z);
      }

      var parent = this.parent;
      this.updateWorldMatrix(true, false);

      _position$3.setFromMatrixPosition(this.matrixWorld);

      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }

      this.quaternion.setFromRotationMatrix(_m1$1);

      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);

        _q1.setFromRotationMatrix(_m1$1);

        this.quaternion.premultiply(_q1.invert());
      }
    }
  }, {
    key: "add",
    value: function add(object) {
      if (arguments.length > 1) {
        for (var _i19 = 0; _i19 < arguments.length; _i19++) {
          this.add(arguments[_i19]);
        }

        return this;
      }

      if (object === this) {
        console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
        return this;
      }

      if (object && object.isObject3D) {
        if (object.parent !== null) {
          object.parent.remove(object);
        }

        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
      } else {
        console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(object) {
      if (arguments.length > 1) {
        for (var _i20 = 0; _i20 < arguments.length; _i20++) {
          this.remove(arguments[_i20]);
        }

        return this;
      }

      var index = this.children.indexOf(object);

      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
      }

      return this;
    }
  }, {
    key: "removeFromParent",
    value: function removeFromParent() {
      var parent = this.parent;

      if (parent !== null) {
        parent.remove(this);
      }

      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      for (var _i21 = 0; _i21 < this.children.length; _i21++) {
        var object = this.children[_i21];
        object.parent = null;
        object.dispatchEvent(_removedEvent);
      }

      this.children.length = 0;
      return this;
    }
  }, {
    key: "attach",
    value: function attach(object) {
      // adds object as a child of this, while maintaining the object's world transform
      // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
      this.updateWorldMatrix(true, false);

      _m1$1.copy(this.matrixWorld).invert();

      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);

        _m1$1.multiply(object.parent.matrixWorld);
      }

      object.applyMatrix4(_m1$1);
      this.add(object);
      object.updateWorldMatrix(false, true);
      return this;
    }
  }, {
    key: "getObjectById",
    value: function getObjectById(id) {
      return this.getObjectByProperty('id', id);
    }
  }, {
    key: "getObjectByName",
    value: function getObjectByName(name) {
      return this.getObjectByProperty('name', name);
    }
  }, {
    key: "getObjectByProperty",
    value: function getObjectByProperty(name, value) {
      if (this[name] === value) return this;

      for (var _i22 = 0, l = this.children.length; _i22 < l; _i22++) {
        var child = this.children[_i22];
        var object = child.getObjectByProperty(name, value);

        if (object !== undefined) {
          return object;
        }
      }

      return undefined;
    }
  }, {
    key: "getWorldPosition",
    value: function getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
  }, {
    key: "getWorldQuaternion",
    value: function getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
  }, {
    key: "getWorldScale",
    value: function getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
  }, {
    key: "getWorldDirection",
    value: function getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      var e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
  }, {
    key: "raycast",
    value: function
      /* raycaster, intersects */
    raycast() {}
  }, {
    key: "traverse",
    value: function traverse(callback) {
      callback(this);
      var children = this.children;

      for (var _i23 = 0, l = children.length; _i23 < l; _i23++) {
        children[_i23].traverse(callback);
      }
    }
  }, {
    key: "traverseVisible",
    value: function traverseVisible(callback) {
      if (this.visible === false) return;
      callback(this);
      var children = this.children;

      for (var _i24 = 0, l = children.length; _i24 < l; _i24++) {
        children[_i24].traverseVisible(callback);
      }
    }
  }, {
    key: "traverseAncestors",
    value: function traverseAncestors(callback) {
      var parent = this.parent;

      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
  }, {
    key: "updateMatrix",
    value: function updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
  }, {
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      if (this.matrixAutoUpdate) this.updateMatrix();

      if (this.matrixWorldNeedsUpdate || force) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }

        this.matrixWorldNeedsUpdate = false;
        force = true;
      } // update children


      var children = this.children;

      for (var _i25 = 0, l = children.length; _i25 < l; _i25++) {
        children[_i25].updateMatrixWorld(force);
      }
    }
  }, {
    key: "updateWorldMatrix",
    value: function updateWorldMatrix(updateParents, updateChildren) {
      var parent = this.parent;

      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }

      if (this.matrixAutoUpdate) this.updateMatrix();

      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      } // update children


      if (updateChildren === true) {
        var children = this.children;

        for (var _i26 = 0, l = children.length; _i26 < l; _i26++) {
          children[_i26].updateWorldMatrix(false, true);
        }
      }
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      // meta is a string when called from JSON.stringify
      var isRootObject = meta === undefined || typeof meta === 'string';
      var output = {}; // meta is a hash used to collect geometries, materials.
      // not providing it implies that this is the root object
      // being serialized.

      if (isRootObject) {
        // initialize meta obj
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.5,
          type: 'Object',
          generator: 'Object3D.toJSON'
        };
      } // standard Object3D serialization


      var object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== '') object.name = this.name;
      if (this.castShadow === true) object.castShadow = true;
      if (this.receiveShadow === true) object.receiveShadow = true;
      if (this.visible === false) object.visible = false;
      if (this.frustumCulled === false) object.frustumCulled = false;
      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
      if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties

      if (this.isInstancedMesh) {
        object.type = 'InstancedMesh';
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
      } //


      function serialize(library, element) {
        if (library[element.uuid] === undefined) {
          library[element.uuid] = element.toJSON(meta);
        }

        return element.uuid;
      }

      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }

        if (this.environment && this.environment.isTexture) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        var parameters = this.geometry.parameters;

        if (parameters !== undefined && parameters.shapes !== undefined) {
          var shapes = parameters.shapes;

          if (Array.isArray(shapes)) {
            for (var _i27 = 0, l = shapes.length; _i27 < l; _i27++) {
              var shape = shapes[_i27];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }

      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();

        if (this.skeleton !== undefined) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }

      if (this.material !== undefined) {
        if (Array.isArray(this.material)) {
          var uuids = [];

          for (var _i28 = 0, _l2 = this.material.length; _i28 < _l2; _i28++) {
            uuids.push(serialize(meta.materials, this.material[_i28]));
          }

          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      } //


      if (this.children.length > 0) {
        object.children = [];

        for (var _i29 = 0; _i29 < this.children.length; _i29++) {
          object.children.push(this.children[_i29].toJSON(meta).object);
        }
      } //


      if (this.animations.length > 0) {
        object.animations = [];

        for (var _i30 = 0; _i30 < this.animations.length; _i30++) {
          var animation = this.animations[_i30];
          object.animations.push(serialize(meta.animations, animation));
        }
      }

      if (isRootObject) {
        var geometries = extractFromCache(meta.geometries);
        var materials = extractFromCache(meta.materials);
        var textures = extractFromCache(meta.textures);
        var images = extractFromCache(meta.images);

        var _shapes = extractFromCache(meta.shapes);

        var skeletons = extractFromCache(meta.skeletons);
        var animations = extractFromCache(meta.animations);
        var nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0) output.geometries = geometries;
        if (materials.length > 0) output.materials = materials;
        if (textures.length > 0) output.textures = textures;
        if (images.length > 0) output.images = images;
        if (_shapes.length > 0) output.shapes = _shapes;
        if (skeletons.length > 0) output.skeletons = skeletons;
        if (animations.length > 0) output.animations = animations;
        if (nodes.length > 0) output.nodes = nodes;
      }

      output.object = object;
      return output; // extract data from the cache hash
      // remove metadata on each item
      // and return as array

      function extractFromCache(cache) {
        var values = [];

        for (var key in cache) {
          var data = cache[key];
          delete data.metadata;
          values.push(data);
        }

        return values;
      }
    }
  }, {
    key: "clone",
    value: function clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
  }, {
    key: "copy",
    value: function copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.userData = JSON.parse(JSON.stringify(source.userData));

      if (recursive === true) {
        for (var _i31 = 0; _i31 < source.children.length; _i31++) {
          var child = source.children[_i31];
          this.add(child.clone());
        }
      }

      return this;
    }
  }]);

  return Object3D;
}(EventDispatcher);

exports.Object3D = Object3D;
Object3D.DefaultUp = new Vector3(0, 1, 0);
Object3D.DefaultMatrixAutoUpdate = true;
Object3D.prototype.isObject3D = true;

var _v0$1 = /*@__PURE__*/new Vector3();

var _v1$3 = /*@__PURE__*/new Vector3();

var _v2$2 = /*@__PURE__*/new Vector3();

var _v3$1 = /*@__PURE__*/new Vector3();

var _vab = /*@__PURE__*/new Vector3();

var _vac = /*@__PURE__*/new Vector3();

var _vbc = /*@__PURE__*/new Vector3();

var _vap = /*@__PURE__*/new Vector3();

var _vbp = /*@__PURE__*/new Vector3();

var _vcp = /*@__PURE__*/new Vector3();

var Triangle = /*#__PURE__*/function () {
  function Triangle(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
    _classCallCheck(this, Triangle);

    this.a = a;
    this.b = b;
    this.c = c;
  }

  _createClass(Triangle, [{
    key: "set",
    value: function set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
  }, {
    key: "setFromPointsAndIndices",
    value: function setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
  }, {
    key: "setFromAttributeAndIndices",
    value: function setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
  }, {
    key: "getArea",
    value: function getArea() {
      _v0$1.subVectors(this.c, this.b);

      _v1$3.subVectors(this.a, this.b);

      return _v0$1.cross(_v1$3).length() * 0.5;
    }
  }, {
    key: "getMidpoint",
    value: function getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
  }, {
    key: "getNormal",
    value: function getNormal(target) {
      return Triangle.getNormal(this.a, this.b, this.c, target);
    }
  }, {
    key: "getPlane",
    value: function getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
  }, {
    key: "getBarycoord",
    value: function getBarycoord(point, target) {
      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
  }, {
    key: "getUV",
    value: function getUV(point, uv1, uv2, uv3, target) {
      return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(point) {
      return Triangle.containsPoint(point, this.a, this.b, this.c);
    }
  }, {
    key: "isFrontFacing",
    value: function isFrontFacing(direction) {
      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
  }, {
    key: "closestPointToPoint",
    value: function closestPointToPoint(p, target) {
      var a = this.a,
          b = this.b,
          c = this.c;
      var v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
      // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
      // under the accompanying license; see chapter 5.1.5 for detailed explanation.
      // basically, we're distinguishing which of the voronoi regions of the triangle
      // the point lies in with the minimum amount of redundant computation.

      _vab.subVectors(b, a);

      _vac.subVectors(c, a);

      _vap.subVectors(p, a);

      var d1 = _vab.dot(_vap);

      var d2 = _vac.dot(_vap);

      if (d1 <= 0 && d2 <= 0) {
        // vertex region of A; barycentric coords (1, 0, 0)
        return target.copy(a);
      }

      _vbp.subVectors(p, b);

      var d3 = _vab.dot(_vbp);

      var d4 = _vac.dot(_vbp);

      if (d3 >= 0 && d4 <= d3) {
        // vertex region of B; barycentric coords (0, 1, 0)
        return target.copy(b);
      }

      var vc = d1 * d4 - d3 * d2;

      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)

        return target.copy(a).addScaledVector(_vab, v);
      }

      _vcp.subVectors(p, c);

      var d5 = _vab.dot(_vcp);

      var d6 = _vac.dot(_vcp);

      if (d6 >= 0 && d5 <= d6) {
        // vertex region of C; barycentric coords (0, 0, 1)
        return target.copy(c);
      }

      var vb = d5 * d2 - d1 * d6;

      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)

        return target.copy(a).addScaledVector(_vac, w);
      }

      var va = d3 * d6 - d5 * d4;

      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);

        w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)

        return target.copy(b).addScaledVector(_vbc, w); // edge region of BC
      } // face region


      var denom = 1 / (va + vb + vc); // u = va * denom

      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
  }, {
    key: "equals",
    value: function equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  }], [{
    key: "getNormal",
    value: function getNormal(a, b, c, target) {
      target.subVectors(c, b);

      _v0$1.subVectors(a, b);

      target.cross(_v0$1);
      var targetLengthSq = target.lengthSq();

      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }

      return target.set(0, 0, 0);
    } // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html

  }, {
    key: "getBarycoord",
    value: function getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);

      _v1$3.subVectors(b, a);

      _v2$2.subVectors(point, a);

      var dot00 = _v0$1.dot(_v0$1);

      var dot01 = _v0$1.dot(_v1$3);

      var dot02 = _v0$1.dot(_v2$2);

      var dot11 = _v1$3.dot(_v1$3);

      var dot12 = _v1$3.dot(_v2$2);

      var denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle

      if (denom === 0) {
        // arbitrary location outside of triangle?
        // not sure if this is the best idea, maybe should be returning undefined
        return target.set(-2, -1, -1);
      }

      var invDenom = 1 / denom;
      var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      var v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1

      return target.set(1 - u - v, v, u);
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(point, a, b, c) {
      this.getBarycoord(point, a, b, c, _v3$1);
      return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
    }
  }, {
    key: "getUV",
    value: function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
      this.getBarycoord(point, p1, p2, p3, _v3$1);
      target.set(0, 0);
      target.addScaledVector(uv1, _v3$1.x);
      target.addScaledVector(uv2, _v3$1.y);
      target.addScaledVector(uv3, _v3$1.z);
      return target;
    }
  }, {
    key: "isFrontFacing",
    value: function isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);

      _v1$3.subVectors(a, b); // strictly front facing


      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
  }]);

  return Triangle;
}();

exports.Triangle = Triangle;
var materialId = 0;

var Material = /*#__PURE__*/function (_EventDispatcher4) {
  _inherits(Material, _EventDispatcher4);

  var _super9 = _createSuper(Material);

  function Material() {
    var _this10;

    _classCallCheck(this, Material);

    _this10 = _super9.call(this);
    Object.defineProperty(_assertThisInitialized(_this10), 'id', {
      value: materialId++
    });
    _this10.uuid = generateUUID();
    _this10.name = '';
    _this10.type = 'Material';
    _this10.fog = true;
    _this10.blending = NormalBlending;
    _this10.side = FrontSide;
    _this10.vertexColors = false;
    _this10.opacity = 1;
    _this10.transparent = false;
    _this10.blendSrc = SrcAlphaFactor;
    _this10.blendDst = OneMinusSrcAlphaFactor;
    _this10.blendEquation = AddEquation;
    _this10.blendSrcAlpha = null;
    _this10.blendDstAlpha = null;
    _this10.blendEquationAlpha = null;
    _this10.depthFunc = LessEqualDepth;
    _this10.depthTest = true;
    _this10.depthWrite = true;
    _this10.stencilWriteMask = 0xff;
    _this10.stencilFunc = AlwaysStencilFunc;
    _this10.stencilRef = 0;
    _this10.stencilFuncMask = 0xff;
    _this10.stencilFail = KeepStencilOp;
    _this10.stencilZFail = KeepStencilOp;
    _this10.stencilZPass = KeepStencilOp;
    _this10.stencilWrite = false;
    _this10.clippingPlanes = null;
    _this10.clipIntersection = false;
    _this10.clipShadows = false;
    _this10.shadowSide = null;
    _this10.colorWrite = true;
    _this10.precision = null; // override the renderer's default precision for this material

    _this10.polygonOffset = false;
    _this10.polygonOffsetFactor = 0;
    _this10.polygonOffsetUnits = 0;
    _this10.dithering = false;
    _this10.alphaToCoverage = false;
    _this10.premultipliedAlpha = false;
    _this10.visible = true;
    _this10.toneMapped = true;
    _this10.userData = {};
    _this10.version = 0;
    _this10._alphaTest = 0;
    return _this10;
  }

  _createClass(Material, [{
    key: "alphaTest",
    get: function get() {
      return this._alphaTest;
    },
    set: function set(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }

      this._alphaTest = value;
    }
  }, {
    key: "onBuild",
    value: function
      /* shaderobject, renderer */
    onBuild() {}
  }, {
    key: "onBeforeRender",
    value: function
      /* renderer, scene, camera, geometry, object, group */
    onBeforeRender() {}
  }, {
    key: "onBeforeCompile",
    value: function
      /* shaderobject, renderer */
    onBeforeCompile() {}
  }, {
    key: "customProgramCacheKey",
    value: function customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
  }, {
    key: "setValues",
    value: function setValues(values) {
      if (values === undefined) return;

      for (var key in values) {
        var newValue = values[key];

        if (newValue === undefined) {
          console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
          continue;
        } // for backward compatibility if shading is set in the constructor


        if (key === 'shading') {
          console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
          this.flatShading = newValue === FlatShading ? true : false;
          continue;
        }

        var currentValue = this[key];

        if (currentValue === undefined) {
          console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
          continue;
        }

        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var isRootObject = meta === undefined || typeof meta === 'string';

      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }

      var data = {
        metadata: {
          version: 4.5,
          type: 'Material',
          generator: 'Material.toJSON'
        }
      }; // standard Material serialization

      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== '') data.name = this.name;
      if (this.color && this.color.isColor) data.color = this.color.getHex();
      if (this.roughness !== undefined) data.roughness = this.roughness;
      if (this.metalness !== undefined) data.metalness = this.metalness;
      if (this.sheen !== undefined) data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
      if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
      if (this.shininess !== undefined) data.shininess = this.shininess;
      if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;

      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }

      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }

      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }

      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;

      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }

      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }

      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }

      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }

      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }

      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;

      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== undefined) data.combine = this.combine;
      }

      if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;

      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }

      if (this.transmission !== undefined) data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== undefined) data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== undefined) data.size = this.size;
      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending) data.blending = this.blending;
      if (this.side !== FrontSide) data.side = this.side;
      if (this.vertexColors) data.vertexColors = true;
      if (this.opacity < 1) data.opacity = this.opacity;
      if (this.transparent === true) data.transparent = this.transparent;
      data.depthFunc = this.depthFunc;
      data.depthTest = this.depthTest;
      data.depthWrite = this.depthWrite;
      data.colorWrite = this.colorWrite;
      data.stencilWrite = this.stencilWrite;
      data.stencilWriteMask = this.stencilWriteMask;
      data.stencilFunc = this.stencilFunc;
      data.stencilRef = this.stencilRef;
      data.stencilFuncMask = this.stencilFuncMask;
      data.stencilFail = this.stencilFail;
      data.stencilZFail = this.stencilZFail;
      data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)

      if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;
      if (this.polygonOffset === true) data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;
      if (this.dashSize !== undefined) data.dashSize = this.dashSize;
      if (this.gapSize !== undefined) data.gapSize = this.gapSize;
      if (this.scale !== undefined) data.scale = this.scale;
      if (this.dithering === true) data.dithering = true;
      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
      if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
      if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
      if (this.wireframe === true) data.wireframe = this.wireframe;
      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true) data.flatShading = this.flatShading;
      if (this.visible === false) data.visible = false;
      if (this.toneMapped === false) data.toneMapped = false;
      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON

      function extractFromCache(cache) {
        var values = [];

        for (var key in cache) {
          var _data2 = cache[key];
          delete _data2.metadata;
          values.push(_data2);
        }

        return values;
      }

      if (isRootObject) {
        var textures = extractFromCache(meta.textures);
        var images = extractFromCache(meta.images);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
      }

      return data;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.name = source.name;
      this.fog = source.fog;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      var srcPlanes = source.clippingPlanes;
      var dstPlanes = null;

      if (srcPlanes !== null) {
        var n = srcPlanes.length;
        dstPlanes = new Array(n);

        for (var _i32 = 0; _i32 !== n; ++_i32) {
          dstPlanes[_i32] = srcPlanes[_i32].clone();
        }
      }

      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.dispatchEvent({
        type: 'dispose'
      });
    }
  }, {
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) this.version++;
    }
  }]);

  return Material;
}(EventDispatcher);

exports.Material = Material;
Material.prototype.isMaterial = true;

Material.fromType = function
  /*type*/
() {
  // TODO: Behavior added in Materials.js
  return null;
};

var MeshBasicMaterial = /*#__PURE__*/function (_Material) {
  _inherits(MeshBasicMaterial, _Material);

  var _super10 = _createSuper(MeshBasicMaterial);

  function MeshBasicMaterial(parameters) {
    var _this11;

    _classCallCheck(this, MeshBasicMaterial);

    _this11 = _super10.call(this);
    _this11.type = 'MeshBasicMaterial';
    _this11.color = new Color(0xffffff); // emissive

    _this11.map = null;
    _this11.lightMap = null;
    _this11.lightMapIntensity = 1.0;
    _this11.aoMap = null;
    _this11.aoMapIntensity = 1.0;
    _this11.specularMap = null;
    _this11.alphaMap = null;
    _this11.envMap = null;
    _this11.combine = MultiplyOperation;
    _this11.reflectivity = 1;
    _this11.refractionRatio = 0.98;
    _this11.wireframe = false;
    _this11.wireframeLinewidth = 1;
    _this11.wireframeLinecap = 'round';
    _this11.wireframeLinejoin = 'round';

    _this11.setValues(parameters);

    return _this11;
  }

  _createClass(MeshBasicMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshBasicMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      return this;
    }
  }]);

  return MeshBasicMaterial;
}(Material);

exports.MeshBasicMaterial = MeshBasicMaterial;
MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

var _vector$9 = /*@__PURE__*/new Vector3();

var _vector2$1 = /*@__PURE__*/new Vector2();

var BufferAttribute = /*#__PURE__*/function () {
  function BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, BufferAttribute);

    if (Array.isArray(array)) {
      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
    }

    this.name = '';
    this.array = array;
    this.itemSize = itemSize;
    this.count = array !== undefined ? array.length / itemSize : 0;
    this.normalized = normalized === true;
    this.usage = StaticDrawUsage;
    this.updateRange = {
      offset: 0,
      count: -1
    };
    this.version = 0;
  }

  _createClass(BufferAttribute, [{
    key: "onUploadCallback",
    value: function onUploadCallback() {}
  }, {
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) this.version++;
    }
  }, {
    key: "setUsage",
    value: function setUsage(value) {
      this.usage = value;
      return this;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      return this;
    }
  }, {
    key: "copyAt",
    value: function copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;

      for (var _i33 = 0, l = this.itemSize; _i33 < l; _i33++) {
        this.array[index1 + _i33] = attribute.array[index2 + _i33];
      }

      return this;
    }
  }, {
    key: "copyArray",
    value: function copyArray(array) {
      this.array.set(array);
      return this;
    }
  }, {
    key: "copyColorsArray",
    value: function copyColorsArray(colors) {
      var array = this.array;
      var offset = 0;

      for (var _i34 = 0, l = colors.length; _i34 < l; _i34++) {
        var color = colors[_i34];

        if (color === undefined) {
          console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', _i34);
          color = new Color();
        }

        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
      }

      return this;
    }
  }, {
    key: "copyVector2sArray",
    value: function copyVector2sArray(vectors) {
      var array = this.array;
      var offset = 0;

      for (var _i35 = 0, l = vectors.length; _i35 < l; _i35++) {
        var vector = vectors[_i35];

        if (vector === undefined) {
          console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', _i35);
          vector = new Vector2();
        }

        array[offset++] = vector.x;
        array[offset++] = vector.y;
      }

      return this;
    }
  }, {
    key: "copyVector3sArray",
    value: function copyVector3sArray(vectors) {
      var array = this.array;
      var offset = 0;

      for (var _i36 = 0, l = vectors.length; _i36 < l; _i36++) {
        var vector = vectors[_i36];

        if (vector === undefined) {
          console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', _i36);
          vector = new Vector3();
        }

        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
      }

      return this;
    }
  }, {
    key: "copyVector4sArray",
    value: function copyVector4sArray(vectors) {
      var array = this.array;
      var offset = 0;

      for (var _i37 = 0, l = vectors.length; _i37 < l; _i37++) {
        var vector = vectors[_i37];

        if (vector === undefined) {
          console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', _i37);
          vector = new Vector4();
        }

        array[offset++] = vector.x;
        array[offset++] = vector.y;
        array[offset++] = vector.z;
        array[offset++] = vector.w;
      }

      return this;
    }
  }, {
    key: "applyMatrix3",
    value: function applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (var _i38 = 0, l = this.count; _i38 < l; _i38++) {
          _vector2$1.fromBufferAttribute(this, _i38);

          _vector2$1.applyMatrix3(m);

          this.setXY(_i38, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (var _i39 = 0, _l3 = this.count; _i39 < _l3; _i39++) {
          _vector$9.fromBufferAttribute(this, _i39);

          _vector$9.applyMatrix3(m);

          this.setXYZ(_i39, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }

      return this;
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(m) {
      for (var _i40 = 0, l = this.count; _i40 < l; _i40++) {
        _vector$9.fromBufferAttribute(this, _i40);

        _vector$9.applyMatrix4(m);

        this.setXYZ(_i40, _vector$9.x, _vector$9.y, _vector$9.z);
      }

      return this;
    }
  }, {
    key: "applyNormalMatrix",
    value: function applyNormalMatrix(m) {
      for (var _i41 = 0, l = this.count; _i41 < l; _i41++) {
        _vector$9.fromBufferAttribute(this, _i41);

        _vector$9.applyNormalMatrix(m);

        this.setXYZ(_i41, _vector$9.x, _vector$9.y, _vector$9.z);
      }

      return this;
    }
  }, {
    key: "transformDirection",
    value: function transformDirection(m) {
      for (var _i42 = 0, l = this.count; _i42 < l; _i42++) {
        _vector$9.fromBufferAttribute(this, _i42);

        _vector$9.transformDirection(m);

        this.setXYZ(_i42, _vector$9.x, _vector$9.y, _vector$9.z);
      }

      return this;
    }
  }, {
    key: "set",
    value: function set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
  }, {
    key: "getX",
    value: function getX(index) {
      return this.array[index * this.itemSize];
    }
  }, {
    key: "setX",
    value: function setX(index, x) {
      this.array[index * this.itemSize] = x;
      return this;
    }
  }, {
    key: "getY",
    value: function getY(index) {
      return this.array[index * this.itemSize + 1];
    }
  }, {
    key: "setY",
    value: function setY(index, y) {
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
  }, {
    key: "getZ",
    value: function getZ(index) {
      return this.array[index * this.itemSize + 2];
    }
  }, {
    key: "setZ",
    value: function setZ(index, z) {
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
  }, {
    key: "getW",
    value: function getW(index) {
      return this.array[index * this.itemSize + 3];
    }
  }, {
    key: "setW",
    value: function setW(index, w) {
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
  }, {
    key: "setXY",
    value: function setXY(index, x, y) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    }
  }, {
    key: "setXYZ",
    value: function setXYZ(index, x, y, z) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
  }, {
    key: "setXYZW",
    value: function setXYZW(index, x, y, z, w) {
      index *= this.itemSize;
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
  }, {
    key: "onUpload",
    value: function onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.prototype.slice.call(this.array),
        normalized: this.normalized
      };
      if (this.name !== '') data.name = this.name;
      if (this.usage !== StaticDrawUsage) data.usage = this.usage;
      if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
      return data;
    }
  }]);

  return BufferAttribute;
}();

exports.BufferAttribute = BufferAttribute;
BufferAttribute.prototype.isBufferAttribute = true; //

var Int8BufferAttribute = /*#__PURE__*/function (_BufferAttribute) {
  _inherits(Int8BufferAttribute, _BufferAttribute);

  var _super11 = _createSuper(Int8BufferAttribute);

  function Int8BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Int8BufferAttribute);

    return _super11.call(this, new Int8Array(array), itemSize, normalized);
  }

  return _createClass(Int8BufferAttribute);
}(BufferAttribute);

exports.Int8BufferAttribute = Int8BufferAttribute;

var Uint8BufferAttribute = /*#__PURE__*/function (_BufferAttribute2) {
  _inherits(Uint8BufferAttribute, _BufferAttribute2);

  var _super12 = _createSuper(Uint8BufferAttribute);

  function Uint8BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Uint8BufferAttribute);

    return _super12.call(this, new Uint8Array(array), itemSize, normalized);
  }

  return _createClass(Uint8BufferAttribute);
}(BufferAttribute);

exports.Uint8BufferAttribute = Uint8BufferAttribute;

var Uint8ClampedBufferAttribute = /*#__PURE__*/function (_BufferAttribute3) {
  _inherits(Uint8ClampedBufferAttribute, _BufferAttribute3);

  var _super13 = _createSuper(Uint8ClampedBufferAttribute);

  function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Uint8ClampedBufferAttribute);

    return _super13.call(this, new Uint8ClampedArray(array), itemSize, normalized);
  }

  return _createClass(Uint8ClampedBufferAttribute);
}(BufferAttribute);

exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;

var Int16BufferAttribute = /*#__PURE__*/function (_BufferAttribute4) {
  _inherits(Int16BufferAttribute, _BufferAttribute4);

  var _super14 = _createSuper(Int16BufferAttribute);

  function Int16BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Int16BufferAttribute);

    return _super14.call(this, new Int16Array(array), itemSize, normalized);
  }

  return _createClass(Int16BufferAttribute);
}(BufferAttribute);

exports.Int16BufferAttribute = Int16BufferAttribute;

var Uint16BufferAttribute = /*#__PURE__*/function (_BufferAttribute5) {
  _inherits(Uint16BufferAttribute, _BufferAttribute5);

  var _super15 = _createSuper(Uint16BufferAttribute);

  function Uint16BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Uint16BufferAttribute);

    return _super15.call(this, new Uint16Array(array), itemSize, normalized);
  }

  return _createClass(Uint16BufferAttribute);
}(BufferAttribute);

exports.Uint16BufferAttribute = Uint16BufferAttribute;

var Int32BufferAttribute = /*#__PURE__*/function (_BufferAttribute6) {
  _inherits(Int32BufferAttribute, _BufferAttribute6);

  var _super16 = _createSuper(Int32BufferAttribute);

  function Int32BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Int32BufferAttribute);

    return _super16.call(this, new Int32Array(array), itemSize, normalized);
  }

  return _createClass(Int32BufferAttribute);
}(BufferAttribute);

exports.Int32BufferAttribute = Int32BufferAttribute;

var Uint32BufferAttribute = /*#__PURE__*/function (_BufferAttribute7) {
  _inherits(Uint32BufferAttribute, _BufferAttribute7);

  var _super17 = _createSuper(Uint32BufferAttribute);

  function Uint32BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Uint32BufferAttribute);

    return _super17.call(this, new Uint32Array(array), itemSize, normalized);
  }

  return _createClass(Uint32BufferAttribute);
}(BufferAttribute);

exports.Uint32BufferAttribute = Uint32BufferAttribute;

var Float16BufferAttribute = /*#__PURE__*/function (_BufferAttribute8) {
  _inherits(Float16BufferAttribute, _BufferAttribute8);

  var _super18 = _createSuper(Float16BufferAttribute);

  function Float16BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Float16BufferAttribute);

    return _super18.call(this, new Uint16Array(array), itemSize, normalized);
  }

  return _createClass(Float16BufferAttribute);
}(BufferAttribute);

exports.Float16BufferAttribute = Float16BufferAttribute;
Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;

var Float32BufferAttribute = /*#__PURE__*/function (_BufferAttribute9) {
  _inherits(Float32BufferAttribute, _BufferAttribute9);

  var _super19 = _createSuper(Float32BufferAttribute);

  function Float32BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Float32BufferAttribute);

    return _super19.call(this, new Float32Array(array), itemSize, normalized);
  }

  return _createClass(Float32BufferAttribute);
}(BufferAttribute);

exports.Float32BufferAttribute = Float32BufferAttribute;

var Float64BufferAttribute = /*#__PURE__*/function (_BufferAttribute10) {
  _inherits(Float64BufferAttribute, _BufferAttribute10);

  var _super20 = _createSuper(Float64BufferAttribute);

  function Float64BufferAttribute(array, itemSize, normalized) {
    _classCallCheck(this, Float64BufferAttribute);

    return _super20.call(this, new Float64Array(array), itemSize, normalized);
  }

  return _createClass(Float64BufferAttribute);
}(BufferAttribute);

exports.Float64BufferAttribute = Float64BufferAttribute;
var _id$1 = 0;

var _m1 = /*@__PURE__*/new Matrix4();

var _obj = /*@__PURE__*/new Object3D();

var _offset = /*@__PURE__*/new Vector3();

var _box$1 = /*@__PURE__*/new Box3();

var _boxMorphTargets = /*@__PURE__*/new Box3();

var _vector$8 = /*@__PURE__*/new Vector3();

var BufferGeometry = /*#__PURE__*/function (_EventDispatcher5) {
  _inherits(BufferGeometry, _EventDispatcher5);

  var _super21 = _createSuper(BufferGeometry);

  function BufferGeometry() {
    var _this12;

    _classCallCheck(this, BufferGeometry);

    _this12 = _super21.call(this);
    Object.defineProperty(_assertThisInitialized(_this12), 'id', {
      value: _id$1++
    });
    _this12.uuid = generateUUID();
    _this12.name = '';
    _this12.type = 'BufferGeometry';
    _this12.index = null;
    _this12.attributes = {};
    _this12.morphAttributes = {};
    _this12.morphTargetsRelative = false;
    _this12.groups = [];
    _this12.boundingBox = null;
    _this12.boundingSphere = null;
    _this12.drawRange = {
      start: 0,
      count: Infinity
    };
    _this12.userData = {};
    return _this12;
  }

  _createClass(BufferGeometry, [{
    key: "getIndex",
    value: function getIndex() {
      return this.index;
    }
  }, {
    key: "setIndex",
    value: function setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }

      return this;
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(name) {
      return this.attributes[name];
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
  }, {
    key: "deleteAttribute",
    value: function deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
  }, {
    key: "hasAttribute",
    value: function hasAttribute(name) {
      return this.attributes[name] !== undefined;
    }
  }, {
    key: "addGroup",
    value: function addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start: start,
        count: count,
        materialIndex: materialIndex
      });
    }
  }, {
    key: "clearGroups",
    value: function clearGroups() {
      this.groups = [];
    }
  }, {
    key: "setDrawRange",
    value: function setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix) {
      var position = this.attributes.position;

      if (position !== undefined) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }

      var normal = this.attributes.normal;

      if (normal !== undefined) {
        var normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }

      var tangent = this.attributes.tangent;

      if (tangent !== undefined) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }

      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }

      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }

      return this;
    }
  }, {
    key: "applyQuaternion",
    value: function applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);

      this.applyMatrix4(_m1);
      return this;
    }
  }, {
    key: "rotateX",
    value: function rotateX(angle) {
      // rotate geometry around world x-axis
      _m1.makeRotationX(angle);

      this.applyMatrix4(_m1);
      return this;
    }
  }, {
    key: "rotateY",
    value: function rotateY(angle) {
      // rotate geometry around world y-axis
      _m1.makeRotationY(angle);

      this.applyMatrix4(_m1);
      return this;
    }
  }, {
    key: "rotateZ",
    value: function rotateZ(angle) {
      // rotate geometry around world z-axis
      _m1.makeRotationZ(angle);

      this.applyMatrix4(_m1);
      return this;
    }
  }, {
    key: "translate",
    value: function translate(x, y, z) {
      // translate geometry
      _m1.makeTranslation(x, y, z);

      this.applyMatrix4(_m1);
      return this;
    }
  }, {
    key: "scale",
    value: function scale(x, y, z) {
      // scale geometry
      _m1.makeScale(x, y, z);

      this.applyMatrix4(_m1);
      return this;
    }
  }, {
    key: "lookAt",
    value: function lookAt(vector) {
      _obj.lookAt(vector);

      _obj.updateMatrix();

      this.applyMatrix4(_obj.matrix);
      return this;
    }
  }, {
    key: "center",
    value: function center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
  }, {
    key: "setFromPoints",
    value: function setFromPoints(points) {
      var position = [];

      for (var _i43 = 0, l = points.length; _i43 < l; _i43++) {
        var point = points[_i43];
        position.push(point.x, point.y, point.z || 0);
      }

      this.setAttribute('position', new Float32BufferAttribute(position, 3));
      return this;
    }
  }, {
    key: "computeBoundingBox",
    value: function computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }

      var position = this.attributes.position;
      var morphAttributesPosition = this.morphAttributes.position;

      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));
        return;
      }

      if (position !== undefined) {
        this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present

        if (morphAttributesPosition) {
          for (var _i44 = 0, il = morphAttributesPosition.length; _i44 < il; _i44++) {
            var morphAttribute = morphAttributesPosition[_i44];

            _box$1.setFromBufferAttribute(morphAttribute);

            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$1.min);

              this.boundingBox.expandByPoint(_vector$8);

              _vector$8.addVectors(this.boundingBox.max, _box$1.max);

              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$1.min);
              this.boundingBox.expandByPoint(_box$1.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }

      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
  }, {
    key: "computeBoundingSphere",
    value: function computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }

      var position = this.attributes.position;
      var morphAttributesPosition = this.morphAttributes.position;

      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }

      if (position) {
        // first, find the center of the bounding sphere
        var center = this.boundingSphere.center;

        _box$1.setFromBufferAttribute(position); // process morph attributes if present


        if (morphAttributesPosition) {
          for (var _i45 = 0, il = morphAttributesPosition.length; _i45 < il; _i45++) {
            var morphAttribute = morphAttributesPosition[_i45];

            _boxMorphTargets.setFromBufferAttribute(morphAttribute);

            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);

              _box$1.expandByPoint(_vector$8);

              _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);

              _box$1.expandByPoint(_vector$8);
            } else {
              _box$1.expandByPoint(_boxMorphTargets.min);

              _box$1.expandByPoint(_boxMorphTargets.max);
            }
          }
        }

        _box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the
        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case


        var maxRadiusSq = 0;

        for (var _i46 = 0, _il = position.count; _i46 < _il; _i46++) {
          _vector$8.fromBufferAttribute(position, _i46);

          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        } // process morph attributes if present


        if (morphAttributesPosition) {
          for (var _i47 = 0, _il2 = morphAttributesPosition.length; _i47 < _il2; _i47++) {
            var _morphAttribute = morphAttributesPosition[_i47];
            var morphTargetsRelative = this.morphTargetsRelative;

            for (var j = 0, jl = _morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(_morphAttribute, j);

              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);

                _vector$8.add(_offset);
              }

              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }

        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);

        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
  }, {
    key: "computeTangents",
    value: function computeTangents() {
      var index = this.index;
      var attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html
      // (per vertex tangents)

      if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
        console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
        return;
      }

      var indices = index.array;
      var positions = attributes.position.array;
      var normals = attributes.normal.array;
      var uvs = attributes.uv.array;
      var nVertices = positions.length / 3;

      if (this.hasAttribute('tangent') === false) {
        this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));
      }

      var tangents = this.getAttribute('tangent').array;
      var tan1 = [],
          tan2 = [];

      for (var _i48 = 0; _i48 < nVertices; _i48++) {
        tan1[_i48] = new Vector3();
        tan2[_i48] = new Vector3();
      }

      var vA = new Vector3(),
          vB = new Vector3(),
          vC = new Vector3(),
          uvA = new Vector2(),
          uvB = new Vector2(),
          uvC = new Vector2(),
          sdir = new Vector3(),
          tdir = new Vector3();

      function handleTriangle(a, b, c) {
        vA.fromArray(positions, a * 3);
        vB.fromArray(positions, b * 3);
        vC.fromArray(positions, c * 3);
        uvA.fromArray(uvs, a * 2);
        uvB.fromArray(uvs, b * 2);
        uvC.fromArray(uvs, c * 2);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        var r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices

        if (!isFinite(r)) return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }

      var groups = this.groups;

      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: indices.length
        }];
      }

      for (var _i49 = 0, il = groups.length; _i49 < il; ++_i49) {
        var group = groups[_i49];
        var start = group.start;
        var count = group.count;

        for (var j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
        }
      }

      var tmp = new Vector3(),
          tmp2 = new Vector3();
      var n = new Vector3(),
          n2 = new Vector3();

      function handleVertex(v) {
        n.fromArray(normals, v * 3);
        n2.copy(n);
        var t = tan1[v]; // Gram-Schmidt orthogonalize

        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness

        tmp2.crossVectors(n2, t);
        var test = tmp2.dot(tan2[v]);
        var w = test < 0.0 ? -1.0 : 1.0;
        tangents[v * 4] = tmp.x;
        tangents[v * 4 + 1] = tmp.y;
        tangents[v * 4 + 2] = tmp.z;
        tangents[v * 4 + 3] = w;
      }

      for (var _i50 = 0, _il3 = groups.length; _i50 < _il3; ++_i50) {
        var _group = groups[_i50];
        var _start2 = _group.start;
        var _count = _group.count;

        for (var _j = _start2, _jl = _start2 + _count; _j < _jl; _j += 3) {
          handleVertex(indices[_j + 0]);
          handleVertex(indices[_j + 1]);
          handleVertex(indices[_j + 2]);
        }
      }
    }
  }, {
    key: "computeVertexNormals",
    value: function computeVertexNormals() {
      var index = this.index;
      var positionAttribute = this.getAttribute('position');

      if (positionAttribute !== undefined) {
        var normalAttribute = this.getAttribute('normal');

        if (normalAttribute === undefined) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute('normal', normalAttribute);
        } else {
          // reset existing normals to zero
          for (var _i51 = 0, il = normalAttribute.count; _i51 < il; _i51++) {
            normalAttribute.setXYZ(_i51, 0, 0, 0);
          }
        }

        var pA = new Vector3(),
            pB = new Vector3(),
            pC = new Vector3();
        var nA = new Vector3(),
            nB = new Vector3(),
            nC = new Vector3();
        var cb = new Vector3(),
            ab = new Vector3(); // indexed elements

        if (index) {
          for (var _i52 = 0, _il4 = index.count; _i52 < _il4; _i52 += 3) {
            var vA = index.getX(_i52 + 0);
            var vB = index.getX(_i52 + 1);
            var vC = index.getX(_i52 + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          // non-indexed elements (unconnected triangle soup)
          for (var _i53 = 0, _il5 = positionAttribute.count; _i53 < _il5; _i53 += 3) {
            pA.fromBufferAttribute(positionAttribute, _i53 + 0);
            pB.fromBufferAttribute(positionAttribute, _i53 + 1);
            pC.fromBufferAttribute(positionAttribute, _i53 + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(_i53 + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(_i53 + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(_i53 + 2, cb.x, cb.y, cb.z);
          }
        }

        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
  }, {
    key: "merge",
    value: function merge(geometry, offset) {
      if (!(geometry && geometry.isBufferGeometry)) {
        console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
        return;
      }

      if (offset === undefined) {
        offset = 0;
        console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');
      }

      var attributes = this.attributes;

      for (var key in attributes) {
        if (geometry.attributes[key] === undefined) continue;
        var attribute1 = attributes[key];
        var attributeArray1 = attribute1.array;
        var attribute2 = geometry.attributes[key];
        var attributeArray2 = attribute2.array;
        var attributeOffset = attribute2.itemSize * offset;
        var length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);

        for (var _i54 = 0, j = attributeOffset; _i54 < length; _i54++, j++) {
          attributeArray1[j] = attributeArray2[_i54];
        }
      }

      return this;
    }
  }, {
    key: "normalizeNormals",
    value: function normalizeNormals() {
      var normals = this.attributes.normal;

      for (var _i55 = 0, il = normals.count; _i55 < il; _i55++) {
        _vector$8.fromBufferAttribute(normals, _i55);

        _vector$8.normalize();

        normals.setXYZ(_i55, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
  }, {
    key: "toNonIndexed",
    value: function toNonIndexed() {
      function convertBufferAttribute(attribute, indices) {
        var array = attribute.array;
        var itemSize = attribute.itemSize;
        var normalized = attribute.normalized;
        var array2 = new array.constructor(indices.length * itemSize);
        var index = 0,
            index2 = 0;

        for (var _i56 = 0, l = indices.length; _i56 < l; _i56++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices[_i56] * attribute.data.stride + attribute.offset;
          } else {
            index = indices[_i56] * itemSize;
          }

          for (var j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }

        return new BufferAttribute(array2, itemSize, normalized);
      } //


      if (this.index === null) {
        console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
        return this;
      }

      var geometry2 = new BufferGeometry();
      var indices = this.index.array;
      var attributes = this.attributes; // attributes

      for (var name in attributes) {
        var attribute = attributes[name];
        var newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      } // morph attributes


      var morphAttributes = this.morphAttributes;

      for (var _name in morphAttributes) {
        var morphArray = [];
        var morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes

        for (var _i57 = 0, il = morphAttribute.length; _i57 < il; _i57++) {
          var _attribute = morphAttribute[_i57];

          var _newAttribute = convertBufferAttribute(_attribute, indices);

          morphArray.push(_newAttribute);
        }

        geometry2.morphAttributes[_name] = morphArray;
      }

      geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups

      var groups = this.groups;

      for (var _i58 = 0, l = groups.length; _i58 < l; _i58++) {
        var group = groups[_i58];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }

      return geometry2;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = {
        metadata: {
          version: 4.5,
          type: 'BufferGeometry',
          generator: 'BufferGeometry.toJSON'
        }
      }; // standard BufferGeometry serialization

      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== '') data.name = this.name;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;

      if (this.parameters !== undefined) {
        var parameters = this.parameters;

        for (var key in parameters) {
          if (parameters[key] !== undefined) data[key] = parameters[key];
        }

        return data;
      } // for simplicity the code assumes attributes are not shared across geometries, see #15811


      data.data = {
        attributes: {}
      };
      var index = this.index;

      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }

      var attributes = this.attributes;

      for (var _key in attributes) {
        var attribute = attributes[_key];
        data.data.attributes[_key] = attribute.toJSON(data.data);
      }

      var morphAttributes = {};
      var hasMorphAttributes = false;

      for (var _key2 in this.morphAttributes) {
        var attributeArray = this.morphAttributes[_key2];
        var array = [];

        for (var _i59 = 0, il = attributeArray.length; _i59 < il; _i59++) {
          var _attribute2 = attributeArray[_i59];
          array.push(_attribute2.toJSON(data.data));
        }

        if (array.length > 0) {
          morphAttributes[_key2] = array;
          hasMorphAttributes = true;
        }
      }

      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }

      var groups = this.groups;

      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }

      var boundingSphere = this.boundingSphere;

      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }

      return data;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      // reset
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null; // used for storing cloned, shared data

      var data = {}; // name

      this.name = source.name; // index

      var index = source.index;

      if (index !== null) {
        this.setIndex(index.clone(data));
      } // attributes


      var attributes = source.attributes;

      for (var name in attributes) {
        var attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      } // morph attributes


      var morphAttributes = source.morphAttributes;

      for (var _name2 in morphAttributes) {
        var array = [];
        var morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes

        for (var _i60 = 0, l = morphAttribute.length; _i60 < l; _i60++) {
          array.push(morphAttribute[_i60].clone(data));
        }

        this.morphAttributes[_name2] = array;
      }

      this.morphTargetsRelative = source.morphTargetsRelative; // groups

      var groups = source.groups;

      for (var _i61 = 0, _l4 = groups.length; _i61 < _l4; _i61++) {
        var group = groups[_i61];
        this.addGroup(group.start, group.count, group.materialIndex);
      } // bounding box


      var boundingBox = source.boundingBox;

      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      } // bounding sphere


      var boundingSphere = source.boundingSphere;

      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      } // draw range


      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count; // user data

      this.userData = source.userData; // geometry generator parameters

      if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);
      return this;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.dispatchEvent({
        type: 'dispose'
      });
    }
  }]);

  return BufferGeometry;
}(EventDispatcher);

exports.BufferGeometry = BufferGeometry;
BufferGeometry.prototype.isBufferGeometry = true;

var _inverseMatrix$2 = /*@__PURE__*/new Matrix4();

var _ray$2 = /*@__PURE__*/new Ray();

var _sphere$3 = /*@__PURE__*/new Sphere();

var _vA$1 = /*@__PURE__*/new Vector3();

var _vB$1 = /*@__PURE__*/new Vector3();

var _vC$1 = /*@__PURE__*/new Vector3();

var _tempA = /*@__PURE__*/new Vector3();

var _tempB = /*@__PURE__*/new Vector3();

var _tempC = /*@__PURE__*/new Vector3();

var _morphA = /*@__PURE__*/new Vector3();

var _morphB = /*@__PURE__*/new Vector3();

var _morphC = /*@__PURE__*/new Vector3();

var _uvA$1 = /*@__PURE__*/new Vector2();

var _uvB$1 = /*@__PURE__*/new Vector2();

var _uvC$1 = /*@__PURE__*/new Vector2();

var _intersectionPoint = /*@__PURE__*/new Vector3();

var _intersectionPointWorld = /*@__PURE__*/new Vector3();

var Mesh = /*#__PURE__*/function (_Object3D) {
  _inherits(Mesh, _Object3D);

  var _super22 = _createSuper(Mesh);

  function Mesh(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
    var _this13;

    _classCallCheck(this, Mesh);

    _this13 = _super22.call(this);
    _this13.type = 'Mesh';
    _this13.geometry = geometry;
    _this13.material = material;

    _this13.updateMorphTargets();

    return _this13;
  }

  _createClass(Mesh, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Mesh.prototype), "copy", this).call(this, source);

      if (source.morphTargetInfluences !== undefined) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }

      if (source.morphTargetDictionary !== undefined) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }

      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
  }, {
    key: "updateMorphTargets",
    value: function updateMorphTargets() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        var morphAttributes = geometry.morphAttributes;
        var keys = Object.keys(morphAttributes);

        if (keys.length > 0) {
          var morphAttribute = morphAttributes[keys[0]];

          if (morphAttribute !== undefined) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};

            for (var m = 0, ml = morphAttribute.length; m < ml; m++) {
              var name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        var morphTargets = geometry.morphTargets;

        if (morphTargets !== undefined && morphTargets.length > 0) {
          console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
      }
    }
  }, {
    key: "raycast",
    value: function raycast(raycaster, intersects) {
      var geometry = this.geometry;
      var material = this.material;
      var matrixWorld = this.matrixWorld;
      if (material === undefined) return; // Checking boundingSphere distance to ray

      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

      _sphere$3.copy(geometry.boundingSphere);

      _sphere$3.applyMatrix4(matrixWorld);

      if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //

      _inverseMatrix$2.copy(matrixWorld).invert();

      _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing


      if (geometry.boundingBox !== null) {
        if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;
      }

      var intersection;

      if (geometry.isBufferGeometry) {
        var index = geometry.index;
        var position = geometry.attributes.position;
        var morphPosition = geometry.morphAttributes.position;
        var morphTargetsRelative = geometry.morphTargetsRelative;
        var uv = geometry.attributes.uv;
        var uv2 = geometry.attributes.uv2;
        var groups = geometry.groups;
        var drawRange = geometry.drawRange;

        if (index !== null) {
          // indexed buffer geometry
          if (Array.isArray(material)) {
            for (var _i62 = 0, il = groups.length; _i62 < il; _i62++) {
              var group = groups[_i62];
              var groupMaterial = material[group.materialIndex];
              var start = Math.max(group.start, drawRange.start);
              var end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));

              for (var j = start, jl = end; j < jl; j += 3) {
                var a = index.getX(j);
                var b = index.getX(j + 1);
                var c = index.getX(j + 2);
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics

                  intersection.face.materialIndex = group.materialIndex;
                  intersects.push(intersection);
                }
              }
            }
          } else {
            var _start3 = Math.max(0, drawRange.start);

            var _end2 = Math.min(index.count, drawRange.start + drawRange.count);

            for (var _i63 = _start3, _il6 = _end2; _i63 < _il6; _i63 += 3) {
              var _a = index.getX(_i63);

              var _b = index.getX(_i63 + 1);

              var _c = index.getX(_i63 + 2);

              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);

              if (intersection) {
                intersection.faceIndex = Math.floor(_i63 / 3); // triangle number in indexed buffer semantics

                intersects.push(intersection);
              }
            }
          }
        } else if (position !== undefined) {
          // non-indexed buffer geometry
          if (Array.isArray(material)) {
            for (var _i64 = 0, _il7 = groups.length; _i64 < _il7; _i64++) {
              var _group2 = groups[_i64];
              var _groupMaterial = material[_group2.materialIndex];

              var _start4 = Math.max(_group2.start, drawRange.start);

              var _end3 = Math.min(position.count, Math.min(_group2.start + _group2.count, drawRange.start + drawRange.count));

              for (var _j2 = _start4, _jl2 = _end3; _j2 < _jl2; _j2 += 3) {
                var _a2 = _j2;

                var _b2 = _j2 + 1;

                var _c2 = _j2 + 2;

                intersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);

                if (intersection) {
                  intersection.faceIndex = Math.floor(_j2 / 3); // triangle number in non-indexed buffer semantics

                  intersection.face.materialIndex = _group2.materialIndex;
                  intersects.push(intersection);
                }
              }
            }
          } else {
            var _start5 = Math.max(0, drawRange.start);

            var _end4 = Math.min(position.count, drawRange.start + drawRange.count);

            for (var _i65 = _start5, _il8 = _end4; _i65 < _il8; _i65 += 3) {
              var _a3 = _i65;

              var _b3 = _i65 + 1;

              var _c3 = _i65 + 2;

              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);

              if (intersection) {
                intersection.faceIndex = Math.floor(_i65 / 3); // triangle number in non-indexed buffer semantics

                intersects.push(intersection);
              }
            }
          }
        }
      } else if (geometry.isGeometry) {
        console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
      }
    }
  }]);

  return Mesh;
}(Object3D);

exports.Mesh = Mesh;
Mesh.prototype.isMesh = true;

function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
  var intersect;

  if (material.side === BackSide) {
    intersect = ray.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
  }

  if (intersect === null) return null;

  _intersectionPointWorld.copy(point);

  _intersectionPointWorld.applyMatrix4(object.matrixWorld);

  var distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance < raycaster.near || distance > raycaster.far) return null;
  return {
    distance: distance,
    point: _intersectionPointWorld.clone(),
    object: object
  };
}

function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
  _vA$1.fromBufferAttribute(position, a);

  _vB$1.fromBufferAttribute(position, b);

  _vC$1.fromBufferAttribute(position, c);

  var morphInfluences = object.morphTargetInfluences;

  if (morphPosition && morphInfluences) {
    _morphA.set(0, 0, 0);

    _morphB.set(0, 0, 0);

    _morphC.set(0, 0, 0);

    for (var _i66 = 0, il = morphPosition.length; _i66 < il; _i66++) {
      var influence = morphInfluences[_i66];
      var morphAttribute = morphPosition[_i66];
      if (influence === 0) continue;

      _tempA.fromBufferAttribute(morphAttribute, a);

      _tempB.fromBufferAttribute(morphAttribute, b);

      _tempC.fromBufferAttribute(morphAttribute, c);

      if (morphTargetsRelative) {
        _morphA.addScaledVector(_tempA, influence);

        _morphB.addScaledVector(_tempB, influence);

        _morphC.addScaledVector(_tempC, influence);
      } else {
        _morphA.addScaledVector(_tempA.sub(_vA$1), influence);

        _morphB.addScaledVector(_tempB.sub(_vB$1), influence);

        _morphC.addScaledVector(_tempC.sub(_vC$1), influence);
      }
    }

    _vA$1.add(_morphA);

    _vB$1.add(_morphB);

    _vC$1.add(_morphC);
  }

  if (object.isSkinnedMesh) {
    object.boneTransform(a, _vA$1);
    object.boneTransform(b, _vB$1);
    object.boneTransform(c, _vC$1);
  }

  var intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);

  if (intersection) {
    if (uv) {
      _uvA$1.fromBufferAttribute(uv, a);

      _uvB$1.fromBufferAttribute(uv, b);

      _uvC$1.fromBufferAttribute(uv, c);

      intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
    }

    if (uv2) {
      _uvA$1.fromBufferAttribute(uv2, a);

      _uvB$1.fromBufferAttribute(uv2, b);

      _uvC$1.fromBufferAttribute(uv2, c);

      intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
    }

    var face = {
      a: a,
      b: b,
      c: c,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
    intersection.face = face;
  }

  return intersection;
}

var BoxGeometry = /*#__PURE__*/function (_BufferGeometry) {
  _inherits(BoxGeometry, _BufferGeometry);

  var _super23 = _createSuper(BoxGeometry);

  function BoxGeometry(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    var _this14;

    _classCallCheck(this, BoxGeometry);

    _this14 = _super23.call(this);
    _this14.type = 'BoxGeometry';
    _this14.parameters = {
      width: width,
      height: height,
      depth: depth,
      widthSegments: widthSegments,
      heightSegments: heightSegments,
      depthSegments: depthSegments
    };

    var scope = _assertThisInitialized(_this14); // segments


    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // helper variables

    var numberOfVertices = 0;
    var groupStart = 0; // build each side of the box geometry

    buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px

    buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx

    buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py

    buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny

    buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz

    buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
    // build geometry

    _this14.setIndex(indices);

    _this14.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this14.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this14.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
      var segmentWidth = width / gridX;
      var segmentHeight = height / gridY;
      var widthHalf = width / 2;
      var heightHalf = height / 2;
      var depthHalf = depth / 2;
      var gridX1 = gridX + 1;
      var gridY1 = gridY + 1;
      var vertexCounter = 0;
      var groupCount = 0;
      var vector = new Vector3(); // generate vertices, normals and uvs

      for (var iy = 0; iy < gridY1; iy++) {
        var y = iy * segmentHeight - heightHalf;

        for (var ix = 0; ix < gridX1; ix++) {
          var x = ix * segmentWidth - widthHalf; // set values to correct vector component

          vector[u] = x * udir;
          vector[v] = y * vdir;
          vector[w] = depthHalf; // now apply vector to vertex buffer

          vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component

          vector[u] = 0;
          vector[v] = 0;
          vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer

          normals.push(vector.x, vector.y, vector.z); // uvs

          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY); // counters

          vertexCounter += 1;
        }
      } // indices
      // 1. you need three indices to draw a single face
      // 2. a single segment consists of two faces
      // 3. so we need to generate six (2*3) indices per segment


      for (var _iy = 0; _iy < gridY; _iy++) {
        for (var _ix = 0; _ix < gridX; _ix++) {
          var a = numberOfVertices + _ix + gridX1 * _iy;
          var b = numberOfVertices + _ix + gridX1 * (_iy + 1);
          var c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);
          var d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces

          indices.push(a, b, d);
          indices.push(b, c, d); // increase counter

          groupCount += 6;
        }
      } // add a group to the geometry. this will ensure multi material support


      scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups

      groupStart += groupCount; // update total number of vertices

      numberOfVertices += vertexCounter;
    }

    return _this14;
  }

  _createClass(BoxGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
  }]);

  return BoxGeometry;
}(BufferGeometry);
/**
 * Uniform Utilities
 */


exports.BoxGeometry = exports.BoxBufferGeometry = BoxGeometry;

function cloneUniforms(src) {
  var dst = {};

  for (var u in src) {
    dst[u] = {};

    for (var p in src[u]) {
      var property = src[u][p];

      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
        dst[u][p] = property.clone();
      } else if (Array.isArray(property)) {
        dst[u][p] = property.slice();
      } else {
        dst[u][p] = property;
      }
    }
  }

  return dst;
}

function mergeUniforms(uniforms) {
  var merged = {};

  for (var u = 0; u < uniforms.length; u++) {
    var _tmp = cloneUniforms(uniforms[u]);

    for (var p in _tmp) {
      merged[p] = _tmp[p];
    }
  }

  return merged;
} // Legacy


var UniformsUtils = {
  clone: cloneUniforms,
  merge: mergeUniforms
};
exports.UniformsUtils = UniformsUtils;
var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

var ShaderMaterial = /*#__PURE__*/function (_Material2) {
  _inherits(ShaderMaterial, _Material2);

  var _super24 = _createSuper(ShaderMaterial);

  function ShaderMaterial(parameters) {
    var _this15;

    _classCallCheck(this, ShaderMaterial);

    _this15 = _super24.call(this);
    _this15.type = 'ShaderMaterial';
    _this15.defines = {};
    _this15.uniforms = {};
    _this15.vertexShader = default_vertex;
    _this15.fragmentShader = default_fragment;
    _this15.linewidth = 1;
    _this15.wireframe = false;
    _this15.wireframeLinewidth = 1;
    _this15.fog = false; // set to use scene fog

    _this15.lights = false; // set to use scene lights

    _this15.clipping = false; // set to use user-defined clipping planes

    _this15.extensions = {
      derivatives: false,
      // set to use derivatives
      fragDepth: false,
      // set to use fragment depth values
      drawBuffers: false,
      // set to use draw buffers
      shaderTextureLOD: false // set to use shader texture LOD

    }; // When rendered geometry doesn't include these attributes but the material does,
    // use these default values in WebGL. This avoids errors when buffer data is missing.

    _this15.defaultAttributeValues = {
      'color': [1, 1, 1],
      'uv': [0, 0],
      'uv2': [0, 0]
    };
    _this15.index0AttributeName = undefined;
    _this15.uniformsNeedUpdate = false;
    _this15.glslVersion = null;

    if (parameters !== undefined) {
      if (parameters.attributes !== undefined) {
        console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');
      }

      _this15.setValues(parameters);
    }

    return _this15;
  }

  _createClass(ShaderMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(ShaderMaterial.prototype), "copy", this).call(this, source);

      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(ShaderMaterial.prototype), "toJSON", this).call(this, meta);

      data.glslVersion = this.glslVersion;
      data.uniforms = {};

      for (var name in this.uniforms) {
        var uniform = this.uniforms[name];
        var _value = uniform.value;

        if (_value && _value.isTexture) {
          data.uniforms[name] = {
            type: 't',
            value: _value.toJSON(meta).uuid
          };
        } else if (_value && _value.isColor) {
          data.uniforms[name] = {
            type: 'c',
            value: _value.getHex()
          };
        } else if (_value && _value.isVector2) {
          data.uniforms[name] = {
            type: 'v2',
            value: _value.toArray()
          };
        } else if (_value && _value.isVector3) {
          data.uniforms[name] = {
            type: 'v3',
            value: _value.toArray()
          };
        } else if (_value && _value.isVector4) {
          data.uniforms[name] = {
            type: 'v4',
            value: _value.toArray()
          };
        } else if (_value && _value.isMatrix3) {
          data.uniforms[name] = {
            type: 'm3',
            value: _value.toArray()
          };
        } else if (_value && _value.isMatrix4) {
          data.uniforms[name] = {
            type: 'm4',
            value: _value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value: _value
          }; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
        }
      }

      if (Object.keys(this.defines).length > 0) data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      var extensions = {};

      for (var key in this.extensions) {
        if (this.extensions[key] === true) extensions[key] = true;
      }

      if (Object.keys(extensions).length > 0) data.extensions = extensions;
      return data;
    }
  }]);

  return ShaderMaterial;
}(Material);

exports.ShaderMaterial = ShaderMaterial;
ShaderMaterial.prototype.isShaderMaterial = true;

var Camera = /*#__PURE__*/function (_Object3D2) {
  _inherits(Camera, _Object3D2);

  var _super25 = _createSuper(Camera);

  function Camera() {
    var _this16;

    _classCallCheck(this, Camera);

    _this16 = _super25.call(this);
    _this16.type = 'Camera';
    _this16.matrixWorldInverse = new Matrix4();
    _this16.projectionMatrix = new Matrix4();
    _this16.projectionMatrixInverse = new Matrix4();
    return _this16;
  }

  _createClass(Camera, [{
    key: "copy",
    value: function copy(source, recursive) {
      _get(_getPrototypeOf(Camera.prototype), "copy", this).call(this, source, recursive);

      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      return this;
    }
  }, {
    key: "getWorldDirection",
    value: function getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      var e = this.matrixWorld.elements;
      return target.set(-e[8], -e[9], -e[10]).normalize();
    }
  }, {
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      _get(_getPrototypeOf(Camera.prototype), "updateMatrixWorld", this).call(this, force);

      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
  }, {
    key: "updateWorldMatrix",
    value: function updateWorldMatrix(updateParents, updateChildren) {
      _get(_getPrototypeOf(Camera.prototype), "updateWorldMatrix", this).call(this, updateParents, updateChildren);

      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Camera;
}(Object3D);

exports.Camera = Camera;
Camera.prototype.isCamera = true;

var PerspectiveCamera = /*#__PURE__*/function (_Camera) {
  _inherits(PerspectiveCamera, _Camera);

  var _super26 = _createSuper(PerspectiveCamera);

  function PerspectiveCamera(fov = 50, aspect = 1, near = 0.1, far = 2000) {
    var _this17;

    _classCallCheck(this, PerspectiveCamera);

    _this17 = _super26.call(this);
    _this17.type = 'PerspectiveCamera';
    _this17.fov = fov;
    _this17.zoom = 1;
    _this17.near = near;
    _this17.far = far;
    _this17.focus = 10;
    _this17.aspect = aspect;
    _this17.view = null;
    _this17.filmGauge = 35; // width of the film (default in millimeters)

    _this17.filmOffset = 0; // horizontal film offset (same unit as gauge)

    _this17.updateProjectionMatrix();

    return _this17;
  }

  _createClass(PerspectiveCamera, [{
    key: "copy",
    value: function copy(source, recursive) {
      _get(_getPrototypeOf(PerspectiveCamera.prototype), "copy", this).call(this, source, recursive);

      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    }
    /**
     * Sets the FOV by focal length in respect to the current .filmGauge.
     *
     * The default film gauge is 35, so that the focal length can be specified for
     * a 35mm (full frame) camera.
     *
     * Values for focal length and film gauge must have the same unit.
     */

  }, {
    key: "setFocalLength",
    value: function setFocalLength(focalLength) {
      /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
      var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    }
    /**
     * Calculates the focal length from the current .fov and .filmGauge.
     */

  }, {
    key: "getFocalLength",
    value: function getFocalLength() {
      var vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
  }, {
    key: "getEffectiveFOV",
    value: function getEffectiveFOV() {
      return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
  }, {
    key: "getFilmWidth",
    value: function getFilmWidth() {
      // film not completely covered in portrait format (aspect < 1)
      return this.filmGauge * Math.min(this.aspect, 1);
    }
  }, {
    key: "getFilmHeight",
    value: function getFilmHeight() {
      // film not completely covered in landscape format (aspect > 1)
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
     * the monitors are in grid like this
     *
     *   +---+---+---+
     *   | A | B | C |
     *   +---+---+---+
     *   | D | E | F |
     *   +---+---+---+
     *
     * then for each monitor you would call it like this
     *
     *   const w = 1920;
     *   const h = 1080;
     *   const fullWidth = w * 3;
     *   const fullHeight = h * 2;
     *
     *   --A--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
     *   --B--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
     *   --C--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
     *   --D--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
     *   --E--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
     *   --F--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
     *
     *   Note there is no reason monitors have to be the same size or in a grid.
     */

  }, {
    key: "setViewOffset",
    value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;

      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }

      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
  }, {
    key: "clearViewOffset",
    value: function clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }

      this.updateProjectionMatrix();
    }
  }, {
    key: "updateProjectionMatrix",
    value: function updateProjectionMatrix() {
      var near = this.near;
      var top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
      var height = 2 * top;
      var width = this.aspect * height;
      var left = -0.5 * width;
      var view = this.view;

      if (this.view !== null && this.view.enabled) {
        var fullWidth = view.fullWidth,
            fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }

      var skew = this.filmOffset;
      if (skew !== 0) left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(PerspectiveCamera.prototype), "toJSON", this).call(this, meta);

      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null) data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  }]);

  return PerspectiveCamera;
}(Camera);

exports.PerspectiveCamera = PerspectiveCamera;
PerspectiveCamera.prototype.isPerspectiveCamera = true;
var fov = 90,
    aspect = 1;

var CubeCamera = /*#__PURE__*/function (_Object3D3) {
  _inherits(CubeCamera, _Object3D3);

  var _super27 = _createSuper(CubeCamera);

  function CubeCamera(near, far, renderTarget) {
    var _this18;

    _classCallCheck(this, CubeCamera);

    _this18 = _super27.call(this);
    _this18.type = 'CubeCamera';

    if (renderTarget.isWebGLCubeRenderTarget !== true) {
      console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
      return _possibleConstructorReturn(_this18);
    }

    _this18.renderTarget = renderTarget;
    var cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = _this18.layers;
    cameraPX.up.set(0, -1, 0);
    cameraPX.lookAt(new Vector3(1, 0, 0));

    _this18.add(cameraPX);

    var cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = _this18.layers;
    cameraNX.up.set(0, -1, 0);
    cameraNX.lookAt(new Vector3(-1, 0, 0));

    _this18.add(cameraNX);

    var cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = _this18.layers;
    cameraPY.up.set(0, 0, 1);
    cameraPY.lookAt(new Vector3(0, 1, 0));

    _this18.add(cameraPY);

    var cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = _this18.layers;
    cameraNY.up.set(0, 0, -1);
    cameraNY.lookAt(new Vector3(0, -1, 0));

    _this18.add(cameraNY);

    var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = _this18.layers;
    cameraPZ.up.set(0, -1, 0);
    cameraPZ.lookAt(new Vector3(0, 0, 1));

    _this18.add(cameraPZ);

    var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = _this18.layers;
    cameraNZ.up.set(0, -1, 0);
    cameraNZ.lookAt(new Vector3(0, 0, -1));

    _this18.add(cameraNZ);

    return _this18;
  }

  _createClass(CubeCamera, [{
    key: "update",
    value: function update(renderer, scene) {
      if (this.parent === null) this.updateMatrixWorld();
      var renderTarget = this.renderTarget;

      var _this$children = _slicedToArray(this.children, 6),
          cameraPX = _this$children[0],
          cameraNX = _this$children[1],
          cameraPY = _this$children[2],
          cameraNY = _this$children[3],
          cameraPZ = _this$children[4],
          cameraNZ = _this$children[5];

      var currentRenderTarget = renderer.getRenderTarget();
      var currentOutputEncoding = renderer.outputEncoding;
      var currentToneMapping = renderer.toneMapping;
      var currentXrEnabled = renderer.xr.enabled;
      renderer.outputEncoding = LinearEncoding;
      renderer.toneMapping = NoToneMapping;
      renderer.xr.enabled = false;
      var generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer.setRenderTarget(renderTarget, 0);
      renderer.render(scene, cameraPX);
      renderer.setRenderTarget(renderTarget, 1);
      renderer.render(scene, cameraNX);
      renderer.setRenderTarget(renderTarget, 2);
      renderer.render(scene, cameraPY);
      renderer.setRenderTarget(renderTarget, 3);
      renderer.render(scene, cameraNY);
      renderer.setRenderTarget(renderTarget, 4);
      renderer.render(scene, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer.setRenderTarget(renderTarget, 5);
      renderer.render(scene, cameraNZ);
      renderer.setRenderTarget(currentRenderTarget);
      renderer.outputEncoding = currentOutputEncoding;
      renderer.toneMapping = currentToneMapping;
      renderer.xr.enabled = currentXrEnabled;
      renderTarget.texture.needsPMREMUpdate = true;
    }
  }]);

  return CubeCamera;
}(Object3D);

exports.CubeCamera = CubeCamera;

var CubeTexture = /*#__PURE__*/function (_Texture3) {
  _inherits(CubeTexture, _Texture3);

  var _super28 = _createSuper(CubeTexture);

  function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
    var _this19;

    _classCallCheck(this, CubeTexture);

    images = images !== undefined ? images : [];
    mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
    _this19 = _super28.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    _this19.flipY = false;
    return _this19;
  }

  _createClass(CubeTexture, [{
    key: "images",
    get: function get() {
      return this.image;
    },
    set: function set(value) {
      this.image = value;
    }
  }]);

  return CubeTexture;
}(Texture);

exports.CubeTexture = CubeTexture;
CubeTexture.prototype.isCubeTexture = true;

var WebGLCubeRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget4) {
  _inherits(WebGLCubeRenderTarget, _WebGLRenderTarget4);

  var _super29 = _createSuper(WebGLCubeRenderTarget);

  function WebGLCubeRenderTarget(size, options = {}) {
    var _this20;

    _classCallCheck(this, WebGLCubeRenderTarget);

    _this20 = _super29.call(this, size, size, options);
    var image = {
      width: size,
      height: size,
      depth: 1
    };
    var images = [image, image, image, image, image, image];
    _this20.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding); // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
    // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
    // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
    // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
    // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
    // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

    _this20.texture.isRenderTargetTexture = true;
    _this20.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
    _this20.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
    return _this20;
  }

  _createClass(WebGLCubeRenderTarget, [{
    key: "fromEquirectangularTexture",
    value: function fromEquirectangularTexture(renderer, texture) {
      this.texture.type = texture.type;
      this.texture.encoding = texture.encoding;
      this.texture.generateMipmaps = texture.generateMipmaps;
      this.texture.minFilter = texture.minFilter;
      this.texture.magFilter = texture.magFilter;
      var shader = {
        uniforms: {
          tEquirect: {
            value: null
          }
        },
        vertexShader:
        /* glsl */
        "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
        fragmentShader:
        /* glsl */
        "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"
      };
      var geometry = new BoxGeometry(5, 5, 5);
      var material = new ShaderMaterial({
        name: 'CubemapFromEquirect',
        uniforms: cloneUniforms(shader.uniforms),
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
        side: BackSide,
        blending: NoBlending
      });
      material.uniforms.tEquirect.value = texture;
      var mesh = new Mesh(geometry, material);
      var currentMinFilter = texture.minFilter; // Avoid blurred poles

      if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
      var camera = new CubeCamera(1, 10, this);
      camera.update(renderer, mesh);
      texture.minFilter = currentMinFilter;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
  }, {
    key: "clear",
    value: function clear(renderer, color, depth, stencil) {
      var currentRenderTarget = renderer.getRenderTarget();

      for (var _i67 = 0; _i67 < 6; _i67++) {
        renderer.setRenderTarget(this, _i67);
        renderer.clear(color, depth, stencil);
      }

      renderer.setRenderTarget(currentRenderTarget);
    }
  }]);

  return WebGLCubeRenderTarget;
}(WebGLRenderTarget);

exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;
WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

var _vector1 = /*@__PURE__*/new Vector3();

var _vector2 = /*@__PURE__*/new Vector3();

var _normalMatrix = /*@__PURE__*/new Matrix3();

var Plane = /*#__PURE__*/function () {
  function Plane(normal = new Vector3(1, 0, 0), constant = 0) {
    _classCallCheck(this, Plane);

    // normal is assumed to be normalized
    this.normal = normal;
    this.constant = constant;
  }

  _createClass(Plane, [{
    key: "set",
    value: function set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
  }, {
    key: "setComponents",
    value: function setComponents(x, y, z, w) {
      this.normal.set(x, y, z);
      this.constant = w;
      return this;
    }
  }, {
    key: "setFromNormalAndCoplanarPoint",
    value: function setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
  }, {
    key: "setFromCoplanarPoints",
    value: function setFromCoplanarPoints(a, b, c) {
      var normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?


      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
  }, {
    key: "normalize",
    value: function normalize() {
      // Note: will lead to a divide by zero if the plane is invalid.
      var inverseNormalLength = 1.0 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
  }, {
    key: "negate",
    value: function negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
  }, {
    key: "distanceToPoint",
    value: function distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
  }, {
    key: "distanceToSphere",
    value: function distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
  }, {
    key: "projectPoint",
    value: function projectPoint(point, target) {
      return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
    }
  }, {
    key: "intersectLine",
    value: function intersectLine(line, target) {
      var direction = line.delta(_vector1);
      var denominator = this.normal.dot(direction);

      if (denominator === 0) {
        // line is coplanar, return origin
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        } // Unsure if this is the correct method to handle this case.


        return null;
      }

      var t = -(line.start.dot(this.normal) + this.constant) / denominator;

      if (t < 0 || t > 1) {
        return null;
      }

      return target.copy(direction).multiplyScalar(t).add(line.start);
    }
  }, {
    key: "intersectsLine",
    value: function intersectsLine(line) {
      // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
      var startSign = this.distanceToPoint(line.start);
      var endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      return box.intersectsPlane(this);
    }
  }, {
    key: "intersectsSphere",
    value: function intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
  }, {
    key: "coplanarPoint",
    value: function coplanarPoint(target) {
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix, optionalNormalMatrix) {
      var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);

      var referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      var normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
  }, {
    key: "translate",
    value: function translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
  }, {
    key: "equals",
    value: function equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Plane;
}();

exports.Plane = Plane;
Plane.prototype.isPlane = true;

var _sphere$2 = /*@__PURE__*/new Sphere();

var _vector$7 = /*@__PURE__*/new Vector3();

var Frustum = /*#__PURE__*/function () {
  function Frustum(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
    _classCallCheck(this, Frustum);

    this.planes = [p0, p1, p2, p3, p4, p5];
  }

  _createClass(Frustum, [{
    key: "set",
    value: function set(p0, p1, p2, p3, p4, p5) {
      var planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(frustum) {
      var planes = this.planes;

      for (var _i68 = 0; _i68 < 6; _i68++) {
        planes[_i68].copy(frustum.planes[_i68]);
      }

      return this;
    }
  }, {
    key: "setFromProjectionMatrix",
    value: function setFromProjectionMatrix(m) {
      var planes = this.planes;
      var me = m.elements;
      var me0 = me[0],
          me1 = me[1],
          me2 = me[2],
          me3 = me[3];
      var me4 = me[4],
          me5 = me[5],
          me6 = me[6],
          me7 = me[7];
      var me8 = me[8],
          me9 = me[9],
          me10 = me[10],
          me11 = me[11];
      var me12 = me[12],
          me13 = me[13],
          me14 = me[14],
          me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      return this;
    }
  }, {
    key: "intersectsObject",
    value: function intersectsObject(object) {
      var geometry = object.geometry;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

      _sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);

      return this.intersectsSphere(_sphere$2);
    }
  }, {
    key: "intersectsSprite",
    value: function intersectsSprite(sprite) {
      _sphere$2.center.set(0, 0, 0);

      _sphere$2.radius = 0.7071067811865476;

      _sphere$2.applyMatrix4(sprite.matrixWorld);

      return this.intersectsSphere(_sphere$2);
    }
  }, {
    key: "intersectsSphere",
    value: function intersectsSphere(sphere) {
      var planes = this.planes;
      var center = sphere.center;
      var negRadius = -sphere.radius;

      for (var _i69 = 0; _i69 < 6; _i69++) {
        var distance = planes[_i69].distanceToPoint(center);

        if (distance < negRadius) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      var planes = this.planes;

      for (var _i70 = 0; _i70 < 6; _i70++) {
        var plane = planes[_i70]; // corner at max distance

        _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;

        if (plane.distanceToPoint(_vector$7) < 0) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(point) {
      var planes = this.planes;

      for (var _i71 = 0; _i71 < 6; _i71++) {
        if (planes[_i71].distanceToPoint(point) < 0) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Frustum;
}();

exports.Frustum = Frustum;

function WebGLAnimation() {
  var context = null;
  var isAnimating = false;
  var animationLoop = null;
  var requestId = null;

  function onAnimationFrame(time, frame) {
    animationLoop(time, frame);
    requestId = context.requestAnimationFrame(onAnimationFrame);
  }

  return {
    start: function start() {
      if (isAnimating === true) return;
      if (animationLoop === null) return;
      requestId = context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function stop() {
      context.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function setAnimationLoop(callback) {
      animationLoop = callback;
    },
    setContext: function setContext(value) {
      context = value;
    }
  };
}

function WebGLAttributes(gl, capabilities) {
  var isWebGL2 = capabilities.isWebGL2;
  var buffers = new WeakMap();

  function createBuffer(attribute, bufferType) {
    var array = attribute.array;
    var usage = attribute.usage;
    var buffer = gl.createBuffer();
    gl.bindBuffer(bufferType, buffer);
    gl.bufferData(bufferType, array, usage);
    attribute.onUploadCallback();
    var type;

    if (array instanceof Float32Array) {
      type = 5126;
    } else if (array instanceof Uint16Array) {
      if (attribute.isFloat16BufferAttribute) {
        if (isWebGL2) {
          type = 5131;
        } else {
          throw new Error('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');
        }
      } else {
        type = 5123;
      }
    } else if (array instanceof Int16Array) {
      type = 5122;
    } else if (array instanceof Uint32Array) {
      type = 5125;
    } else if (array instanceof Int32Array) {
      type = 5124;
    } else if (array instanceof Int8Array) {
      type = 5120;
    } else if (array instanceof Uint8Array) {
      type = 5121;
    } else if (array instanceof Uint8ClampedArray) {
      type = 5121;
    } else {
      throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + array);
    }

    return {
      buffer: buffer,
      type: type,
      bytesPerElement: array.BYTES_PER_ELEMENT,
      version: attribute.version
    };
  }

  function updateBuffer(buffer, attribute, bufferType) {
    var array = attribute.array;
    var updateRange = attribute.updateRange;
    gl.bindBuffer(bufferType, buffer);

    if (updateRange.count === -1) {
      // Not using update ranges
      gl.bufferSubData(bufferType, 0, array);
    } else {
      if (isWebGL2) {
        gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
      } else {
        gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
      }

      updateRange.count = -1; // reset range
    }
  } //


  function get(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    return buffers.get(attribute);
  }

  function remove(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    var data = buffers.get(attribute);

    if (data) {
      gl.deleteBuffer(data.buffer);
      buffers.delete(attribute);
    }
  }

  function update(attribute, bufferType) {
    if (attribute.isGLBufferAttribute) {
      var cached = buffers.get(attribute);

      if (!cached || cached.version < attribute.version) {
        buffers.set(attribute, {
          buffer: attribute.buffer,
          type: attribute.type,
          bytesPerElement: attribute.elementSize,
          version: attribute.version
        });
      }

      return;
    }

    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    var data = buffers.get(attribute);

    if (data === undefined) {
      buffers.set(attribute, createBuffer(attribute, bufferType));
    } else if (data.version < attribute.version) {
      updateBuffer(data.buffer, attribute, bufferType);
      data.version = attribute.version;
    }
  }

  return {
    get: get,
    remove: remove,
    update: update
  };
}

var PlaneGeometry = /*#__PURE__*/function (_BufferGeometry2) {
  _inherits(PlaneGeometry, _BufferGeometry2);

  var _super30 = _createSuper(PlaneGeometry);

  function PlaneGeometry(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
    var _this21;

    _classCallCheck(this, PlaneGeometry);

    _this21 = _super30.call(this);
    _this21.type = 'PlaneGeometry';
    _this21.parameters = {
      width: width,
      height: height,
      widthSegments: widthSegments,
      heightSegments: heightSegments
    };
    var width_half = width / 2;
    var height_half = height / 2;
    var gridX = Math.floor(widthSegments);
    var gridY = Math.floor(heightSegments);
    var gridX1 = gridX + 1;
    var gridY1 = gridY + 1;
    var segment_width = width / gridX;
    var segment_height = height / gridY; //

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = [];

    for (var iy = 0; iy < gridY1; iy++) {
      var y = iy * segment_height - height_half;

      for (var ix = 0; ix < gridX1; ix++) {
        var x = ix * segment_width - width_half;
        vertices.push(x, -y, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }

    for (var _iy2 = 0; _iy2 < gridY; _iy2++) {
      for (var _ix2 = 0; _ix2 < gridX; _ix2++) {
        var a = _ix2 + gridX1 * _iy2;
        var b = _ix2 + gridX1 * (_iy2 + 1);
        var c = _ix2 + 1 + gridX1 * (_iy2 + 1);
        var d = _ix2 + 1 + gridX1 * _iy2;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }

    _this21.setIndex(indices);

    _this21.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this21.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this21.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    return _this21;
  }

  _createClass(PlaneGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  }]);

  return PlaneGeometry;
}(BufferGeometry);

exports.PlaneGeometry = exports.PlaneBufferGeometry = PlaneGeometry;
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";
var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";
var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";
var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";
var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";
var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";
var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";
var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
var vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
var fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
var vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
var fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";
var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
var vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";
var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";
var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
var vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var ShaderChunk = {
  alphamap_fragment: alphamap_fragment,
  alphamap_pars_fragment: alphamap_pars_fragment,
  alphatest_fragment: alphatest_fragment,
  alphatest_pars_fragment: alphatest_pars_fragment,
  aomap_fragment: aomap_fragment,
  aomap_pars_fragment: aomap_pars_fragment,
  begin_vertex: begin_vertex,
  beginnormal_vertex: beginnormal_vertex,
  bsdfs: bsdfs,
  bumpmap_pars_fragment: bumpmap_pars_fragment,
  clipping_planes_fragment: clipping_planes_fragment,
  clipping_planes_pars_fragment: clipping_planes_pars_fragment,
  clipping_planes_pars_vertex: clipping_planes_pars_vertex,
  clipping_planes_vertex: clipping_planes_vertex,
  color_fragment: color_fragment,
  color_pars_fragment: color_pars_fragment,
  color_pars_vertex: color_pars_vertex,
  color_vertex: color_vertex,
  common: common,
  cube_uv_reflection_fragment: cube_uv_reflection_fragment,
  defaultnormal_vertex: defaultnormal_vertex,
  displacementmap_pars_vertex: displacementmap_pars_vertex,
  displacementmap_vertex: displacementmap_vertex,
  emissivemap_fragment: emissivemap_fragment,
  emissivemap_pars_fragment: emissivemap_pars_fragment,
  encodings_fragment: encodings_fragment,
  encodings_pars_fragment: encodings_pars_fragment,
  envmap_fragment: envmap_fragment,
  envmap_common_pars_fragment: envmap_common_pars_fragment,
  envmap_pars_fragment: envmap_pars_fragment,
  envmap_pars_vertex: envmap_pars_vertex,
  envmap_physical_pars_fragment: envmap_physical_pars_fragment,
  envmap_vertex: envmap_vertex,
  fog_vertex: fog_vertex,
  fog_pars_vertex: fog_pars_vertex,
  fog_fragment: fog_fragment,
  fog_pars_fragment: fog_pars_fragment,
  gradientmap_pars_fragment: gradientmap_pars_fragment,
  lightmap_fragment: lightmap_fragment,
  lightmap_pars_fragment: lightmap_pars_fragment,
  lights_lambert_vertex: lights_lambert_vertex,
  lights_pars_begin: lights_pars_begin,
  lights_toon_fragment: lights_toon_fragment,
  lights_toon_pars_fragment: lights_toon_pars_fragment,
  lights_phong_fragment: lights_phong_fragment,
  lights_phong_pars_fragment: lights_phong_pars_fragment,
  lights_physical_fragment: lights_physical_fragment,
  lights_physical_pars_fragment: lights_physical_pars_fragment,
  lights_fragment_begin: lights_fragment_begin,
  lights_fragment_maps: lights_fragment_maps,
  lights_fragment_end: lights_fragment_end,
  logdepthbuf_fragment: logdepthbuf_fragment,
  logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
  logdepthbuf_vertex: logdepthbuf_vertex,
  map_fragment: map_fragment,
  map_pars_fragment: map_pars_fragment,
  map_particle_fragment: map_particle_fragment,
  map_particle_pars_fragment: map_particle_pars_fragment,
  metalnessmap_fragment: metalnessmap_fragment,
  metalnessmap_pars_fragment: metalnessmap_pars_fragment,
  morphcolor_vertex: morphcolor_vertex,
  morphnormal_vertex: morphnormal_vertex,
  morphtarget_pars_vertex: morphtarget_pars_vertex,
  morphtarget_vertex: morphtarget_vertex,
  normal_fragment_begin: normal_fragment_begin,
  normal_fragment_maps: normal_fragment_maps,
  normal_pars_fragment: normal_pars_fragment,
  normal_pars_vertex: normal_pars_vertex,
  normal_vertex: normal_vertex,
  normalmap_pars_fragment: normalmap_pars_fragment,
  clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
  clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
  clearcoat_pars_fragment: clearcoat_pars_fragment,
  output_fragment: output_fragment,
  packing: packing,
  premultiplied_alpha_fragment: premultiplied_alpha_fragment,
  project_vertex: project_vertex,
  dithering_fragment: dithering_fragment,
  dithering_pars_fragment: dithering_pars_fragment,
  roughnessmap_fragment: roughnessmap_fragment,
  roughnessmap_pars_fragment: roughnessmap_pars_fragment,
  shadowmap_pars_fragment: shadowmap_pars_fragment,
  shadowmap_pars_vertex: shadowmap_pars_vertex,
  shadowmap_vertex: shadowmap_vertex,
  shadowmask_pars_fragment: shadowmask_pars_fragment,
  skinbase_vertex: skinbase_vertex,
  skinning_pars_vertex: skinning_pars_vertex,
  skinning_vertex: skinning_vertex,
  skinnormal_vertex: skinnormal_vertex,
  specularmap_fragment: specularmap_fragment,
  specularmap_pars_fragment: specularmap_pars_fragment,
  tonemapping_fragment: tonemapping_fragment,
  tonemapping_pars_fragment: tonemapping_pars_fragment,
  transmission_fragment: transmission_fragment,
  transmission_pars_fragment: transmission_pars_fragment,
  uv_pars_fragment: uv_pars_fragment,
  uv_pars_vertex: uv_pars_vertex,
  uv_vertex: uv_vertex,
  uv2_pars_fragment: uv2_pars_fragment,
  uv2_pars_vertex: uv2_pars_vertex,
  uv2_vertex: uv2_vertex,
  worldpos_vertex: worldpos_vertex,
  background_vert: vertex$g,
  background_frag: fragment$g,
  cube_vert: vertex$f,
  cube_frag: fragment$f,
  depth_vert: vertex$e,
  depth_frag: fragment$e,
  distanceRGBA_vert: vertex$d,
  distanceRGBA_frag: fragment$d,
  equirect_vert: vertex$c,
  equirect_frag: fragment$c,
  linedashed_vert: vertex$b,
  linedashed_frag: fragment$b,
  meshbasic_vert: vertex$a,
  meshbasic_frag: fragment$a,
  meshlambert_vert: vertex$9,
  meshlambert_frag: fragment$9,
  meshmatcap_vert: vertex$8,
  meshmatcap_frag: fragment$8,
  meshnormal_vert: vertex$7,
  meshnormal_frag: fragment$7,
  meshphong_vert: vertex$6,
  meshphong_frag: fragment$6,
  meshphysical_vert: vertex$5,
  meshphysical_frag: fragment$5,
  meshtoon_vert: vertex$4,
  meshtoon_frag: fragment$4,
  points_vert: vertex$3,
  points_frag: fragment$3,
  shadow_vert: vertex$2,
  shadow_frag: fragment$2,
  sprite_vert: vertex$1,
  sprite_frag: fragment$1
};
/**
 * Uniforms library for shared webgl shaders
 */

exports.ShaderChunk = ShaderChunk;
var UniformsLib = {
  common: {
    diffuse: {
      value: new Color(0xffffff)
    },
    opacity: {
      value: 1.0
    },
    map: {
      value: null
    },
    uvTransform: {
      value: new Matrix3()
    },
    uv2Transform: {
      value: new Matrix3()
    },
    alphaMap: {
      value: null
    },
    alphaTest: {
      value: 0
    }
  },
  specularmap: {
    specularMap: {
      value: null
    }
  },
  envmap: {
    envMap: {
      value: null
    },
    flipEnvMap: {
      value: -1
    },
    reflectivity: {
      value: 1.0
    },
    // basic, lambert, phong
    ior: {
      value: 1.5
    },
    // physical
    refractionRatio: {
      value: 0.98
    } // basic, lambert, phong

  },
  aomap: {
    aoMap: {
      value: null
    },
    aoMapIntensity: {
      value: 1
    }
  },
  lightmap: {
    lightMap: {
      value: null
    },
    lightMapIntensity: {
      value: 1
    }
  },
  emissivemap: {
    emissiveMap: {
      value: null
    }
  },
  bumpmap: {
    bumpMap: {
      value: null
    },
    bumpScale: {
      value: 1
    }
  },
  normalmap: {
    normalMap: {
      value: null
    },
    normalScale: {
      value: new Vector2(1, 1)
    }
  },
  displacementmap: {
    displacementMap: {
      value: null
    },
    displacementScale: {
      value: 1
    },
    displacementBias: {
      value: 0
    }
  },
  roughnessmap: {
    roughnessMap: {
      value: null
    }
  },
  metalnessmap: {
    metalnessMap: {
      value: null
    }
  },
  gradientmap: {
    gradientMap: {
      value: null
    }
  },
  fog: {
    fogDensity: {
      value: 0.00025
    },
    fogNear: {
      value: 1
    },
    fogFar: {
      value: 2000
    },
    fogColor: {
      value: new Color(0xffffff)
    }
  },
  lights: {
    ambientLightColor: {
      value: []
    },
    lightProbe: {
      value: []
    },
    directionalLights: {
      value: [],
      properties: {
        direction: {},
        color: {}
      }
    },
    directionalLightShadows: {
      value: [],
      properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }
    },
    directionalShadowMap: {
      value: []
    },
    directionalShadowMatrix: {
      value: []
    },
    spotLights: {
      value: [],
      properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      }
    },
    spotLightShadows: {
      value: [],
      properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }
    },
    spotShadowMap: {
      value: []
    },
    spotShadowMatrix: {
      value: []
    },
    pointLights: {
      value: [],
      properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      }
    },
    pointLightShadows: {
      value: [],
      properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      }
    },
    pointShadowMap: {
      value: []
    },
    pointShadowMatrix: {
      value: []
    },
    hemisphereLights: {
      value: [],
      properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      }
    },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: {
      value: [],
      properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      }
    },
    ltc_1: {
      value: null
    },
    ltc_2: {
      value: null
    }
  },
  points: {
    diffuse: {
      value: new Color(0xffffff)
    },
    opacity: {
      value: 1.0
    },
    size: {
      value: 1.0
    },
    scale: {
      value: 1.0
    },
    map: {
      value: null
    },
    alphaMap: {
      value: null
    },
    alphaTest: {
      value: 0
    },
    uvTransform: {
      value: new Matrix3()
    }
  },
  sprite: {
    diffuse: {
      value: new Color(0xffffff)
    },
    opacity: {
      value: 1.0
    },
    center: {
      value: new Vector2(0.5, 0.5)
    },
    rotation: {
      value: 0.0
    },
    map: {
      value: null
    },
    alphaMap: {
      value: null
    },
    alphaTest: {
      value: 0
    },
    uvTransform: {
      value: new Matrix3()
    }
  }
};
exports.UniformsLib = UniformsLib;
var ShaderLib = {
  basic: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      }
    }]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      },
      specular: {
        value: new Color(0x111111)
      },
      shininess: {
        value: 30
      }
    }]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      },
      roughness: {
        value: 1.0
      },
      metalness: {
        value: 0.0
      },
      envMapIntensity: {
        value: 1
      } // temporary

    }]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  toon: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      }
    }]),
    vertexShader: ShaderChunk.meshtoon_vert,
    fragmentShader: ShaderChunk.meshtoon_frag
  },
  matcap: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {
      matcap: {
        value: null
      }
    }]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {
      scale: {
        value: 1
      },
      dashSize: {
        value: 1
      },
      totalSize: {
        value: 2
      }
    }]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {
      opacity: {
        value: 1.0
      }
    }]),
    vertexShader: ShaderChunk.meshnormal_vert,
    fragmentShader: ShaderChunk.meshnormal_frag
  },
  sprite: {
    uniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: {
        value: new Matrix3()
      },
      t2D: {
        value: null
      }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },

  /* -------------------------------------------------------------------------
  //	Cube map shader
   ------------------------------------------------------------------------- */
  cube: {
    uniforms: mergeUniforms([UniformsLib.envmap, {
      opacity: {
        value: 1.0
      }
    }]),
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: {
        value: null
      }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {
      referencePosition: {
        value: new Vector3()
      },
      nearDistance: {
        value: 1
      },
      farDistance: {
        value: 1000
      }
    }]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {
      color: {
        value: new Color(0x00000)
      },
      opacity: {
        value: 1.0
      }
    }]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
exports.ShaderLib = ShaderLib;
ShaderLib.physical = {
  uniforms: mergeUniforms([ShaderLib.standard.uniforms, {
    clearcoat: {
      value: 0
    },
    clearcoatMap: {
      value: null
    },
    clearcoatRoughness: {
      value: 0
    },
    clearcoatRoughnessMap: {
      value: null
    },
    clearcoatNormalScale: {
      value: new Vector2(1, 1)
    },
    clearcoatNormalMap: {
      value: null
    },
    sheen: {
      value: 0
    },
    sheenColor: {
      value: new Color(0x000000)
    },
    sheenColorMap: {
      value: null
    },
    sheenRoughness: {
      value: 1
    },
    sheenRoughnessMap: {
      value: null
    },
    transmission: {
      value: 0
    },
    transmissionMap: {
      value: null
    },
    transmissionSamplerSize: {
      value: new Vector2()
    },
    transmissionSamplerMap: {
      value: null
    },
    thickness: {
      value: 0
    },
    thicknessMap: {
      value: null
    },
    attenuationDistance: {
      value: 0
    },
    attenuationColor: {
      value: new Color(0x000000)
    },
    specularIntensity: {
      value: 1
    },
    specularIntensityMap: {
      value: null
    },
    specularColor: {
      value: new Color(1, 1, 1)
    },
    specularColorMap: {
      value: null
    }
  }]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};

function WebGLBackground(renderer, cubemaps, state, objects, alpha, premultipliedAlpha) {
  var clearColor = new Color(0x000000);
  var clearAlpha = alpha === true ? 0 : 1;
  var planeMesh;
  var boxMesh;
  var currentBackground = null;
  var currentBackgroundVersion = 0;
  var currentTonemapping = null;

  function render(renderList, scene) {
    var forceClear = false;
    var background = scene.isScene === true ? scene.background : null;

    if (background && background.isTexture) {
      background = cubemaps.get(background);
    } // Ignore background in AR
    // TODO: Reconsider this.


    var xr = renderer.xr;
    var session = xr.getSession && xr.getSession();

    if (session && session.environmentBlendMode === 'additive') {
      background = null;
    }

    if (background === null) {
      setClear(clearColor, clearAlpha);
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
    }

    if (renderer.autoClear || forceClear) {
      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
    }

    if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
      if (boxMesh === undefined) {
        boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
          name: 'BackgroundCubeMaterial',
          uniforms: cloneUniforms(ShaderLib.cube.uniforms),
          vertexShader: ShaderLib.cube.vertexShader,
          fragmentShader: ShaderLib.cube.fragmentShader,
          side: BackSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        boxMesh.geometry.deleteAttribute('normal');
        boxMesh.geometry.deleteAttribute('uv');

        boxMesh.onBeforeRender = function (renderer, scene, camera) {
          this.matrixWorld.copyPosition(camera.matrixWorld);
        }; // enable code injection for non-built-in material


        Object.defineProperty(boxMesh.material, 'envMap', {
          get: function get() {
            return this.uniforms.envMap.value;
          }
        });
        objects.update(boxMesh);
      }

      boxMesh.material.uniforms.envMap.value = background;
      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;

      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer.toneMapping;
      } // push to the pre-sorted opaque render list


      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === undefined) {
        planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
          name: 'BackgroundMaterial',
          uniforms: cloneUniforms(ShaderLib.background.uniforms),
          vertexShader: ShaderLib.background.vertexShader,
          fragmentShader: ShaderLib.background.fragmentShader,
          side: FrontSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material

        Object.defineProperty(planeMesh.material, 'map', {
          get: function get() {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }

      planeMesh.material.uniforms.t2D.value = background;

      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }

      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);

      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer.toneMapping;
      } // push to the pre-sorted opaque render list


      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }

  function setClear(color, alpha) {
    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
  }

  return {
    getClearColor: function getClearColor() {
      return clearColor;
    },
    setClearColor: function setClearColor(color, alpha = 1) {
      clearColor.set(color);
      clearAlpha = alpha;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function getClearAlpha() {
      return clearAlpha;
    },
    setClearAlpha: function setClearAlpha(alpha) {
      clearAlpha = alpha;
      setClear(clearColor, clearAlpha);
    },
    render: render
  };
}

function WebGLBindingStates(gl, extensions, attributes, capabilities) {
  var maxVertexAttributes = gl.getParameter(34921);
  var extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');
  var vaoAvailable = capabilities.isWebGL2 || extension !== null;
  var bindingStates = {};
  var defaultState = createBindingState(null);
  var currentState = defaultState;
  var forceUpdate = false;

  function setup(object, material, program, geometry, index) {
    var updateBuffers = false;

    if (vaoAvailable) {
      var state = getBindingState(geometry, program, material);

      if (currentState !== state) {
        currentState = state;
        bindVertexArrayObject(currentState.object);
      }

      updateBuffers = needsUpdate(geometry, index);
      if (updateBuffers) saveCache(geometry, index);
    } else {
      var wireframe = material.wireframe === true;

      if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
        currentState.geometry = geometry.id;
        currentState.program = program.id;
        currentState.wireframe = wireframe;
        updateBuffers = true;
      }
    }

    if (object.isInstancedMesh === true) {
      updateBuffers = true;
    }

    if (index !== null) {
      attributes.update(index, 34963);
    }

    if (updateBuffers || forceUpdate) {
      forceUpdate = false;
      setupVertexAttributes(object, material, program, geometry);

      if (index !== null) {
        gl.bindBuffer(34963, attributes.get(index).buffer);
      }
    }
  }

  function createVertexArrayObject() {
    if (capabilities.isWebGL2) return gl.createVertexArray();
    return extension.createVertexArrayOES();
  }

  function bindVertexArrayObject(vao) {
    if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
    return extension.bindVertexArrayOES(vao);
  }

  function deleteVertexArrayObject(vao) {
    if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
    return extension.deleteVertexArrayOES(vao);
  }

  function getBindingState(geometry, program, material) {
    var wireframe = material.wireframe === true;
    var programMap = bindingStates[geometry.id];

    if (programMap === undefined) {
      programMap = {};
      bindingStates[geometry.id] = programMap;
    }

    var stateMap = programMap[program.id];

    if (stateMap === undefined) {
      stateMap = {};
      programMap[program.id] = stateMap;
    }

    var state = stateMap[wireframe];

    if (state === undefined) {
      state = createBindingState(createVertexArrayObject());
      stateMap[wireframe] = state;
    }

    return state;
  }

  function createBindingState(vao) {
    var newAttributes = [];
    var enabledAttributes = [];
    var attributeDivisors = [];

    for (var _i72 = 0; _i72 < maxVertexAttributes; _i72++) {
      newAttributes[_i72] = 0;
      enabledAttributes[_i72] = 0;
      attributeDivisors[_i72] = 0;
    }

    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes: newAttributes,
      enabledAttributes: enabledAttributes,
      attributeDivisors: attributeDivisors,
      object: vao,
      attributes: {},
      index: null
    };
  }

  function needsUpdate(geometry, index) {
    var cachedAttributes = currentState.attributes;
    var geometryAttributes = geometry.attributes;
    var attributesNum = 0;

    for (var key in geometryAttributes) {
      var cachedAttribute = cachedAttributes[key];
      var geometryAttribute = geometryAttributes[key];
      if (cachedAttribute === undefined) return true;
      if (cachedAttribute.attribute !== geometryAttribute) return true;
      if (cachedAttribute.data !== geometryAttribute.data) return true;
      attributesNum++;
    }

    if (currentState.attributesNum !== attributesNum) return true;
    if (currentState.index !== index) return true;
    return false;
  }

  function saveCache(geometry, index) {
    var cache = {};
    var attributes = geometry.attributes;
    var attributesNum = 0;

    for (var key in attributes) {
      var attribute = attributes[key];
      var data = {};
      data.attribute = attribute;

      if (attribute.data) {
        data.data = attribute.data;
      }

      cache[key] = data;
      attributesNum++;
    }

    currentState.attributes = cache;
    currentState.attributesNum = attributesNum;
    currentState.index = index;
  }

  function initAttributes() {
    var newAttributes = currentState.newAttributes;

    for (var _i73 = 0, il = newAttributes.length; _i73 < il; _i73++) {
      newAttributes[_i73] = 0;
    }
  }

  function enableAttribute(attribute) {
    enableAttributeAndDivisor(attribute, 0);
  }

  function enableAttributeAndDivisor(attribute, meshPerAttribute) {
    var newAttributes = currentState.newAttributes;
    var enabledAttributes = currentState.enabledAttributes;
    var attributeDivisors = currentState.attributeDivisors;
    newAttributes[attribute] = 1;

    if (enabledAttributes[attribute] === 0) {
      gl.enableVertexAttribArray(attribute);
      enabledAttributes[attribute] = 1;
    }

    if (attributeDivisors[attribute] !== meshPerAttribute) {
      var _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');

      _extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);

      attributeDivisors[attribute] = meshPerAttribute;
    }
  }

  function disableUnusedAttributes() {
    var newAttributes = currentState.newAttributes;
    var enabledAttributes = currentState.enabledAttributes;

    for (var _i74 = 0, il = enabledAttributes.length; _i74 < il; _i74++) {
      if (enabledAttributes[_i74] !== newAttributes[_i74]) {
        gl.disableVertexAttribArray(_i74);
        enabledAttributes[_i74] = 0;
      }
    }
  }

  function vertexAttribPointer(index, size, type, normalized, stride, offset) {
    if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {
      gl.vertexAttribIPointer(index, size, type, stride, offset);
    } else {
      gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
  }

  function setupVertexAttributes(object, material, program, geometry) {
    if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
      if (extensions.get('ANGLE_instanced_arrays') === null) return;
    }

    initAttributes();
    var geometryAttributes = geometry.attributes;
    var programAttributes = program.getAttributes();
    var materialDefaultAttributeValues = material.defaultAttributeValues;

    for (var name in programAttributes) {
      var programAttribute = programAttributes[name];

      if (programAttribute.location >= 0) {
        var geometryAttribute = geometryAttributes[name];

        if (geometryAttribute === undefined) {
          if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
          if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
        }

        if (geometryAttribute !== undefined) {
          var normalized = geometryAttribute.normalized;
          var size = geometryAttribute.itemSize;
          var attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore

          if (attribute === undefined) continue;
          var buffer = attribute.buffer;
          var type = attribute.type;
          var bytesPerElement = attribute.bytesPerElement;

          if (geometryAttribute.isInterleavedBufferAttribute) {
            var data = geometryAttribute.data;
            var stride = data.stride;
            var offset = geometryAttribute.offset;

            if (data.isInstancedInterleavedBuffer) {
              for (var _i75 = 0; _i75 < programAttribute.locationSize; _i75++) {
                enableAttributeAndDivisor(programAttribute.location + _i75, data.meshPerAttribute);
              }

              if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
                geometry._maxInstanceCount = data.meshPerAttribute * data.count;
              }
            } else {
              for (var _i76 = 0; _i76 < programAttribute.locationSize; _i76++) {
                enableAttribute(programAttribute.location + _i76);
              }
            }

            gl.bindBuffer(34962, buffer);

            for (var _i77 = 0; _i77 < programAttribute.locationSize; _i77++) {
              vertexAttribPointer(programAttribute.location + _i77, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * _i77) * bytesPerElement);
            }
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              for (var _i78 = 0; _i78 < programAttribute.locationSize; _i78++) {
                enableAttributeAndDivisor(programAttribute.location + _i78, geometryAttribute.meshPerAttribute);
              }

              if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {
                geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              for (var _i79 = 0; _i79 < programAttribute.locationSize; _i79++) {
                enableAttribute(programAttribute.location + _i79);
              }
            }

            gl.bindBuffer(34962, buffer);

            for (var _i80 = 0; _i80 < programAttribute.locationSize; _i80++) {
              vertexAttribPointer(programAttribute.location + _i80, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * _i80 * bytesPerElement);
            }
          }
        } else if (materialDefaultAttributeValues !== undefined) {
          var _value2 = materialDefaultAttributeValues[name];

          if (_value2 !== undefined) {
            switch (_value2.length) {
              case 2:
                gl.vertexAttrib2fv(programAttribute.location, _value2);
                break;

              case 3:
                gl.vertexAttrib3fv(programAttribute.location, _value2);
                break;

              case 4:
                gl.vertexAttrib4fv(programAttribute.location, _value2);
                break;

              default:
                gl.vertexAttrib1fv(programAttribute.location, _value2);
            }
          }
        }
      }
    }

    disableUnusedAttributes();
  }

  function dispose() {
    reset();

    for (var geometryId in bindingStates) {
      var programMap = bindingStates[geometryId];

      for (var programId in programMap) {
        var stateMap = programMap[programId];

        for (var wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }

        delete programMap[programId];
      }

      delete bindingStates[geometryId];
    }
  }

  function releaseStatesOfGeometry(geometry) {
    if (bindingStates[geometry.id] === undefined) return;
    var programMap = bindingStates[geometry.id];

    for (var programId in programMap) {
      var stateMap = programMap[programId];

      for (var wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }

      delete programMap[programId];
    }

    delete bindingStates[geometry.id];
  }

  function releaseStatesOfProgram(program) {
    for (var geometryId in bindingStates) {
      var programMap = bindingStates[geometryId];
      if (programMap[program.id] === undefined) continue;
      var stateMap = programMap[program.id];

      for (var wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }

      delete programMap[program.id];
    }
  }

  function reset() {
    resetDefaultState();
    forceUpdate = true;
    if (currentState === defaultState) return;
    currentState = defaultState;
    bindVertexArrayObject(currentState.object);
  } // for backward-compatibility


  function resetDefaultState() {
    defaultState.geometry = null;
    defaultState.program = null;
    defaultState.wireframe = false;
  }

  return {
    setup: setup,
    reset: reset,
    resetDefaultState: resetDefaultState,
    dispose: dispose,
    releaseStatesOfGeometry: releaseStatesOfGeometry,
    releaseStatesOfProgram: releaseStatesOfProgram,
    initAttributes: initAttributes,
    enableAttribute: enableAttribute,
    disableUnusedAttributes: disableUnusedAttributes
  };
}

function WebGLBufferRenderer(gl, extensions, info, capabilities) {
  var isWebGL2 = capabilities.isWebGL2;
  var mode;

  function setMode(value) {
    mode = value;
  }

  function render(start, count) {
    gl.drawArrays(mode, start, count);
    info.update(count, mode, 1);
  }

  function renderInstances(start, count, primcount) {
    if (primcount === 0) return;
    var extension, methodName;

    if (isWebGL2) {
      extension = gl;
      methodName = 'drawArraysInstanced';
    } else {
      extension = extensions.get('ANGLE_instanced_arrays');
      methodName = 'drawArraysInstancedANGLE';

      if (extension === null) {
        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
        return;
      }
    }

    extension[methodName](mode, start, count, primcount);
    info.update(count, mode, primcount);
  } //


  this.setMode = setMode;
  this.render = render;
  this.renderInstances = renderInstances;
}

function WebGLCapabilities(gl, extensions, parameters) {
  var maxAnisotropy;

  function getMaxAnisotropy() {
    if (maxAnisotropy !== undefined) return maxAnisotropy;

    if (extensions.has('EXT_texture_filter_anisotropic') === true) {
      var extension = extensions.get('EXT_texture_filter_anisotropic');
      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }

    return maxAnisotropy;
  }

  function getMaxPrecision(precision) {
    if (precision === 'highp') {
      if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
        return 'highp';
      }

      precision = 'mediump';
    }

    if (precision === 'mediump') {
      if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
        return 'mediump';
      }
    }

    return 'lowp';
  }

  var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
  var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
  var maxPrecision = getMaxPrecision(precision);

  if (maxPrecision !== precision) {
    console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
    precision = maxPrecision;
  }

  var drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');
  var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  var maxTextures = gl.getParameter(34930);
  var maxVertexTextures = gl.getParameter(35660);
  var maxTextureSize = gl.getParameter(3379);
  var maxCubemapSize = gl.getParameter(34076);
  var maxAttributes = gl.getParameter(34921);
  var maxVertexUniforms = gl.getParameter(36347);
  var maxVaryings = gl.getParameter(36348);
  var maxFragmentUniforms = gl.getParameter(36349);
  var vertexTextures = maxVertexTextures > 0;
  var floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');
  var floatVertexTextures = vertexTextures && floatFragmentTextures;
  var maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
  return {
    isWebGL2: isWebGL2,
    drawBuffers: drawBuffers,
    getMaxAnisotropy: getMaxAnisotropy,
    getMaxPrecision: getMaxPrecision,
    precision: precision,
    logarithmicDepthBuffer: logarithmicDepthBuffer,
    maxTextures: maxTextures,
    maxVertexTextures: maxVertexTextures,
    maxTextureSize: maxTextureSize,
    maxCubemapSize: maxCubemapSize,
    maxAttributes: maxAttributes,
    maxVertexUniforms: maxVertexUniforms,
    maxVaryings: maxVaryings,
    maxFragmentUniforms: maxFragmentUniforms,
    vertexTextures: vertexTextures,
    floatFragmentTextures: floatFragmentTextures,
    floatVertexTextures: floatVertexTextures,
    maxSamples: maxSamples
  };
}

function WebGLClipping(properties) {
  var scope = this;
  var globalState = null,
      numGlobalPlanes = 0,
      localClippingEnabled = false,
      renderingShadows = false;
  var plane = new Plane(),
      viewNormalMatrix = new Matrix3(),
      uniform = {
    value: null,
    needsUpdate: false
  };
  this.uniform = uniform;
  this.numPlanes = 0;
  this.numIntersection = 0;

  this.init = function (planes, enableLocalClipping, camera) {
    var enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    globalState = projectPlanes(planes, camera, 0);
    numGlobalPlanes = planes.length;
    return enabled;
  };

  this.beginShadows = function () {
    renderingShadows = true;
    projectPlanes(null);
  };

  this.endShadows = function () {
    renderingShadows = false;
    resetGlobalState();
  };

  this.setState = function (material, camera, useCache) {
    var planes = material.clippingPlanes,
        clipIntersection = material.clipIntersection,
        clipShadows = material.clipShadows;
    var materialProperties = properties.get(material);

    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      // there's no local clipping
      if (renderingShadows) {
        // there's no global clipping
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
          lGlobal = nGlobal * 4;
      var dstArray = materialProperties.clippingState || null;
      uniform.value = dstArray; // ensure unique state

      dstArray = projectPlanes(planes, camera, lGlobal, useCache);

      for (var _i81 = 0; _i81 !== lGlobal; ++_i81) {
        dstArray[_i81] = globalState[_i81];
      }

      materialProperties.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };

  function resetGlobalState() {
    if (uniform.value !== globalState) {
      uniform.value = globalState;
      uniform.needsUpdate = numGlobalPlanes > 0;
    }

    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }

  function projectPlanes(planes, camera, dstOffset, skipTransform) {
    var nPlanes = planes !== null ? planes.length : 0;
    var dstArray = null;

    if (nPlanes !== 0) {
      dstArray = uniform.value;

      if (skipTransform !== true || dstArray === null) {
        var flatSize = dstOffset + nPlanes * 4,
            viewMatrix = camera.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);

        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }

        for (var _i82 = 0, i4 = dstOffset; _i82 !== nPlanes; ++_i82, i4 += 4) {
          plane.copy(planes[_i82]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }

      uniform.value = dstArray;
      uniform.needsUpdate = true;
    }

    scope.numPlanes = nPlanes;
    scope.numIntersection = 0;
    return dstArray;
  }
}

function WebGLCubeMaps(renderer) {
  var cubemaps = new WeakMap();

  function mapTextureMapping(texture, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture.mapping = CubeRefractionMapping;
    }

    return texture;
  }

  function get(texture) {
    if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
      var mapping = texture.mapping;

      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
        if (cubemaps.has(texture)) {
          var cubemap = cubemaps.get(texture).texture;
          return mapTextureMapping(cubemap, texture.mapping);
        } else {
          var image = texture.image;

          if (image && image.height > 0) {
            var renderTarget = new WebGLCubeRenderTarget(image.height / 2);
            renderTarget.fromEquirectangularTexture(renderer, texture);
            cubemaps.set(texture, renderTarget);
            texture.addEventListener('dispose', onTextureDispose);
            return mapTextureMapping(renderTarget.texture, texture.mapping);
          } else {
            // image not yet ready. try the conversion next frame
            return null;
          }
        }
      }
    }

    return texture;
  }

  function onTextureDispose(event) {
    var texture = event.target;
    texture.removeEventListener('dispose', onTextureDispose);
    var cubemap = cubemaps.get(texture);

    if (cubemap !== undefined) {
      cubemaps.delete(texture);
      cubemap.dispose();
    }
  }

  function dispose() {
    cubemaps = new WeakMap();
  }

  return {
    get: get,
    dispose: dispose
  };
}

var OrthographicCamera = /*#__PURE__*/function (_Camera2) {
  _inherits(OrthographicCamera, _Camera2);

  var _super31 = _createSuper(OrthographicCamera);

  function OrthographicCamera(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {
    var _this22;

    _classCallCheck(this, OrthographicCamera);

    _this22 = _super31.call(this);
    _this22.type = 'OrthographicCamera';
    _this22.zoom = 1;
    _this22.view = null;
    _this22.left = left;
    _this22.right = right;
    _this22.top = top;
    _this22.bottom = bottom;
    _this22.near = near;
    _this22.far = far;

    _this22.updateProjectionMatrix();

    return _this22;
  }

  _createClass(OrthographicCamera, [{
    key: "copy",
    value: function copy(source, recursive) {
      _get(_getPrototypeOf(OrthographicCamera.prototype), "copy", this).call(this, source, recursive);

      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    }
  }, {
    key: "setViewOffset",
    value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }

      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
  }, {
    key: "clearViewOffset",
    value: function clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }

      this.updateProjectionMatrix();
    }
  }, {
    key: "updateProjectionMatrix",
    value: function updateProjectionMatrix() {
      var dx = (this.right - this.left) / (2 * this.zoom);
      var dy = (this.top - this.bottom) / (2 * this.zoom);
      var cx = (this.right + this.left) / 2;
      var cy = (this.top + this.bottom) / 2;
      var left = cx - dx;
      var right = cx + dx;
      var top = cy + dy;
      var bottom = cy - dy;

      if (this.view !== null && this.view.enabled) {
        var scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        var scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }

      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(OrthographicCamera.prototype), "toJSON", this).call(this, meta);

      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null) data.object.view = Object.assign({}, this.view);
      return data;
    }
  }]);

  return OrthographicCamera;
}(Camera);

exports.OrthographicCamera = OrthographicCamera;
OrthographicCamera.prototype.isOrthographicCamera = true;
var LOD_MIN = 4; // The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.

var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582]; // The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.

var MAX_SAMPLES = 20;

var _flatCamera = /*@__PURE__*/new OrthographicCamera();

var _clearColor = /*@__PURE__*/new Color();

var _oldTarget = null; // Golden Ratio

var PHI = (1 + Math.sqrt(5)) / 2;
var INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.

var _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];
/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/

var PMREMGenerator = /*#__PURE__*/function () {
  function PMREMGenerator(renderer) {
    _classCallCheck(this, PMREMGenerator);

    this._renderer = renderer;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;

    this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */


  _createClass(PMREMGenerator, [{
    key: "fromScene",
    value: function fromScene(scene, sigma = 0, near = 0.1, far = 100) {
      _oldTarget = this._renderer.getRenderTarget();

      this._setSize(256);

      var cubeUVRenderTarget = this._allocateTargets();

      cubeUVRenderTarget.depthBuffer = true;

      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);

      if (sigma > 0) {
        this._blur(cubeUVRenderTarget, 0, 0, sigma);
      }

      this._applyPMREM(cubeUVRenderTarget);

      this._cleanup(cubeUVRenderTarget);

      return cubeUVRenderTarget;
    }
    /**
     * Generates a PMREM from an equirectangular texture, which can be either LDR
     * or HDR. The ideal input image size is 1k (1024 x 512),
     * as this matches best with the 256 x 256 cubemap output.
     */

  }, {
    key: "fromEquirectangular",
    value: function fromEquirectangular(equirectangular, renderTarget = null) {
      return this._fromTexture(equirectangular, renderTarget);
    }
    /**
     * Generates a PMREM from an cubemap texture, which can be either LDR
     * or HDR. The ideal input cube size is 256 x 256,
     * as this matches best with the 256 x 256 cubemap output.
     */

  }, {
    key: "fromCubemap",
    value: function fromCubemap(cubemap, renderTarget = null) {
      return this._fromTexture(cubemap, renderTarget);
    }
    /**
     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */

  }, {
    key: "compileCubemapShader",
    value: function compileCubemapShader() {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();

        this._compileMaterial(this._cubemapMaterial);
      }
    }
    /**
     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */

  }, {
    key: "compileEquirectangularShader",
    value: function compileEquirectangularShader() {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();

        this._compileMaterial(this._equirectMaterial);
      }
    }
    /**
     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
     * one of them will cause any others to also become unusable.
     */

  }, {
    key: "dispose",
    value: function dispose() {
      this._dispose();

      if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
      if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
    } // private interface

  }, {
    key: "_setSize",
    value: function _setSize(cubeSize) {
      this._lodMax = Math.floor(Math.log2(cubeSize));
      this._cubeSize = Math.pow(2, this._lodMax);
    }
  }, {
    key: "_dispose",
    value: function _dispose() {
      if (this._blurMaterial !== null) this._blurMaterial.dispose();
      if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();

      for (var _i83 = 0; _i83 < this._lodPlanes.length; _i83++) {
        this._lodPlanes[_i83].dispose();
      }
    }
  }, {
    key: "_cleanup",
    value: function _cleanup(outputTarget) {
      this._renderer.setRenderTarget(_oldTarget);

      outputTarget.scissorTest = false;

      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
  }, {
    key: "_fromTexture",
    value: function _fromTexture(texture, renderTarget) {
      if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
        this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
      } else {
        // Equirectangular
        this._setSize(texture.image.width / 4);
      }

      _oldTarget = this._renderer.getRenderTarget();

      var cubeUVRenderTarget = renderTarget || this._allocateTargets();

      this._textureToCubeUV(texture, cubeUVRenderTarget);

      this._applyPMREM(cubeUVRenderTarget);

      this._cleanup(cubeUVRenderTarget);

      return cubeUVRenderTarget;
    }
  }, {
    key: "_allocateTargets",
    value: function _allocateTargets() {
      var width = 3 * Math.max(this._cubeSize, 16 * 7);
      var height = 4 * this._cubeSize - 32;
      var params = {
        magFilter: LinearFilter,
        minFilter: LinearFilter,
        generateMipmaps: false,
        type: HalfFloatType,
        format: RGBAFormat,
        encoding: LinearEncoding,
        depthBuffer: false
      };

      var cubeUVRenderTarget = _createRenderTarget(width, height, params);

      if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width) {
        if (this._pingPongRenderTarget !== null) {
          this._dispose();
        }

        this._pingPongRenderTarget = _createRenderTarget(width, height, params);
        var _lodMax = this._lodMax;

        var _createPlanes2 = _createPlanes(_lodMax);

        this._sizeLods = _createPlanes2.sizeLods;
        this._lodPlanes = _createPlanes2.lodPlanes;
        this._sigmas = _createPlanes2.sigmas;
        this._blurMaterial = _getBlurShader(_lodMax, width, height);
      }

      return cubeUVRenderTarget;
    }
  }, {
    key: "_compileMaterial",
    value: function _compileMaterial(material) {
      var tmpMesh = new Mesh(this._lodPlanes[0], material);

      this._renderer.compile(tmpMesh, _flatCamera);
    }
  }, {
    key: "_sceneToCubeUV",
    value: function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
      var fov = 90;
      var aspect = 1;
      var cubeCamera = new PerspectiveCamera(fov, aspect, near, far);
      var upSign = [1, -1, 1, 1, 1, 1];
      var forwardSign = [1, 1, 1, -1, -1, -1];
      var renderer = this._renderer;
      var originalAutoClear = renderer.autoClear;
      var toneMapping = renderer.toneMapping;
      renderer.getClearColor(_clearColor);
      renderer.toneMapping = NoToneMapping;
      renderer.autoClear = false;
      var backgroundMaterial = new MeshBasicMaterial({
        name: 'PMREM.Background',
        side: BackSide,
        depthWrite: false,
        depthTest: false
      });
      var backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
      var useSolidColor = false;
      var background = scene.background;

      if (background) {
        if (background.isColor) {
          backgroundMaterial.color.copy(background);
          scene.background = null;
          useSolidColor = true;
        }
      } else {
        backgroundMaterial.color.copy(_clearColor);
        useSolidColor = true;
      }

      for (var _i84 = 0; _i84 < 6; _i84++) {
        var col = _i84 % 3;

        if (col === 0) {
          cubeCamera.up.set(0, upSign[_i84], 0);
          cubeCamera.lookAt(forwardSign[_i84], 0, 0);
        } else if (col === 1) {
          cubeCamera.up.set(0, 0, upSign[_i84]);
          cubeCamera.lookAt(0, forwardSign[_i84], 0);
        } else {
          cubeCamera.up.set(0, upSign[_i84], 0);
          cubeCamera.lookAt(0, 0, forwardSign[_i84]);
        }

        var size = this._cubeSize;

        _setViewport(cubeUVRenderTarget, col * size, _i84 > 2 ? size : 0, size, size);

        renderer.setRenderTarget(cubeUVRenderTarget);

        if (useSolidColor) {
          renderer.render(backgroundBox, cubeCamera);
        }

        renderer.render(scene, cubeCamera);
      }

      backgroundBox.geometry.dispose();
      backgroundBox.material.dispose();
      renderer.toneMapping = toneMapping;
      renderer.autoClear = originalAutoClear;
      scene.background = background;
    }
  }, {
    key: "_textureToCubeUV",
    value: function _textureToCubeUV(texture, cubeUVRenderTarget) {
      var renderer = this._renderer;
      var isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;

      if (isCubeTexture) {
        if (this._cubemapMaterial === null) {
          this._cubemapMaterial = _getCubemapMaterial();
        }

        this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
      } else {
        if (this._equirectMaterial === null) {
          this._equirectMaterial = _getEquirectMaterial();
        }
      }

      var material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
      var mesh = new Mesh(this._lodPlanes[0], material);
      var uniforms = material.uniforms;
      uniforms['envMap'].value = texture;
      var size = this._cubeSize;

      _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);

      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(mesh, _flatCamera);
    }
  }, {
    key: "_applyPMREM",
    value: function _applyPMREM(cubeUVRenderTarget) {
      var renderer = this._renderer;
      var autoClear = renderer.autoClear;
      renderer.autoClear = false;

      for (var _i85 = 1; _i85 < this._lodPlanes.length; _i85++) {
        var sigma = Math.sqrt(this._sigmas[_i85] * this._sigmas[_i85] - this._sigmas[_i85 - 1] * this._sigmas[_i85 - 1]);
        var poleAxis = _axisDirections[(_i85 - 1) % _axisDirections.length];

        this._blur(cubeUVRenderTarget, _i85 - 1, _i85, sigma, poleAxis);
      }

      renderer.autoClear = autoClear;
    }
    /**
     * This is a two-pass Gaussian blur for a cubemap. Normally this is done
     * vertically and horizontally, but this breaks down on a cube. Here we apply
     * the blur latitudinally (around the poles), and then longitudinally (towards
     * the poles) to approximate the orthogonally-separable blur. It is least
     * accurate at the poles, but still does a decent job.
     */

  }, {
    key: "_blur",
    value: function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
      var pingPongRenderTarget = this._pingPongRenderTarget;

      this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);

      this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
    }
  }, {
    key: "_halfBlur",
    value: function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
      var renderer = this._renderer;
      var blurMaterial = this._blurMaterial;

      if (direction !== 'latitudinal' && direction !== 'longitudinal') {
        console.error('blur direction must be either latitudinal or longitudinal!');
      } // Number of standard deviations at which to cut off the discrete approximation.


      var STANDARD_DEVIATIONS = 3;
      var blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
      var blurUniforms = blurMaterial.uniforms;
      var pixels = this._sizeLods[lodIn] - 1;
      var radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
      var sigmaPixels = sigmaRadians / radiansPerPixel;
      var samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;

      if (samples > MAX_SAMPLES) {
        console.warn("sigmaRadians, ".concat(sigmaRadians, ", is too large and will clip, as it requested ").concat(samples, " samples when the maximum is set to ").concat(MAX_SAMPLES));
      }

      var weights = [];
      var sum = 0;

      for (var _i86 = 0; _i86 < MAX_SAMPLES; ++_i86) {
        var _x2 = _i86 / sigmaPixels;

        var weight = Math.exp(-_x2 * _x2 / 2);
        weights.push(weight);

        if (_i86 === 0) {
          sum += weight;
        } else if (_i86 < samples) {
          sum += 2 * weight;
        }
      }

      for (var _i87 = 0; _i87 < weights.length; _i87++) {
        weights[_i87] = weights[_i87] / sum;
      }

      blurUniforms['envMap'].value = targetIn.texture;
      blurUniforms['samples'].value = samples;
      blurUniforms['weights'].value = weights;
      blurUniforms['latitudinal'].value = direction === 'latitudinal';

      if (poleAxis) {
        blurUniforms['poleAxis'].value = poleAxis;
      }

      var _lodMax = this._lodMax;
      blurUniforms['dTheta'].value = radiansPerPixel;
      blurUniforms['mipInt'].value = _lodMax - lodIn;
      var outputSize = this._sizeLods[lodOut];
      var x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
      var y = 4 * (this._cubeSize - outputSize);

      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);

      renderer.setRenderTarget(targetOut);
      renderer.render(blurMesh, _flatCamera);
    }
  }]);

  return PMREMGenerator;
}();

exports.PMREMGenerator = PMREMGenerator;

function _createPlanes(lodMax) {
  var lodPlanes = [];
  var sizeLods = [];
  var sigmas = [];
  var lod = lodMax;
  var totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

  for (var _i88 = 0; _i88 < totalLods; _i88++) {
    var sizeLod = Math.pow(2, lod);
    sizeLods.push(sizeLod);
    var sigma = 1.0 / sizeLod;

    if (_i88 > lodMax - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[_i88 - lodMax + LOD_MIN - 1];
    } else if (_i88 === 0) {
      sigma = 0;
    }

    sigmas.push(sigma);
    var texelSize = 1.0 / (sizeLod - 1);
    var min = -texelSize / 2;
    var max = 1 + texelSize / 2;
    var uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
    var cubeFaces = 6;
    var vertices = 6;
    var positionSize = 3;
    var uvSize = 2;
    var faceIndexSize = 1;
    var position = new Float32Array(positionSize * vertices * cubeFaces);
    var uv = new Float32Array(uvSize * vertices * cubeFaces);
    var faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);

    for (var face = 0; face < cubeFaces; face++) {
      var x = face % 3 * 2 / 3 - 1;
      var y = face > 2 ? 0 : -1;
      var coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];
      position.set(coordinates, positionSize * vertices * face);
      uv.set(uv1, uvSize * vertices * face);
      var fill = [face, face, face, face, face, face];
      faceIndex.set(fill, faceIndexSize * vertices * face);
    }

    var planes = new BufferGeometry();
    planes.setAttribute('position', new BufferAttribute(position, positionSize));
    planes.setAttribute('uv', new BufferAttribute(uv, uvSize));
    planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));
    lodPlanes.push(planes);

    if (lod > LOD_MIN) {
      lod--;
    }
  }

  return {
    lodPlanes: lodPlanes,
    sizeLods: sizeLods,
    sigmas: sigmas
  };
}

function _createRenderTarget(width, height, params) {
  var cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}

function _setViewport(target, x, y, width, height) {
  target.viewport.set(x, y, width, height);
  target.scissor.set(x, y, width, height);
}

function _getBlurShader(lodMax, width, height) {
  var weights = new Float32Array(MAX_SAMPLES);
  var poleAxis = new Vector3(0, 1, 0);
  var shaderMaterial = new ShaderMaterial({
    name: 'SphericalGaussianBlur',
    defines: {
      'n': MAX_SAMPLES,
      'CUBEUV_TEXEL_WIDTH': 1.0 / width,
      'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
      'CUBEUV_MAX_MIP': "".concat(lodMax, ".0")
    },
    uniforms: {
      'envMap': {
        value: null
      },
      'samples': {
        value: 1
      },
      'weights': {
        value: weights
      },
      'latitudinal': {
        value: false
      },
      'dTheta': {
        value: 0
      },
      'mipInt': {
        value: 0
      },
      'poleAxis': {
        value: poleAxis
      }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader:
    /* glsl */
    "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}

function _getEquirectMaterial() {
  return new ShaderMaterial({
    name: 'EquirectangularToCubeUV',
    uniforms: {
      'envMap': {
        value: null
      }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader:
    /* glsl */
    "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}

function _getCubemapMaterial() {
  return new ShaderMaterial({
    name: 'CubemapToCubeUV',
    uniforms: {
      'envMap': {
        value: null
      },
      'flipEnvMap': {
        value: -1
      }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader:
    /* glsl */
    "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}

function _getCommonVertexShader() {
  return (
    /* glsl */
    "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"
  );
}

function WebGLCubeUVMaps(renderer) {
  var cubeUVmaps = new WeakMap();
  var pmremGenerator = null;

  function get(texture) {
    if (texture && texture.isTexture) {
      var mapping = texture.mapping;
      var isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
      var isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping; // equirect/cube map to cubeUV conversion

      if (isEquirectMap || isCubeMap) {
        if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
          texture.needsPMREMUpdate = false;
          var renderTarget = cubeUVmaps.get(texture);
          if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
          renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
          cubeUVmaps.set(texture, renderTarget);
          return renderTarget.texture;
        } else {
          if (cubeUVmaps.has(texture)) {
            return cubeUVmaps.get(texture).texture;
          } else {
            var image = texture.image;

            if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
              if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);

              var _renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);

              cubeUVmaps.set(texture, _renderTarget);
              texture.addEventListener('dispose', onTextureDispose);
              return _renderTarget.texture;
            } else {
              // image not yet ready. try the conversion next frame
              return null;
            }
          }
        }
      }
    }

    return texture;
  }

  function isCubeTextureComplete(image) {
    var count = 0;
    var length = 6;

    for (var _i89 = 0; _i89 < length; _i89++) {
      if (image[_i89] !== undefined) count++;
    }

    return count === length;
  }

  function onTextureDispose(event) {
    var texture = event.target;
    texture.removeEventListener('dispose', onTextureDispose);
    var cubemapUV = cubeUVmaps.get(texture);

    if (cubemapUV !== undefined) {
      cubeUVmaps.delete(texture);
      cubemapUV.dispose();
    }
  }

  function dispose() {
    cubeUVmaps = new WeakMap();

    if (pmremGenerator !== null) {
      pmremGenerator.dispose();
      pmremGenerator = null;
    }
  }

  return {
    get: get,
    dispose: dispose
  };
}

function WebGLExtensions(gl) {
  var extensions = {};

  function getExtension(name) {
    if (extensions[name] !== undefined) {
      return extensions[name];
    }

    var extension;

    switch (name) {
      case 'WEBGL_depth_texture':
        extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
        break;

      case 'EXT_texture_filter_anisotropic':
        extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
        break;

      case 'WEBGL_compressed_texture_s3tc':
        extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
        break;

      case 'WEBGL_compressed_texture_pvrtc':
        extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
        break;

      default:
        extension = gl.getExtension(name);
    }

    extensions[name] = extension;
    return extension;
  }

  return {
    has: function has(name) {
      return getExtension(name) !== null;
    },
    init: function init(capabilities) {
      if (capabilities.isWebGL2) {
        getExtension('EXT_color_buffer_float');
      } else {
        getExtension('WEBGL_depth_texture');
        getExtension('OES_texture_float');
        getExtension('OES_texture_half_float');
        getExtension('OES_texture_half_float_linear');
        getExtension('OES_standard_derivatives');
        getExtension('OES_element_index_uint');
        getExtension('OES_vertex_array_object');
        getExtension('ANGLE_instanced_arrays');
      }

      getExtension('OES_texture_float_linear');
      getExtension('EXT_color_buffer_half_float');
      getExtension('WEBGL_multisampled_render_to_texture');
    },
    get: function get(name) {
      var extension = getExtension(name);

      if (extension === null) {
        console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
      }

      return extension;
    }
  };
}

function WebGLGeometries(gl, attributes, info, bindingStates) {
  var geometries = {};
  var wireframeAttributes = new WeakMap();

  function onGeometryDispose(event) {
    var geometry = event.target;

    if (geometry.index !== null) {
      attributes.remove(geometry.index);
    }

    for (var name in geometry.attributes) {
      attributes.remove(geometry.attributes[name]);
    }

    geometry.removeEventListener('dispose', onGeometryDispose);
    delete geometries[geometry.id];
    var attribute = wireframeAttributes.get(geometry);

    if (attribute) {
      attributes.remove(attribute);
      wireframeAttributes.delete(geometry);
    }

    bindingStates.releaseStatesOfGeometry(geometry);

    if (geometry.isInstancedBufferGeometry === true) {
      delete geometry._maxInstanceCount;
    } //


    info.memory.geometries--;
  }

  function get(object, geometry) {
    if (geometries[geometry.id] === true) return geometry;
    geometry.addEventListener('dispose', onGeometryDispose);
    geometries[geometry.id] = true;
    info.memory.geometries++;
    return geometry;
  }

  function update(geometry) {
    var geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.

    for (var name in geometryAttributes) {
      attributes.update(geometryAttributes[name], 34962);
    } // morph targets


    var morphAttributes = geometry.morphAttributes;

    for (var _name3 in morphAttributes) {
      var array = morphAttributes[_name3];

      for (var _i90 = 0, l = array.length; _i90 < l; _i90++) {
        attributes.update(array[_i90], 34962);
      }
    }
  }

  function updateWireframeAttribute(geometry) {
    var indices = [];
    var geometryIndex = geometry.index;
    var geometryPosition = geometry.attributes.position;
    var version = 0;

    if (geometryIndex !== null) {
      var array = geometryIndex.array;
      version = geometryIndex.version;

      for (var _i91 = 0, l = array.length; _i91 < l; _i91 += 3) {
        var a = array[_i91 + 0];
        var b = array[_i91 + 1];
        var c = array[_i91 + 2];
        indices.push(a, b, b, c, c, a);
      }
    } else {
      var _array = geometryPosition.array;
      version = geometryPosition.version;

      for (var _i92 = 0, _l5 = _array.length / 3 - 1; _i92 < _l5; _i92 += 3) {
        var _a4 = _i92 + 0;

        var _b4 = _i92 + 1;

        var _c4 = _i92 + 2;

        indices.push(_a4, _b4, _b4, _c4, _c4, _a4);
      }
    }

    var attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates
    //

    var previousAttribute = wireframeAttributes.get(geometry);
    if (previousAttribute) attributes.remove(previousAttribute); //

    wireframeAttributes.set(geometry, attribute);
  }

  function getWireframeAttribute(geometry) {
    var currentAttribute = wireframeAttributes.get(geometry);

    if (currentAttribute) {
      var geometryIndex = geometry.index;

      if (geometryIndex !== null) {
        // if the attribute is obsolete, create a new one
        if (currentAttribute.version < geometryIndex.version) {
          updateWireframeAttribute(geometry);
        }
      }
    } else {
      updateWireframeAttribute(geometry);
    }

    return wireframeAttributes.get(geometry);
  }

  return {
    get: get,
    update: update,
    getWireframeAttribute: getWireframeAttribute
  };
}

function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
  var isWebGL2 = capabilities.isWebGL2;
  var mode;

  function setMode(value) {
    mode = value;
  }

  var type, bytesPerElement;

  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }

  function render(start, count) {
    gl.drawElements(mode, count, type, start * bytesPerElement);
    info.update(count, mode, 1);
  }

  function renderInstances(start, count, primcount) {
    if (primcount === 0) return;
    var extension, methodName;

    if (isWebGL2) {
      extension = gl;
      methodName = 'drawElementsInstanced';
    } else {
      extension = extensions.get('ANGLE_instanced_arrays');
      methodName = 'drawElementsInstancedANGLE';

      if (extension === null) {
        console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
        return;
      }
    }

    extension[methodName](mode, count, type, start * bytesPerElement, primcount);
    info.update(count, mode, primcount);
  } //


  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render;
  this.renderInstances = renderInstances;
}

function WebGLInfo(gl) {
  var memory = {
    geometries: 0,
    textures: 0
  };
  var render = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };

  function update(count, mode, instanceCount) {
    render.calls++;

    switch (mode) {
      case 4:
        render.triangles += instanceCount * (count / 3);
        break;

      case 1:
        render.lines += instanceCount * (count / 2);
        break;

      case 3:
        render.lines += instanceCount * (count - 1);
        break;

      case 2:
        render.lines += instanceCount * count;
        break;

      case 0:
        render.points += instanceCount * count;
        break;

      default:
        console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
        break;
    }
  }

  function reset() {
    render.frame++;
    render.calls = 0;
    render.triangles = 0;
    render.points = 0;
    render.lines = 0;
  }

  return {
    memory: memory,
    render: render,
    programs: null,
    autoReset: true,
    reset: reset,
    update: update
  };
}

function numericalSort(a, b) {
  return a[0] - b[0];
}

function absNumericalSort(a, b) {
  return Math.abs(b[1]) - Math.abs(a[1]);
}

function denormalize(morph, attribute) {
  var denominator = 1;
  var array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;
  if (array instanceof Int8Array) denominator = 127;else if (array instanceof Int16Array) denominator = 32767;else if (array instanceof Int32Array) denominator = 2147483647;else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);
  morph.divideScalar(denominator);
}

function WebGLMorphtargets(gl, capabilities, textures) {
  var influencesList = {};
  var morphInfluences = new Float32Array(8);
  var morphTextures = new WeakMap();
  var morph = new Vector4();
  var workInfluences = [];

  for (var _i93 = 0; _i93 < 8; _i93++) {
    workInfluences[_i93] = [_i93, 0];
  }

  function update(object, geometry, material, program) {
    var objectInfluences = object.morphTargetInfluences;

    if (capabilities.isWebGL2 === true) {
      // instead of using attributes, the WebGL 2 code path encodes morph targets
      // into an array of data textures. Each layer represents a single morph target.
      var morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      var morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
      var entry = morphTextures.get(geometry);

      if (entry === undefined || entry.count !== morphTargetsCount) {
        var disposeTexture = function disposeTexture() {
          texture.dispose();
          morphTextures.delete(geometry);
          geometry.removeEventListener('dispose', disposeTexture);
        };

        if (entry !== undefined) entry.texture.dispose();
        var hasMorphPosition = geometry.morphAttributes.position !== undefined;
        var hasMorphNormals = geometry.morphAttributes.normal !== undefined;
        var hasMorphColors = geometry.morphAttributes.color !== undefined;
        var morphTargets = geometry.morphAttributes.position || [];
        var morphNormals = geometry.morphAttributes.normal || [];
        var morphColors = geometry.morphAttributes.color || [];
        var vertexDataCount = 0;
        if (hasMorphPosition === true) vertexDataCount = 1;
        if (hasMorphNormals === true) vertexDataCount = 2;
        if (hasMorphColors === true) vertexDataCount = 3;
        var width = geometry.attributes.position.count * vertexDataCount;
        var height = 1;

        if (width > capabilities.maxTextureSize) {
          height = Math.ceil(width / capabilities.maxTextureSize);
          width = capabilities.maxTextureSize;
        }

        var buffer = new Float32Array(width * height * 4 * morphTargetsCount);
        var texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
        texture.type = FloatType;
        texture.needsUpdate = true; // fill buffer

        var vertexDataStride = vertexDataCount * 4;

        for (var _i94 = 0; _i94 < morphTargetsCount; _i94++) {
          var morphTarget = morphTargets[_i94];
          var morphNormal = morphNormals[_i94];
          var morphColor = morphColors[_i94];
          var offset = width * height * 4 * _i94;

          for (var j = 0; j < morphTarget.count; j++) {
            var stride = j * vertexDataStride;

            if (hasMorphPosition === true) {
              morph.fromBufferAttribute(morphTarget, j);
              if (morphTarget.normalized === true) denormalize(morph, morphTarget);
              buffer[offset + stride + 0] = morph.x;
              buffer[offset + stride + 1] = morph.y;
              buffer[offset + stride + 2] = morph.z;
              buffer[offset + stride + 3] = 0;
            }

            if (hasMorphNormals === true) {
              morph.fromBufferAttribute(morphNormal, j);
              if (morphNormal.normalized === true) denormalize(morph, morphNormal);
              buffer[offset + stride + 4] = morph.x;
              buffer[offset + stride + 5] = morph.y;
              buffer[offset + stride + 6] = morph.z;
              buffer[offset + stride + 7] = 0;
            }

            if (hasMorphColors === true) {
              morph.fromBufferAttribute(morphColor, j);
              if (morphColor.normalized === true) denormalize(morph, morphColor);
              buffer[offset + stride + 8] = morph.x;
              buffer[offset + stride + 9] = morph.y;
              buffer[offset + stride + 10] = morph.z;
              buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
            }
          }
        }

        entry = {
          count: morphTargetsCount,
          texture: texture,
          size: new Vector2(width, height)
        };
        morphTextures.set(geometry, entry);
        geometry.addEventListener('dispose', disposeTexture);
      } //


      var morphInfluencesSum = 0;

      for (var _i95 = 0; _i95 < objectInfluences.length; _i95++) {
        morphInfluencesSum += objectInfluences[_i95];
      }

      var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
      program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
      program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);
      program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);
      program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);
    } else {
      // When object doesn't have morph target influences defined, we treat it as a 0-length array
      // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
      var length = objectInfluences === undefined ? 0 : objectInfluences.length;
      var influences = influencesList[geometry.id];

      if (influences === undefined || influences.length !== length) {
        // initialise list
        influences = [];

        for (var _i96 = 0; _i96 < length; _i96++) {
          influences[_i96] = [_i96, 0];
        }

        influencesList[geometry.id] = influences;
      } // Collect influences


      for (var _i97 = 0; _i97 < length; _i97++) {
        var influence = influences[_i97];
        influence[0] = _i97;
        influence[1] = objectInfluences[_i97];
      }

      influences.sort(absNumericalSort);

      for (var _i98 = 0; _i98 < 8; _i98++) {
        if (_i98 < length && influences[_i98][1]) {
          workInfluences[_i98][0] = influences[_i98][0];
          workInfluences[_i98][1] = influences[_i98][1];
        } else {
          workInfluences[_i98][0] = Number.MAX_SAFE_INTEGER;
          workInfluences[_i98][1] = 0;
        }
      }

      workInfluences.sort(numericalSort);
      var _morphTargets = geometry.morphAttributes.position;
      var _morphNormals = geometry.morphAttributes.normal;
      var _morphInfluencesSum = 0;

      for (var _i99 = 0; _i99 < 8; _i99++) {
        var _influence = workInfluences[_i99];
        var index = _influence[0];
        var _value3 = _influence[1];

        if (index !== Number.MAX_SAFE_INTEGER && _value3) {
          if (_morphTargets && geometry.getAttribute('morphTarget' + _i99) !== _morphTargets[index]) {
            geometry.setAttribute('morphTarget' + _i99, _morphTargets[index]);
          }

          if (_morphNormals && geometry.getAttribute('morphNormal' + _i99) !== _morphNormals[index]) {
            geometry.setAttribute('morphNormal' + _i99, _morphNormals[index]);
          }

          morphInfluences[_i99] = _value3;
          _morphInfluencesSum += _value3;
        } else {
          if (_morphTargets && geometry.hasAttribute('morphTarget' + _i99) === true) {
            geometry.deleteAttribute('morphTarget' + _i99);
          }

          if (_morphNormals && geometry.hasAttribute('morphNormal' + _i99) === true) {
            geometry.deleteAttribute('morphNormal' + _i99);
          }

          morphInfluences[_i99] = 0;
        }
      } // GLSL shader uses formula baseinfluence * base + sum(target * influence)
      // This allows us to switch between absolute morphs and relative morphs without changing shader code
      // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)


      var _morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - _morphInfluencesSum;

      program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', _morphBaseInfluence);
      program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
    }
  }

  return {
    update: update
  };
}

function WebGLObjects(gl, geometries, attributes, info) {
  var updateMap = new WeakMap();

  function update(object) {
    var frame = info.render.frame;
    var geometry = object.geometry;
    var buffergeometry = geometries.get(object, geometry); // Update once per frame

    if (updateMap.get(buffergeometry) !== frame) {
      geometries.update(buffergeometry);
      updateMap.set(buffergeometry, frame);
    }

    if (object.isInstancedMesh) {
      if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {
        object.addEventListener('dispose', onInstancedMeshDispose);
      }

      attributes.update(object.instanceMatrix, 34962);

      if (object.instanceColor !== null) {
        attributes.update(object.instanceColor, 34962);
      }
    }

    return buffergeometry;
  }

  function dispose() {
    updateMap = new WeakMap();
  }

  function onInstancedMeshDispose(event) {
    var instancedMesh = event.target;
    instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
    attributes.remove(instancedMesh.instanceMatrix);
    if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
  }

  return {
    update: update,
    dispose: dispose
  };
}
/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */


var emptyTexture = new Texture();
var emptyArrayTexture = new DataArrayTexture();
var empty3dTexture = new Data3DTexture();
var emptyCubeTexture = new CubeTexture(); // --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)

var arrayCacheF32 = [];
var arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms

var mat4array = new Float32Array(16);
var mat3array = new Float32Array(9);
var mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices

function flatten(array, nBlocks, blockSize) {
  var firstElem = array[0];
  if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )
  // see http://jacksondunstan.com/articles/983

  var n = nBlocks * blockSize;
  var r = arrayCacheF32[n];

  if (r === undefined) {
    r = new Float32Array(n);
    arrayCacheF32[n] = r;
  }

  if (nBlocks !== 0) {
    firstElem.toArray(r, 0);

    for (var _i100 = 1, offset = 0; _i100 !== nBlocks; ++_i100) {
      offset += blockSize;

      array[_i100].toArray(r, offset);
    }
  }

  return r;
}

function arraysEqual(a, b) {
  if (a.length !== b.length) return false;

  for (var _i101 = 0, l = a.length; _i101 < l; _i101++) {
    if (a[_i101] !== b[_i101]) return false;
  }

  return true;
}

function copyArray(a, b) {
  for (var _i102 = 0, l = b.length; _i102 < l; _i102++) {
    a[_i102] = b[_i102];
  }
} // Texture unit allocation


function allocTexUnits(textures, n) {
  var r = arrayCacheI32[n];

  if (r === undefined) {
    r = new Int32Array(n);
    arrayCacheI32[n] = r;
  }

  for (var _i103 = 0; _i103 !== n; ++_i103) {
    r[_i103] = textures.allocateTextureUnit();
  }

  return r;
} // --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar


function setValueV1f(gl, v) {
  var cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1f(this.addr, v);
  cache[0] = v;
} // Single float vector (from flat array or THREE.VectorN)


function setValueV2f(gl, v) {
  var cache = this.cache;

  if (v.x !== undefined) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl.uniform2f(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform2fv(this.addr, v);
    copyArray(cache, v);
  }
}

function setValueV3f(gl, v) {
  var cache = this.cache;

  if (v.x !== undefined) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl.uniform3f(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else if (v.r !== undefined) {
    if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
      gl.uniform3f(this.addr, v.r, v.g, v.b);
      cache[0] = v.r;
      cache[1] = v.g;
      cache[2] = v.b;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform3fv(this.addr, v);
    copyArray(cache, v);
  }
}

function setValueV4f(gl, v) {
  var cache = this.cache;

  if (v.x !== undefined) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform4fv(this.addr, v);
    copyArray(cache, v);
  }
} // Single matrix (from flat array or THREE.MatrixN)


function setValueM2(gl, v) {
  var cache = this.cache;
  var elements = v.elements;

  if (elements === undefined) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix2fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat2array.set(elements);
    gl.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache, elements);
  }
}

function setValueM3(gl, v) {
  var cache = this.cache;
  var elements = v.elements;

  if (elements === undefined) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix3fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat3array.set(elements);
    gl.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache, elements);
  }
}

function setValueM4(gl, v) {
  var cache = this.cache;
  var elements = v.elements;

  if (elements === undefined) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix4fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat4array.set(elements);
    gl.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache, elements);
  }
} // Single integer / boolean


function setValueV1i(gl, v) {
  var cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1i(this.addr, v);
  cache[0] = v;
} // Single integer / boolean vector (from flat array)


function setValueV2i(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform2iv(this.addr, v);
  copyArray(cache, v);
}

function setValueV3i(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform3iv(this.addr, v);
  copyArray(cache, v);
}

function setValueV4i(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform4iv(this.addr, v);
  copyArray(cache, v);
} // Single unsigned integer


function setValueV1ui(gl, v) {
  var cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1ui(this.addr, v);
  cache[0] = v;
} // Single unsigned integer vector (from flat array)


function setValueV2ui(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform2uiv(this.addr, v);
  copyArray(cache, v);
}

function setValueV3ui(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform3uiv(this.addr, v);
  copyArray(cache, v);
}

function setValueV4ui(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform4uiv(this.addr, v);
  copyArray(cache, v);
} // Single texture (2D / Cube)


function setValueT1(gl, v, textures) {
  var cache = this.cache;
  var unit = textures.allocateTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  textures.setTexture2D(v || emptyTexture, unit);
}

function setValueT3D1(gl, v, textures) {
  var cache = this.cache;
  var unit = textures.allocateTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  textures.setTexture3D(v || empty3dTexture, unit);
}

function setValueT6(gl, v, textures) {
  var cache = this.cache;
  var unit = textures.allocateTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  textures.setTextureCube(v || emptyCubeTexture, unit);
}

function setValueT2DArray1(gl, v, textures) {
  var cache = this.cache;
  var unit = textures.allocateTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  textures.setTexture2DArray(v || emptyArrayTexture, unit);
} // Helper to pick the right setter for the singular case


function getSingularSetter(type) {
  switch (type) {
    case 0x1406:
      return setValueV1f;
    // FLOAT

    case 0x8b50:
      return setValueV2f;
    // _VEC2

    case 0x8b51:
      return setValueV3f;
    // _VEC3

    case 0x8b52:
      return setValueV4f;
    // _VEC4

    case 0x8b5a:
      return setValueM2;
    // _MAT2

    case 0x8b5b:
      return setValueM3;
    // _MAT3

    case 0x8b5c:
      return setValueM4;
    // _MAT4

    case 0x1404:
    case 0x8b56:
      return setValueV1i;
    // INT, BOOL

    case 0x8b53:
    case 0x8b57:
      return setValueV2i;
    // _VEC2

    case 0x8b54:
    case 0x8b58:
      return setValueV3i;
    // _VEC3

    case 0x8b55:
    case 0x8b59:
      return setValueV4i;
    // _VEC4

    case 0x1405:
      return setValueV1ui;
    // UINT

    case 0x8dc6:
      return setValueV2ui;
    // _VEC2

    case 0x8dc7:
      return setValueV3ui;
    // _VEC3

    case 0x8dc8:
      return setValueV4ui;
    // _VEC4

    case 0x8b5e: // SAMPLER_2D

    case 0x8d66: // SAMPLER_EXTERNAL_OES

    case 0x8dca: // INT_SAMPLER_2D

    case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D

    case 0x8b62:
      // SAMPLER_2D_SHADOW
      return setValueT1;

    case 0x8b5f: // SAMPLER_3D

    case 0x8dcb: // INT_SAMPLER_3D

    case 0x8dd3:
      // UNSIGNED_INT_SAMPLER_3D
      return setValueT3D1;

    case 0x8b60: // SAMPLER_CUBE

    case 0x8dcc: // INT_SAMPLER_CUBE

    case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE

    case 0x8dc5:
      // SAMPLER_CUBE_SHADOW
      return setValueT6;

    case 0x8dc1: // SAMPLER_2D_ARRAY

    case 0x8dcf: // INT_SAMPLER_2D_ARRAY

    case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY

    case 0x8dc4:
      // SAMPLER_2D_ARRAY_SHADOW
      return setValueT2DArray1;
  }
} // Array of scalars


function setValueV1fArray(gl, v) {
  gl.uniform1fv(this.addr, v);
} // Array of vectors (from flat array or array of THREE.VectorN)


function setValueV2fArray(gl, v) {
  var data = flatten(v, this.size, 2);
  gl.uniform2fv(this.addr, data);
}

function setValueV3fArray(gl, v) {
  var data = flatten(v, this.size, 3);
  gl.uniform3fv(this.addr, data);
}

function setValueV4fArray(gl, v) {
  var data = flatten(v, this.size, 4);
  gl.uniform4fv(this.addr, data);
} // Array of matrices (from flat array or array of THREE.MatrixN)


function setValueM2Array(gl, v) {
  var data = flatten(v, this.size, 4);
  gl.uniformMatrix2fv(this.addr, false, data);
}

function setValueM3Array(gl, v) {
  var data = flatten(v, this.size, 9);
  gl.uniformMatrix3fv(this.addr, false, data);
}

function setValueM4Array(gl, v) {
  var data = flatten(v, this.size, 16);
  gl.uniformMatrix4fv(this.addr, false, data);
} // Array of integer / boolean


function setValueV1iArray(gl, v) {
  gl.uniform1iv(this.addr, v);
} // Array of integer / boolean vectors (from flat array)


function setValueV2iArray(gl, v) {
  gl.uniform2iv(this.addr, v);
}

function setValueV3iArray(gl, v) {
  gl.uniform3iv(this.addr, v);
}

function setValueV4iArray(gl, v) {
  gl.uniform4iv(this.addr, v);
} // Array of unsigned integer


function setValueV1uiArray(gl, v) {
  gl.uniform1uiv(this.addr, v);
} // Array of unsigned integer vectors (from flat array)


function setValueV2uiArray(gl, v) {
  gl.uniform2uiv(this.addr, v);
}

function setValueV3uiArray(gl, v) {
  gl.uniform3uiv(this.addr, v);
}

function setValueV4uiArray(gl, v) {
  gl.uniform4uiv(this.addr, v);
} // Array of textures (2D / 3D / Cube / 2DArray)


function setValueT1Array(gl, v, textures) {
  var n = v.length;
  var units = allocTexUnits(textures, n);
  gl.uniform1iv(this.addr, units);

  for (var _i104 = 0; _i104 !== n; ++_i104) {
    textures.setTexture2D(v[_i104] || emptyTexture, units[_i104]);
  }
}

function setValueT3DArray(gl, v, textures) {
  var n = v.length;
  var units = allocTexUnits(textures, n);
  gl.uniform1iv(this.addr, units);

  for (var _i105 = 0; _i105 !== n; ++_i105) {
    textures.setTexture3D(v[_i105] || empty3dTexture, units[_i105]);
  }
}

function setValueT6Array(gl, v, textures) {
  var n = v.length;
  var units = allocTexUnits(textures, n);
  gl.uniform1iv(this.addr, units);

  for (var _i106 = 0; _i106 !== n; ++_i106) {
    textures.setTextureCube(v[_i106] || emptyCubeTexture, units[_i106]);
  }
}

function setValueT2DArrayArray(gl, v, textures) {
  var n = v.length;
  var units = allocTexUnits(textures, n);
  gl.uniform1iv(this.addr, units);

  for (var _i107 = 0; _i107 !== n; ++_i107) {
    textures.setTexture2DArray(v[_i107] || emptyArrayTexture, units[_i107]);
  }
} // Helper to pick the right setter for a pure (bottom-level) array


function getPureArraySetter(type) {
  switch (type) {
    case 0x1406:
      return setValueV1fArray;
    // FLOAT

    case 0x8b50:
      return setValueV2fArray;
    // _VEC2

    case 0x8b51:
      return setValueV3fArray;
    // _VEC3

    case 0x8b52:
      return setValueV4fArray;
    // _VEC4

    case 0x8b5a:
      return setValueM2Array;
    // _MAT2

    case 0x8b5b:
      return setValueM3Array;
    // _MAT3

    case 0x8b5c:
      return setValueM4Array;
    // _MAT4

    case 0x1404:
    case 0x8b56:
      return setValueV1iArray;
    // INT, BOOL

    case 0x8b53:
    case 0x8b57:
      return setValueV2iArray;
    // _VEC2

    case 0x8b54:
    case 0x8b58:
      return setValueV3iArray;
    // _VEC3

    case 0x8b55:
    case 0x8b59:
      return setValueV4iArray;
    // _VEC4

    case 0x1405:
      return setValueV1uiArray;
    // UINT

    case 0x8dc6:
      return setValueV2uiArray;
    // _VEC2

    case 0x8dc7:
      return setValueV3uiArray;
    // _VEC3

    case 0x8dc8:
      return setValueV4uiArray;
    // _VEC4

    case 0x8b5e: // SAMPLER_2D

    case 0x8d66: // SAMPLER_EXTERNAL_OES

    case 0x8dca: // INT_SAMPLER_2D

    case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D

    case 0x8b62:
      // SAMPLER_2D_SHADOW
      return setValueT1Array;

    case 0x8b5f: // SAMPLER_3D

    case 0x8dcb: // INT_SAMPLER_3D

    case 0x8dd3:
      // UNSIGNED_INT_SAMPLER_3D
      return setValueT3DArray;

    case 0x8b60: // SAMPLER_CUBE

    case 0x8dcc: // INT_SAMPLER_CUBE

    case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE

    case 0x8dc5:
      // SAMPLER_CUBE_SHADOW
      return setValueT6Array;

    case 0x8dc1: // SAMPLER_2D_ARRAY

    case 0x8dcf: // INT_SAMPLER_2D_ARRAY

    case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY

    case 0x8dc4:
      // SAMPLER_2D_ARRAY_SHADOW
      return setValueT2DArrayArray;
  }
} // --- Uniform Classes ---


function SingleUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
}

function PureArrayUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.size = activeInfo.size;
  this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
}

PureArrayUniform.prototype.updateCache = function (data) {
  var cache = this.cache;

  if (data instanceof Float32Array && cache.length !== data.length) {
    this.cache = new Float32Array(data.length);
  }

  copyArray(cache, data);
};

function StructuredUniform(id) {
  this.id = id;
  this.seq = [];
  this.map = {};
}

StructuredUniform.prototype.setValue = function (gl, value, textures) {
  var seq = this.seq;

  for (var _i108 = 0, n = seq.length; _i108 !== n; ++_i108) {
    var u = seq[_i108];
    u.setValue(gl, value[u.id], textures);
  }
}; // --- Top-level ---
// Parser - builds up the property tree from the path strings


var RePathPart = /(\w+)(\])?(\[|\.)?/g; // extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}

function parseUniform(activeInfo, addr, container) {
  var path = activeInfo.name,
      pathLength = path.length; // reset RegExp object, because of the early exit of a previous run

  RePathPart.lastIndex = 0;

  while (true) {
    var match = RePathPart.exec(path),
        matchEnd = RePathPart.lastIndex;
    var id = match[1];
    var idIsIndex = match[2] === ']',
        subscript = match[3];
    if (idIsIndex) id = id | 0; // convert to integer

    if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
      // bare name or "pure" bottom-level array "[0]" suffix
      addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
      break;
    } else {
      // step into inner node / create it in case it doesn't exist
      var map = container.map;
      var next = map[id];

      if (next === undefined) {
        next = new StructuredUniform(id);
        addUniform(container, next);
      }

      container = next;
    }
  }
} // Root Container


function WebGLUniforms(gl, program) {
  this.seq = [];
  this.map = {};
  var n = gl.getProgramParameter(program, 35718);

  for (var _i109 = 0; _i109 < n; ++_i109) {
    var info = gl.getActiveUniform(program, _i109),
        addr = gl.getUniformLocation(program, info.name);
    parseUniform(info, addr, this);
  }
}

WebGLUniforms.prototype.setValue = function (gl, name, value, textures) {
  var u = this.map[name];
  if (u !== undefined) u.setValue(gl, value, textures);
};

WebGLUniforms.prototype.setOptional = function (gl, object, name) {
  var v = object[name];
  if (v !== undefined) this.setValue(gl, name, v);
}; // Static interface


WebGLUniforms.upload = function (gl, seq, values, textures) {
  for (var _i110 = 0, n = seq.length; _i110 !== n; ++_i110) {
    var u = seq[_i110],
        v = values[u.id];

    if (v.needsUpdate !== false) {
      // note: always updating when .needsUpdate is undefined
      u.setValue(gl, v.value, textures);
    }
  }
};

WebGLUniforms.seqWithValue = function (seq, values) {
  var r = [];

  for (var _i111 = 0, n = seq.length; _i111 !== n; ++_i111) {
    var u = seq[_i111];
    if (u.id in values) r.push(u);
  }

  return r;
};

function WebGLShader(gl, type, string) {
  var shader = gl.createShader(type);
  gl.shaderSource(shader, string);
  gl.compileShader(shader);
  return shader;
}

var programIdCount = 0;

function handleSource(string, errorLine) {
  var lines = string.split('\n');
  var lines2 = [];
  var from = Math.max(errorLine - 6, 0);
  var to = Math.min(errorLine + 6, lines.length);

  for (var _i112 = from; _i112 < to; _i112++) {
    lines2.push(_i112 + 1 + ': ' + lines[_i112]);
  }

  return lines2.join('\n');
}

function getEncodingComponents(encoding) {
  switch (encoding) {
    case LinearEncoding:
      return ['Linear', '( value )'];

    case sRGBEncoding:
      return ['sRGB', '( value )'];

    default:
      console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
      return ['Linear', '( value )'];
  }
}

function getShaderErrors(gl, shader, type) {
  var status = gl.getShaderParameter(shader, 35713);
  var errors = gl.getShaderInfoLog(shader).trim();
  if (status && errors === '') return '';
  var errorLine = parseInt(/ERROR: 0:(\d+)/.exec(errors)[1]); // --enable-privileged-webgl-extension
  // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

  return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource(gl.getShaderSource(shader), errorLine);
}

function getTexelEncodingFunction(functionName, encoding) {
  var components = getEncodingComponents(encoding);
  return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
}

function getToneMappingFunction(functionName, toneMapping) {
  var toneMappingName;

  switch (toneMapping) {
    case LinearToneMapping:
      toneMappingName = 'Linear';
      break;

    case ReinhardToneMapping:
      toneMappingName = 'Reinhard';
      break;

    case CineonToneMapping:
      toneMappingName = 'OptimizedCineon';
      break;

    case ACESFilmicToneMapping:
      toneMappingName = 'ACESFilmic';
      break;

    case CustomToneMapping:
      toneMappingName = 'Custom';
      break;

    default:
      console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
      toneMappingName = 'Linear';
  }

  return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
}

function generateExtensions(parameters) {
  var chunks = [parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];
  return chunks.filter(filterEmptyLine).join('\n');
}

function generateDefines(defines) {
  var chunks = [];

  for (var name in defines) {
    var _value4 = defines[name];
    if (_value4 === false) continue;
    chunks.push('#define ' + name + ' ' + _value4);
  }

  return chunks.join('\n');
}

function fetchAttributeLocations(gl, program) {
  var attributes = {};
  var n = gl.getProgramParameter(program, 35721);

  for (var _i113 = 0; _i113 < n; _i113++) {
    var info = gl.getActiveAttrib(program, _i113);
    var name = info.name;
    var locationSize = 1;
    if (info.type === 35674) locationSize = 2;
    if (info.type === 35675) locationSize = 3;
    if (info.type === 35676) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

    attributes[name] = {
      type: info.type,
      location: gl.getAttribLocation(program, name),
      locationSize: locationSize
    };
  }

  return attributes;
}

function filterEmptyLine(string) {
  return string !== '';
}

function replaceLightNums(string, parameters) {
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}

function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
} // Resolve Includes


var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

function resolveIncludes(string) {
  return string.replace(includePattern, includeReplacer);
}

function includeReplacer(match, include) {
  var string = ShaderChunk[include];

  if (string === undefined) {
    throw new Error('Can not resolve #include <' + include + '>');
  }

  return resolveIncludes(string);
} // Unroll Loops


var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

function unrollLoops(string) {
  return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
}

function deprecatedLoopReplacer(match, start, end, snippet) {
  console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');
  return loopReplacer(match, start, end, snippet);
}

function loopReplacer(match, start, end, snippet) {
  var string = '';

  for (var _i114 = parseInt(start); _i114 < parseInt(end); _i114++) {
    string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + _i114 + ' ]').replace(/UNROLLED_LOOP_INDEX/g, _i114);
  }

  return string;
} //


function generatePrecision(parameters) {
  var precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

  if (parameters.precision === 'highp') {
    precisionstring += '\n#define HIGH_PRECISION';
  } else if (parameters.precision === 'mediump') {
    precisionstring += '\n#define MEDIUM_PRECISION';
  } else if (parameters.precision === 'lowp') {
    precisionstring += '\n#define LOW_PRECISION';
  }

  return precisionstring;
}

function generateShadowMapTypeDefine(parameters) {
  var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
  } else if (parameters.shadowMapType === VSMShadowMap) {
    shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
  }

  return shadowMapTypeDefine;
}

function generateEnvMapTypeDefine(parameters) {
  var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
        break;

      case CubeUVReflectionMapping:
        envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
        break;
    }
  }

  return envMapTypeDefine;
}

function generateEnvMapModeDefine(parameters) {
  var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeRefractionMapping:
        envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
        break;
    }
  }

  return envMapModeDefine;
}

function generateEnvMapBlendingDefine(parameters) {
  var envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

  if (parameters.envMap) {
    switch (parameters.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
        break;

      case MixOperation:
        envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
        break;

      case AddOperation:
        envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
        break;
    }
  }

  return envMapBlendingDefine;
}

function generateCubeUVSize(parameters) {
  var imageHeight = parameters.envMapCubeUVHeight;
  if (imageHeight === null) return null;
  var maxMip = Math.log2(imageHeight / 32 + 1) + 3;
  var texelHeight = 1.0 / imageHeight;
  var texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
  return {
    texelWidth: texelWidth,
    texelHeight: texelHeight,
    maxMip: maxMip
  };
}

function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
  // TODO Send this event to Three.js DevTools
  // console.log( 'WebGLProgram', cacheKey );
  var gl = renderer.getContext();
  var defines = parameters.defines;
  var vertexShader = parameters.vertexShader;
  var fragmentShader = parameters.fragmentShader;
  var shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
  var envMapTypeDefine = generateEnvMapTypeDefine(parameters);
  var envMapModeDefine = generateEnvMapModeDefine(parameters);
  var envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
  var envMapCubeUVSize = generateCubeUVSize(parameters);
  var customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);
  var customDefines = generateDefines(defines);
  var program = gl.createProgram();
  var prefixVertex, prefixFragment;
  var versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

  if (parameters.isRawShaderMaterial) {
    prefixVertex = [customDefines].filter(filterEmptyLine).join('\n');

    if (prefixVertex.length > 0) {
      prefixVertex += '\n';
    }

    prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\n');

    if (prefixFragment.length > 0) {
      prefixFragment += '\n';
    }
  } else {
    prefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphColors && parameters.isWebGL2 ? '#define USE_MORPHCOLORS' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '', parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '	attribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '	attribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '	attribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '	attribute vec4 color;', '#elif defined( USE_COLOR )', '	attribute vec3 color;', '#endif', '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )', '	attribute vec3 morphTarget0;', '	attribute vec3 morphTarget1;', '	attribute vec3 morphTarget2;', '	attribute vec3 morphTarget3;', '	#ifdef USE_MORPHNORMALS', '		attribute vec3 morphNormal0;', '		attribute vec3 morphNormal1;', '		attribute vec3 morphNormal2;', '		attribute vec3 morphNormal3;', '	#else', '		attribute vec3 morphTarget4;', '		attribute vec3 morphTarget5;', '		attribute vec3 morphTarget6;', '		attribute vec3 morphTarget7;', '	#endif', '#endif', '#ifdef USE_SKINNING', '	attribute vec4 skinIndex;', '	attribute vec4 skinWeight;', '#endif', '\n'].filter(filterEmptyLine).join('\n');
    prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '', envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '', envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
    parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.opaque ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below
    getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\n'].filter(filterEmptyLine).join('\n');
  }

  vertexShader = resolveIncludes(vertexShader);
  vertexShader = replaceLightNums(vertexShader, parameters);
  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
  fragmentShader = resolveIncludes(fragmentShader);
  fragmentShader = replaceLightNums(fragmentShader, parameters);
  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
  vertexShader = unrollLoops(vertexShader);
  fragmentShader = unrollLoops(fragmentShader);

  if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
    // GLSL 3.0 conversion for built-in materials and ShaderMaterial
    versionString = '#version 300 es\n';
    prefixVertex = ['precision mediump sampler2DArray;', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\n') + '\n' + prefixVertex;
    prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\n') + '\n' + prefixFragment;
  }

  var vertexGlsl = versionString + prefixVertex + vertexShader;
  var fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );
  // console.log( '*FRAGMENT*', fragmentGlsl );

  var glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
  var glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
  gl.attachShader(program, glVertexShader);
  gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.

  if (parameters.index0AttributeName !== undefined) {
    gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, 'position');
  }

  gl.linkProgram(program); // check for link errors

  if (renderer.debug.checkShaderErrors) {
    var programLog = gl.getProgramInfoLog(program).trim();
    var vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
    var fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
    var runnable = true;
    var haveDiagnostics = true;

    if (gl.getProgramParameter(program, 35714) === false) {
      runnable = false;
      var vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');
      var fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');
      console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, 35715) + '\n\n' + 'Program Info Log: ' + programLog + '\n' + vertexErrors + '\n' + fragmentErrors);
    } else if (programLog !== '') {
      console.warn('THREE.WebGLProgram: Program Info Log:', programLog);
    } else if (vertexLog === '' || fragmentLog === '') {
      haveDiagnostics = false;
    }

    if (haveDiagnostics) {
      this.diagnostics = {
        runnable: runnable,
        programLog: programLog,
        vertexShader: {
          log: vertexLog,
          prefix: prefixVertex
        },
        fragmentShader: {
          log: fragmentLog,
          prefix: prefixFragment
        }
      };
    }
  } // Clean up
  // Crashes in iOS9 and iOS10. #18402
  // gl.detachShader( program, glVertexShader );
  // gl.detachShader( program, glFragmentShader );


  gl.deleteShader(glVertexShader);
  gl.deleteShader(glFragmentShader); // set up caching for uniform locations

  var cachedUniforms;

  this.getUniforms = function () {
    if (cachedUniforms === undefined) {
      cachedUniforms = new WebGLUniforms(gl, program);
    }

    return cachedUniforms;
  }; // set up caching for attribute locations


  var cachedAttributes;

  this.getAttributes = function () {
    if (cachedAttributes === undefined) {
      cachedAttributes = fetchAttributeLocations(gl, program);
    }

    return cachedAttributes;
  }; // free resource


  this.destroy = function () {
    bindingStates.releaseStatesOfProgram(this);
    gl.deleteProgram(program);
    this.program = undefined;
  }; //


  this.name = parameters.shaderName;
  this.id = programIdCount++;
  this.cacheKey = cacheKey;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}

var _id = 0;

var WebGLShaderCache = /*#__PURE__*/function () {
  function WebGLShaderCache() {
    _classCallCheck(this, WebGLShaderCache);

    this.shaderCache = new Map();
    this.materialCache = new Map();
  }

  _createClass(WebGLShaderCache, [{
    key: "update",
    value: function update(material) {
      var vertexShader = material.vertexShader;
      var fragmentShader = material.fragmentShader;

      var vertexShaderStage = this._getShaderStage(vertexShader);

      var fragmentShaderStage = this._getShaderStage(fragmentShader);

      var materialShaders = this._getShaderCacheForMaterial(material);

      if (materialShaders.has(vertexShaderStage) === false) {
        materialShaders.add(vertexShaderStage);
        vertexShaderStage.usedTimes++;
      }

      if (materialShaders.has(fragmentShaderStage) === false) {
        materialShaders.add(fragmentShaderStage);
        fragmentShaderStage.usedTimes++;
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(material) {
      var materialShaders = this.materialCache.get(material);

      var _iterator = _createForOfIteratorHelper(materialShaders),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var shaderStage = _step.value;
          shaderStage.usedTimes--;
          if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.materialCache.delete(material);
      return this;
    }
  }, {
    key: "getVertexShaderID",
    value: function getVertexShaderID(material) {
      return this._getShaderStage(material.vertexShader).id;
    }
  }, {
    key: "getFragmentShaderID",
    value: function getFragmentShaderID(material) {
      return this._getShaderStage(material.fragmentShader).id;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.shaderCache.clear();
      this.materialCache.clear();
    }
  }, {
    key: "_getShaderCacheForMaterial",
    value: function _getShaderCacheForMaterial(material) {
      var cache = this.materialCache;

      if (cache.has(material) === false) {
        cache.set(material, new Set());
      }

      return cache.get(material);
    }
  }, {
    key: "_getShaderStage",
    value: function _getShaderStage(code) {
      var cache = this.shaderCache;

      if (cache.has(code) === false) {
        var stage = new WebGLShaderStage(code);
        cache.set(code, stage);
      }

      return cache.get(code);
    }
  }]);

  return WebGLShaderCache;
}();

var WebGLShaderStage = /*#__PURE__*/_createClass(function WebGLShaderStage(code) {
  _classCallCheck(this, WebGLShaderStage);

  this.id = _id++;
  this.code = code;
  this.usedTimes = 0;
});

function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
  var _programLayers = new Layers();

  var _customShaders = new WebGLShaderCache();

  var programs = [];
  var isWebGL2 = capabilities.isWebGL2;
  var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  var floatVertexTextures = capabilities.floatVertexTextures;
  var maxVertexUniforms = capabilities.maxVertexUniforms;
  var vertexTextures = capabilities.vertexTextures;
  var precision = capabilities.precision;
  var shaderIDs = {
    MeshDepthMaterial: 'depth',
    MeshDistanceMaterial: 'distanceRGBA',
    MeshNormalMaterial: 'normal',
    MeshBasicMaterial: 'basic',
    MeshLambertMaterial: 'lambert',
    MeshPhongMaterial: 'phong',
    MeshToonMaterial: 'toon',
    MeshStandardMaterial: 'physical',
    MeshPhysicalMaterial: 'physical',
    MeshMatcapMaterial: 'matcap',
    LineBasicMaterial: 'basic',
    LineDashedMaterial: 'dashed',
    PointsMaterial: 'points',
    ShadowMaterial: 'shadow',
    SpriteMaterial: 'sprite'
  };

  function getMaxBones(object) {
    var skeleton = object.skeleton;
    var bones = skeleton.bones;

    if (floatVertexTextures) {
      return 1024;
    } else {
      // default for when object is not specified
      // ( for example when prebuilding shader to be used with multiple objects )
      //
      //  - leave some extra space for other uniforms
      //  - limit here is ANGLE's 254 max uniform vectors
      //    (up to 54 should be safe)
      var nVertexUniforms = maxVertexUniforms;
      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
      var maxBones = Math.min(nVertexMatrices, bones.length);

      if (maxBones < bones.length) {
        console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');
        return 0;
      }

      return maxBones;
    }
  }

  function getParameters(material, lights, shadows, scene, object) {
    var fog = scene.fog;
    var geometry = object.geometry;
    var environment = material.isMeshStandardMaterial ? scene.environment : null;
    var envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
    var envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
    var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene
    // (not to blow over maxLights budget)

    var maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;

    if (material.precision !== null) {
      precision = capabilities.getMaxPrecision(material.precision);

      if (precision !== material.precision) {
        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
      }
    } //


    var morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    var morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
    var morphTextureStride = 0;
    if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
    if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
    if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3; //

    var vertexShader, fragmentShader;
    var customVertexShaderID, customFragmentShaderID;

    if (shaderID) {
      var shader = ShaderLib[shaderID];
      vertexShader = shader.vertexShader;
      fragmentShader = shader.fragmentShader;
    } else {
      vertexShader = material.vertexShader;
      fragmentShader = material.fragmentShader;

      _customShaders.update(material);

      customVertexShaderID = _customShaders.getVertexShaderID(material);
      customFragmentShaderID = _customShaders.getFragmentShaderID(material);
    }

    var currentRenderTarget = renderer.getRenderTarget();
    var useAlphaTest = material.alphaTest > 0;
    var useClearcoat = material.clearcoat > 0;
    var parameters = {
      isWebGL2: isWebGL2,
      shaderID: shaderID,
      shaderName: material.type,
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
      defines: material.defines,
      customVertexShaderID: customVertexShaderID,
      customFragmentShaderID: customFragmentShaderID,
      isRawShaderMaterial: material.isRawShaderMaterial === true,
      glslVersion: material.glslVersion,
      precision: precision,
      instancing: object.isInstancedMesh === true,
      instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
      supportsVertexTextures: vertexTextures,
      outputEncoding: currentRenderTarget === null ? renderer.outputEncoding : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding,
      map: !!material.map,
      matcap: !!material.matcap,
      envMap: !!envMap,
      envMapMode: envMap && envMap.mapping,
      envMapCubeUVHeight: envMapCubeUVHeight,
      lightMap: !!material.lightMap,
      aoMap: !!material.aoMap,
      emissiveMap: !!material.emissiveMap,
      bumpMap: !!material.bumpMap,
      normalMap: !!material.normalMap,
      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
      decodeVideoTexture: !!material.map && material.map.isVideoTexture === true && material.map.encoding === sRGBEncoding,
      clearcoat: useClearcoat,
      clearcoatMap: useClearcoat && !!material.clearcoatMap,
      clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
      clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,
      displacementMap: !!material.displacementMap,
      roughnessMap: !!material.roughnessMap,
      metalnessMap: !!material.metalnessMap,
      specularMap: !!material.specularMap,
      specularIntensityMap: !!material.specularIntensityMap,
      specularColorMap: !!material.specularColorMap,
      opaque: material.transparent === false && material.blending === NormalBlending,
      alphaMap: !!material.alphaMap,
      alphaTest: useAlphaTest,
      gradientMap: !!material.gradientMap,
      sheen: material.sheen > 0,
      sheenColorMap: !!material.sheenColorMap,
      sheenRoughnessMap: !!material.sheenRoughnessMap,
      transmission: material.transmission > 0,
      transmissionMap: !!material.transmissionMap,
      thicknessMap: !!material.thicknessMap,
      combine: material.combine,
      vertexTangents: !!material.normalMap && !!geometry.attributes.tangent,
      vertexColors: material.vertexColors,
      vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,
      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,
      fog: !!fog,
      useFog: material.fog,
      fogExp2: fog && fog.isFogExp2,
      flatShading: !!material.flatShading,
      sizeAttenuation: material.sizeAttenuation,
      logarithmicDepthBuffer: logarithmicDepthBuffer,
      skinning: object.isSkinnedMesh === true && maxBones > 0,
      maxBones: maxBones,
      useVertexTexture: floatVertexTextures,
      morphTargets: geometry.morphAttributes.position !== undefined,
      morphNormals: geometry.morphAttributes.normal !== undefined,
      morphColors: geometry.morphAttributes.color !== undefined,
      morphTargetsCount: morphTargetsCount,
      morphTextureStride: morphTextureStride,
      numDirLights: lights.directional.length,
      numPointLights: lights.point.length,
      numSpotLights: lights.spot.length,
      numRectAreaLights: lights.rectArea.length,
      numHemiLights: lights.hemi.length,
      numDirLightShadows: lights.directionalShadowMap.length,
      numPointLightShadows: lights.pointShadowMap.length,
      numSpotLightShadows: lights.spotShadowMap.length,
      numClippingPlanes: clipping.numPlanes,
      numClipIntersection: clipping.numIntersection,
      dithering: material.dithering,
      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
      shadowMapType: renderer.shadowMap.type,
      toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
      physicallyCorrectLights: renderer.physicallyCorrectLights,
      premultipliedAlpha: material.premultipliedAlpha,
      doubleSided: material.side === DoubleSide,
      flipSided: material.side === BackSide,
      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,
      index0AttributeName: material.index0AttributeName,
      extensionDerivatives: material.extensions && material.extensions.derivatives,
      extensionFragDepth: material.extensions && material.extensions.fragDepth,
      extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
      extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
      rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
      rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
      rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),
      customProgramCacheKey: material.customProgramCacheKey()
    };
    return parameters;
  }

  function getProgramCacheKey(parameters) {
    var array = [];

    if (parameters.shaderID) {
      array.push(parameters.shaderID);
    } else {
      array.push(parameters.customVertexShaderID);
      array.push(parameters.customFragmentShaderID);
    }

    if (parameters.defines !== undefined) {
      for (var name in parameters.defines) {
        array.push(name);
        array.push(parameters.defines[name]);
      }
    }

    if (parameters.isRawShaderMaterial === false) {
      getProgramCacheKeyParameters(array, parameters);
      getProgramCacheKeyBooleans(array, parameters);
      array.push(renderer.outputEncoding);
    }

    array.push(parameters.customProgramCacheKey);
    return array.join();
  }

  function getProgramCacheKeyParameters(array, parameters) {
    array.push(parameters.precision);
    array.push(parameters.outputEncoding);
    array.push(parameters.envMapMode);
    array.push(parameters.envMapCubeUVHeight);
    array.push(parameters.combine);
    array.push(parameters.vertexUvs);
    array.push(parameters.fogExp2);
    array.push(parameters.sizeAttenuation);
    array.push(parameters.maxBones);
    array.push(parameters.morphTargetsCount);
    array.push(parameters.morphAttributeCount);
    array.push(parameters.numDirLights);
    array.push(parameters.numPointLights);
    array.push(parameters.numSpotLights);
    array.push(parameters.numHemiLights);
    array.push(parameters.numRectAreaLights);
    array.push(parameters.numDirLightShadows);
    array.push(parameters.numPointLightShadows);
    array.push(parameters.numSpotLightShadows);
    array.push(parameters.shadowMapType);
    array.push(parameters.toneMapping);
    array.push(parameters.numClippingPlanes);
    array.push(parameters.numClipIntersection);
  }

  function getProgramCacheKeyBooleans(array, parameters) {
    _programLayers.disableAll();

    if (parameters.isWebGL2) _programLayers.enable(0);
    if (parameters.supportsVertexTextures) _programLayers.enable(1);
    if (parameters.instancing) _programLayers.enable(2);
    if (parameters.instancingColor) _programLayers.enable(3);
    if (parameters.map) _programLayers.enable(4);
    if (parameters.matcap) _programLayers.enable(5);
    if (parameters.envMap) _programLayers.enable(6);
    if (parameters.lightMap) _programLayers.enable(7);
    if (parameters.aoMap) _programLayers.enable(8);
    if (parameters.emissiveMap) _programLayers.enable(9);
    if (parameters.bumpMap) _programLayers.enable(10);
    if (parameters.normalMap) _programLayers.enable(11);
    if (parameters.objectSpaceNormalMap) _programLayers.enable(12);
    if (parameters.tangentSpaceNormalMap) _programLayers.enable(13);
    if (parameters.clearcoat) _programLayers.enable(14);
    if (parameters.clearcoatMap) _programLayers.enable(15);
    if (parameters.clearcoatRoughnessMap) _programLayers.enable(16);
    if (parameters.clearcoatNormalMap) _programLayers.enable(17);
    if (parameters.displacementMap) _programLayers.enable(18);
    if (parameters.specularMap) _programLayers.enable(19);
    if (parameters.roughnessMap) _programLayers.enable(20);
    if (parameters.metalnessMap) _programLayers.enable(21);
    if (parameters.gradientMap) _programLayers.enable(22);
    if (parameters.alphaMap) _programLayers.enable(23);
    if (parameters.alphaTest) _programLayers.enable(24);
    if (parameters.vertexColors) _programLayers.enable(25);
    if (parameters.vertexAlphas) _programLayers.enable(26);
    if (parameters.vertexUvs) _programLayers.enable(27);
    if (parameters.vertexTangents) _programLayers.enable(28);
    if (parameters.uvsVertexOnly) _programLayers.enable(29);
    if (parameters.fog) _programLayers.enable(30);
    array.push(_programLayers.mask);

    _programLayers.disableAll();

    if (parameters.useFog) _programLayers.enable(0);
    if (parameters.flatShading) _programLayers.enable(1);
    if (parameters.logarithmicDepthBuffer) _programLayers.enable(2);
    if (parameters.skinning) _programLayers.enable(3);
    if (parameters.useVertexTexture) _programLayers.enable(4);
    if (parameters.morphTargets) _programLayers.enable(5);
    if (parameters.morphNormals) _programLayers.enable(6);
    if (parameters.morphColors) _programLayers.enable(7);
    if (parameters.premultipliedAlpha) _programLayers.enable(8);
    if (parameters.shadowMapEnabled) _programLayers.enable(9);
    if (parameters.physicallyCorrectLights) _programLayers.enable(10);
    if (parameters.doubleSided) _programLayers.enable(11);
    if (parameters.flipSided) _programLayers.enable(12);
    if (parameters.depthPacking) _programLayers.enable(13);
    if (parameters.dithering) _programLayers.enable(14);
    if (parameters.specularIntensityMap) _programLayers.enable(15);
    if (parameters.specularColorMap) _programLayers.enable(16);
    if (parameters.transmission) _programLayers.enable(17);
    if (parameters.transmissionMap) _programLayers.enable(18);
    if (parameters.thicknessMap) _programLayers.enable(19);
    if (parameters.sheen) _programLayers.enable(20);
    if (parameters.sheenColorMap) _programLayers.enable(21);
    if (parameters.sheenRoughnessMap) _programLayers.enable(22);
    if (parameters.decodeVideoTexture) _programLayers.enable(23);
    if (parameters.opaque) _programLayers.enable(24);
    array.push(_programLayers.mask);
  }

  function getUniforms(material) {
    var shaderID = shaderIDs[material.type];
    var uniforms;

    if (shaderID) {
      var shader = ShaderLib[shaderID];
      uniforms = UniformsUtils.clone(shader.uniforms);
    } else {
      uniforms = material.uniforms;
    }

    return uniforms;
  }

  function acquireProgram(parameters, cacheKey) {
    var program; // Check if code has been already compiled

    for (var p = 0, pl = programs.length; p < pl; p++) {
      var preexistingProgram = programs[p];

      if (preexistingProgram.cacheKey === cacheKey) {
        program = preexistingProgram;
        ++program.usedTimes;
        break;
      }
    }

    if (program === undefined) {
      program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
      programs.push(program);
    }

    return program;
  }

  function releaseProgram(program) {
    if (--program.usedTimes === 0) {
      // Remove from unordered set
      var _i115 = programs.indexOf(program);

      programs[_i115] = programs[programs.length - 1];
      programs.pop(); // Free WebGL resources

      program.destroy();
    }
  }

  function releaseShaderCache(material) {
    _customShaders.remove(material);
  }

  function dispose() {
    _customShaders.dispose();
  }

  return {
    getParameters: getParameters,
    getProgramCacheKey: getProgramCacheKey,
    getUniforms: getUniforms,
    acquireProgram: acquireProgram,
    releaseProgram: releaseProgram,
    releaseShaderCache: releaseShaderCache,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: programs,
    dispose: dispose
  };
}

function WebGLProperties() {
  var properties = new WeakMap();

  function get(object) {
    var map = properties.get(object);

    if (map === undefined) {
      map = {};
      properties.set(object, map);
    }

    return map;
  }

  function remove(object) {
    properties.delete(object);
  }

  function update(object, key, value) {
    properties.get(object)[key] = value;
  }

  function dispose() {
    properties = new WeakMap();
  }

  return {
    get: get,
    remove: remove,
    update: update,
    dispose: dispose
  };
}

function painterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.material.id !== b.material.id) {
    return a.material.id - b.material.id;
  } else if (a.z !== b.z) {
    return a.z - b.z;
  } else {
    return a.id - b.id;
  }
}

function reversePainterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.z !== b.z) {
    return b.z - a.z;
  } else {
    return a.id - b.id;
  }
}

function WebGLRenderList() {
  var renderItems = [];
  var renderItemsIndex = 0;
  var opaque = [];
  var transmissive = [];
  var transparent = [];

  function init() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transmissive.length = 0;
    transparent.length = 0;
  }

  function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
    var renderItem = renderItems[renderItemsIndex];

    if (renderItem === undefined) {
      renderItem = {
        id: object.id,
        object: object,
        geometry: geometry,
        material: material,
        groupOrder: groupOrder,
        renderOrder: object.renderOrder,
        z: z,
        group: group
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z;
      renderItem.group = group;
    }

    renderItemsIndex++;
    return renderItem;
  }

  function push(object, geometry, material, groupOrder, z, group) {
    var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);

    if (material.transmission > 0.0) {
      transmissive.push(renderItem);
    } else if (material.transparent === true) {
      transparent.push(renderItem);
    } else {
      opaque.push(renderItem);
    }
  }

  function unshift(object, geometry, material, groupOrder, z, group) {
    var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);

    if (material.transmission > 0.0) {
      transmissive.unshift(renderItem);
    } else if (material.transparent === true) {
      transparent.unshift(renderItem);
    } else {
      opaque.unshift(renderItem);
    }
  }

  function sort(customOpaqueSort, customTransparentSort) {
    if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
    if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
    if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
  }

  function finish() {
    // Clear references from inactive renderItems in the list
    for (var _i116 = renderItemsIndex, il = renderItems.length; _i116 < il; _i116++) {
      var renderItem = renderItems[_i116];
      if (renderItem.id === null) break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.group = null;
    }
  }

  return {
    opaque: opaque,
    transmissive: transmissive,
    transparent: transparent,
    init: init,
    push: push,
    unshift: unshift,
    finish: finish,
    sort: sort
  };
}

function WebGLRenderLists() {
  var lists = new WeakMap();

  function get(scene, renderCallDepth) {
    var list;

    if (lists.has(scene) === false) {
      list = new WebGLRenderList();
      lists.set(scene, [list]);
    } else {
      if (renderCallDepth >= lists.get(scene).length) {
        list = new WebGLRenderList();
        lists.get(scene).push(list);
      } else {
        list = lists.get(scene)[renderCallDepth];
      }
    }

    return list;
  }

  function dispose() {
    lists = new WeakMap();
  }

  return {
    get: get,
    dispose: dispose
  };
}

function UniformsCache() {
  var lights = {};
  return {
    get: function get(light) {
      if (lights[light.id] !== undefined) {
        return lights[light.id];
      }

      var uniforms;

      switch (light.type) {
        case 'DirectionalLight':
          uniforms = {
            direction: new Vector3(),
            color: new Color()
          };
          break;

        case 'SpotLight':
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;

        case 'PointLight':
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0
          };
          break;

        case 'HemisphereLight':
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;

        case 'RectAreaLight':
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3()
          };
          break;
      }

      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}

function ShadowUniformsCache() {
  var lights = {};
  return {
    get: function get(light) {
      if (lights[light.id] !== undefined) {
        return lights[light.id];
      }

      var uniforms;

      switch (light.type) {
        case 'DirectionalLight':
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;

        case 'SpotLight':
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;

        case 'PointLight':
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1000
          };
          break;
        // TODO (abelnation): set RectAreaLight shadow uniforms
      }

      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}

var nextVersion = 0;

function shadowCastingLightsFirst(lightA, lightB) {
  return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
}

function WebGLLights(extensions, capabilities) {
  var cache = new UniformsCache();
  var shadowCache = ShadowUniformsCache();
  var state = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotShadow: [],
    spotShadowMap: [],
    spotShadowMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: []
  };

  for (var _i117 = 0; _i117 < 9; _i117++) {
    state.probe.push(new Vector3());
  }

  var vector3 = new Vector3();
  var matrix4 = new Matrix4();
  var matrix42 = new Matrix4();

  function setup(lights, physicallyCorrectLights) {
    var r = 0,
        g = 0,
        b = 0;

    for (var _i118 = 0; _i118 < 9; _i118++) {
      state.probe[_i118].set(0, 0, 0);
    }

    var directionalLength = 0;
    var pointLength = 0;
    var spotLength = 0;
    var rectAreaLength = 0;
    var hemiLength = 0;
    var numDirectionalShadows = 0;
    var numPointShadows = 0;
    var numSpotShadows = 0;
    lights.sort(shadowCastingLightsFirst); // artist-friendly light intensity scaling factor

    var scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;

    for (var _i119 = 0, l = lights.length; _i119 < l; _i119++) {
      var light = lights[_i119];
      var color = light.color;
      var intensity = light.intensity;
      var distance = light.distance;
      var shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;

      if (light.isAmbientLight) {
        r += color.r * intensity * scaleFactor;
        g += color.g * intensity * scaleFactor;
        b += color.b * intensity * scaleFactor;
      } else if (light.isLightProbe) {
        for (var j = 0; j < 9; j++) {
          state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
        }
      } else if (light.isDirectionalLight) {
        var uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);

        if (light.castShadow) {
          var shadow = light.shadow;
          var shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.directionalShadow[directionalLength] = shadowUniforms;
          state.directionalShadowMap[directionalLength] = shadowMap;
          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
          numDirectionalShadows++;
        }

        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        var _uniforms = cache.get(light);

        _uniforms.position.setFromMatrixPosition(light.matrixWorld);

        _uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);

        _uniforms.distance = distance;
        _uniforms.coneCos = Math.cos(light.angle);
        _uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        _uniforms.decay = light.decay;

        if (light.castShadow) {
          var _shadow = light.shadow;

          var _shadowUniforms = shadowCache.get(light);

          _shadowUniforms.shadowBias = _shadow.bias;
          _shadowUniforms.shadowNormalBias = _shadow.normalBias;
          _shadowUniforms.shadowRadius = _shadow.radius;
          _shadowUniforms.shadowMapSize = _shadow.mapSize;
          state.spotShadow[spotLength] = _shadowUniforms;
          state.spotShadowMap[spotLength] = shadowMap;
          state.spotShadowMatrix[spotLength] = light.shadow.matrix;
          numSpotShadows++;
        }

        state.spot[spotLength] = _uniforms;
        spotLength++;
      } else if (light.isRectAreaLight) {
        var _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted
        //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
        // (b) intensity is the brightness of the light


        _uniforms2.color.copy(color).multiplyScalar(intensity);

        _uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);

        _uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);

        state.rectArea[rectAreaLength] = _uniforms2;
        rectAreaLength++;
      } else if (light.isPointLight) {
        var _uniforms3 = cache.get(light);

        _uniforms3.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);

        _uniforms3.distance = light.distance;
        _uniforms3.decay = light.decay;

        if (light.castShadow) {
          var _shadow2 = light.shadow;

          var _shadowUniforms2 = shadowCache.get(light);

          _shadowUniforms2.shadowBias = _shadow2.bias;
          _shadowUniforms2.shadowNormalBias = _shadow2.normalBias;
          _shadowUniforms2.shadowRadius = _shadow2.radius;
          _shadowUniforms2.shadowMapSize = _shadow2.mapSize;
          _shadowUniforms2.shadowCameraNear = _shadow2.camera.near;
          _shadowUniforms2.shadowCameraFar = _shadow2.camera.far;
          state.pointShadow[pointLength] = _shadowUniforms2;
          state.pointShadowMap[pointLength] = shadowMap;
          state.pointShadowMatrix[pointLength] = light.shadow.matrix;
          numPointShadows++;
        }

        state.point[pointLength] = _uniforms3;
        pointLength++;
      } else if (light.isHemisphereLight) {
        var _uniforms4 = cache.get(light);

        _uniforms4.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);

        _uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);

        state.hemi[hemiLength] = _uniforms4;
        hemiLength++;
      }
    }

    if (rectAreaLength > 0) {
      if (capabilities.isWebGL2) {
        // WebGL 2
        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
      } else {
        // WebGL 1
        if (extensions.has('OES_texture_float_linear') === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else if (extensions.has('OES_texture_half_float_linear') === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
          state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
        } else {
          console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');
        }
      }
    }

    state.ambient[0] = r;
    state.ambient[1] = g;
    state.ambient[2] = b;
    var hash = state.hash;

    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
      state.directional.length = directionalLength;
      state.spot.length = spotLength;
      state.rectArea.length = rectAreaLength;
      state.point.length = pointLength;
      state.hemi.length = hemiLength;
      state.directionalShadow.length = numDirectionalShadows;
      state.directionalShadowMap.length = numDirectionalShadows;
      state.pointShadow.length = numPointShadows;
      state.pointShadowMap.length = numPointShadows;
      state.spotShadow.length = numSpotShadows;
      state.spotShadowMap.length = numSpotShadows;
      state.directionalShadowMatrix.length = numDirectionalShadows;
      state.pointShadowMatrix.length = numPointShadows;
      state.spotShadowMatrix.length = numSpotShadows;
      hash.directionalLength = directionalLength;
      hash.pointLength = pointLength;
      hash.spotLength = spotLength;
      hash.rectAreaLength = rectAreaLength;
      hash.hemiLength = hemiLength;
      hash.numDirectionalShadows = numDirectionalShadows;
      hash.numPointShadows = numPointShadows;
      hash.numSpotShadows = numSpotShadows;
      state.version = nextVersion++;
    }
  }

  function setupView(lights, camera) {
    var directionalLength = 0;
    var pointLength = 0;
    var spotLength = 0;
    var rectAreaLength = 0;
    var hemiLength = 0;
    var viewMatrix = camera.matrixWorldInverse;

    for (var _i120 = 0, l = lights.length; _i120 < l; _i120++) {
      var light = lights[_i120];

      if (light.isDirectionalLight) {
        var uniforms = state.directional[directionalLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        directionalLength++;
      } else if (light.isSpotLight) {
        var _uniforms5 = state.spot[spotLength];

        _uniforms5.position.setFromMatrixPosition(light.matrixWorld);

        _uniforms5.position.applyMatrix4(viewMatrix);

        _uniforms5.direction.setFromMatrixPosition(light.matrixWorld);

        vector3.setFromMatrixPosition(light.target.matrixWorld);

        _uniforms5.direction.sub(vector3);

        _uniforms5.direction.transformDirection(viewMatrix);

        spotLength++;
      } else if (light.isRectAreaLight) {
        var _uniforms6 = state.rectArea[rectAreaLength];

        _uniforms6.position.setFromMatrixPosition(light.matrixWorld);

        _uniforms6.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors


        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);

        _uniforms6.halfWidth.set(light.width * 0.5, 0.0, 0.0);

        _uniforms6.halfHeight.set(0.0, light.height * 0.5, 0.0);

        _uniforms6.halfWidth.applyMatrix4(matrix42);

        _uniforms6.halfHeight.applyMatrix4(matrix42);

        rectAreaLength++;
      } else if (light.isPointLight) {
        var _uniforms7 = state.point[pointLength];

        _uniforms7.position.setFromMatrixPosition(light.matrixWorld);

        _uniforms7.position.applyMatrix4(viewMatrix);

        pointLength++;
      } else if (light.isHemisphereLight) {
        var _uniforms8 = state.hemi[hemiLength];

        _uniforms8.direction.setFromMatrixPosition(light.matrixWorld);

        _uniforms8.direction.transformDirection(viewMatrix);

        _uniforms8.direction.normalize();

        hemiLength++;
      }
    }
  }

  return {
    setup: setup,
    setupView: setupView,
    state: state
  };
}

function WebGLRenderState(extensions, capabilities) {
  var lights = new WebGLLights(extensions, capabilities);
  var lightsArray = [];
  var shadowsArray = [];

  function init() {
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }

  function pushLight(light) {
    lightsArray.push(light);
  }

  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }

  function setupLights(physicallyCorrectLights) {
    lights.setup(lightsArray, physicallyCorrectLights);
  }

  function setupLightsView(camera) {
    lights.setupView(lightsArray, camera);
  }

  var state = {
    lightsArray: lightsArray,
    shadowsArray: shadowsArray,
    lights: lights
  };
  return {
    init: init,
    state: state,
    setupLights: setupLights,
    setupLightsView: setupLightsView,
    pushLight: pushLight,
    pushShadow: pushShadow
  };
}

function WebGLRenderStates(extensions, capabilities) {
  var renderStates = new WeakMap();

  function get(scene, renderCallDepth = 0) {
    var renderState;

    if (renderStates.has(scene) === false) {
      renderState = new WebGLRenderState(extensions, capabilities);
      renderStates.set(scene, [renderState]);
    } else {
      if (renderCallDepth >= renderStates.get(scene).length) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.get(scene).push(renderState);
      } else {
        renderState = renderStates.get(scene)[renderCallDepth];
      }
    }

    return renderState;
  }

  function dispose() {
    renderStates = new WeakMap();
  }

  return {
    get: get,
    dispose: dispose
  };
}

var MeshDepthMaterial = /*#__PURE__*/function (_Material3) {
  _inherits(MeshDepthMaterial, _Material3);

  var _super32 = _createSuper(MeshDepthMaterial);

  function MeshDepthMaterial(parameters) {
    var _this23;

    _classCallCheck(this, MeshDepthMaterial);

    _this23 = _super32.call(this);
    _this23.type = 'MeshDepthMaterial';
    _this23.depthPacking = BasicDepthPacking;
    _this23.map = null;
    _this23.alphaMap = null;
    _this23.displacementMap = null;
    _this23.displacementScale = 1;
    _this23.displacementBias = 0;
    _this23.wireframe = false;
    _this23.wireframeLinewidth = 1;
    _this23.fog = false;

    _this23.setValues(parameters);

    return _this23;
  }

  _createClass(MeshDepthMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshDepthMaterial.prototype), "copy", this).call(this, source);

      this.depthPacking = source.depthPacking;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      return this;
    }
  }]);

  return MeshDepthMaterial;
}(Material);

exports.MeshDepthMaterial = MeshDepthMaterial;
MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

var MeshDistanceMaterial = /*#__PURE__*/function (_Material4) {
  _inherits(MeshDistanceMaterial, _Material4);

  var _super33 = _createSuper(MeshDistanceMaterial);

  function MeshDistanceMaterial(parameters) {
    var _this24;

    _classCallCheck(this, MeshDistanceMaterial);

    _this24 = _super33.call(this);
    _this24.type = 'MeshDistanceMaterial';
    _this24.referencePosition = new Vector3();
    _this24.nearDistance = 1;
    _this24.farDistance = 1000;
    _this24.map = null;
    _this24.alphaMap = null;
    _this24.displacementMap = null;
    _this24.displacementScale = 1;
    _this24.displacementBias = 0;
    _this24.fog = false;

    _this24.setValues(parameters);

    return _this24;
  }

  _createClass(MeshDistanceMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshDistanceMaterial.prototype), "copy", this).call(this, source);

      this.referencePosition.copy(source.referencePosition);
      this.nearDistance = source.nearDistance;
      this.farDistance = source.farDistance;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      return this;
    }
  }]);

  return MeshDistanceMaterial;
}(Material);

exports.MeshDistanceMaterial = MeshDistanceMaterial;
MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
var vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

function WebGLShadowMap(_renderer, _objects, _capabilities) {
  var _frustum = new Frustum();

  var _shadowMapSize = new Vector2(),
      _viewportSize = new Vector2(),
      _viewport = new Vector4(),
      _depthMaterial = new MeshDepthMaterial({
    depthPacking: RGBADepthPacking
  }),
      _distanceMaterial = new MeshDistanceMaterial(),
      _materialCache = {},
      _maxTextureSize = _capabilities.maxTextureSize;

  var shadowSide = {
    0: BackSide,
    1: FrontSide,
    2: DoubleSide
  };
  var shadowMaterialVertical = new ShaderMaterial({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: {
        value: null
      },
      resolution: {
        value: new Vector2()
      },
      radius: {
        value: 4.0
      }
    },
    vertexShader: vertex,
    fragmentShader: fragment
  });
  var shadowMaterialHorizontal = shadowMaterialVertical.clone();
  shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
  var fullScreenTri = new BufferGeometry();
  fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
  var fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
  var scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;

  this.render = function (lights, scene, camera) {
    if (scope.enabled === false) return;
    if (scope.autoUpdate === false && scope.needsUpdate === false) return;
    if (lights.length === 0) return;

    var currentRenderTarget = _renderer.getRenderTarget();

    var activeCubeFace = _renderer.getActiveCubeFace();

    var activeMipmapLevel = _renderer.getActiveMipmapLevel();

    var _state = _renderer.state; // Set GL state for depth map.

    _state.setBlending(NoBlending);

    _state.buffers.color.setClear(1, 1, 1, 1);

    _state.buffers.depth.setTest(true);

    _state.setScissorTest(false); // render depth map


    for (var _i121 = 0, il = lights.length; _i121 < il; _i121++) {
      var light = lights[_i121];
      var shadow = light.shadow;

      if (shadow === undefined) {
        console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
        continue;
      }

      if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;

      _shadowMapSize.copy(shadow.mapSize);

      var shadowFrameExtents = shadow.getFrameExtents();

      _shadowMapSize.multiply(shadowFrameExtents);

      _viewportSize.copy(shadow.mapSize);

      if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
        if (_shadowMapSize.x > _maxTextureSize) {
          _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
          shadow.mapSize.x = _viewportSize.x;
        }

        if (_shadowMapSize.y > _maxTextureSize) {
          _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
          shadow.mapSize.y = _viewportSize.y;
        }
      }

      if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
        shadow.map.texture.name = light.name + '.shadowMap';
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
        shadow.camera.updateProjectionMatrix();
      }

      if (shadow.map === null) {
        var pars = {
          minFilter: NearestFilter,
          magFilter: NearestFilter,
          format: RGBAFormat
        };
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + '.shadowMap';
        shadow.camera.updateProjectionMatrix();
      }

      _renderer.setRenderTarget(shadow.map);

      _renderer.clear();

      var viewportCount = shadow.getViewportCount();

      for (var vp = 0; vp < viewportCount; vp++) {
        var viewport = shadow.getViewport(vp);

        _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);

        _state.viewport(_viewport);

        shadow.updateMatrices(light, vp);
        _frustum = shadow.getFrustum();
        renderObject(scene, camera, shadow.camera, light, this.type);
      } // do blur pass for VSM


      if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
        VSMPass(shadow, camera);
      }

      shadow.needsUpdate = false;
    }

    scope.needsUpdate = false;

    _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
  };

  function VSMPass(shadow, camera) {
    var geometry = _objects.update(fullScreenMesh);

    if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
      shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialVertical.needsUpdate = true;
      shadowMaterialHorizontal.needsUpdate = true;
    } // vertical pass


    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialVertical.uniforms.radius.value = shadow.radius;

    _renderer.setRenderTarget(shadow.mapPass);

    _renderer.clear();

    _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass


    shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;

    _renderer.setRenderTarget(shadow.map);

    _renderer.clear();

    _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
  }

  function getDepthMaterial(object, material, light, shadowCameraNear, shadowCameraFar, type) {
    var result = null;
    var customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;

    if (customMaterial !== undefined) {
      result = customMaterial;
    } else {
      result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
    }

    if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {
      // in this case we need a unique material instance reflecting the
      // appropriate state
      var keyA = result.uuid,
          keyB = material.uuid;
      var materialsForVariant = _materialCache[keyA];

      if (materialsForVariant === undefined) {
        materialsForVariant = {};
        _materialCache[keyA] = materialsForVariant;
      }

      var cachedMaterial = materialsForVariant[keyB];

      if (cachedMaterial === undefined) {
        cachedMaterial = result.clone();
        materialsForVariant[keyB] = cachedMaterial;
      }

      result = cachedMaterial;
    }

    result.visible = material.visible;
    result.wireframe = material.wireframe;

    if (type === VSMShadowMap) {
      result.side = material.shadowSide !== null ? material.shadowSide : material.side;
    } else {
      result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
    }

    result.alphaMap = material.alphaMap;
    result.alphaTest = material.alphaTest;
    result.clipShadows = material.clipShadows;
    result.clippingPlanes = material.clippingPlanes;
    result.clipIntersection = material.clipIntersection;
    result.displacementMap = material.displacementMap;
    result.displacementScale = material.displacementScale;
    result.displacementBias = material.displacementBias;
    result.wireframeLinewidth = material.wireframeLinewidth;
    result.linewidth = material.linewidth;

    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
      result.referencePosition.setFromMatrixPosition(light.matrixWorld);
      result.nearDistance = shadowCameraNear;
      result.farDistance = shadowCameraFar;
    }

    return result;
  }

  function renderObject(object, camera, shadowCamera, light, type) {
    if (object.visible === false) return;
    var visible = object.layers.test(camera.layers);

    if (visible && (object.isMesh || object.isLine || object.isPoints)) {
      if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);

        var geometry = _objects.update(object);

        var material = object.material;

        if (Array.isArray(material)) {
          var groups = geometry.groups;

          for (var k = 0, kl = groups.length; k < kl; k++) {
            var group = groups[k];
            var groupMaterial = material[group.materialIndex];

            if (groupMaterial && groupMaterial.visible) {
              var depthMaterial = getDepthMaterial(object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);

              _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
            }
          }
        } else if (material.visible) {
          var _depthMaterial2 = getDepthMaterial(object, material, light, shadowCamera.near, shadowCamera.far, type);

          _renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial2, object, null);
        }
      }
    }

    var children = object.children;

    for (var _i122 = 0, l = children.length; _i122 < l; _i122++) {
      renderObject(children[_i122], camera, shadowCamera, light, type);
    }
  }
}

function WebGLState(gl, extensions, capabilities) {
  var _equationToGL, _factorToGL;

  var isWebGL2 = capabilities.isWebGL2;

  function ColorBuffer() {
    var locked = false;
    var color = new Vector4();
    var currentColorMask = null;
    var currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function setMask(colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function setLocked(lock) {
        locked = lock;
      },
      setClear: function setClear(r, g, b, a, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r *= a;
          g *= a;
          b *= a;
        }

        color.set(r, g, b, a);

        if (currentColorClear.equals(color) === false) {
          gl.clearColor(r, g, b, a);
          currentColorClear.copy(color);
        }
      },
      reset: function reset() {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0); // set to invalid state
      }
    };
  }

  function DepthBuffer() {
    var locked = false;
    var currentDepthMask = null;
    var currentDepthFunc = null;
    var currentDepthClear = null;
    return {
      setTest: function setTest(depthTest) {
        if (depthTest) {
          enable(2929);
        } else {
          disable(2929);
        }
      },
      setMask: function setMask(depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function setFunc(depthFunc) {
        if (currentDepthFunc !== depthFunc) {
          if (depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(512);
                break;

              case AlwaysDepth:
                gl.depthFunc(519);
                break;

              case LessDepth:
                gl.depthFunc(513);
                break;

              case LessEqualDepth:
                gl.depthFunc(515);
                break;

              case EqualDepth:
                gl.depthFunc(514);
                break;

              case GreaterEqualDepth:
                gl.depthFunc(518);
                break;

              case GreaterDepth:
                gl.depthFunc(516);
                break;

              case NotEqualDepth:
                gl.depthFunc(517);
                break;

              default:
                gl.depthFunc(515);
            }
          } else {
            gl.depthFunc(515);
          }

          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function setLocked(lock) {
        locked = lock;
      },
      setClear: function setClear(depth) {
        if (currentDepthClear !== depth) {
          gl.clearDepth(depth);
          currentDepthClear = depth;
        }
      },
      reset: function reset() {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
      }
    };
  }

  function StencilBuffer() {
    var locked = false;
    var currentStencilMask = null;
    var currentStencilFunc = null;
    var currentStencilRef = null;
    var currentStencilFuncMask = null;
    var currentStencilFail = null;
    var currentStencilZFail = null;
    var currentStencilZPass = null;
    var currentStencilClear = null;
    return {
      setTest: function setTest(stencilTest) {
        if (!locked) {
          if (stencilTest) {
            enable(2960);
          } else {
            disable(2960);
          }
        }
      },
      setMask: function setMask(stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function setOp(stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function setLocked(lock) {
        locked = lock;
      },
      setClear: function setClear(stencil) {
        if (currentStencilClear !== stencil) {
          gl.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function reset() {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  } //


  var colorBuffer = new ColorBuffer();
  var depthBuffer = new DepthBuffer();
  var stencilBuffer = new StencilBuffer();
  var enabledCapabilities = {};
  var currentBoundFramebuffers = {};
  var currentDrawbuffers = new WeakMap();
  var defaultDrawbuffers = [];
  var currentProgram = null;
  var currentBlendingEnabled = false;
  var currentBlending = null;
  var currentBlendEquation = null;
  var currentBlendSrc = null;
  var currentBlendDst = null;
  var currentBlendEquationAlpha = null;
  var currentBlendSrcAlpha = null;
  var currentBlendDstAlpha = null;
  var currentPremultipledAlpha = false;
  var currentFlipSided = null;
  var currentCullFace = null;
  var currentLineWidth = null;
  var currentPolygonOffsetFactor = null;
  var currentPolygonOffsetUnits = null;
  var maxTextures = gl.getParameter(35661);
  var lineWidthAvailable = false;
  var version = 0;
  var glVersion = gl.getParameter(7938);

  if (glVersion.indexOf('WebGL') !== -1) {
    version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 1.0;
  } else if (glVersion.indexOf('OpenGL ES') !== -1) {
    version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 2.0;
  }

  var currentTextureSlot = null;
  var currentBoundTextures = {};
  var scissorParam = gl.getParameter(3088);
  var viewportParam = gl.getParameter(2978);
  var currentScissor = new Vector4().fromArray(scissorParam);
  var currentViewport = new Vector4().fromArray(viewportParam);

  function createTexture(type, target, count) {
    var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.

    var texture = gl.createTexture();
    gl.bindTexture(type, texture);
    gl.texParameteri(type, 10241, 9728);
    gl.texParameteri(type, 10240, 9728);

    for (var _i123 = 0; _i123 < count; _i123++) {
      gl.texImage2D(target + _i123, 0, 6408, 1, 1, 0, 6408, 5121, data);
    }

    return texture;
  }

  var emptyTextures = {};
  emptyTextures[3553] = createTexture(3553, 3553, 1);
  emptyTextures[34067] = createTexture(34067, 34069, 6); // init

  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(2929);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(2884);
  setBlending(NoBlending); //

  function enable(id) {
    if (enabledCapabilities[id] !== true) {
      gl.enable(id);
      enabledCapabilities[id] = true;
    }
  }

  function disable(id) {
    if (enabledCapabilities[id] !== false) {
      gl.disable(id);
      enabledCapabilities[id] = false;
    }
  }

  function bindFramebuffer(target, framebuffer) {
    if (currentBoundFramebuffers[target] !== framebuffer) {
      gl.bindFramebuffer(target, framebuffer);
      currentBoundFramebuffers[target] = framebuffer;

      if (isWebGL2) {
        // 36009 is equivalent to 36160
        if (target === 36009) {
          currentBoundFramebuffers[36160] = framebuffer;
        }

        if (target === 36160) {
          currentBoundFramebuffers[36009] = framebuffer;
        }
      }

      return true;
    }

    return false;
  }

  function drawBuffers(renderTarget, framebuffer) {
    var drawBuffers = defaultDrawbuffers;
    var needsUpdate = false;

    if (renderTarget) {
      drawBuffers = currentDrawbuffers.get(framebuffer);

      if (drawBuffers === undefined) {
        drawBuffers = [];
        currentDrawbuffers.set(framebuffer, drawBuffers);
      }

      if (renderTarget.isWebGLMultipleRenderTargets) {
        var textures = renderTarget.texture;

        if (drawBuffers.length !== textures.length || drawBuffers[0] !== 36064) {
          for (var _i124 = 0, il = textures.length; _i124 < il; _i124++) {
            drawBuffers[_i124] = 36064 + _i124;
          }

          drawBuffers.length = textures.length;
          needsUpdate = true;
        }
      } else {
        if (drawBuffers[0] !== 36064) {
          drawBuffers[0] = 36064;
          needsUpdate = true;
        }
      }
    } else {
      if (drawBuffers[0] !== 1029) {
        drawBuffers[0] = 1029;
        needsUpdate = true;
      }
    }

    if (needsUpdate) {
      if (capabilities.isWebGL2) {
        gl.drawBuffers(drawBuffers);
      } else {
        extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(drawBuffers);
      }
    }
  }

  function useProgram(program) {
    if (currentProgram !== program) {
      gl.useProgram(program);
      currentProgram = program;
      return true;
    }

    return false;
  }

  var equationToGL = (_equationToGL = {}, _defineProperty(_equationToGL, AddEquation, 32774), _defineProperty(_equationToGL, SubtractEquation, 32778), _defineProperty(_equationToGL, ReverseSubtractEquation, 32779), _equationToGL);

  if (isWebGL2) {
    equationToGL[MinEquation] = 32775;
    equationToGL[MaxEquation] = 32776;
  } else {
    var extension = extensions.get('EXT_blend_minmax');

    if (extension !== null) {
      equationToGL[MinEquation] = extension.MIN_EXT;
      equationToGL[MaxEquation] = extension.MAX_EXT;
    }
  }

  var factorToGL = (_factorToGL = {}, _defineProperty(_factorToGL, ZeroFactor, 0), _defineProperty(_factorToGL, OneFactor, 1), _defineProperty(_factorToGL, SrcColorFactor, 768), _defineProperty(_factorToGL, SrcAlphaFactor, 770), _defineProperty(_factorToGL, SrcAlphaSaturateFactor, 776), _defineProperty(_factorToGL, DstColorFactor, 774), _defineProperty(_factorToGL, DstAlphaFactor, 772), _defineProperty(_factorToGL, OneMinusSrcColorFactor, 769), _defineProperty(_factorToGL, OneMinusSrcAlphaFactor, 771), _defineProperty(_factorToGL, OneMinusDstColorFactor, 775), _defineProperty(_factorToGL, OneMinusDstAlphaFactor, 773), _factorToGL);

  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled === true) {
        disable(3042);
        currentBlendingEnabled = false;
      }

      return;
    }

    if (currentBlendingEnabled === false) {
      enable(3042);
      currentBlendingEnabled = true;
    }

    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(32774);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }

        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(1, 771, 1, 771);
              break;

            case AdditiveBlending:
              gl.blendFunc(1, 1);
              break;

            case SubtractiveBlending:
              gl.blendFuncSeparate(0, 769, 0, 1);
              break;

            case MultiplyBlending:
              gl.blendFuncSeparate(0, 768, 0, 770);
              break;

            default:
              console.error('THREE.WebGLState: Invalid blending: ', blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(770, 771, 1, 771);
              break;

            case AdditiveBlending:
              gl.blendFunc(770, 1);
              break;

            case SubtractiveBlending:
              gl.blendFuncSeparate(0, 769, 0, 1);
              break;

            case MultiplyBlending:
              gl.blendFunc(0, 768);
              break;

            default:
              console.error('THREE.WebGLState: Invalid blending: ', blending);
              break;
          }
        }

        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }

      return;
    } // custom blending


    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;

    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }

    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }

    currentBlending = blending;
    currentPremultipledAlpha = null;
  }

  function setMaterial(material, frontFaceCW) {
    material.side === DoubleSide ? disable(2884) : enable(2884);
    var flipSided = material.side === BackSide;
    if (frontFaceCW) flipSided = !flipSided;
    setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
    depthBuffer.setFunc(material.depthFunc);
    depthBuffer.setTest(material.depthTest);
    depthBuffer.setMask(material.depthWrite);
    colorBuffer.setMask(material.colorWrite);
    var stencilWrite = material.stencilWrite;
    stencilBuffer.setTest(stencilWrite);

    if (stencilWrite) {
      stencilBuffer.setMask(material.stencilWriteMask);
      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }

    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    material.alphaToCoverage === true ? enable(32926) : disable(32926);
  } //


  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl.frontFace(2304);
      } else {
        gl.frontFace(2305);
      }

      currentFlipSided = flipSided;
    }
  }

  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(2884);

      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(1029);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(1028);
        } else {
          gl.cullFace(1032);
        }
      }
    } else {
      disable(2884);
    }

    currentCullFace = cullFace;
  }

  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable) gl.lineWidth(width);
      currentLineWidth = width;
    }
  }

  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(32823);

      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(32823);
    }
  }

  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(3089);
    } else {
      disable(3089);
    }
  } // texture


  function activeTexture(webglSlot) {
    if (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;

    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }

  function bindTexture(webglType, webglTexture) {
    if (currentTextureSlot === null) {
      activeTexture();
    }

    var boundTexture = currentBoundTextures[currentTextureSlot];

    if (boundTexture === undefined) {
      boundTexture = {
        type: undefined,
        texture: undefined
      };
      currentBoundTextures[currentTextureSlot] = boundTexture;
    }

    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }

  function unbindTexture() {
    var boundTexture = currentBoundTextures[currentTextureSlot];

    if (boundTexture !== undefined && boundTexture.type !== undefined) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = undefined;
      boundTexture.texture = undefined;
    }
  }

  function compressedTexImage2D() {
    try {
      gl.compressedTexImage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texSubImage2D() {
    try {
      gl.texSubImage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texSubImage3D() {
    try {
      gl.texSubImage3D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function compressedTexSubImage2D() {
    try {
      gl.compressedTexSubImage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texStorage2D() {
    try {
      gl.texStorage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texStorage3D() {
    try {
      gl.texStorage3D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texImage2D() {
    try {
      gl.texImage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texImage3D() {
    try {
      gl.texImage3D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  } //


  function scissor(scissor) {
    if (currentScissor.equals(scissor) === false) {
      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
      currentScissor.copy(scissor);
    }
  }

  function viewport(viewport) {
    if (currentViewport.equals(viewport) === false) {
      gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
      currentViewport.copy(viewport);
    }
  } //


  function reset() {
    // reset state
    gl.disable(3042);
    gl.disable(2884);
    gl.disable(2929);
    gl.disable(32823);
    gl.disable(3089);
    gl.disable(2960);
    gl.disable(32926);
    gl.blendEquation(32774);
    gl.blendFunc(1, 0);
    gl.blendFuncSeparate(1, 0, 1, 0);
    gl.colorMask(true, true, true, true);
    gl.clearColor(0, 0, 0, 0);
    gl.depthMask(true);
    gl.depthFunc(513);
    gl.clearDepth(1);
    gl.stencilMask(0xffffffff);
    gl.stencilFunc(519, 0, 0xffffffff);
    gl.stencilOp(7680, 7680, 7680);
    gl.clearStencil(0);
    gl.cullFace(1029);
    gl.frontFace(2305);
    gl.polygonOffset(0, 0);
    gl.activeTexture(33984);
    gl.bindFramebuffer(36160, null);

    if (isWebGL2 === true) {
      gl.bindFramebuffer(36009, null);
      gl.bindFramebuffer(36008, null);
    }

    gl.useProgram(null);
    gl.lineWidth(1);
    gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals

    enabledCapabilities = {};
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentBoundFramebuffers = {};
    currentDrawbuffers = new WeakMap();
    defaultDrawbuffers = [];
    currentProgram = null;
    currentBlendingEnabled = false;
    currentBlending = null;
    currentBlendEquation = null;
    currentBlendSrc = null;
    currentBlendDst = null;
    currentBlendEquationAlpha = null;
    currentBlendSrcAlpha = null;
    currentBlendDstAlpha = null;
    currentPremultipledAlpha = false;
    currentFlipSided = null;
    currentCullFace = null;
    currentLineWidth = null;
    currentPolygonOffsetFactor = null;
    currentPolygonOffsetUnits = null;
    currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
    currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }

  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    enable: enable,
    disable: disable,
    bindFramebuffer: bindFramebuffer,
    drawBuffers: drawBuffers,
    useProgram: useProgram,
    setBlending: setBlending,
    setMaterial: setMaterial,
    setFlipSided: setFlipSided,
    setCullFace: setCullFace,
    setLineWidth: setLineWidth,
    setPolygonOffset: setPolygonOffset,
    setScissorTest: setScissorTest,
    activeTexture: activeTexture,
    bindTexture: bindTexture,
    unbindTexture: unbindTexture,
    compressedTexImage2D: compressedTexImage2D,
    texImage2D: texImage2D,
    texImage3D: texImage3D,
    texStorage2D: texStorage2D,
    texStorage3D: texStorage3D,
    texSubImage2D: texSubImage2D,
    texSubImage3D: texSubImage3D,
    compressedTexSubImage2D: compressedTexSubImage2D,
    scissor: scissor,
    viewport: viewport,
    reset: reset
  };
}

function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  var _wrappingToGL, _filterToGL;

  var isWebGL2 = capabilities.isWebGL2;
  var maxTextures = capabilities.maxTextures;
  var maxCubemapSize = capabilities.maxCubemapSize;
  var maxTextureSize = capabilities.maxTextureSize;
  var maxSamples = capabilities.maxSamples;
  var multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;
  var supportsInvalidateFramebuffer = /OculusBrowser/g.test(navigator.userAgent);

  var _videoTextures = new WeakMap();

  var _canvas;

  var _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
  // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
  // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).


  var useOffscreenCanvas = false;

  try {
    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' // eslint-disable-next-line compat/compat
    && new OffscreenCanvas(1, 1).getContext('2d') !== null;
  } catch (err) {// Ignore any errors
  }

  function createCanvas(width, height) {
    // Use OffscreenCanvas when available. Specially needed in web workers
    return useOffscreenCanvas ? // eslint-disable-next-line compat/compat
    new OffscreenCanvas(width, height) : createElementNS('canvas');
  }

  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
    var scale = 1; // handle case if texture exceeds max size

    if (image.width > maxSize || image.height > maxSize) {
      scale = maxSize / Math.max(image.width, image.height);
    } // only perform resize if necessary


    if (scale < 1 || needsPowerOfTwo === true) {
      // only perform resize for certain image types
      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
        var floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
        var width = floor(scale * image.width);
        var height = floor(scale * image.height);
        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas

        var canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
        canvas.width = width;
        canvas.height = height;
        var context = canvas.getContext('2d');
        context.drawImage(image, 0, 0, width, height);
        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');
        return canvas;
      } else {
        if ('data' in image) {
          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
        }

        return image;
      }
    }

    return image;
  }

  function isPowerOfTwo$1(image) {
    return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
  }

  function textureNeedsPowerOfTwo(texture) {
    if (isWebGL2) return false;
    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }

  function textureNeedsGenerateMipmaps(texture, supportsMips) {
    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }

  function generateMipmap(target) {
    _gl.generateMipmap(target);
  }

  function getInternalFormat(internalFormatName, glFormat, glType, encoding, isVideoTexture = false) {
    if (isWebGL2 === false) return glFormat;

    if (internalFormatName !== null) {
      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
    }

    var internalFormat = glFormat;

    if (glFormat === 6403) {
      if (glType === 5126) internalFormat = 33326;
      if (glType === 5131) internalFormat = 33325;
      if (glType === 5121) internalFormat = 33321;
    }

    if (glFormat === 33319) {
      if (glType === 5126) internalFormat = 33328;
      if (glType === 5131) internalFormat = 33327;
      if (glType === 5121) internalFormat = 33323;
    }

    if (glFormat === 6408) {
      if (glType === 5126) internalFormat = 34836;
      if (glType === 5131) internalFormat = 34842;
      if (glType === 5121) internalFormat = encoding === sRGBEncoding && isVideoTexture === false ? 35907 : 32856;
      if (glType === 32819) internalFormat = 32854;
      if (glType === 32820) internalFormat = 32855;
    }

    if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 33327 || internalFormat === 33328 || internalFormat === 34842 || internalFormat === 34836) {
      extensions.get('EXT_color_buffer_float');
    }

    return internalFormat;
  }

  function getMipLevels(texture, image, supportsMips) {
    if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
      return Math.log2(Math.max(image.width, image.height)) + 1;
    } else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {
      // user-defined mipmaps
      return texture.mipmaps.length;
    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
      return image.mipmaps.length;
    } else {
      // texture without mipmaps (only base level)
      return 1;
    }
  } // Fallback filters for non-power-of-2 textures


  function filterFallback(f) {
    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
      return 9728;
    }

    return 9729;
  } //


  function onTextureDispose(event) {
    var texture = event.target;
    texture.removeEventListener('dispose', onTextureDispose);
    deallocateTexture(texture);

    if (texture.isVideoTexture) {
      _videoTextures.delete(texture);
    }
  }

  function onRenderTargetDispose(event) {
    var renderTarget = event.target;
    renderTarget.removeEventListener('dispose', onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
  } //


  function deallocateTexture(texture) {
    var textureProperties = properties.get(texture);
    if (textureProperties.__webglInit === undefined) return; // check if it's necessary to remove the WebGLTexture object

    var source = texture.source;

    var webglTextures = _sources.get(source);

    if (webglTextures) {
      var webglTexture = webglTextures[textureProperties.__cacheKey];
      webglTexture.usedTimes--; // the WebGLTexture object is not used anymore, remove it

      if (webglTexture.usedTimes === 0) {
        deleteTexture(texture);
      } // remove the weak map entry if no WebGLTexture uses the source anymore


      if (Object.keys(webglTextures).length === 0) {
        _sources.delete(source);
      }
    }

    properties.remove(texture);
  }

  function deleteTexture(texture) {
    var textureProperties = properties.get(texture);

    _gl.deleteTexture(textureProperties.__webglTexture);

    var source = texture.source;

    var webglTextures = _sources.get(source);

    delete webglTextures[textureProperties.__cacheKey];
    info.memory.textures--;
  }

  function deallocateRenderTarget(renderTarget) {
    var texture = renderTarget.texture;
    var renderTargetProperties = properties.get(renderTarget);
    var textureProperties = properties.get(texture);

    if (textureProperties.__webglTexture !== undefined) {
      _gl.deleteTexture(textureProperties.__webglTexture);

      info.memory.textures--;
    }

    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
    }

    if (renderTarget.isWebGLCubeRenderTarget) {
      for (var _i125 = 0; _i125 < 6; _i125++) {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[_i125]);

        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[_i125]);
      }
    } else {
      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);

      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
      if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
    }

    if (renderTarget.isWebGLMultipleRenderTargets) {
      for (var _i126 = 0, il = texture.length; _i126 < il; _i126++) {
        var attachmentProperties = properties.get(texture[_i126]);

        if (attachmentProperties.__webglTexture) {
          _gl.deleteTexture(attachmentProperties.__webglTexture);

          info.memory.textures--;
        }

        properties.remove(texture[_i126]);
      }
    }

    properties.remove(texture);
    properties.remove(renderTarget);
  } //


  var textureUnits = 0;

  function resetTextureUnits() {
    textureUnits = 0;
  }

  function allocateTextureUnit() {
    var textureUnit = textureUnits;

    if (textureUnit >= maxTextures) {
      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
    }

    textureUnits += 1;
    return textureUnit;
  }

  function getTextureCacheKey(texture) {
    var array = [];
    array.push(texture.wrapS);
    array.push(texture.wrapT);
    array.push(texture.magFilter);
    array.push(texture.minFilter);
    array.push(texture.anisotropy);
    array.push(texture.internalFormat);
    array.push(texture.format);
    array.push(texture.type);
    array.push(texture.generateMipmaps);
    array.push(texture.premultiplyAlpha);
    array.push(texture.flipY);
    array.push(texture.unpackAlignment);
    array.push(texture.encoding);
    return array.join();
  } //


  function setTexture2D(texture, slot) {
    var textureProperties = properties.get(texture);
    if (texture.isVideoTexture) updateVideoTexture(texture);

    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
      var image = texture.image;

      if (image === null) {
        console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');
      } else if (image.complete === false) {
        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
      } else {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
    }

    state.activeTexture(33984 + slot);
    state.bindTexture(3553, textureProperties.__webglTexture);
  }

  function setTexture2DArray(texture, slot) {
    var textureProperties = properties.get(texture);

    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }

    state.activeTexture(33984 + slot);
    state.bindTexture(35866, textureProperties.__webglTexture);
  }

  function setTexture3D(texture, slot) {
    var textureProperties = properties.get(texture);

    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }

    state.activeTexture(33984 + slot);
    state.bindTexture(32879, textureProperties.__webglTexture);
  }

  function setTextureCube(texture, slot) {
    var textureProperties = properties.get(texture);

    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadCubeTexture(textureProperties, texture, slot);
      return;
    }

    state.activeTexture(33984 + slot);
    state.bindTexture(34067, textureProperties.__webglTexture);
  }

  var wrappingToGL = (_wrappingToGL = {}, _defineProperty(_wrappingToGL, RepeatWrapping, 10497), _defineProperty(_wrappingToGL, ClampToEdgeWrapping, 33071), _defineProperty(_wrappingToGL, MirroredRepeatWrapping, 33648), _wrappingToGL);
  var filterToGL = (_filterToGL = {}, _defineProperty(_filterToGL, NearestFilter, 9728), _defineProperty(_filterToGL, NearestMipmapNearestFilter, 9984), _defineProperty(_filterToGL, NearestMipmapLinearFilter, 9986), _defineProperty(_filterToGL, LinearFilter, 9729), _defineProperty(_filterToGL, LinearMipmapNearestFilter, 9985), _defineProperty(_filterToGL, LinearMipmapLinearFilter, 9987), _filterToGL);

  function setTextureParameters(textureType, texture, supportsMips) {
    if (supportsMips) {
      _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);

      _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);

      if (textureType === 32879 || textureType === 35866) {
        _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
      }

      _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);

      _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
    } else {
      _gl.texParameteri(textureType, 10242, 33071);

      _gl.texParameteri(textureType, 10243, 33071);

      if (textureType === 32879 || textureType === 35866) {
        _gl.texParameteri(textureType, 32882, 33071);
      }

      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
      }

      _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));

      _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));

      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
      }
    }

    if (extensions.has('EXT_texture_filter_anisotropic') === true) {
      var extension = extensions.get('EXT_texture_filter_anisotropic');
      if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2

      if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only

      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));

        properties.get(texture).__currentAnisotropy = texture.anisotropy;
      }
    }
  }

  function initTexture(textureProperties, texture) {
    var forceUpload = false;

    if (textureProperties.__webglInit === undefined) {
      textureProperties.__webglInit = true;
      texture.addEventListener('dispose', onTextureDispose);
    } // create Source <-> WebGLTextures mapping if necessary


    var source = texture.source;

    var webglTextures = _sources.get(source);

    if (webglTextures === undefined) {
      webglTextures = {};

      _sources.set(source, webglTextures);
    } // check if there is already a WebGLTexture object for the given texture parameters


    var textureCacheKey = getTextureCacheKey(texture);

    if (textureCacheKey !== textureProperties.__cacheKey) {
      // if not, create a new instance of WebGLTexture
      if (webglTextures[textureCacheKey] === undefined) {
        // create new entry
        webglTextures[textureCacheKey] = {
          texture: _gl.createTexture(),
          usedTimes: 0
        };
        info.memory.textures++; // when a new instance of WebGLTexture was created, a texture upload is required
        // even if the image contents are identical

        forceUpload = true;
      }

      webglTextures[textureCacheKey].usedTimes++; // every time the texture cache key changes, it's necessary to check if an instance of
      // WebGLTexture can be deleted in order to avoid a memory leak.

      var webglTexture = webglTextures[textureProperties.__cacheKey];

      if (webglTexture !== undefined) {
        webglTextures[textureProperties.__cacheKey].usedTimes--;

        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
      } // store references to cache key and WebGLTexture object


      textureProperties.__cacheKey = textureCacheKey;
      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
    }

    return forceUpload;
  }

  function uploadTexture(textureProperties, texture, slot) {
    var textureType = 3553;
    if (texture.isDataArrayTexture) textureType = 35866;
    if (texture.isData3DTexture) textureType = 32879;
    var forceUpload = initTexture(textureProperties, texture);
    var source = texture.source;
    state.activeTexture(33984 + slot);
    state.bindTexture(textureType, textureProperties.__webglTexture);

    if (source.version !== source.__currentVersion || forceUpload === true) {
      _gl.pixelStorei(37440, texture.flipY);

      _gl.pixelStorei(37441, texture.premultiplyAlpha);

      _gl.pixelStorei(3317, texture.unpackAlignment);

      _gl.pixelStorei(37443, 0);

      var needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
      var image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
      image = verifyColorSpace(texture, image);
      var supportsMips = isPowerOfTwo$1(image) || isWebGL2,
          glFormat = utils.convert(texture.format, texture.encoding);
      var glType = utils.convert(texture.type),
          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
      setTextureParameters(textureType, texture, supportsMips);
      var mipmap;
      var mipmaps = texture.mipmaps;
      var useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
      var allocateMemory = textureProperties.__version === undefined;
      var levels = getMipLevels(texture, image, supportsMips);

      if (texture.isDepthTexture) {
        // populate depth texture with dummy data
        glInternalFormat = 6402;

        if (isWebGL2) {
          if (texture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (texture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          } else if (texture.type === UnsignedInt248Type) {
            glInternalFormat = 35056;
          } else {
            glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D
          }
        } else {
          if (texture.type === FloatType) {
            console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
          }
        } // validation checks for WebGL 1


        if (texture.format === DepthFormat && glInternalFormat === 6402) {
          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
            console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');
            texture.type = UnsignedShortType;
            glType = utils.convert(texture.type);
          }
        }

        if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
          // Depth stencil textures need the DEPTH_STENCIL internal format
          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
          glInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)

          if (texture.type !== UnsignedInt248Type) {
            console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
            texture.type = UnsignedInt248Type;
            glType = utils.convert(texture.type);
          }
        } //


        if (useTexStorage && allocateMemory) {
          state.texStorage2D(3553, 1, glInternalFormat, image.width, image.height);
        } else {
          state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        }
      } else if (texture.isDataTexture) {
        // use manually created mipmaps if available
        // if there are no manual mipmaps
        // set 0 level mipmap and then use GL to generate other mipmap levels
        if (mipmaps.length > 0 && supportsMips) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }

          for (var _i127 = 0, il = mipmaps.length; _i127 < il; _i127++) {
            mipmap = mipmaps[_i127];

            if (useTexStorage) {
              state.texSubImage2D(3553, _i127, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
            } else {
              state.texImage2D(3553, _i127, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }

          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
            }

            state.texSubImage2D(3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
          } else {
            state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          }
        }
      } else if (texture.isCompressedTexture) {
        if (useTexStorage && allocateMemory) {
          state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
        }

        for (var _i128 = 0, _il9 = mipmaps.length; _i128 < _il9; _i128++) {
          mipmap = mipmaps[_i128];

          if (texture.format !== RGBAFormat) {
            if (glFormat !== null) {
              if (useTexStorage) {
                state.compressedTexSubImage2D(3553, _i128, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
              } else {
                state.compressedTexImage2D(3553, _i128, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
              }
            } else {
              console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');
            }
          } else {
            if (useTexStorage) {
              state.texSubImage2D(3553, _i128, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
            } else {
              state.texImage2D(3553, _i128, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
        }
      } else if (texture.isDataArrayTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(35866, levels, glInternalFormat, image.width, image.height, image.depth);
          }

          state.texSubImage3D(35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
        } else {
          state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isData3DTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(32879, levels, glInternalFormat, image.width, image.height, image.depth);
          }

          state.texSubImage3D(32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
        } else {
          state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isFramebufferTexture) {
        if (useTexStorage && allocateMemory) {
          state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
        } else {
          state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        }
      } else {
        // regular Texture (image, video, canvas)
        // use manually created mipmaps if available
        // if there are no manual mipmaps
        // set 0 level mipmap and then use GL to generate other mipmap levels
        if (mipmaps.length > 0 && supportsMips) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }

          for (var _i129 = 0, _il10 = mipmaps.length; _i129 < _il10; _i129++) {
            mipmap = mipmaps[_i129];

            if (useTexStorage) {
              state.texSubImage2D(3553, _i129, 0, 0, glFormat, glType, mipmap);
            } else {
              state.texImage2D(3553, _i129, glInternalFormat, glFormat, glType, mipmap);
            }
          }

          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
            }

            state.texSubImage2D(3553, 0, 0, 0, glFormat, glType, image);
          } else {
            state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
          }
        }
      }

      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(textureType);
      }

      source.__currentVersion = source.version;
      if (texture.onUpdate) texture.onUpdate(texture);
    }

    textureProperties.__version = texture.version;
  }

  function uploadCubeTexture(textureProperties, texture, slot) {
    if (texture.image.length !== 6) return;
    var forceUpload = initTexture(textureProperties, texture);
    var source = texture.source;
    state.activeTexture(33984 + slot);
    state.bindTexture(34067, textureProperties.__webglTexture);

    if (source.version !== source.__currentVersion || forceUpload === true) {
      _gl.pixelStorei(37440, texture.flipY);

      _gl.pixelStorei(37441, texture.premultiplyAlpha);

      _gl.pixelStorei(3317, texture.unpackAlignment);

      _gl.pixelStorei(37443, 0);

      var isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
      var isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
      var cubeImage = [];

      for (var _i130 = 0; _i130 < 6; _i130++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[_i130] = resizeImage(texture.image[_i130], false, true, maxCubemapSize);
        } else {
          cubeImage[_i130] = isDataTexture ? texture.image[_i130].image : texture.image[_i130];
        }

        cubeImage[_i130] = verifyColorSpace(texture, cubeImage[_i130]);
      }

      var image = cubeImage[0],
          supportsMips = isPowerOfTwo$1(image) || isWebGL2,
          glFormat = utils.convert(texture.format, texture.encoding),
          glType = utils.convert(texture.type),
          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
      var useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
      var allocateMemory = textureProperties.__version === undefined;
      var levels = getMipLevels(texture, image, supportsMips);
      setTextureParameters(34067, texture, supportsMips);
      var mipmaps;

      if (isCompressed) {
        if (useTexStorage && allocateMemory) {
          state.texStorage2D(34067, levels, glInternalFormat, image.width, image.height);
        }

        for (var _i131 = 0; _i131 < 6; _i131++) {
          mipmaps = cubeImage[_i131].mipmaps;

          for (var j = 0; j < mipmaps.length; j++) {
            var mipmap = mipmaps[j];

            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  state.compressedTexSubImage2D(34069 + _i131, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                } else {
                  state.compressedTexImage2D(34069 + _i131, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');
              }
            } else {
              if (useTexStorage) {
                state.texSubImage2D(34069 + _i131, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              } else {
                state.texImage2D(34069 + _i131, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else {
        mipmaps = texture.mipmaps;

        if (useTexStorage && allocateMemory) {
          // TODO: Uniformly handle mipmap definitions
          // Normal textures and compressed cube textures define base level + mips with their mipmap array
          // Uncompressed cube textures use their mipmap array only for mips (no base level)
          if (mipmaps.length > 0) levels++;
          state.texStorage2D(34067, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
        }

        for (var _i132 = 0; _i132 < 6; _i132++) {
          if (isDataTexture) {
            if (useTexStorage) {
              state.texSubImage2D(34069 + _i132, 0, 0, 0, cubeImage[_i132].width, cubeImage[_i132].height, glFormat, glType, cubeImage[_i132].data);
            } else {
              state.texImage2D(34069 + _i132, 0, glInternalFormat, cubeImage[_i132].width, cubeImage[_i132].height, 0, glFormat, glType, cubeImage[_i132].data);
            }

            for (var _j3 = 0; _j3 < mipmaps.length; _j3++) {
              var _mipmap = mipmaps[_j3];
              var mipmapImage = _mipmap.image[_i132].image;

              if (useTexStorage) {
                state.texSubImage2D(34069 + _i132, _j3 + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
              } else {
                state.texImage2D(34069 + _i132, _j3 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
              }
            }
          } else {
            if (useTexStorage) {
              state.texSubImage2D(34069 + _i132, 0, 0, 0, glFormat, glType, cubeImage[_i132]);
            } else {
              state.texImage2D(34069 + _i132, 0, glInternalFormat, glFormat, glType, cubeImage[_i132]);
            }

            for (var _j4 = 0; _j4 < mipmaps.length; _j4++) {
              var _mipmap2 = mipmaps[_j4];

              if (useTexStorage) {
                state.texSubImage2D(34069 + _i132, _j4 + 1, 0, 0, glFormat, glType, _mipmap2.image[_i132]);
              } else {
                state.texImage2D(34069 + _i132, _j4 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i132]);
              }
            }
          }
        }
      }

      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        // We assume images for cube map have the same size.
        generateMipmap(34067);
      }

      source.__currentVersion = source.version;
      if (texture.onUpdate) texture.onUpdate(texture);
    }

    textureProperties.__version = texture.version;
  } // Render targets
  // Setup storage for target texture and bind it to correct framebuffer


  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
    var glFormat = utils.convert(texture.format, texture.encoding);
    var glType = utils.convert(texture.type);
    var glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
    var renderTargetProperties = properties.get(renderTarget);

    if (!renderTargetProperties.__hasExternalTextures) {
      if (textureTarget === 32879 || textureTarget === 35866) {
        state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
      } else {
        state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
      }
    }

    state.bindFramebuffer(36160, framebuffer);

    if (useMultisampledRTT(renderTarget)) {
      multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
    } else {
      _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
    }

    state.bindFramebuffer(36160, null);
  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer


  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(36161, renderbuffer);

    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
      var glInternalFormat = 33189;

      if (isMultisample || useMultisampledRTT(renderTarget)) {
        var depthTexture = renderTarget.depthTexture;

        if (depthTexture && depthTexture.isDepthTexture) {
          if (depthTexture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (depthTexture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          }
        }

        var samples = getRenderTargetSamples(renderTarget);

        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      } else {
        _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
      }

      _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
      var _samples = getRenderTargetSamples(renderTarget);

      if (isMultisample && useMultisampledRTT(renderTarget) === false) {
        _gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);
      } else if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.renderbufferStorageMultisampleEXT(36161, _samples, 35056, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
      }

      _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
    } else {
      // Use the first texture for MRT so far
      var texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;
      var glFormat = utils.convert(texture.format, texture.encoding);
      var glType = utils.convert(texture.type);

      var _glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);

      var _samples2 = getRenderTargetSamples(renderTarget);

      if (isMultisample && useMultisampledRTT(renderTarget) === false) {
        _gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);
      } else if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.renderbufferStorageMultisampleEXT(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);
      }
    }

    _gl.bindRenderbuffer(36161, null);
  } // Setup resources for a Depth Texture for a FBO (needs an extension)


  function setupDepthTexture(framebuffer, renderTarget) {
    var isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
    state.bindFramebuffer(36160, framebuffer);

    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
    } // upload an empty depth texture with framebuffer size


    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }

    setTexture2D(renderTarget.depthTexture, 0);

    var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;

    var samples = getRenderTargetSamples(renderTarget);

    if (renderTarget.depthTexture.format === DepthFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
      }
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
      }
    } else {
      throw new Error('Unknown depthTexture format');
    }
  } // Setup GL resources for a non-texture depth buffer


  function setupDepthRenderbuffer(renderTarget) {
    var renderTargetProperties = properties.get(renderTarget);
    var isCube = renderTarget.isWebGLCubeRenderTarget === true;

    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];

        for (var _i133 = 0; _i133 < 6; _i133++) {
          state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[_i133]);
          renderTargetProperties.__webglDepthbuffer[_i133] = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[_i133], renderTarget, false);
        }
      } else {
        state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
      }
    }

    state.bindFramebuffer(36160, null);
  } // rebind framebuffer with external textures


  function rebindTextures(renderTarget, colorTexture, depthTexture) {
    var renderTargetProperties = properties.get(renderTarget);

    if (colorTexture !== undefined) {
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553);
    }

    if (depthTexture !== undefined) {
      setupDepthRenderbuffer(renderTarget);
    }
  } // Set up GL resources for the render target


  function setupRenderTarget(renderTarget) {
    var texture = renderTarget.texture;
    var renderTargetProperties = properties.get(renderTarget);
    var textureProperties = properties.get(texture);
    renderTarget.addEventListener('dispose', onRenderTargetDispose);

    if (renderTarget.isWebGLMultipleRenderTargets !== true) {
      if (textureProperties.__webglTexture === undefined) {
        textureProperties.__webglTexture = _gl.createTexture();
      }

      textureProperties.__version = texture.version;
      info.memory.textures++;
    }

    var isCube = renderTarget.isWebGLCubeRenderTarget === true;
    var isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
    var supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Setup framebuffer

    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];

      for (var _i134 = 0; _i134 < 6; _i134++) {
        renderTargetProperties.__webglFramebuffer[_i134] = _gl.createFramebuffer();
      }
    } else {
      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

      if (isMultipleRenderTargets) {
        if (capabilities.drawBuffers) {
          var textures = renderTarget.texture;

          for (var _i135 = 0, il = textures.length; _i135 < il; _i135++) {
            var attachmentProperties = properties.get(textures[_i135]);

            if (attachmentProperties.__webglTexture === undefined) {
              attachmentProperties.__webglTexture = _gl.createTexture();
              info.memory.textures++;
            }
          }
        } else {
          console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');
        }
      } else if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
        renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

        _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);

        var glFormat = utils.convert(texture.format, texture.encoding);
        var glType = utils.convert(texture.type);
        var glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        var samples = getRenderTargetSamples(renderTarget);

        _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

        state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);

        _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);

        _gl.bindRenderbuffer(36161, null);

        if (renderTarget.depthBuffer) {
          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
        }

        state.bindFramebuffer(36160, null);
      }
    } // Setup color buffer


    if (isCube) {
      state.bindTexture(34067, textureProperties.__webglTexture);
      setTextureParameters(34067, texture, supportsMips);

      for (var _i136 = 0; _i136 < 6; _i136++) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i136], renderTarget, texture, 36064, 34069 + _i136);
      }

      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(34067);
      }

      state.unbindTexture();
    } else if (isMultipleRenderTargets) {
      var _textures = renderTarget.texture;

      for (var _i137 = 0, _il11 = _textures.length; _i137 < _il11; _i137++) {
        var attachment = _textures[_i137];

        var _attachmentProperties = properties.get(attachment);

        state.bindTexture(3553, _attachmentProperties.__webglTexture);
        setTextureParameters(3553, attachment, supportsMips);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + _i137, 3553);

        if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
          generateMipmap(3553);
        }
      }

      state.unbindTexture();
    } else {
      var glTextureType = 3553;

      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
        if (isWebGL2) {
          glTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;
        } else {
          console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');
        }
      }

      state.bindTexture(glTextureType, textureProperties.__webglTexture);
      setTextureParameters(glTextureType, texture, supportsMips);
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType);

      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        generateMipmap(glTextureType);
      }

      state.unbindTexture();
    } // Setup depth and stencil buffers


    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }

  function updateRenderTargetMipmap(renderTarget) {
    var supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
    var textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];

    for (var _i138 = 0, il = textures.length; _i138 < il; _i138++) {
      var texture = textures[_i138];

      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
        var target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;

        var webglTexture = properties.get(texture).__webglTexture;

        state.bindTexture(target, webglTexture);
        generateMipmap(target);
        state.unbindTexture();
      }
    }
  }

  function updateMultisampleRenderTarget(renderTarget) {
    if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
      var width = renderTarget.width;
      var height = renderTarget.height;
      var mask = 16384;
      var invalidationArray = [36064];
      var depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;

      if (renderTarget.depthBuffer) {
        invalidationArray.push(depthStyle);
      }

      var renderTargetProperties = properties.get(renderTarget);
      var ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;

      if (ignoreDepthValues === false) {
        if (renderTarget.depthBuffer) mask |= 256;
        if (renderTarget.stencilBuffer) mask |= 1024;
      }

      state.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
      state.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);

      if (ignoreDepthValues === true) {
        _gl.invalidateFramebuffer(36008, [depthStyle]);

        _gl.invalidateFramebuffer(36009, [depthStyle]);
      }

      _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);

      if (supportsInvalidateFramebuffer) {
        _gl.invalidateFramebuffer(36008, invalidationArray);
      }

      state.bindFramebuffer(36008, null);
      state.bindFramebuffer(36009, renderTargetProperties.__webglMultisampledFramebuffer);
    }
  }

  function getRenderTargetSamples(renderTarget) {
    return Math.min(maxSamples, renderTarget.samples);
  }

  function useMultisampledRTT(renderTarget) {
    var renderTargetProperties = properties.get(renderTarget);
    return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;
  }

  function updateVideoTexture(texture) {
    var frame = info.render.frame; // Check the last frame we updated the VideoTexture

    if (_videoTextures.get(texture) !== frame) {
      _videoTextures.set(texture, frame);

      texture.update();
    }
  }

  function verifyColorSpace(texture, image) {
    var encoding = texture.encoding;
    var format = texture.format;
    var type = texture.type;
    if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;

    if (encoding !== LinearEncoding) {
      // sRGB
      if (encoding === sRGBEncoding) {
        if (isWebGL2 === false) {
          // in WebGL 1, try to use EXT_sRGB extension and unsized formats
          if (extensions.has('EXT_sRGB') === true && format === RGBAFormat) {
            texture.format = _SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension

            texture.minFilter = LinearFilter;
            texture.generateMipmaps = false;
          } else {
            // slow fallback (CPU decode)
            image = ImageUtils.sRGBToLinear(image);
          }
        } else {
          // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
          if (format !== RGBAFormat || type !== UnsignedByteType) {
            console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');
          }
        }
      } else {
        console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);
      }
    }

    return image;
  } //


  this.allocateTextureUnit = allocateTextureUnit;
  this.resetTextureUnits = resetTextureUnits;
  this.setTexture2D = setTexture2D;
  this.setTexture2DArray = setTexture2DArray;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.rebindTextures = rebindTextures;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  this.setupDepthRenderbuffer = setupDepthRenderbuffer;
  this.setupFrameBufferTexture = setupFrameBufferTexture;
  this.useMultisampledRTT = useMultisampledRTT;
}

function WebGLUtils(gl, extensions, capabilities) {
  var isWebGL2 = capabilities.isWebGL2;

  function convert(p, encoding = null) {
    var extension;
    if (p === UnsignedByteType) return 5121;
    if (p === UnsignedShort4444Type) return 32819;
    if (p === UnsignedShort5551Type) return 32820;
    if (p === ByteType) return 5120;
    if (p === ShortType) return 5122;
    if (p === UnsignedShortType) return 5123;
    if (p === IntType) return 5124;
    if (p === UnsignedIntType) return 5125;
    if (p === FloatType) return 5126;

    if (p === HalfFloatType) {
      if (isWebGL2) return 5131;
      extension = extensions.get('OES_texture_half_float');

      if (extension !== null) {
        return extension.HALF_FLOAT_OES;
      } else {
        return null;
      }
    }

    if (p === AlphaFormat) return 6406;
    if (p === RGBAFormat) return 6408;
    if (p === LuminanceFormat) return 6409;
    if (p === LuminanceAlphaFormat) return 6410;
    if (p === DepthFormat) return 6402;
    if (p === DepthStencilFormat) return 34041;
    if (p === RedFormat) return 6403;

    if (p === RGBFormat) {
      console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');
      return 6408;
    } // WebGL 1 sRGB fallback


    if (p === _SRGBAFormat) {
      extension = extensions.get('EXT_sRGB');

      if (extension !== null) {
        return extension.SRGB_ALPHA_EXT;
      } else {
        return null;
      }
    } // WebGL2 formats.


    if (p === RedIntegerFormat) return 36244;
    if (p === RGFormat) return 33319;
    if (p === RGIntegerFormat) return 33320;
    if (p === RGBAIntegerFormat) return 36249; // S3TC

    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
      if (encoding === sRGBEncoding) {
        extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');

        if (extension !== null) {
          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        extension = extensions.get('WEBGL_compressed_texture_s3tc');

        if (extension !== null) {
          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    } // PVRTC


    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get('WEBGL_compressed_texture_pvrtc');

      if (extension !== null) {
        if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    } // ETC1


    if (p === RGB_ETC1_Format) {
      extension = extensions.get('WEBGL_compressed_texture_etc1');

      if (extension !== null) {
        return extension.COMPRESSED_RGB_ETC1_WEBGL;
      } else {
        return null;
      }
    } // ETC2


    if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
      extension = extensions.get('WEBGL_compressed_texture_etc');

      if (extension !== null) {
        if (p === RGB_ETC2_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
        if (p === RGBA_ETC2_EAC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    } // ASTC


    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
      extension = extensions.get('WEBGL_compressed_texture_astc');

      if (extension !== null) {
        if (p === RGBA_ASTC_4x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (p === RGBA_ASTC_5x4_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (p === RGBA_ASTC_5x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (p === RGBA_ASTC_6x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (p === RGBA_ASTC_6x6_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (p === RGBA_ASTC_8x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (p === RGBA_ASTC_8x6_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (p === RGBA_ASTC_8x8_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (p === RGBA_ASTC_10x5_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (p === RGBA_ASTC_10x6_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (p === RGBA_ASTC_10x8_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (p === RGBA_ASTC_10x10_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (p === RGBA_ASTC_12x10_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (p === RGBA_ASTC_12x12_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    } // BPTC


    if (p === RGBA_BPTC_Format) {
      extension = extensions.get('EXT_texture_compression_bptc');

      if (extension !== null) {
        if (p === RGBA_BPTC_Format) return encoding === sRGBEncoding ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      } else {
        return null;
      }
    } //


    if (p === UnsignedInt248Type) {
      if (isWebGL2) return 34042;
      extension = extensions.get('WEBGL_depth_texture');

      if (extension !== null) {
        return extension.UNSIGNED_INT_24_8_WEBGL;
      } else {
        return null;
      }
    }
  }

  return {
    convert: convert
  };
}

var ArrayCamera = /*#__PURE__*/function (_PerspectiveCamera) {
  _inherits(ArrayCamera, _PerspectiveCamera);

  var _super34 = _createSuper(ArrayCamera);

  function ArrayCamera(array = []) {
    var _this25;

    _classCallCheck(this, ArrayCamera);

    _this25 = _super34.call(this);
    _this25.cameras = array;
    return _this25;
  }

  return _createClass(ArrayCamera);
}(PerspectiveCamera);

exports.ArrayCamera = ArrayCamera;
ArrayCamera.prototype.isArrayCamera = true;

var Group = /*#__PURE__*/function (_Object3D4) {
  _inherits(Group, _Object3D4);

  var _super35 = _createSuper(Group);

  function Group() {
    var _this26;

    _classCallCheck(this, Group);

    _this26 = _super35.call(this);
    _this26.type = 'Group';
    return _this26;
  }

  return _createClass(Group);
}(Object3D);

exports.Group = Group;
Group.prototype.isGroup = true;
var _moveEvent = {
  type: 'move'
};

var WebXRController = /*#__PURE__*/function () {
  function WebXRController() {
    _classCallCheck(this, WebXRController);

    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }

  _createClass(WebXRController, [{
    key: "getHandSpace",
    value: function getHandSpace() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = {};
        this._hand.inputState = {
          pinching: false
        };
      }

      return this._hand;
    }
  }, {
    key: "getTargetRaySpace",
    value: function getTargetRaySpace() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
        this._targetRay.hasLinearVelocity = false;
        this._targetRay.linearVelocity = new Vector3();
        this._targetRay.hasAngularVelocity = false;
        this._targetRay.angularVelocity = new Vector3();
      }

      return this._targetRay;
    }
  }, {
    key: "getGripSpace",
    value: function getGripSpace() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
        this._grip.hasLinearVelocity = false;
        this._grip.linearVelocity = new Vector3();
        this._grip.hasAngularVelocity = false;
        this._grip.angularVelocity = new Vector3();
      }

      return this._grip;
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }

      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }

      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }

      return this;
    }
  }, {
    key: "disconnect",
    value: function disconnect(inputSource) {
      this.dispatchEvent({
        type: 'disconnected',
        data: inputSource
      });

      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }

      if (this._grip !== null) {
        this._grip.visible = false;
      }

      if (this._hand !== null) {
        this._hand.visible = false;
      }

      return this;
    }
  }, {
    key: "update",
    value: function update(inputSource, frame, referenceSpace) {
      var inputPose = null;
      var gripPose = null;
      var handPose = null;
      var targetRay = this._targetRay;
      var grip = this._grip;
      var hand = this._hand;

      if (inputSource && frame.session.visibilityState !== 'visible-blurred') {
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);

          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);

            if (inputPose.linearVelocity) {
              targetRay.hasLinearVelocity = true;
              targetRay.linearVelocity.copy(inputPose.linearVelocity);
            } else {
              targetRay.hasLinearVelocity = false;
            }

            if (inputPose.angularVelocity) {
              targetRay.hasAngularVelocity = true;
              targetRay.angularVelocity.copy(inputPose.angularVelocity);
            } else {
              targetRay.hasAngularVelocity = false;
            }

            this.dispatchEvent(_moveEvent);
          }
        }

        if (hand && inputSource.hand) {
          handPose = true;

          var _iterator2 = _createForOfIteratorHelper(inputSource.hand.values()),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var inputjoint = _step2.value;
              // Update the joints groups with the XRJoint poses
              var jointPose = frame.getJointPose(inputjoint, referenceSpace);

              if (hand.joints[inputjoint.jointName] === undefined) {
                // The transform of this joint will be updated with the joint pose on each frame
                var _joint = new Group();

                _joint.matrixAutoUpdate = false;
                _joint.visible = false;
                hand.joints[inputjoint.jointName] = _joint; // ??

                hand.add(_joint);
              }

              var joint = hand.joints[inputjoint.jointName];

              if (jointPose !== null) {
                joint.matrix.fromArray(jointPose.transform.matrix);
                joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                joint.jointRadius = jointPose.radius;
              }

              joint.visible = jointPose !== null;
            } // Custom events
            // Check pinchz

          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var indexTip = hand.joints['index-finger-tip'];
          var thumbTip = hand.joints['thumb-tip'];
          var distance = indexTip.position.distanceTo(thumbTip.position);
          var distanceToPinch = 0.02;
          var threshold = 0.005;

          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
            hand.inputState.pinching = false;
            this.dispatchEvent({
              type: 'pinchend',
              handedness: inputSource.handedness,
              target: this
            });
          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
            hand.inputState.pinching = true;
            this.dispatchEvent({
              type: 'pinchstart',
              handedness: inputSource.handedness,
              target: this
            });
          }
        } else {
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);

            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);

              if (gripPose.linearVelocity) {
                grip.hasLinearVelocity = true;
                grip.linearVelocity.copy(gripPose.linearVelocity);
              } else {
                grip.hasLinearVelocity = false;
              }

              if (gripPose.angularVelocity) {
                grip.hasAngularVelocity = true;
                grip.angularVelocity.copy(gripPose.angularVelocity);
              } else {
                grip.hasAngularVelocity = false;
              }
            }
          }
        }
      }

      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }

      if (grip !== null) {
        grip.visible = gripPose !== null;
      }

      if (hand !== null) {
        hand.visible = handPose !== null;
      }

      return this;
    }
  }]);

  return WebXRController;
}();

var DepthTexture = /*#__PURE__*/function (_Texture4) {
  _inherits(DepthTexture, _Texture4);

  var _super36 = _createSuper(DepthTexture);

  function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
    var _this27;

    _classCallCheck(this, DepthTexture);

    format = format !== undefined ? format : DepthFormat;

    if (format !== DepthFormat && format !== DepthStencilFormat) {
      throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
    }

    if (type === undefined && format === DepthFormat) type = UnsignedShortType;
    if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
    _this27 = _super36.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    _this27.image = {
      width: width,
      height: height
    };
    _this27.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
    _this27.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
    _this27.flipY = false;
    _this27.generateMipmaps = false;
    return _this27;
  }

  return _createClass(DepthTexture);
}(Texture);

exports.DepthTexture = DepthTexture;
DepthTexture.prototype.isDepthTexture = true;

var WebXRManager = /*#__PURE__*/function (_EventDispatcher6) {
  _inherits(WebXRManager, _EventDispatcher6);

  var _super37 = _createSuper(WebXRManager);

  function WebXRManager(renderer, gl) {
    var _this28;

    _classCallCheck(this, WebXRManager);

    _this28 = _super37.call(this);

    var scope = _assertThisInitialized(_this28);

    var session = null;
    var framebufferScaleFactor = 1.0;
    var referenceSpace = null;
    var referenceSpaceType = 'local-floor';
    var pose = null;
    var glBinding = null;
    var glProjLayer = null;
    var glBaseLayer = null;
    var xrFrame = null;
    var attributes = gl.getContextAttributes();
    var initialRenderTarget = null;
    var newRenderTarget = null;
    var controllers = [];
    var inputSourcesMap = new Map(); //

    var cameraL = new PerspectiveCamera();
    cameraL.layers.enable(1);
    cameraL.viewport = new Vector4();
    var cameraR = new PerspectiveCamera();
    cameraR.layers.enable(2);
    cameraR.viewport = new Vector4();
    var cameras = [cameraL, cameraR];
    var cameraVR = new ArrayCamera();
    cameraVR.layers.enable(1);
    cameraVR.layers.enable(2);
    var _currentDepthNear = null;
    var _currentDepthFar = null; //

    _this28.cameraAutoUpdate = true;
    _this28.enabled = false;
    _this28.isPresenting = false;

    _this28.getController = function (index) {
      var controller = controllers[index];

      if (controller === undefined) {
        controller = new WebXRController();
        controllers[index] = controller;
      }

      return controller.getTargetRaySpace();
    };

    _this28.getControllerGrip = function (index) {
      var controller = controllers[index];

      if (controller === undefined) {
        controller = new WebXRController();
        controllers[index] = controller;
      }

      return controller.getGripSpace();
    };

    _this28.getHand = function (index) {
      var controller = controllers[index];

      if (controller === undefined) {
        controller = new WebXRController();
        controllers[index] = controller;
      }

      return controller.getHandSpace();
    }; //


    function onSessionEvent(event) {
      var controller = inputSourcesMap.get(event.inputSource);

      if (controller) {
        controller.dispatchEvent({
          type: event.type,
          data: event.inputSource
        });
      }
    }

    function onSessionEnd() {
      inputSourcesMap.forEach(function (controller, inputSource) {
        controller.disconnect(inputSource);
      });
      inputSourcesMap.clear();
      _currentDepthNear = null;
      _currentDepthFar = null; // restore framebuffer/rendering state

      renderer.setRenderTarget(initialRenderTarget);
      glBaseLayer = null;
      glProjLayer = null;
      glBinding = null;
      session = null;
      newRenderTarget = null; //

      animation.stop();
      scope.isPresenting = false;
      scope.dispatchEvent({
        type: 'sessionend'
      });
    }

    _this28.setFramebufferScaleFactor = function (value) {
      framebufferScaleFactor = value;

      if (scope.isPresenting === true) {
        console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
      }
    };

    _this28.setReferenceSpaceType = function (value) {
      referenceSpaceType = value;

      if (scope.isPresenting === true) {
        console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
      }
    };

    _this28.getReferenceSpace = function () {
      return referenceSpace;
    };

    _this28.getBaseLayer = function () {
      return glProjLayer !== null ? glProjLayer : glBaseLayer;
    };

    _this28.getBinding = function () {
      return glBinding;
    };

    _this28.getFrame = function () {
      return xrFrame;
    };

    _this28.getSession = function () {
      return session;
    };

    _this28.setSession = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(value) {
        var layerInit, depthFormat, depthType, glDepthFormat, projectionlayerInit, renderTargetProperties;
        return _regeneratorRuntime().wrap(function _callee$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                session = value;

                if (!(session !== null)) {
                  _context5.next = 24;
                  break;
                }

                initialRenderTarget = renderer.getRenderTarget();
                session.addEventListener('select', onSessionEvent);
                session.addEventListener('selectstart', onSessionEvent);
                session.addEventListener('selectend', onSessionEvent);
                session.addEventListener('squeeze', onSessionEvent);
                session.addEventListener('squeezestart', onSessionEvent);
                session.addEventListener('squeezeend', onSessionEvent);
                session.addEventListener('end', onSessionEnd);
                session.addEventListener('inputsourceschange', onInputSourcesChange);

                if (!(attributes.xrCompatible !== true)) {
                  _context5.next = 14;
                  break;
                }

                _context5.next = 14;
                return gl.makeXRCompatible();

              case 14:
                if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
                  layerInit = {
                    antialias: session.renderState.layers === undefined ? attributes.antialias : true,
                    alpha: attributes.alpha,
                    depth: attributes.depth,
                    stencil: attributes.stencil,
                    framebufferScaleFactor: framebufferScaleFactor
                  };
                  glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                  session.updateRenderState({
                    baseLayer: glBaseLayer
                  });
                  newRenderTarget = new WebGLRenderTarget(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
                    format: RGBAFormat,
                    type: UnsignedByteType,
                    encoding: renderer.outputEncoding
                  });
                } else {
                  depthFormat = null;
                  depthType = null;
                  glDepthFormat = null;

                  if (attributes.depth) {
                    glDepthFormat = attributes.stencil ? 35056 : 33190;
                    depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
                    depthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;
                  }

                  projectionlayerInit = {
                    colorFormat: renderer.outputEncoding === sRGBEncoding ? 35907 : 32856,
                    depthFormat: glDepthFormat,
                    scaleFactor: framebufferScaleFactor
                  };
                  glBinding = new XRWebGLBinding(session, gl);
                  glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                  session.updateRenderState({
                    layers: [glProjLayer]
                  });
                  newRenderTarget = new WebGLRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                    format: RGBAFormat,
                    type: UnsignedByteType,
                    depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                    stencilBuffer: attributes.stencil,
                    encoding: renderer.outputEncoding,
                    samples: attributes.antialias ? 4 : 0
                  });
                  renderTargetProperties = renderer.properties.get(newRenderTarget);
                  renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
                }

                newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
                // Set foveation to maximum.

                this.setFoveation(1.0);
                _context5.next = 19;
                return session.requestReferenceSpace(referenceSpaceType);

              case 19:
                referenceSpace = _context5.sent;
                animation.setContext(session);
                animation.start();
                scope.isPresenting = true;
                scope.dispatchEvent({
                  type: 'sessionstart'
                });

              case 24:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x3) {
        return _ref.apply(this, arguments);
      };
    }();

    function onInputSourcesChange(event) {
      var inputSources = session.inputSources; // Assign inputSources to available controllers

      for (var _i139 = 0; _i139 < controllers.length; _i139++) {
        inputSourcesMap.set(inputSources[_i139], controllers[_i139]);
      } // Notify disconnected


      for (var _i140 = 0; _i140 < event.removed.length; _i140++) {
        var inputSource = event.removed[_i140];
        var controller = inputSourcesMap.get(inputSource);

        if (controller) {
          controller.dispatchEvent({
            type: 'disconnected',
            data: inputSource
          });
          inputSourcesMap.delete(inputSource);
        }
      } // Notify connected


      for (var _i141 = 0; _i141 < event.added.length; _i141++) {
        var _inputSource = event.added[_i141];

        var _controller = inputSourcesMap.get(_inputSource);

        if (_controller) {
          _controller.dispatchEvent({
            type: 'connected',
            data: _inputSource
          });
        }
      }
    } //


    var cameraLPos = new Vector3();
    var cameraRPos = new Vector3();
    /**
     * Assumes 2 cameras that are parallel and share an X-axis, and that
     * the cameras' projection and world matrices have already been set.
     * And that near and far planes are identical for both cameras.
     * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
     */

    function setProjectionFromUnion(camera, cameraL, cameraR) {
      cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
      cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
      var ipd = cameraLPos.distanceTo(cameraRPos);
      var projL = cameraL.projectionMatrix.elements;
      var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
      // most likely identical top and bottom frustum extents.
      // Use the left camera for these values.

      var near = projL[14] / (projL[10] - 1);
      var far = projL[14] / (projL[10] + 1);
      var topFov = (projL[9] + 1) / projL[5];
      var bottomFov = (projL[9] - 1) / projL[5];
      var leftFov = (projL[8] - 1) / projL[0];
      var rightFov = (projR[8] + 1) / projR[0];
      var left = near * leftFov;
      var right = near * rightFov; // Calculate the new camera's position offset from the
      // left camera. xOffset should be roughly half `ipd`.

      var zOffset = ipd / (-leftFov + rightFov);
      var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?

      cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
      camera.translateX(xOffset);
      camera.translateZ(zOffset);
      camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
      camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale
      // the values so that the near plane's position does not change in world space,
      // although must now be relative to the new union camera.

      var near2 = near + zOffset;
      var far2 = far + zOffset;
      var left2 = left - xOffset;
      var right2 = right + (ipd - xOffset);
      var top2 = topFov * far / far2 * near2;
      var bottom2 = bottomFov * far / far2 * near2;
      camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
    }

    function updateCamera(camera, parent) {
      if (parent === null) {
        camera.matrixWorld.copy(camera.matrix);
      } else {
        camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
      }

      camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
    }

    _this28.updateCamera = function (camera) {
      if (session === null) return;
      cameraVR.near = cameraR.near = cameraL.near = camera.near;
      cameraVR.far = cameraR.far = cameraL.far = camera.far;

      if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
        // Note that the new renderState won't apply until the next frame. See #18320
        session.updateRenderState({
          depthNear: cameraVR.near,
          depthFar: cameraVR.far
        });
        _currentDepthNear = cameraVR.near;
        _currentDepthFar = cameraVR.far;
      }

      var parent = camera.parent;
      var cameras = cameraVR.cameras;
      updateCamera(cameraVR, parent);

      for (var _i142 = 0; _i142 < cameras.length; _i142++) {
        updateCamera(cameras[_i142], parent);
      }

      cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children

      camera.position.copy(cameraVR.position);
      camera.quaternion.copy(cameraVR.quaternion);
      camera.scale.copy(cameraVR.scale);
      camera.matrix.copy(cameraVR.matrix);
      camera.matrixWorld.copy(cameraVR.matrixWorld);
      var children = camera.children;

      for (var _i143 = 0, l = children.length; _i143 < l; _i143++) {
        children[_i143].updateMatrixWorld(true);
      } // update projection matrix for proper view frustum culling


      if (cameras.length === 2) {
        setProjectionFromUnion(cameraVR, cameraL, cameraR);
      } else {
        // assume single camera setup (AR)
        cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
    };

    _this28.getCamera = function () {
      return cameraVR;
    };

    _this28.getFoveation = function () {
      if (glProjLayer !== null) {
        return glProjLayer.fixedFoveation;
      }

      if (glBaseLayer !== null) {
        return glBaseLayer.fixedFoveation;
      }

      return undefined;
    };

    _this28.setFoveation = function (foveation) {
      // 0 = no foveation = full resolution
      // 1 = maximum foveation = the edges render at lower resolution
      if (glProjLayer !== null) {
        glProjLayer.fixedFoveation = foveation;
      }

      if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {
        glBaseLayer.fixedFoveation = foveation;
      }
    }; // Animation Loop


    var onAnimationFrameCallback = null;

    function onAnimationFrame(time, frame) {
      pose = frame.getViewerPose(referenceSpace);
      xrFrame = frame;

      if (pose !== null) {
        var views = pose.views;

        if (glBaseLayer !== null) {
          renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
          renderer.setRenderTarget(newRenderTarget);
        }

        var cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list

        if (views.length !== cameraVR.cameras.length) {
          cameraVR.cameras.length = 0;
          cameraVRNeedsUpdate = true;
        }

        for (var _i144 = 0; _i144 < views.length; _i144++) {
          var view = views[_i144];
          var viewport = null;

          if (glBaseLayer !== null) {
            viewport = glBaseLayer.getViewport(view);
          } else {
            var glSubImage = glBinding.getViewSubImage(glProjLayer, view);
            viewport = glSubImage.viewport; // For side-by-side projection, we only produce a single texture for both eyes.

            if (_i144 === 0) {
              renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
              renderer.setRenderTarget(newRenderTarget);
            }
          }

          var camera = cameras[_i144];
          camera.matrix.fromArray(view.transform.matrix);
          camera.projectionMatrix.fromArray(view.projectionMatrix);
          camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);

          if (_i144 === 0) {
            cameraVR.matrix.copy(camera.matrix);
          }

          if (cameraVRNeedsUpdate === true) {
            cameraVR.cameras.push(camera);
          }
        }
      } //


      var inputSources = session.inputSources;

      for (var _i145 = 0; _i145 < controllers.length; _i145++) {
        var controller = controllers[_i145];
        var inputSource = inputSources[_i145];
        controller.update(inputSource, frame, referenceSpace);
      }

      if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
      xrFrame = null;
    }

    var animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);

    _this28.setAnimationLoop = function (callback) {
      onAnimationFrameCallback = callback;
    };

    _this28.dispose = function () {};

    return _this28;
  }

  return _createClass(WebXRManager);
}(EventDispatcher);

function WebGLMaterials(renderer, properties) {
  function refreshFogUniforms(uniforms, fog) {
    uniforms.fogColor.value.copy(fog.color);

    if (fog.isFog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;
    } else if (fog.isFogExp2) {
      uniforms.fogDensity.value = fog.density;
    }
  }

  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
    if (material.isMeshBasicMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshLambertMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshToonMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsToon(uniforms, material);
    } else if (material.isMeshPhongMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsPhong(uniforms, material);
    } else if (material.isMeshStandardMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsStandard(uniforms, material);

      if (material.isMeshPhysicalMaterial) {
        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
      }
    } else if (material.isMeshMatcapMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsMatcap(uniforms, material);
    } else if (material.isMeshDepthMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshDistanceMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDistance(uniforms, material);
    } else if (material.isMeshNormalMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isLineBasicMaterial) {
      refreshUniformsLine(uniforms, material);

      if (material.isLineDashedMaterial) {
        refreshUniformsDash(uniforms, material);
      }
    } else if (material.isPointsMaterial) {
      refreshUniformsPoints(uniforms, material, pixelRatio, height);
    } else if (material.isSpriteMaterial) {
      refreshUniformsSprites(uniforms, material);
    } else if (material.isShadowMaterial) {
      uniforms.color.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    } else if (material.isShaderMaterial) {
      material.uniformsNeedUpdate = false; // #15581
    }
  }

  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;

    if (material.color) {
      uniforms.diffuse.value.copy(material.color);
    }

    if (material.emissive) {
      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
    }

    if (material.map) {
      uniforms.map.value = material.map;
    }

    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }

    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) uniforms.bumpScale.value *= -1;
    }

    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }

    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }

    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) uniforms.normalScale.value.negate();
    }

    if (material.specularMap) {
      uniforms.specularMap.value = material.specularMap;
    }

    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }

    var envMap = properties.get(material).envMap;

    if (envMap) {
      uniforms.envMap.value = envMap;
      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.ior.value = material.ior;
      uniforms.refractionRatio.value = material.refractionRatio;
    }

    if (material.lightMap) {
      uniforms.lightMap.value = material.lightMap; // artist-friendly light intensity scaling factor

      var scaleFactor = renderer.physicallyCorrectLights !== true ? Math.PI : 1;
      uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
    }

    if (material.aoMap) {
      uniforms.aoMap.value = material.aoMap;
      uniforms.aoMapIntensity.value = material.aoMapIntensity;
    } // uv repeat and offset setting priorities
    // 1. color map
    // 2. specular map
    // 3. displacementMap map
    // 4. normal map
    // 5. bump map
    // 6. roughnessMap map
    // 7. metalnessMap map
    // 8. alphaMap map
    // 9. emissiveMap map
    // 10. clearcoat map
    // 11. clearcoat normal map
    // 12. clearcoat roughnessMap map
    // 13. specular intensity map
    // 14. specular tint map
    // 15. transmission map
    // 16. thickness map


    var uvScaleMap;

    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.specularMap) {
      uvScaleMap = material.specularMap;
    } else if (material.displacementMap) {
      uvScaleMap = material.displacementMap;
    } else if (material.normalMap) {
      uvScaleMap = material.normalMap;
    } else if (material.bumpMap) {
      uvScaleMap = material.bumpMap;
    } else if (material.roughnessMap) {
      uvScaleMap = material.roughnessMap;
    } else if (material.metalnessMap) {
      uvScaleMap = material.metalnessMap;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    } else if (material.emissiveMap) {
      uvScaleMap = material.emissiveMap;
    } else if (material.clearcoatMap) {
      uvScaleMap = material.clearcoatMap;
    } else if (material.clearcoatNormalMap) {
      uvScaleMap = material.clearcoatNormalMap;
    } else if (material.clearcoatRoughnessMap) {
      uvScaleMap = material.clearcoatRoughnessMap;
    } else if (material.specularIntensityMap) {
      uvScaleMap = material.specularIntensityMap;
    } else if (material.specularColorMap) {
      uvScaleMap = material.specularColorMap;
    } else if (material.transmissionMap) {
      uvScaleMap = material.transmissionMap;
    } else if (material.thicknessMap) {
      uvScaleMap = material.thicknessMap;
    } else if (material.sheenColorMap) {
      uvScaleMap = material.sheenColorMap;
    } else if (material.sheenRoughnessMap) {
      uvScaleMap = material.sheenRoughnessMap;
    }

    if (uvScaleMap !== undefined) {
      // backwards compatibility
      if (uvScaleMap.isWebGLRenderTarget) {
        uvScaleMap = uvScaleMap.texture;
      }

      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }

      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    } // uv repeat and offset setting priorities for uv2
    // 1. ao map
    // 2. light map


    var uv2ScaleMap;

    if (material.aoMap) {
      uv2ScaleMap = material.aoMap;
    } else if (material.lightMap) {
      uv2ScaleMap = material.lightMap;
    }

    if (uv2ScaleMap !== undefined) {
      // backwards compatibility
      if (uv2ScaleMap.isWebGLRenderTarget) {
        uv2ScaleMap = uv2ScaleMap.texture;
      }

      if (uv2ScaleMap.matrixAutoUpdate === true) {
        uv2ScaleMap.updateMatrix();
      }

      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
    }
  }

  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
  }

  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;
  }

  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size * pixelRatio;
    uniforms.scale.value = height * 0.5;

    if (material.map) {
      uniforms.map.value = material.map;
    }

    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }

    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    } // uv repeat and offset setting priorities
    // 1. color map
    // 2. alpha map


    var uvScaleMap;

    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    }

    if (uvScaleMap !== undefined) {
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }

      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }

  function refreshUniformsSprites(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.rotation.value = material.rotation;

    if (material.map) {
      uniforms.map.value = material.map;
    }

    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }

    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    } // uv repeat and offset setting priorities
    // 1. color map
    // 2. alpha map


    var uvScaleMap;

    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    }

    if (uvScaleMap !== undefined) {
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }

      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }

  function refreshUniformsPhong(uniforms, material) {
    uniforms.specular.value.copy(material.specular);
    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
  }

  function refreshUniformsToon(uniforms, material) {
    if (material.gradientMap) {
      uniforms.gradientMap.value = material.gradientMap;
    }
  }

  function refreshUniformsStandard(uniforms, material) {
    uniforms.roughness.value = material.roughness;
    uniforms.metalness.value = material.metalness;

    if (material.roughnessMap) {
      uniforms.roughnessMap.value = material.roughnessMap;
    }

    if (material.metalnessMap) {
      uniforms.metalnessMap.value = material.metalnessMap;
    }

    var envMap = properties.get(material).envMap;

    if (envMap) {
      //uniforms.envMap.value = material.envMap; // part of uniforms common
      uniforms.envMapIntensity.value = material.envMapIntensity;
    }
  }

  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
    uniforms.ior.value = material.ior; // also part of uniforms common

    if (material.sheen > 0) {
      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
      uniforms.sheenRoughness.value = material.sheenRoughness;

      if (material.sheenColorMap) {
        uniforms.sheenColorMap.value = material.sheenColorMap;
      }

      if (material.sheenRoughnessMap) {
        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
      }
    }

    if (material.clearcoat > 0) {
      uniforms.clearcoat.value = material.clearcoat;
      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

      if (material.clearcoatMap) {
        uniforms.clearcoatMap.value = material.clearcoatMap;
      }

      if (material.clearcoatRoughnessMap) {
        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
      }

      if (material.clearcoatNormalMap) {
        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

        if (material.side === BackSide) {
          uniforms.clearcoatNormalScale.value.negate();
        }
      }
    }

    if (material.transmission > 0) {
      uniforms.transmission.value = material.transmission;
      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);

      if (material.transmissionMap) {
        uniforms.transmissionMap.value = material.transmissionMap;
      }

      uniforms.thickness.value = material.thickness;

      if (material.thicknessMap) {
        uniforms.thicknessMap.value = material.thicknessMap;
      }

      uniforms.attenuationDistance.value = material.attenuationDistance;
      uniforms.attenuationColor.value.copy(material.attenuationColor);
    }

    uniforms.specularIntensity.value = material.specularIntensity;
    uniforms.specularColor.value.copy(material.specularColor);

    if (material.specularIntensityMap) {
      uniforms.specularIntensityMap.value = material.specularIntensityMap;
    }

    if (material.specularColorMap) {
      uniforms.specularColorMap.value = material.specularColorMap;
    }
  }

  function refreshUniformsMatcap(uniforms, material) {
    if (material.matcap) {
      uniforms.matcap.value = material.matcap;
    }
  }

  function refreshUniformsDistance(uniforms, material) {
    uniforms.referencePosition.value.copy(material.referencePosition);
    uniforms.nearDistance.value = material.nearDistance;
    uniforms.farDistance.value = material.farDistance;
  }

  return {
    refreshFogUniforms: refreshFogUniforms,
    refreshMaterialUniforms: refreshMaterialUniforms
  };
}

function createCanvasElement() {
  var canvas = createElementNS('canvas');
  canvas.style.display = 'block';
  return canvas;
}

function WebGLRenderer(parameters = {}) {
  var _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
      _context = parameters.context !== undefined ? parameters.context : null,
      _depth = parameters.depth !== undefined ? parameters.depth : true,
      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
      _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
      _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
      _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
      _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
      _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

  var _alpha;

  if (parameters.context !== undefined) {
    _alpha = _context.getContextAttributes().alpha;
  } else {
    _alpha = parameters.alpha !== undefined ? parameters.alpha : false;
  }

  var currentRenderList = null;
  var currentRenderState = null; // render() can be called from within a callback triggered by another render.
  // We track this so that the nested render call gets its list and state isolated from the parent render call.

  var renderListStack = [];
  var renderStateStack = []; // public properties

  this.domElement = _canvas; // Debug configuration container

  this.debug = {
    /**
     * Enables error checking and reporting when shader programs are being compiled
     * @type {boolean}
     */
    checkShaderErrors: true
  }; // clearing

  this.autoClear = true;
  this.autoClearColor = true;
  this.autoClearDepth = true;
  this.autoClearStencil = true; // scene graph

  this.sortObjects = true; // user-defined clipping

  this.clippingPlanes = [];
  this.localClippingEnabled = false; // physically based shading

  this.outputEncoding = LinearEncoding; // physical lights

  this.physicallyCorrectLights = false; // tone mapping

  this.toneMapping = NoToneMapping;
  this.toneMappingExposure = 1.0; // internal properties

  var _this = this;

  var _isContextLost = false; // internal state cache

  var _currentActiveCubeFace = 0;
  var _currentActiveMipmapLevel = 0;
  var _currentRenderTarget = null;

  var _currentMaterialId = -1;

  var _currentCamera = null;

  var _currentViewport = new Vector4();

  var _currentScissor = new Vector4();

  var _currentScissorTest = null; //

  var _width = _canvas.width;
  var _height = _canvas.height;
  var _pixelRatio = 1;
  var _opaqueSort = null;
  var _transparentSort = null;

  var _viewport = new Vector4(0, 0, _width, _height);

  var _scissor = new Vector4(0, 0, _width, _height);

  var _scissorTest = false; // frustum

  var _frustum = new Frustum(); // clipping


  var _clippingEnabled = false;
  var _localClippingEnabled = false; // transmission

  var _transmissionRenderTarget = null; // camera matrices cache

  var _projScreenMatrix = new Matrix4();

  var _vector2 = new Vector2();

  var _vector3 = new Vector3();

  var _emptyScene = {
    background: null,
    fog: null,
    environment: null,
    overrideMaterial: null,
    isScene: true
  };

  function getTargetPixelRatio() {
    return _currentRenderTarget === null ? _pixelRatio : 1;
  } // initialize


  var _gl = _context;

  function getContext(contextNames, contextAttributes) {
    for (var _i146 = 0; _i146 < contextNames.length; _i146++) {
      var contextName = contextNames[_i146];

      var context = _canvas.getContext(contextName, contextAttributes);

      if (context !== null) return context;
    }

    return null;
  }

  try {
    var contextAttributes = {
      alpha: true,
      depth: _depth,
      stencil: _stencil,
      antialias: _antialias,
      premultipliedAlpha: _premultipliedAlpha,
      preserveDrawingBuffer: _preserveDrawingBuffer,
      powerPreference: _powerPreference,
      failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
    }; // OffscreenCanvas does not have setAttribute, see #22811

    if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', "three.js r".concat(REVISION)); // event listeners must be registered before WebGL context is created, see #12753

    _canvas.addEventListener('webglcontextlost', onContextLost, false);

    _canvas.addEventListener('webglcontextrestored', onContextRestore, false);

    if (_gl === null) {
      var contextNames = ['webgl2', 'webgl', 'experimental-webgl'];

      if (_this.isWebGL1Renderer === true) {
        contextNames.shift();
      }

      _gl = getContext(contextNames, contextAttributes);

      if (_gl === null) {
        if (getContext(contextNames)) {
          throw new Error('Error creating WebGL context with your selected attributes.');
        } else {
          throw new Error('Error creating WebGL context.');
        }
      }
    } // Some experimental-webgl implementations do not have getShaderPrecisionFormat


    if (_gl.getShaderPrecisionFormat === undefined) {
      _gl.getShaderPrecisionFormat = function () {
        return {
          'rangeMin': 1,
          'rangeMax': 1,
          'precision': 1
        };
      };
    }
  } catch (error) {
    console.error('THREE.WebGLRenderer: ' + error.message);
    throw error;
  }

  var extensions, capabilities, state, info;
  var properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
  var programCache, materials, renderLists, renderStates, clipping, shadowMap;
  var background, morphtargets, bufferRenderer, indexedBufferRenderer;
  var utils, bindingStates;

  function initGLContext() {
    extensions = new WebGLExtensions(_gl);
    capabilities = new WebGLCapabilities(_gl, extensions, parameters);
    extensions.init(capabilities);
    utils = new WebGLUtils(_gl, extensions, capabilities);
    state = new WebGLState(_gl, extensions, capabilities);
    info = new WebGLInfo(_gl);
    properties = new WebGLProperties();
    textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
    cubemaps = new WebGLCubeMaps(_this);
    cubeuvmaps = new WebGLCubeUVMaps(_this);
    attributes = new WebGLAttributes(_gl, capabilities);
    bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
    geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
    objects = new WebGLObjects(_gl, geometries, attributes, info);
    morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
    clipping = new WebGLClipping(properties);
    programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
    materials = new WebGLMaterials(_this, properties);
    renderLists = new WebGLRenderLists();
    renderStates = new WebGLRenderStates(extensions, capabilities);
    background = new WebGLBackground(_this, cubemaps, state, objects, _alpha, _premultipliedAlpha);
    shadowMap = new WebGLShadowMap(_this, objects, capabilities);
    bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
    indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
    info.programs = programCache.programs;
    _this.capabilities = capabilities;
    _this.extensions = extensions;
    _this.properties = properties;
    _this.renderLists = renderLists;
    _this.shadowMap = shadowMap;
    _this.state = state;
    _this.info = info;
  }

  initGLContext(); // xr

  var xr = new WebXRManager(_this, _gl);
  this.xr = xr; // API

  this.getContext = function () {
    return _gl;
  };

  this.getContextAttributes = function () {
    return _gl.getContextAttributes();
  };

  this.forceContextLoss = function () {
    var extension = extensions.get('WEBGL_lose_context');
    if (extension) extension.loseContext();
  };

  this.forceContextRestore = function () {
    var extension = extensions.get('WEBGL_lose_context');
    if (extension) extension.restoreContext();
  };

  this.getPixelRatio = function () {
    return _pixelRatio;
  };

  this.setPixelRatio = function (value) {
    if (value === undefined) return;
    _pixelRatio = value;
    this.setSize(_width, _height, false);
  };

  this.getSize = function (target) {
    return target.set(_width, _height);
  };

  this.setSize = function (width, height, updateStyle) {
    if (xr.isPresenting) {
      console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
      return;
    }

    _width = width;
    _height = height;
    _canvas.width = Math.floor(width * _pixelRatio);
    _canvas.height = Math.floor(height * _pixelRatio);

    if (updateStyle !== false) {
      _canvas.style.width = width + 'px';
      _canvas.style.height = height + 'px';
    }

    this.setViewport(0, 0, width, height);
  };

  this.getDrawingBufferSize = function (target) {
    return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
  };

  this.setDrawingBufferSize = function (width, height, pixelRatio) {
    _width = width;
    _height = height;
    _pixelRatio = pixelRatio;
    _canvas.width = Math.floor(width * pixelRatio);
    _canvas.height = Math.floor(height * pixelRatio);
    this.setViewport(0, 0, width, height);
  };

  this.getCurrentViewport = function (target) {
    return target.copy(_currentViewport);
  };

  this.getViewport = function (target) {
    return target.copy(_viewport);
  };

  this.setViewport = function (x, y, width, height) {
    if (x.isVector4) {
      _viewport.set(x.x, x.y, x.z, x.w);
    } else {
      _viewport.set(x, y, width, height);
    }

    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
  };

  this.getScissor = function (target) {
    return target.copy(_scissor);
  };

  this.setScissor = function (x, y, width, height) {
    if (x.isVector4) {
      _scissor.set(x.x, x.y, x.z, x.w);
    } else {
      _scissor.set(x, y, width, height);
    }

    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
  };

  this.getScissorTest = function () {
    return _scissorTest;
  };

  this.setScissorTest = function (boolean) {
    state.setScissorTest(_scissorTest = boolean);
  };

  this.setOpaqueSort = function (method) {
    _opaqueSort = method;
  };

  this.setTransparentSort = function (method) {
    _transparentSort = method;
  }; // Clearing


  this.getClearColor = function (target) {
    return target.copy(background.getClearColor());
  };

  this.setClearColor = function () {
    background.setClearColor.apply(background, arguments);
  };

  this.getClearAlpha = function () {
    return background.getClearAlpha();
  };

  this.setClearAlpha = function () {
    background.setClearAlpha.apply(background, arguments);
  };

  this.clear = function (color = true, depth = true, stencil = true) {
    var bits = 0;
    if (color) bits |= 16384;
    if (depth) bits |= 256;
    if (stencil) bits |= 1024;

    _gl.clear(bits);
  };

  this.clearColor = function () {
    this.clear(true, false, false);
  };

  this.clearDepth = function () {
    this.clear(false, true, false);
  };

  this.clearStencil = function () {
    this.clear(false, false, true);
  }; //


  this.dispose = function () {
    _canvas.removeEventListener('webglcontextlost', onContextLost, false);

    _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);

    renderLists.dispose();
    renderStates.dispose();
    properties.dispose();
    cubemaps.dispose();
    cubeuvmaps.dispose();
    objects.dispose();
    bindingStates.dispose();
    programCache.dispose();
    xr.dispose();
    xr.removeEventListener('sessionstart', onXRSessionStart);
    xr.removeEventListener('sessionend', onXRSessionEnd);

    if (_transmissionRenderTarget) {
      _transmissionRenderTarget.dispose();

      _transmissionRenderTarget = null;
    }

    animation.stop();
  }; // Events


  function onContextLost(event) {
    event.preventDefault();
    console.log('THREE.WebGLRenderer: Context Lost.');
    _isContextLost = true;
  }

  function
    /* event */
  onContextRestore() {
    console.log('THREE.WebGLRenderer: Context Restored.');
    _isContextLost = false;
    var infoAutoReset = info.autoReset;
    var shadowMapEnabled = shadowMap.enabled;
    var shadowMapAutoUpdate = shadowMap.autoUpdate;
    var shadowMapNeedsUpdate = shadowMap.needsUpdate;
    var shadowMapType = shadowMap.type;
    initGLContext();
    info.autoReset = infoAutoReset;
    shadowMap.enabled = shadowMapEnabled;
    shadowMap.autoUpdate = shadowMapAutoUpdate;
    shadowMap.needsUpdate = shadowMapNeedsUpdate;
    shadowMap.type = shadowMapType;
  }

  function onMaterialDispose(event) {
    var material = event.target;
    material.removeEventListener('dispose', onMaterialDispose);
    deallocateMaterial(material);
  } // Buffer deallocation


  function deallocateMaterial(material) {
    releaseMaterialProgramReferences(material);
    properties.remove(material);
  }

  function releaseMaterialProgramReferences(material) {
    var programs = properties.get(material).programs;

    if (programs !== undefined) {
      programs.forEach(function (program) {
        programCache.releaseProgram(program);
      });

      if (material.isShaderMaterial) {
        programCache.releaseShaderCache(material);
      }
    }
  } // Buffer rendering


  this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {
    if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

    var frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
    var program = setProgram(camera, scene, geometry, material, object);
    state.setMaterial(material, frontFaceCW); //

    var index = geometry.index;
    var position = geometry.attributes.position; //

    if (index === null) {
      if (position === undefined || position.count === 0) return;
    } else if (index.count === 0) {
      return;
    } //


    var rangeFactor = 1;

    if (material.wireframe === true) {
      index = geometries.getWireframeAttribute(geometry);
      rangeFactor = 2;
    }

    bindingStates.setup(object, material, program, geometry, index);
    var attribute;
    var renderer = bufferRenderer;

    if (index !== null) {
      attribute = attributes.get(index);
      renderer = indexedBufferRenderer;
      renderer.setIndex(attribute);
    } //


    var dataCount = index !== null ? index.count : position.count;
    var rangeStart = geometry.drawRange.start * rangeFactor;
    var rangeCount = geometry.drawRange.count * rangeFactor;
    var groupStart = group !== null ? group.start * rangeFactor : 0;
    var groupCount = group !== null ? group.count * rangeFactor : Infinity;
    var drawStart = Math.max(rangeStart, groupStart);
    var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
    var drawCount = Math.max(0, drawEnd - drawStart + 1);
    if (drawCount === 0) return; //

    if (object.isMesh) {
      if (material.wireframe === true) {
        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
        renderer.setMode(1);
      } else {
        renderer.setMode(4);
      }
    } else if (object.isLine) {
      var lineWidth = material.linewidth;
      if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material

      state.setLineWidth(lineWidth * getTargetPixelRatio());

      if (object.isLineSegments) {
        renderer.setMode(1);
      } else if (object.isLineLoop) {
        renderer.setMode(2);
      } else {
        renderer.setMode(3);
      }
    } else if (object.isPoints) {
      renderer.setMode(0);
    } else if (object.isSprite) {
      renderer.setMode(4);
    }

    if (object.isInstancedMesh) {
      renderer.renderInstances(drawStart, drawCount, object.count);
    } else if (geometry.isInstancedBufferGeometry) {
      var instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
      renderer.renderInstances(drawStart, drawCount, instanceCount);
    } else {
      renderer.render(drawStart, drawCount);
    }
  }; // Compile


  this.compile = function (scene, camera) {
    currentRenderState = renderStates.get(scene);
    currentRenderState.init();
    renderStateStack.push(currentRenderState);
    scene.traverseVisible(function (object) {
      if (object.isLight && object.layers.test(camera.layers)) {
        currentRenderState.pushLight(object);

        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      }
    });
    currentRenderState.setupLights(_this.physicallyCorrectLights);
    scene.traverse(function (object) {
      var material = object.material;

      if (material) {
        if (Array.isArray(material)) {
          for (var _i147 = 0; _i147 < material.length; _i147++) {
            var material2 = material[_i147];
            getProgram(material2, scene, object);
          }
        } else {
          getProgram(material, scene, object);
        }
      }
    });
    renderStateStack.pop();
    currentRenderState = null;
  }; // Animation Loop


  var onAnimationFrameCallback = null;

  function onAnimationFrame(time) {
    if (onAnimationFrameCallback) onAnimationFrameCallback(time);
  }

  function onXRSessionStart() {
    animation.stop();
  }

  function onXRSessionEnd() {
    animation.start();
  }

  var animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);
  if (typeof self !== 'undefined') animation.setContext(self);

  this.setAnimationLoop = function (callback) {
    onAnimationFrameCallback = callback;
    xr.setAnimationLoop(callback);
    callback === null ? animation.stop() : animation.start();
  };

  xr.addEventListener('sessionstart', onXRSessionStart);
  xr.addEventListener('sessionend', onXRSessionEnd); // Rendering

  this.render = function (scene, camera) {
    if (camera !== undefined && camera.isCamera !== true) {
      console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
      return;
    }

    if (_isContextLost === true) return; // update scene graph

    if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum

    if (camera.parent === null) camera.updateMatrixWorld();

    if (xr.enabled === true && xr.isPresenting === true) {
      if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
      camera = xr.getCamera(); // use XR camera for rendering
    } //


    if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
    currentRenderState = renderStates.get(scene, renderStateStack.length);
    currentRenderState.init();
    renderStateStack.push(currentRenderState);

    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

    _frustum.setFromProjectionMatrix(_projScreenMatrix);

    _localClippingEnabled = this.localClippingEnabled;
    _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
    currentRenderList = renderLists.get(scene, renderListStack.length);
    currentRenderList.init();
    renderListStack.push(currentRenderList);
    projectObject(scene, camera, 0, _this.sortObjects);
    currentRenderList.finish();

    if (_this.sortObjects === true) {
      currentRenderList.sort(_opaqueSort, _transparentSort);
    } //


    if (_clippingEnabled === true) clipping.beginShadows();
    var shadowsArray = currentRenderState.state.shadowsArray;
    shadowMap.render(shadowsArray, scene, camera);
    if (_clippingEnabled === true) clipping.endShadows(); //

    if (this.info.autoReset === true) this.info.reset(); //

    background.render(currentRenderList, scene); // render scene

    currentRenderState.setupLights(_this.physicallyCorrectLights);

    if (camera.isArrayCamera) {
      var cameras = camera.cameras;

      for (var _i148 = 0, l = cameras.length; _i148 < l; _i148++) {
        var camera2 = cameras[_i148];
        renderScene(currentRenderList, scene, camera2, camera2.viewport);
      }
    } else {
      renderScene(currentRenderList, scene, camera);
    } //


    if (_currentRenderTarget !== null) {
      // resolve multisample renderbuffers to a single-sample texture if necessary
      textures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering

      textures.updateRenderTargetMipmap(_currentRenderTarget);
    } //


    if (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // _gl.finish();

    bindingStates.resetDefaultState();
    _currentMaterialId = -1;
    _currentCamera = null;
    renderStateStack.pop();

    if (renderStateStack.length > 0) {
      currentRenderState = renderStateStack[renderStateStack.length - 1];
    } else {
      currentRenderState = null;
    }

    renderListStack.pop();

    if (renderListStack.length > 0) {
      currentRenderList = renderListStack[renderListStack.length - 1];
    } else {
      currentRenderList = null;
    }
  };

  function projectObject(object, camera, groupOrder, sortObjects) {
    if (object.visible === false) return;
    var visible = object.layers.test(camera.layers);

    if (visible) {
      if (object.isGroup) {
        groupOrder = object.renderOrder;
      } else if (object.isLOD) {
        if (object.autoUpdate === true) object.update(camera);
      } else if (object.isLight) {
        currentRenderState.pushLight(object);

        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      } else if (object.isSprite) {
        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }

          var geometry = objects.update(object);
          var material = object.material;

          if (material.visible) {
            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
          }
        }
      } else if (object.isMesh || object.isLine || object.isPoints) {
        if (object.isSkinnedMesh) {
          // update skeleton only once in a frame
          if (object.skeleton.frame !== info.render.frame) {
            object.skeleton.update();
            object.skeleton.frame = info.render.frame;
          }
        }

        if (!object.frustumCulled || _frustum.intersectsObject(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }

          var _geometry2 = objects.update(object);

          var _material = object.material;

          if (Array.isArray(_material)) {
            var groups = _geometry2.groups;

            for (var _i149 = 0, l = groups.length; _i149 < l; _i149++) {
              var group = groups[_i149];
              var groupMaterial = _material[group.materialIndex];

              if (groupMaterial && groupMaterial.visible) {
                currentRenderList.push(object, _geometry2, groupMaterial, groupOrder, _vector3.z, group);
              }
            }
          } else if (_material.visible) {
            currentRenderList.push(object, _geometry2, _material, groupOrder, _vector3.z, null);
          }
        }
      }
    }

    var children = object.children;

    for (var _i150 = 0, _l6 = children.length; _i150 < _l6; _i150++) {
      projectObject(children[_i150], camera, groupOrder, sortObjects);
    }
  }

  function renderScene(currentRenderList, scene, camera, viewport) {
    var opaqueObjects = currentRenderList.opaque;
    var transmissiveObjects = currentRenderList.transmissive;
    var transparentObjects = currentRenderList.transparent;
    currentRenderState.setupLightsView(camera);
    if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);
    if (viewport) state.viewport(_currentViewport.copy(viewport));
    if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
    if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
    if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render

    state.buffers.depth.setTest(true);
    state.buffers.depth.setMask(true);
    state.buffers.color.setMask(true);
    state.setPolygonOffset(false);
  }

  function renderTransmissionPass(opaqueObjects, scene, camera) {
    var isWebGL2 = capabilities.isWebGL2;

    if (_transmissionRenderTarget === null) {
      _transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
        generateMipmaps: true,
        type: utils.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,
        minFilter: LinearMipmapLinearFilter,
        samples: isWebGL2 && _antialias === true ? 4 : 0
      });
    }

    _this.getDrawingBufferSize(_vector2);

    if (isWebGL2) {
      _transmissionRenderTarget.setSize(_vector2.x, _vector2.y);
    } else {
      _transmissionRenderTarget.setSize(floorPowerOfTwo(_vector2.x), floorPowerOfTwo(_vector2.y));
    } //


    var currentRenderTarget = _this.getRenderTarget();

    _this.setRenderTarget(_transmissionRenderTarget);

    _this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.
    // Otherwise they are applied twice in opaque objects pass and transmission objects pass.


    var currentToneMapping = _this.toneMapping;
    _this.toneMapping = NoToneMapping;
    renderObjects(opaqueObjects, scene, camera);
    _this.toneMapping = currentToneMapping;
    textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
    textures.updateRenderTargetMipmap(_transmissionRenderTarget);

    _this.setRenderTarget(currentRenderTarget);
  }

  function renderObjects(renderList, scene, camera) {
    var overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

    for (var _i151 = 0, l = renderList.length; _i151 < l; _i151++) {
      var renderItem = renderList[_i151];
      var object = renderItem.object;
      var geometry = renderItem.geometry;
      var material = overrideMaterial === null ? renderItem.material : overrideMaterial;
      var group = renderItem.group;

      if (object.layers.test(camera.layers)) {
        renderObject(object, scene, camera, geometry, material, group);
      }
    }
  }

  function renderObject(object, scene, camera, geometry, material, group) {
    object.onBeforeRender(_this, scene, camera, geometry, material, group);
    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
    material.onBeforeRender(_this, scene, camera, geometry, object, group);

    if (material.transparent === true && material.side === DoubleSide) {
      material.side = BackSide;
      material.needsUpdate = true;

      _this.renderBufferDirect(camera, scene, geometry, material, object, group);

      material.side = FrontSide;
      material.needsUpdate = true;

      _this.renderBufferDirect(camera, scene, geometry, material, object, group);

      material.side = DoubleSide;
    } else {
      _this.renderBufferDirect(camera, scene, geometry, material, object, group);
    }

    object.onAfterRender(_this, scene, camera, geometry, material, group);
  }

  function getProgram(material, scene, object) {
    if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    var materialProperties = properties.get(material);
    var lights = currentRenderState.state.lights;
    var shadowsArray = currentRenderState.state.shadowsArray;
    var lightsStateVersion = lights.state.version;
    var parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
    var programCacheKey = programCache.getProgramCacheKey(parameters);
    var programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

    materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
    materialProperties.fog = scene.fog;
    materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);

    if (programs === undefined) {
      // new material
      material.addEventListener('dispose', onMaterialDispose);
      programs = new Map();
      materialProperties.programs = programs;
    }

    var program = programs.get(programCacheKey);

    if (program !== undefined) {
      // early out if program and light state is identical
      if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
        updateCommonMaterialProperties(material, parameters);
        return program;
      }
    } else {
      parameters.uniforms = programCache.getUniforms(material);
      material.onBuild(object, parameters, _this);
      material.onBeforeCompile(parameters, _this);
      program = programCache.acquireProgram(parameters, programCacheKey);
      programs.set(programCacheKey, program);
      materialProperties.uniforms = parameters.uniforms;
    }

    var uniforms = materialProperties.uniforms;

    if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
      uniforms.clippingPlanes = clipping.uniform;
    }

    updateCommonMaterialProperties(material, parameters); // store the light setup it was created for

    materialProperties.needsLights = materialNeedsLights(material);
    materialProperties.lightsStateVersion = lightsStateVersion;

    if (materialProperties.needsLights) {
      // wire up the material to this renderer's lighting state
      uniforms.ambientLightColor.value = lights.state.ambient;
      uniforms.lightProbe.value = lights.state.probe;
      uniforms.directionalLights.value = lights.state.directional;
      uniforms.directionalLightShadows.value = lights.state.directionalShadow;
      uniforms.spotLights.value = lights.state.spot;
      uniforms.spotLightShadows.value = lights.state.spotShadow;
      uniforms.rectAreaLights.value = lights.state.rectArea;
      uniforms.ltc_1.value = lights.state.rectAreaLTC1;
      uniforms.ltc_2.value = lights.state.rectAreaLTC2;
      uniforms.pointLights.value = lights.state.point;
      uniforms.pointLightShadows.value = lights.state.pointShadow;
      uniforms.hemisphereLights.value = lights.state.hemi;
      uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
      uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
      uniforms.spotShadowMap.value = lights.state.spotShadowMap;
      uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
      uniforms.pointShadowMap.value = lights.state.pointShadowMap;
      uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms
    }

    var progUniforms = program.getUniforms();
    var uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
    materialProperties.currentProgram = program;
    materialProperties.uniformsList = uniformsList;
    return program;
  }

  function updateCommonMaterialProperties(material, parameters) {
    var materialProperties = properties.get(material);
    materialProperties.outputEncoding = parameters.outputEncoding;
    materialProperties.instancing = parameters.instancing;
    materialProperties.skinning = parameters.skinning;
    materialProperties.morphTargets = parameters.morphTargets;
    materialProperties.morphNormals = parameters.morphNormals;
    materialProperties.morphColors = parameters.morphColors;
    materialProperties.morphTargetsCount = parameters.morphTargetsCount;
    materialProperties.numClippingPlanes = parameters.numClippingPlanes;
    materialProperties.numIntersection = parameters.numClipIntersection;
    materialProperties.vertexAlphas = parameters.vertexAlphas;
    materialProperties.vertexTangents = parameters.vertexTangents;
    materialProperties.toneMapping = parameters.toneMapping;
  }

  function setProgram(camera, scene, geometry, material, object) {
    if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

    textures.resetTextureUnits();
    var fog = scene.fog;
    var environment = material.isMeshStandardMaterial ? scene.environment : null;
    var encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding;
    var envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
    var vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
    var vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
    var morphTargets = !!geometry.morphAttributes.position;
    var morphNormals = !!geometry.morphAttributes.normal;
    var morphColors = !!geometry.morphAttributes.color;
    var toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
    var morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    var morphTargetsCount = morphAttribute !== undefined ? morphAttribute.length : 0;
    var materialProperties = properties.get(material);
    var lights = currentRenderState.state.lights;

    if (_clippingEnabled === true) {
      if (_localClippingEnabled === true || camera !== _currentCamera) {
        var useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup
        // object instead of the material, once it becomes feasible
        // (#8465, #8379)

        clipping.setState(material, camera, useCache);
      }
    } //


    var needsProgramChange = false;

    if (material.version === materialProperties.__version) {
      if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
        needsProgramChange = true;
      } else if (materialProperties.outputEncoding !== encoding) {
        needsProgramChange = true;
      } else if (object.isInstancedMesh && materialProperties.instancing === false) {
        needsProgramChange = true;
      } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
        needsProgramChange = true;
      } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
        needsProgramChange = true;
      } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
        needsProgramChange = true;
      } else if (materialProperties.envMap !== envMap) {
        needsProgramChange = true;
      } else if (material.fog && materialProperties.fog !== fog) {
        needsProgramChange = true;
      } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
        needsProgramChange = true;
      } else if (materialProperties.vertexAlphas !== vertexAlphas) {
        needsProgramChange = true;
      } else if (materialProperties.vertexTangents !== vertexTangents) {
        needsProgramChange = true;
      } else if (materialProperties.morphTargets !== morphTargets) {
        needsProgramChange = true;
      } else if (materialProperties.morphNormals !== morphNormals) {
        needsProgramChange = true;
      } else if (materialProperties.morphColors !== morphColors) {
        needsProgramChange = true;
      } else if (materialProperties.toneMapping !== toneMapping) {
        needsProgramChange = true;
      } else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {
        needsProgramChange = true;
      }
    } else {
      needsProgramChange = true;
      materialProperties.__version = material.version;
    } //


    var program = materialProperties.currentProgram;

    if (needsProgramChange === true) {
      program = getProgram(material, scene, object);
    }

    var refreshProgram = false;
    var refreshMaterial = false;
    var refreshLights = false;
    var p_uniforms = program.getUniforms(),
        m_uniforms = materialProperties.uniforms;

    if (state.useProgram(program.program)) {
      refreshProgram = true;
      refreshMaterial = true;
      refreshLights = true;
    }

    if (material.id !== _currentMaterialId) {
      _currentMaterialId = material.id;
      refreshMaterial = true;
    }

    if (refreshProgram || _currentCamera !== camera) {
      p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);

      if (capabilities.logarithmicDepthBuffer) {
        p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
      }

      if (_currentCamera !== camera) {
        _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update
        // now, in case this material supports lights - or later, when
        // the next material that does gets activated:

        refreshMaterial = true; // set to true on material change

        refreshLights = true; // remains set until update done
      } // load material specific uniforms
      // (shader material also gets them for the sake of genericity)


      if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
        var uCamPos = p_uniforms.map.cameraPosition;

        if (uCamPos !== undefined) {
          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
        }
      }

      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
        p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
      }

      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
      }
    } // skinning and morph target uniforms must be set even if material didn't change
    // auto-setting of texture unit for bone and morph texture must go before other textures
    // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures


    if (object.isSkinnedMesh) {
      p_uniforms.setOptional(_gl, object, 'bindMatrix');
      p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
      var skeleton = object.skeleton;

      if (skeleton) {
        if (capabilities.floatVertexTextures) {
          if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
          p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);
          p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
        } else {
          p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
        }
      }
    }

    var morphAttributes = geometry.morphAttributes;

    if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || morphAttributes.color !== undefined && capabilities.isWebGL2 === true) {
      morphtargets.update(object, geometry, material, program);
    }

    if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
      materialProperties.receiveShadow = object.receiveShadow;
      p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
    }

    if (refreshMaterial) {
      p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);

      if (materialProperties.needsLights) {
        // the current material requires lighting info
        // note: all lighting uniforms are always set correctly
        // they simply reference the renderer's state for their
        // values
        //
        // use the current material's .needsUpdate flags to set
        // the GL state when required
        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
      } // refresh uniforms common to several materials


      if (fog && material.fog) {
        materials.refreshFogUniforms(m_uniforms, fog);
      }

      materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
    }

    if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
      material.uniformsNeedUpdate = false;
    }

    if (material.isSpriteMaterial) {
      p_uniforms.setValue(_gl, 'center', object.center);
    } // common matrices


    p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
    p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
    p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
    return program;
  } // If uniforms are marked as clean, they don't need to be loaded to the GPU.


  function markUniformsLightsNeedsUpdate(uniforms, value) {
    uniforms.ambientLightColor.needsUpdate = value;
    uniforms.lightProbe.needsUpdate = value;
    uniforms.directionalLights.needsUpdate = value;
    uniforms.directionalLightShadows.needsUpdate = value;
    uniforms.pointLights.needsUpdate = value;
    uniforms.pointLightShadows.needsUpdate = value;
    uniforms.spotLights.needsUpdate = value;
    uniforms.spotLightShadows.needsUpdate = value;
    uniforms.rectAreaLights.needsUpdate = value;
    uniforms.hemisphereLights.needsUpdate = value;
  }

  function materialNeedsLights(material) {
    return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
  }

  this.getActiveCubeFace = function () {
    return _currentActiveCubeFace;
  };

  this.getActiveMipmapLevel = function () {
    return _currentActiveMipmapLevel;
  };

  this.getRenderTarget = function () {
    return _currentRenderTarget;
  };

  this.setRenderTargetTextures = function (renderTarget, colorTexture, depthTexture) {
    properties.get(renderTarget.texture).__webglTexture = colorTexture;
    properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
    var renderTargetProperties = properties.get(renderTarget);
    renderTargetProperties.__hasExternalTextures = true;

    if (renderTargetProperties.__hasExternalTextures) {
      renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

      if (!renderTargetProperties.__autoAllocateDepthBuffer) {
        // The multisample_render_to_texture extension doesn't work properly if there
        // are midframe flushes and an external depth buffer. Disable use of the extension.
        if (extensions.has('WEBGL_multisampled_render_to_texture') === true) {
          console.warn('THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided');
          renderTargetProperties.__useRenderToTexture = false;
        }
      }
    }
  };

  this.setRenderTargetFramebuffer = function (renderTarget, defaultFramebuffer) {
    var renderTargetProperties = properties.get(renderTarget);
    renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
    renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
  };

  this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
    _currentRenderTarget = renderTarget;
    _currentActiveCubeFace = activeCubeFace;
    _currentActiveMipmapLevel = activeMipmapLevel;
    var useDefaultFramebuffer = true;

    if (renderTarget) {
      var renderTargetProperties = properties.get(renderTarget);

      if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
        // We need to make sure to rebind the framebuffer.
        state.bindFramebuffer(36160, null);
        useDefaultFramebuffer = false;
      } else if (renderTargetProperties.__webglFramebuffer === undefined) {
        textures.setupRenderTarget(renderTarget);
      } else if (renderTargetProperties.__hasExternalTextures) {
        // Color and depth texture must be rebound in order for the swapchain to update.
        textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
      }
    }

    var framebuffer = null;
    var isCube = false;
    var isRenderTarget3D = false;

    if (renderTarget) {
      var texture = renderTarget.texture;

      if (texture.isData3DTexture || texture.isDataArrayTexture) {
        isRenderTarget3D = true;
      }

      var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;

      if (renderTarget.isWebGLCubeRenderTarget) {
        framebuffer = __webglFramebuffer[activeCubeFace];
        isCube = true;
      } else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
        framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
      } else {
        framebuffer = __webglFramebuffer;
      }

      _currentViewport.copy(renderTarget.viewport);

      _currentScissor.copy(renderTarget.scissor);

      _currentScissorTest = renderTarget.scissorTest;
    } else {
      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();

      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();

      _currentScissorTest = _scissorTest;
    }

    var framebufferBound = state.bindFramebuffer(36160, framebuffer);

    if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
      state.drawBuffers(renderTarget, framebuffer);
    }

    state.viewport(_currentViewport);
    state.scissor(_currentScissor);
    state.setScissorTest(_currentScissorTest);

    if (isCube) {
      var textureProperties = properties.get(renderTarget.texture);

      _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
    } else if (isRenderTarget3D) {
      var _textureProperties = properties.get(renderTarget.texture);

      var layer = activeCubeFace || 0;

      _gl.framebufferTextureLayer(36160, 36064, _textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
    }

    _currentMaterialId = -1; // reset current material to ensure correct uniform bindings
  };

  this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
    if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
      console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
      return;
    }

    var framebuffer = properties.get(renderTarget).__webglFramebuffer;

    if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {
      framebuffer = framebuffer[activeCubeFaceIndex];
    }

    if (framebuffer) {
      state.bindFramebuffer(36160, framebuffer);

      try {
        var texture = renderTarget.texture;
        var textureFormat = texture.format;
        var textureType = texture.type;

        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
          return;
        }

        var halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));

        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)
        !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
        !halfFloatSupportedByExt) {
          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
          return;
        } // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)


        if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {
          _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
        }
      } finally {
        // restore framebuffer of current render target if necessary
        var _framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;

        state.bindFramebuffer(36160, _framebuffer);
      }
    }
  };

  this.copyFramebufferToTexture = function (position, texture, level = 0) {
    if (texture.isFramebufferTexture !== true) {
      console.error('THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.');
      return;
    }

    var levelScale = Math.pow(2, -level);
    var width = Math.floor(texture.image.width * levelScale);
    var height = Math.floor(texture.image.height * levelScale);
    textures.setTexture2D(texture, 0);

    _gl.copyTexSubImage2D(3553, level, 0, 0, position.x, position.y, width, height);

    state.unbindTexture();
  };

  this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {
    var width = srcTexture.image.width;
    var height = srcTexture.image.height;
    var glFormat = utils.convert(dstTexture.format);
    var glType = utils.convert(dstTexture.type);
    textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei
    // parameters, make sure they are correct for the dstTexture

    _gl.pixelStorei(37440, dstTexture.flipY);

    _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);

    _gl.pixelStorei(3317, dstTexture.unpackAlignment);

    if (srcTexture.isDataTexture) {
      _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
    } else {
      if (srcTexture.isCompressedTexture) {
        _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
      } else {
        _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
      }
    } // Generate mipmaps only when copying level 0


    if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);
    state.unbindTexture();
  };

  this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {
    if (_this.isWebGL1Renderer) {
      console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
      return;
    }

    var width = sourceBox.max.x - sourceBox.min.x + 1;
    var height = sourceBox.max.y - sourceBox.min.y + 1;
    var depth = sourceBox.max.z - sourceBox.min.z + 1;
    var glFormat = utils.convert(dstTexture.format);
    var glType = utils.convert(dstTexture.type);
    var glTarget;

    if (dstTexture.isData3DTexture) {
      textures.setTexture3D(dstTexture, 0);
      glTarget = 32879;
    } else if (dstTexture.isDataArrayTexture) {
      textures.setTexture2DArray(dstTexture, 0);
      glTarget = 35866;
    } else {
      console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
      return;
    }

    _gl.pixelStorei(37440, dstTexture.flipY);

    _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);

    _gl.pixelStorei(3317, dstTexture.unpackAlignment);

    var unpackRowLen = _gl.getParameter(3314);

    var unpackImageHeight = _gl.getParameter(32878);

    var unpackSkipPixels = _gl.getParameter(3316);

    var unpackSkipRows = _gl.getParameter(3315);

    var unpackSkipImages = _gl.getParameter(32877);

    var image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;

    _gl.pixelStorei(3314, image.width);

    _gl.pixelStorei(32878, image.height);

    _gl.pixelStorei(3316, sourceBox.min.x);

    _gl.pixelStorei(3315, sourceBox.min.y);

    _gl.pixelStorei(32877, sourceBox.min.z);

    if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
      _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
    } else {
      if (srcTexture.isCompressedTexture) {
        console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');

        _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
      } else {
        _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
      }
    }

    _gl.pixelStorei(3314, unpackRowLen);

    _gl.pixelStorei(32878, unpackImageHeight);

    _gl.pixelStorei(3316, unpackSkipPixels);

    _gl.pixelStorei(3315, unpackSkipRows);

    _gl.pixelStorei(32877, unpackSkipImages); // Generate mipmaps only when copying level 0


    if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
    state.unbindTexture();
  };

  this.initTexture = function (texture) {
    textures.setTexture2D(texture, 0);
    state.unbindTexture();
  };

  this.resetState = function () {
    _currentActiveCubeFace = 0;
    _currentActiveMipmapLevel = 0;
    _currentRenderTarget = null;
    state.reset();
    bindingStates.reset();
  };

  if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
      detail: this
    }));
  }
}

WebGLRenderer.prototype.isWebGLRenderer = true;

var WebGL1Renderer = /*#__PURE__*/function (_WebGLRenderer) {
  _inherits(WebGL1Renderer, _WebGLRenderer);

  var _super38 = _createSuper(WebGL1Renderer);

  function WebGL1Renderer() {
    _classCallCheck(this, WebGL1Renderer);

    return _super38.apply(this, arguments);
  }

  return _createClass(WebGL1Renderer);
}(WebGLRenderer);

exports.WebGL1Renderer = WebGL1Renderer;
WebGL1Renderer.prototype.isWebGL1Renderer = true;

var FogExp2 = /*#__PURE__*/function () {
  function FogExp2(color, density = 0.00025) {
    _classCallCheck(this, FogExp2);

    this.name = '';
    this.color = new Color(color);
    this.density = density;
  }

  _createClass(FogExp2, [{
    key: "clone",
    value: function clone() {
      return new FogExp2(this.color, this.density);
    }
  }, {
    key: "toJSON",
    value: function
      /* meta */
    toJSON() {
      return {
        type: 'FogExp2',
        color: this.color.getHex(),
        density: this.density
      };
    }
  }]);

  return FogExp2;
}();

exports.FogExp2 = FogExp2;
FogExp2.prototype.isFogExp2 = true;

var Fog = /*#__PURE__*/function () {
  function Fog(color, near = 1, far = 1000) {
    _classCallCheck(this, Fog);

    this.name = '';
    this.color = new Color(color);
    this.near = near;
    this.far = far;
  }

  _createClass(Fog, [{
    key: "clone",
    value: function clone() {
      return new Fog(this.color, this.near, this.far);
    }
  }, {
    key: "toJSON",
    value: function
      /* meta */
    toJSON() {
      return {
        type: 'Fog',
        color: this.color.getHex(),
        near: this.near,
        far: this.far
      };
    }
  }]);

  return Fog;
}();

exports.Fog = Fog;
Fog.prototype.isFog = true;

var Scene = /*#__PURE__*/function (_Object3D5) {
  _inherits(Scene, _Object3D5);

  var _super39 = _createSuper(Scene);

  function Scene() {
    var _this29;

    _classCallCheck(this, Scene);

    _this29 = _super39.call(this);
    _this29.type = 'Scene';
    _this29.background = null;
    _this29.environment = null;
    _this29.fog = null;
    _this29.overrideMaterial = null;
    _this29.autoUpdate = true; // checked by the renderer

    if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
        detail: _assertThisInitialized(_this29)
      }));
    }

    return _this29;
  }

  _createClass(Scene, [{
    key: "copy",
    value: function copy(source, recursive) {
      _get(_getPrototypeOf(Scene.prototype), "copy", this).call(this, source, recursive);

      if (source.background !== null) this.background = source.background.clone();
      if (source.environment !== null) this.environment = source.environment.clone();
      if (source.fog !== null) this.fog = source.fog.clone();
      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
      this.autoUpdate = source.autoUpdate;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(Scene.prototype), "toJSON", this).call(this, meta);

      if (this.fog !== null) data.object.fog = this.fog.toJSON();
      return data;
    }
  }]);

  return Scene;
}(Object3D);

exports.Scene = Scene;
Scene.prototype.isScene = true;

var InterleavedBuffer = /*#__PURE__*/function () {
  function InterleavedBuffer(array, stride) {
    _classCallCheck(this, InterleavedBuffer);

    this.array = array;
    this.stride = stride;
    this.count = array !== undefined ? array.length / stride : 0;
    this.usage = StaticDrawUsage;
    this.updateRange = {
      offset: 0,
      count: -1
    };
    this.version = 0;
    this.uuid = generateUUID();
  }

  _createClass(InterleavedBuffer, [{
    key: "onUploadCallback",
    value: function onUploadCallback() {}
  }, {
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) this.version++;
    }
  }, {
    key: "setUsage",
    value: function setUsage(value) {
      this.usage = value;
      return this;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.array = new source.array.constructor(source.array);
      this.count = source.count;
      this.stride = source.stride;
      this.usage = source.usage;
      return this;
    }
  }, {
    key: "copyAt",
    value: function copyAt(index1, attribute, index2) {
      index1 *= this.stride;
      index2 *= attribute.stride;

      for (var _i152 = 0, l = this.stride; _i152 < l; _i152++) {
        this.array[index1 + _i152] = attribute.array[index2 + _i152];
      }

      return this;
    }
  }, {
    key: "set",
    value: function set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
  }, {
    key: "clone",
    value: function clone(data) {
      if (data.arrayBuffers === undefined) {
        data.arrayBuffers = {};
      }

      if (this.array.buffer._uuid === undefined) {
        this.array.buffer._uuid = generateUUID();
      }

      if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
      }

      var array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
      var ib = new this.constructor(array, this.stride);
      ib.setUsage(this.usage);
      return ib;
    }
  }, {
    key: "onUpload",
    value: function onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(data) {
      if (data.arrayBuffers === undefined) {
        data.arrayBuffers = {};
      } // generate UUID for array buffer if necessary


      if (this.array.buffer._uuid === undefined) {
        this.array.buffer._uuid = generateUUID();
      }

      if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {
        data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
      } //


      return {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride
      };
    }
  }]);

  return InterleavedBuffer;
}();

exports.InterleavedBuffer = InterleavedBuffer;
InterleavedBuffer.prototype.isInterleavedBuffer = true;

var _vector$6 = /*@__PURE__*/new Vector3();

var InterleavedBufferAttribute = /*#__PURE__*/function () {
  function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized = false) {
    _classCallCheck(this, InterleavedBufferAttribute);

    this.name = '';
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized === true;
  }

  _createClass(InterleavedBufferAttribute, [{
    key: "count",
    get: function get() {
      return this.data.count;
    }
  }, {
    key: "array",
    get: function get() {
      return this.data.array;
    }
  }, {
    key: "needsUpdate",
    set: function set(value) {
      this.data.needsUpdate = value;
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(m) {
      for (var _i153 = 0, l = this.data.count; _i153 < l; _i153++) {
        _vector$6.fromBufferAttribute(this, _i153);

        _vector$6.applyMatrix4(m);

        this.setXYZ(_i153, _vector$6.x, _vector$6.y, _vector$6.z);
      }

      return this;
    }
  }, {
    key: "applyNormalMatrix",
    value: function applyNormalMatrix(m) {
      for (var _i154 = 0, l = this.count; _i154 < l; _i154++) {
        _vector$6.fromBufferAttribute(this, _i154);

        _vector$6.applyNormalMatrix(m);

        this.setXYZ(_i154, _vector$6.x, _vector$6.y, _vector$6.z);
      }

      return this;
    }
  }, {
    key: "transformDirection",
    value: function transformDirection(m) {
      for (var _i155 = 0, l = this.count; _i155 < l; _i155++) {
        _vector$6.fromBufferAttribute(this, _i155);

        _vector$6.transformDirection(m);

        this.setXYZ(_i155, _vector$6.x, _vector$6.y, _vector$6.z);
      }

      return this;
    }
  }, {
    key: "setX",
    value: function setX(index, x) {
      this.data.array[index * this.data.stride + this.offset] = x;
      return this;
    }
  }, {
    key: "setY",
    value: function setY(index, y) {
      this.data.array[index * this.data.stride + this.offset + 1] = y;
      return this;
    }
  }, {
    key: "setZ",
    value: function setZ(index, z) {
      this.data.array[index * this.data.stride + this.offset + 2] = z;
      return this;
    }
  }, {
    key: "setW",
    value: function setW(index, w) {
      this.data.array[index * this.data.stride + this.offset + 3] = w;
      return this;
    }
  }, {
    key: "getX",
    value: function getX(index) {
      return this.data.array[index * this.data.stride + this.offset];
    }
  }, {
    key: "getY",
    value: function getY(index) {
      return this.data.array[index * this.data.stride + this.offset + 1];
    }
  }, {
    key: "getZ",
    value: function getZ(index) {
      return this.data.array[index * this.data.stride + this.offset + 2];
    }
  }, {
    key: "getW",
    value: function getW(index) {
      return this.data.array[index * this.data.stride + this.offset + 3];
    }
  }, {
    key: "setXY",
    value: function setXY(index, x, y) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      return this;
    }
  }, {
    key: "setXYZ",
    value: function setXYZ(index, x, y, z) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      return this;
    }
  }, {
    key: "setXYZW",
    value: function setXYZW(index, x, y, z, w) {
      index = index * this.data.stride + this.offset;
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      this.data.array[index + 3] = w;
      return this;
    }
  }, {
    key: "clone",
    value: function clone(data) {
      if (data === undefined) {
        console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');
        var array = [];

        for (var _i156 = 0; _i156 < this.count; _i156++) {
          var index = _i156 * this.data.stride + this.offset;

          for (var j = 0; j < this.itemSize; j++) {
            array.push(this.data.array[index + j]);
          }
        }

        return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
      } else {
        if (data.interleavedBuffers === undefined) {
          data.interleavedBuffers = {};
        }

        if (data.interleavedBuffers[this.data.uuid] === undefined) {
          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
        }

        return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      }
    }
  }, {
    key: "toJSON",
    value: function toJSON(data) {
      if (data === undefined) {
        console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');
        var array = [];

        for (var _i157 = 0; _i157 < this.count; _i157++) {
          var index = _i157 * this.data.stride + this.offset;

          for (var j = 0; j < this.itemSize; j++) {
            array.push(this.data.array[index + j]);
          }
        } // deinterleave data and save it as an ordinary buffer attribute for now


        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: array,
          normalized: this.normalized
        };
      } else {
        // save as true interlaved attribtue
        if (data.interleavedBuffers === undefined) {
          data.interleavedBuffers = {};
        }

        if (data.interleavedBuffers[this.data.uuid] === undefined) {
          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
        }

        return {
          isInterleavedBufferAttribute: true,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    }
  }]);

  return InterleavedBufferAttribute;
}();

exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;

var SpriteMaterial = /*#__PURE__*/function (_Material5) {
  _inherits(SpriteMaterial, _Material5);

  var _super40 = _createSuper(SpriteMaterial);

  function SpriteMaterial(parameters) {
    var _this30;

    _classCallCheck(this, SpriteMaterial);

    _this30 = _super40.call(this);
    _this30.type = 'SpriteMaterial';
    _this30.color = new Color(0xffffff);
    _this30.map = null;
    _this30.alphaMap = null;
    _this30.rotation = 0;
    _this30.sizeAttenuation = true;
    _this30.transparent = true;

    _this30.setValues(parameters);

    return _this30;
  }

  _createClass(SpriteMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(SpriteMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.rotation = source.rotation;
      this.sizeAttenuation = source.sizeAttenuation;
      return this;
    }
  }]);

  return SpriteMaterial;
}(Material);

exports.SpriteMaterial = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;

var _geometry;

var _intersectPoint = /*@__PURE__*/new Vector3();

var _worldScale = /*@__PURE__*/new Vector3();

var _mvPosition = /*@__PURE__*/new Vector3();

var _alignedPosition = /*@__PURE__*/new Vector2();

var _rotatedPosition = /*@__PURE__*/new Vector2();

var _viewWorldMatrix = /*@__PURE__*/new Matrix4();

var _vA = /*@__PURE__*/new Vector3();

var _vB = /*@__PURE__*/new Vector3();

var _vC = /*@__PURE__*/new Vector3();

var _uvA = /*@__PURE__*/new Vector2();

var _uvB = /*@__PURE__*/new Vector2();

var _uvC = /*@__PURE__*/new Vector2();

var Sprite = /*#__PURE__*/function (_Object3D6) {
  _inherits(Sprite, _Object3D6);

  var _super41 = _createSuper(Sprite);

  function Sprite(material) {
    var _this31;

    _classCallCheck(this, Sprite);

    _this31 = _super41.call(this);
    _this31.type = 'Sprite';

    if (_geometry === undefined) {
      _geometry = new BufferGeometry();
      var float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
      var interleavedBuffer = new InterleavedBuffer(float32Array, 5);

      _geometry.setIndex([0, 1, 2, 0, 2, 3]);

      _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));

      _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
    }

    _this31.geometry = _geometry;
    _this31.material = material !== undefined ? material : new SpriteMaterial();
    _this31.center = new Vector2(0.5, 0.5);
    return _this31;
  }

  _createClass(Sprite, [{
    key: "raycast",
    value: function raycast(raycaster, intersects) {
      if (raycaster.camera === null) {
        console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
      }

      _worldScale.setFromMatrixScale(this.matrixWorld);

      _viewWorldMatrix.copy(raycaster.camera.matrixWorld);

      this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);

      _mvPosition.setFromMatrixPosition(this.modelViewMatrix);

      if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
        _worldScale.multiplyScalar(-_mvPosition.z);
      }

      var rotation = this.material.rotation;
      var sin, cos;

      if (rotation !== 0) {
        cos = Math.cos(rotation);
        sin = Math.sin(rotation);
      }

      var center = this.center;
      transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);

      _uvA.set(0, 0);

      _uvB.set(1, 0);

      _uvC.set(1, 1); // check first triangle


      var intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);

      if (intersect === null) {
        // check second triangle
        transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);

        _uvB.set(0, 1);

        intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);

        if (intersect === null) {
          return;
        }
      }

      var distance = raycaster.ray.origin.distanceTo(_intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far) return;
      intersects.push({
        distance: distance,
        point: _intersectPoint.clone(),
        uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
        face: null,
        object: this
      });
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Sprite.prototype), "copy", this).call(this, source);

      if (source.center !== undefined) this.center.copy(source.center);
      this.material = source.material;
      return this;
    }
  }]);

  return Sprite;
}(Object3D);

exports.Sprite = Sprite;
Sprite.prototype.isSprite = true;

function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
  // compute position in camera space
  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero


  if (sin !== undefined) {
    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
  } else {
    _rotatedPosition.copy(_alignedPosition);
  }

  vertexPosition.copy(mvPosition);
  vertexPosition.x += _rotatedPosition.x;
  vertexPosition.y += _rotatedPosition.y; // transform to world space

  vertexPosition.applyMatrix4(_viewWorldMatrix);
}

var _v1$2 = /*@__PURE__*/new Vector3();

var _v2$1 = /*@__PURE__*/new Vector3();

var LOD = /*#__PURE__*/function (_Object3D7) {
  _inherits(LOD, _Object3D7);

  var _super42 = _createSuper(LOD);

  function LOD() {
    var _this32;

    _classCallCheck(this, LOD);

    _this32 = _super42.call(this);
    _this32._currentLevel = 0;
    _this32.type = 'LOD';
    Object.defineProperties(_assertThisInitialized(_this32), {
      levels: {
        enumerable: true,
        value: []
      },
      isLOD: {
        value: true
      }
    });
    _this32.autoUpdate = true;
    return _this32;
  }

  _createClass(LOD, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(LOD.prototype), "copy", this).call(this, source, false);

      var levels = source.levels;

      for (var _i158 = 0, l = levels.length; _i158 < l; _i158++) {
        var level = levels[_i158];
        this.addLevel(level.object.clone(), level.distance);
      }

      this.autoUpdate = source.autoUpdate;
      return this;
    }
  }, {
    key: "addLevel",
    value: function addLevel(object, distance = 0) {
      distance = Math.abs(distance);
      var levels = this.levels;
      var l;

      for (l = 0; l < levels.length; l++) {
        if (distance < levels[l].distance) {
          break;
        }
      }

      levels.splice(l, 0, {
        distance: distance,
        object: object
      });
      this.add(object);
      return this;
    }
  }, {
    key: "getCurrentLevel",
    value: function getCurrentLevel() {
      return this._currentLevel;
    }
  }, {
    key: "getObjectForDistance",
    value: function getObjectForDistance(distance) {
      var levels = this.levels;

      if (levels.length > 0) {
        var _i159, l;

        for (_i159 = 1, l = levels.length; _i159 < l; _i159++) {
          if (distance < levels[_i159].distance) {
            break;
          }
        }

        return levels[_i159 - 1].object;
      }

      return null;
    }
  }, {
    key: "raycast",
    value: function raycast(raycaster, intersects) {
      var levels = this.levels;

      if (levels.length > 0) {
        _v1$2.setFromMatrixPosition(this.matrixWorld);

        var distance = raycaster.ray.origin.distanceTo(_v1$2);
        this.getObjectForDistance(distance).raycast(raycaster, intersects);
      }
    }
  }, {
    key: "update",
    value: function update(camera) {
      var levels = this.levels;

      if (levels.length > 1) {
        _v1$2.setFromMatrixPosition(camera.matrixWorld);

        _v2$1.setFromMatrixPosition(this.matrixWorld);

        var distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
        levels[0].object.visible = true;

        var _i160, l;

        for (_i160 = 1, l = levels.length; _i160 < l; _i160++) {
          if (distance >= levels[_i160].distance) {
            levels[_i160 - 1].object.visible = false;
            levels[_i160].object.visible = true;
          } else {
            break;
          }
        }

        this._currentLevel = _i160 - 1;

        for (; _i160 < l; _i160++) {
          levels[_i160].object.visible = false;
        }
      }
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(LOD.prototype), "toJSON", this).call(this, meta);

      if (this.autoUpdate === false) data.object.autoUpdate = false;
      data.object.levels = [];
      var levels = this.levels;

      for (var _i161 = 0, l = levels.length; _i161 < l; _i161++) {
        var level = levels[_i161];
        data.object.levels.push({
          object: level.object.uuid,
          distance: level.distance
        });
      }

      return data;
    }
  }]);

  return LOD;
}(Object3D);

exports.LOD = LOD;

var _basePosition = /*@__PURE__*/new Vector3();

var _skinIndex = /*@__PURE__*/new Vector4();

var _skinWeight = /*@__PURE__*/new Vector4();

var _vector$5 = /*@__PURE__*/new Vector3();

var _matrix = /*@__PURE__*/new Matrix4();

var SkinnedMesh = /*#__PURE__*/function (_Mesh) {
  _inherits(SkinnedMesh, _Mesh);

  var _super43 = _createSuper(SkinnedMesh);

  function SkinnedMesh(geometry, material) {
    var _this33;

    _classCallCheck(this, SkinnedMesh);

    _this33 = _super43.call(this, geometry, material);
    _this33.type = 'SkinnedMesh';
    _this33.bindMode = 'attached';
    _this33.bindMatrix = new Matrix4();
    _this33.bindMatrixInverse = new Matrix4();
    return _this33;
  }

  _createClass(SkinnedMesh, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(SkinnedMesh.prototype), "copy", this).call(this, source);

      this.bindMode = source.bindMode;
      this.bindMatrix.copy(source.bindMatrix);
      this.bindMatrixInverse.copy(source.bindMatrixInverse);
      this.skeleton = source.skeleton;
      return this;
    }
  }, {
    key: "bind",
    value: function bind(skeleton, bindMatrix) {
      this.skeleton = skeleton;

      if (bindMatrix === undefined) {
        this.updateMatrixWorld(true);
        this.skeleton.calculateInverses();
        bindMatrix = this.matrixWorld;
      }

      this.bindMatrix.copy(bindMatrix);
      this.bindMatrixInverse.copy(bindMatrix).invert();
    }
  }, {
    key: "pose",
    value: function pose() {
      this.skeleton.pose();
    }
  }, {
    key: "normalizeSkinWeights",
    value: function normalizeSkinWeights() {
      var vector = new Vector4();
      var skinWeight = this.geometry.attributes.skinWeight;

      for (var _i162 = 0, l = skinWeight.count; _i162 < l; _i162++) {
        vector.fromBufferAttribute(skinWeight, _i162);
        var scale = 1.0 / vector.manhattanLength();

        if (scale !== Infinity) {
          vector.multiplyScalar(scale);
        } else {
          vector.set(1, 0, 0, 0); // do something reasonable
        }

        skinWeight.setXYZW(_i162, vector.x, vector.y, vector.z, vector.w);
      }
    }
  }, {
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      _get(_getPrototypeOf(SkinnedMesh.prototype), "updateMatrixWorld", this).call(this, force);

      if (this.bindMode === 'attached') {
        this.bindMatrixInverse.copy(this.matrixWorld).invert();
      } else if (this.bindMode === 'detached') {
        this.bindMatrixInverse.copy(this.bindMatrix).invert();
      } else {
        console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
      }
    }
  }, {
    key: "boneTransform",
    value: function boneTransform(index, target) {
      var skeleton = this.skeleton;
      var geometry = this.geometry;

      _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);

      _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);

      _basePosition.copy(target).applyMatrix4(this.bindMatrix);

      target.set(0, 0, 0);

      for (var _i163 = 0; _i163 < 4; _i163++) {
        var weight = _skinWeight.getComponent(_i163);

        if (weight !== 0) {
          var boneIndex = _skinIndex.getComponent(_i163);

          _matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);

          target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
        }
      }

      return target.applyMatrix4(this.bindMatrixInverse);
    }
  }]);

  return SkinnedMesh;
}(Mesh);

exports.SkinnedMesh = SkinnedMesh;
SkinnedMesh.prototype.isSkinnedMesh = true;

var Bone = /*#__PURE__*/function (_Object3D8) {
  _inherits(Bone, _Object3D8);

  var _super44 = _createSuper(Bone);

  function Bone() {
    var _this34;

    _classCallCheck(this, Bone);

    _this34 = _super44.call(this);
    _this34.type = 'Bone';
    return _this34;
  }

  return _createClass(Bone);
}(Object3D);

exports.Bone = Bone;
Bone.prototype.isBone = true;

var DataTexture = /*#__PURE__*/function (_Texture5) {
  _inherits(DataTexture, _Texture5);

  var _super45 = _createSuper(DataTexture);

  function DataTexture(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding) {
    var _this35;

    _classCallCheck(this, DataTexture);

    _this35 = _super45.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    _this35.image = {
      data: data,
      width: width,
      height: height
    };
    _this35.generateMipmaps = false;
    _this35.flipY = false;
    _this35.unpackAlignment = 1;
    return _this35;
  }

  return _createClass(DataTexture);
}(Texture);

exports.DataTexture = DataTexture;
DataTexture.prototype.isDataTexture = true;

var _offsetMatrix = /*@__PURE__*/new Matrix4();

var _identityMatrix = /*@__PURE__*/new Matrix4();

var Skeleton = /*#__PURE__*/function () {
  function Skeleton(bones = [], boneInverses = []) {
    _classCallCheck(this, Skeleton);

    this.uuid = generateUUID();
    this.bones = bones.slice(0);
    this.boneInverses = boneInverses;
    this.boneMatrices = null;
    this.boneTexture = null;
    this.boneTextureSize = 0;
    this.frame = -1;
    this.init();
  }

  _createClass(Skeleton, [{
    key: "init",
    value: function init() {
      var bones = this.bones;
      var boneInverses = this.boneInverses;
      this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary

      if (boneInverses.length === 0) {
        this.calculateInverses();
      } else {
        // handle special case
        if (bones.length !== boneInverses.length) {
          console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
          this.boneInverses = [];

          for (var _i164 = 0, il = this.bones.length; _i164 < il; _i164++) {
            this.boneInverses.push(new Matrix4());
          }
        }
      }
    }
  }, {
    key: "calculateInverses",
    value: function calculateInverses() {
      this.boneInverses.length = 0;

      for (var _i165 = 0, il = this.bones.length; _i165 < il; _i165++) {
        var inverse = new Matrix4();

        if (this.bones[_i165]) {
          inverse.copy(this.bones[_i165].matrixWorld).invert();
        }

        this.boneInverses.push(inverse);
      }
    }
  }, {
    key: "pose",
    value: function pose() {
      // recover the bind-time world matrices
      for (var _i166 = 0, il = this.bones.length; _i166 < il; _i166++) {
        var bone = this.bones[_i166];

        if (bone) {
          bone.matrixWorld.copy(this.boneInverses[_i166]).invert();
        }
      } // compute the local matrices, positions, rotations and scales


      for (var _i167 = 0, _il12 = this.bones.length; _i167 < _il12; _i167++) {
        var _bone = this.bones[_i167];

        if (_bone) {
          if (_bone.parent && _bone.parent.isBone) {
            _bone.matrix.copy(_bone.parent.matrixWorld).invert();

            _bone.matrix.multiply(_bone.matrixWorld);
          } else {
            _bone.matrix.copy(_bone.matrixWorld);
          }

          _bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);
        }
      }
    }
  }, {
    key: "update",
    value: function update() {
      var bones = this.bones;
      var boneInverses = this.boneInverses;
      var boneMatrices = this.boneMatrices;
      var boneTexture = this.boneTexture; // flatten bone matrices to array

      for (var _i168 = 0, il = bones.length; _i168 < il; _i168++) {
        // compute the offset between the current and the original transform
        var matrix = bones[_i168] ? bones[_i168].matrixWorld : _identityMatrix;

        _offsetMatrix.multiplyMatrices(matrix, boneInverses[_i168]);

        _offsetMatrix.toArray(boneMatrices, _i168 * 16);
      }

      if (boneTexture !== null) {
        boneTexture.needsUpdate = true;
      }
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Skeleton(this.bones, this.boneInverses);
    }
  }, {
    key: "computeBoneTexture",
    value: function computeBoneTexture() {
      // layout (1 matrix = 4 pixels)
      //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
      //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
      //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
      //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
      //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
      var size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix

      size = ceilPowerOfTwo(size);
      size = Math.max(size, 4);
      var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel

      boneMatrices.set(this.boneMatrices); // copy current values

      var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
      boneTexture.needsUpdate = true;
      this.boneMatrices = boneMatrices;
      this.boneTexture = boneTexture;
      this.boneTextureSize = size;
      return this;
    }
  }, {
    key: "getBoneByName",
    value: function getBoneByName(name) {
      for (var _i169 = 0, il = this.bones.length; _i169 < il; _i169++) {
        var bone = this.bones[_i169];

        if (bone.name === name) {
          return bone;
        }
      }

      return undefined;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this.boneTexture !== null) {
        this.boneTexture.dispose();
        this.boneTexture = null;
      }
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json, bones) {
      this.uuid = json.uuid;

      for (var _i170 = 0, l = json.bones.length; _i170 < l; _i170++) {
        var uuid = json.bones[_i170];
        var bone = bones[uuid];

        if (bone === undefined) {
          console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
          bone = new Bone();
        }

        this.bones.push(bone);
        this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[_i170]));
      }

      this.init();
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = {
        metadata: {
          version: 4.5,
          type: 'Skeleton',
          generator: 'Skeleton.toJSON'
        },
        bones: [],
        boneInverses: []
      };
      data.uuid = this.uuid;
      var bones = this.bones;
      var boneInverses = this.boneInverses;

      for (var _i171 = 0, l = bones.length; _i171 < l; _i171++) {
        var bone = bones[_i171];
        data.bones.push(bone.uuid);
        var boneInverse = boneInverses[_i171];
        data.boneInverses.push(boneInverse.toArray());
      }

      return data;
    }
  }]);

  return Skeleton;
}();

exports.Skeleton = Skeleton;

var InstancedBufferAttribute = /*#__PURE__*/function (_BufferAttribute11) {
  _inherits(InstancedBufferAttribute, _BufferAttribute11);

  var _super46 = _createSuper(InstancedBufferAttribute);

  function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute = 1) {
    var _this36;

    _classCallCheck(this, InstancedBufferAttribute);

    if (typeof normalized === 'number') {
      meshPerAttribute = normalized;
      normalized = false;
      console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');
    }

    _this36 = _super46.call(this, array, itemSize, normalized);
    _this36.meshPerAttribute = meshPerAttribute;
    return _this36;
  }

  _createClass(InstancedBufferAttribute, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(InstancedBufferAttribute.prototype), "copy", this).call(this, source);

      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(InstancedBufferAttribute.prototype), "toJSON", this).call(this);

      data.meshPerAttribute = this.meshPerAttribute;
      data.isInstancedBufferAttribute = true;
      return data;
    }
  }]);

  return InstancedBufferAttribute;
}(BufferAttribute);

exports.InstancedBufferAttribute = InstancedBufferAttribute;
InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

var _instanceLocalMatrix = /*@__PURE__*/new Matrix4();

var _instanceWorldMatrix = /*@__PURE__*/new Matrix4();

var _instanceIntersects = [];

var _mesh = /*@__PURE__*/new Mesh();

var InstancedMesh = /*#__PURE__*/function (_Mesh2) {
  _inherits(InstancedMesh, _Mesh2);

  var _super47 = _createSuper(InstancedMesh);

  function InstancedMesh(geometry, material, count) {
    var _this37;

    _classCallCheck(this, InstancedMesh);

    _this37 = _super47.call(this, geometry, material);
    _this37.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
    _this37.instanceColor = null;
    _this37.count = count;
    _this37.frustumCulled = false;
    return _this37;
  }

  _createClass(InstancedMesh, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(InstancedMesh.prototype), "copy", this).call(this, source);

      this.instanceMatrix.copy(source.instanceMatrix);
      if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
      this.count = source.count;
      return this;
    }
  }, {
    key: "getColorAt",
    value: function getColorAt(index, color) {
      color.fromArray(this.instanceColor.array, index * 3);
    }
  }, {
    key: "getMatrixAt",
    value: function getMatrixAt(index, matrix) {
      matrix.fromArray(this.instanceMatrix.array, index * 16);
    }
  }, {
    key: "raycast",
    value: function raycast(raycaster, intersects) {
      var matrixWorld = this.matrixWorld;
      var raycastTimes = this.count;
      _mesh.geometry = this.geometry;
      _mesh.material = this.material;
      if (_mesh.material === undefined) return;

      for (var instanceId = 0; instanceId < raycastTimes; instanceId++) {
        // calculate the world matrix for each instance
        this.getMatrixAt(instanceId, _instanceLocalMatrix);

        _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance


        _mesh.matrixWorld = _instanceWorldMatrix;

        _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast


        for (var _i172 = 0, l = _instanceIntersects.length; _i172 < l; _i172++) {
          var intersect = _instanceIntersects[_i172];
          intersect.instanceId = instanceId;
          intersect.object = this;
          intersects.push(intersect);
        }

        _instanceIntersects.length = 0;
      }
    }
  }, {
    key: "setColorAt",
    value: function setColorAt(index, color) {
      if (this.instanceColor === null) {
        this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
      }

      color.toArray(this.instanceColor.array, index * 3);
    }
  }, {
    key: "setMatrixAt",
    value: function setMatrixAt(index, matrix) {
      matrix.toArray(this.instanceMatrix.array, index * 16);
    }
  }, {
    key: "updateMorphTargets",
    value: function updateMorphTargets() {}
  }, {
    key: "dispose",
    value: function dispose() {
      this.dispatchEvent({
        type: 'dispose'
      });
    }
  }]);

  return InstancedMesh;
}(Mesh);

exports.InstancedMesh = InstancedMesh;
InstancedMesh.prototype.isInstancedMesh = true;

var LineBasicMaterial = /*#__PURE__*/function (_Material6) {
  _inherits(LineBasicMaterial, _Material6);

  var _super48 = _createSuper(LineBasicMaterial);

  function LineBasicMaterial(parameters) {
    var _this38;

    _classCallCheck(this, LineBasicMaterial);

    _this38 = _super48.call(this);
    _this38.type = 'LineBasicMaterial';
    _this38.color = new Color(0xffffff);
    _this38.linewidth = 1;
    _this38.linecap = 'round';
    _this38.linejoin = 'round';

    _this38.setValues(parameters);

    return _this38;
  }

  _createClass(LineBasicMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(LineBasicMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.linewidth = source.linewidth;
      this.linecap = source.linecap;
      this.linejoin = source.linejoin;
      return this;
    }
  }]);

  return LineBasicMaterial;
}(Material);

exports.LineBasicMaterial = LineBasicMaterial;
LineBasicMaterial.prototype.isLineBasicMaterial = true;

var _start$1 = /*@__PURE__*/new Vector3();

var _end$1 = /*@__PURE__*/new Vector3();

var _inverseMatrix$1 = /*@__PURE__*/new Matrix4();

var _ray$1 = /*@__PURE__*/new Ray();

var _sphere$1 = /*@__PURE__*/new Sphere();

var Line = /*#__PURE__*/function (_Object3D9) {
  _inherits(Line, _Object3D9);

  var _super49 = _createSuper(Line);

  function Line(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
    var _this39;

    _classCallCheck(this, Line);

    _this39 = _super49.call(this);
    _this39.type = 'Line';
    _this39.geometry = geometry;
    _this39.material = material;

    _this39.updateMorphTargets();

    return _this39;
  }

  _createClass(Line, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Line.prototype), "copy", this).call(this, source);

      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
  }, {
    key: "computeLineDistances",
    value: function computeLineDistances() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        // we assume non-indexed geometry
        if (geometry.index === null) {
          var positionAttribute = geometry.attributes.position;
          var lineDistances = [0];

          for (var _i173 = 1, l = positionAttribute.count; _i173 < l; _i173++) {
            _start$1.fromBufferAttribute(positionAttribute, _i173 - 1);

            _end$1.fromBufferAttribute(positionAttribute, _i173);

            lineDistances[_i173] = lineDistances[_i173 - 1];
            lineDistances[_i173] += _start$1.distanceTo(_end$1);
          }

          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        }
      } else if (geometry.isGeometry) {
        console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
      }

      return this;
    }
  }, {
    key: "raycast",
    value: function raycast(raycaster, intersects) {
      var geometry = this.geometry;
      var matrixWorld = this.matrixWorld;
      var threshold = raycaster.params.Line.threshold;
      var drawRange = geometry.drawRange; // Checking boundingSphere distance to ray

      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

      _sphere$1.copy(geometry.boundingSphere);

      _sphere$1.applyMatrix4(matrixWorld);

      _sphere$1.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //

      _inverseMatrix$1.copy(matrixWorld).invert();

      _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);

      var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      var localThresholdSq = localThreshold * localThreshold;
      var vStart = new Vector3();
      var vEnd = new Vector3();
      var interSegment = new Vector3();
      var interRay = new Vector3();
      var step = this.isLineSegments ? 2 : 1;

      if (geometry.isBufferGeometry) {
        var index = geometry.index;
        var attributes = geometry.attributes;
        var positionAttribute = attributes.position;

        if (index !== null) {
          var start = Math.max(0, drawRange.start);
          var end = Math.min(index.count, drawRange.start + drawRange.count);

          for (var _i174 = start, l = end - 1; _i174 < l; _i174 += step) {
            var a = index.getX(_i174);
            var b = index.getX(_i174 + 1);
            vStart.fromBufferAttribute(positionAttribute, a);
            vEnd.fromBufferAttribute(positionAttribute, b);

            var distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

            if (distSq > localThresholdSq) continue;
            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

            var distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far) continue;
            intersects.push({
              distance: distance,
              // What do we want? intersection point on the ray or on the segment??
              // point: raycaster.ray.at( distance ),
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: _i174,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          var _start6 = Math.max(0, drawRange.start);

          var _end5 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

          for (var _i175 = _start6, _l7 = _end5 - 1; _i175 < _l7; _i175 += step) {
            vStart.fromBufferAttribute(positionAttribute, _i175);
            vEnd.fromBufferAttribute(positionAttribute, _i175 + 1);

            var _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

            if (_distSq > localThresholdSq) continue;
            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

            var _distance = raycaster.ray.origin.distanceTo(interRay);

            if (_distance < raycaster.near || _distance > raycaster.far) continue;
            intersects.push({
              distance: _distance,
              // What do we want? intersection point on the ray or on the segment??
              // point: raycaster.ray.at( distance ),
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: _i175,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      } else if (geometry.isGeometry) {
        console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
      }
    }
  }, {
    key: "updateMorphTargets",
    value: function updateMorphTargets() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        var morphAttributes = geometry.morphAttributes;
        var keys = Object.keys(morphAttributes);

        if (keys.length > 0) {
          var morphAttribute = morphAttributes[keys[0]];

          if (morphAttribute !== undefined) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};

            for (var m = 0, ml = morphAttribute.length; m < ml; m++) {
              var name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        var morphTargets = geometry.morphTargets;

        if (morphTargets !== undefined && morphTargets.length > 0) {
          console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
      }
    }
  }]);

  return Line;
}(Object3D);

exports.Line = Line;
Line.prototype.isLine = true;

var _start = /*@__PURE__*/new Vector3();

var _end = /*@__PURE__*/new Vector3();

var LineSegments = /*#__PURE__*/function (_Line) {
  _inherits(LineSegments, _Line);

  var _super50 = _createSuper(LineSegments);

  function LineSegments(geometry, material) {
    var _this40;

    _classCallCheck(this, LineSegments);

    _this40 = _super50.call(this, geometry, material);
    _this40.type = 'LineSegments';
    return _this40;
  }

  _createClass(LineSegments, [{
    key: "computeLineDistances",
    value: function computeLineDistances() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        // we assume non-indexed geometry
        if (geometry.index === null) {
          var positionAttribute = geometry.attributes.position;
          var lineDistances = [];

          for (var _i176 = 0, l = positionAttribute.count; _i176 < l; _i176 += 2) {
            _start.fromBufferAttribute(positionAttribute, _i176);

            _end.fromBufferAttribute(positionAttribute, _i176 + 1);

            lineDistances[_i176] = _i176 === 0 ? 0 : lineDistances[_i176 - 1];
            lineDistances[_i176 + 1] = lineDistances[_i176] + _start.distanceTo(_end);
          }

          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        }
      } else if (geometry.isGeometry) {
        console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
      }

      return this;
    }
  }]);

  return LineSegments;
}(Line);

exports.LineSegments = LineSegments;
LineSegments.prototype.isLineSegments = true;

var LineLoop = /*#__PURE__*/function (_Line2) {
  _inherits(LineLoop, _Line2);

  var _super51 = _createSuper(LineLoop);

  function LineLoop(geometry, material) {
    var _this41;

    _classCallCheck(this, LineLoop);

    _this41 = _super51.call(this, geometry, material);
    _this41.type = 'LineLoop';
    return _this41;
  }

  return _createClass(LineLoop);
}(Line);

exports.LineLoop = LineLoop;
LineLoop.prototype.isLineLoop = true;

var PointsMaterial = /*#__PURE__*/function (_Material7) {
  _inherits(PointsMaterial, _Material7);

  var _super52 = _createSuper(PointsMaterial);

  function PointsMaterial(parameters) {
    var _this42;

    _classCallCheck(this, PointsMaterial);

    _this42 = _super52.call(this);
    _this42.type = 'PointsMaterial';
    _this42.color = new Color(0xffffff);
    _this42.map = null;
    _this42.alphaMap = null;
    _this42.size = 1;
    _this42.sizeAttenuation = true;

    _this42.setValues(parameters);

    return _this42;
  }

  _createClass(PointsMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(PointsMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.size = source.size;
      this.sizeAttenuation = source.sizeAttenuation;
      return this;
    }
  }]);

  return PointsMaterial;
}(Material);

exports.PointsMaterial = PointsMaterial;
PointsMaterial.prototype.isPointsMaterial = true;

var _inverseMatrix = /*@__PURE__*/new Matrix4();

var _ray = /*@__PURE__*/new Ray();

var _sphere = /*@__PURE__*/new Sphere();

var _position$2 = /*@__PURE__*/new Vector3();

var Points = /*#__PURE__*/function (_Object3D10) {
  _inherits(Points, _Object3D10);

  var _super53 = _createSuper(Points);

  function Points(geometry = new BufferGeometry(), material = new PointsMaterial()) {
    var _this43;

    _classCallCheck(this, Points);

    _this43 = _super53.call(this);
    _this43.type = 'Points';
    _this43.geometry = geometry;
    _this43.material = material;

    _this43.updateMorphTargets();

    return _this43;
  }

  _createClass(Points, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Points.prototype), "copy", this).call(this, source);

      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
  }, {
    key: "raycast",
    value: function raycast(raycaster, intersects) {
      var geometry = this.geometry;
      var matrixWorld = this.matrixWorld;
      var threshold = raycaster.params.Points.threshold;
      var drawRange = geometry.drawRange; // Checking boundingSphere distance to ray

      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

      _sphere.copy(geometry.boundingSphere);

      _sphere.applyMatrix4(matrixWorld);

      _sphere.radius += threshold;
      if (raycaster.ray.intersectsSphere(_sphere) === false) return; //

      _inverseMatrix.copy(matrixWorld).invert();

      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);

      var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      var localThresholdSq = localThreshold * localThreshold;

      if (geometry.isBufferGeometry) {
        var index = geometry.index;
        var attributes = geometry.attributes;
        var positionAttribute = attributes.position;

        if (index !== null) {
          var start = Math.max(0, drawRange.start);
          var end = Math.min(index.count, drawRange.start + drawRange.count);

          for (var _i177 = start, il = end; _i177 < il; _i177++) {
            var a = index.getX(_i177);

            _position$2.fromBufferAttribute(positionAttribute, a);

            testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
          }
        } else {
          var _start7 = Math.max(0, drawRange.start);

          var _end6 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);

          for (var _i178 = _start7, l = _end6; _i178 < l; _i178++) {
            _position$2.fromBufferAttribute(positionAttribute, _i178);

            testPoint(_position$2, _i178, localThresholdSq, matrixWorld, raycaster, intersects, this);
          }
        }
      } else {
        console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
      }
    }
  }, {
    key: "updateMorphTargets",
    value: function updateMorphTargets() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        var morphAttributes = geometry.morphAttributes;
        var keys = Object.keys(morphAttributes);

        if (keys.length > 0) {
          var morphAttribute = morphAttributes[keys[0]];

          if (morphAttribute !== undefined) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};

            for (var m = 0, ml = morphAttribute.length; m < ml; m++) {
              var name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      } else {
        var morphTargets = geometry.morphTargets;

        if (morphTargets !== undefined && morphTargets.length > 0) {
          console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
      }
    }
  }]);

  return Points;
}(Object3D);

exports.Points = Points;
Points.prototype.isPoints = true;

function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
  var rayPointDistanceSq = _ray.distanceSqToPoint(point);

  if (rayPointDistanceSq < localThresholdSq) {
    var intersectPoint = new Vector3();

    _ray.closestPointToPoint(point, intersectPoint);

    intersectPoint.applyMatrix4(matrixWorld);
    var distance = raycaster.ray.origin.distanceTo(intersectPoint);
    if (distance < raycaster.near || distance > raycaster.far) return;
    intersects.push({
      distance: distance,
      distanceToRay: Math.sqrt(rayPointDistanceSq),
      point: intersectPoint,
      index: index,
      face: null,
      object: object
    });
  }
}

var VideoTexture = /*#__PURE__*/function (_Texture6) {
  _inherits(VideoTexture, _Texture6);

  var _super54 = _createSuper(VideoTexture);

  function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    var _this44;

    _classCallCheck(this, VideoTexture);

    _this44 = _super54.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    _this44.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
    _this44.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
    _this44.generateMipmaps = false;

    var scope = _assertThisInitialized(_this44);

    function updateVideo() {
      scope.needsUpdate = true;
      video.requestVideoFrameCallback(updateVideo);
    }

    if ('requestVideoFrameCallback' in video) {
      video.requestVideoFrameCallback(updateVideo);
    }

    return _this44;
  }

  _createClass(VideoTexture, [{
    key: "clone",
    value: function clone() {
      return new this.constructor(this.image).copy(this);
    }
  }, {
    key: "update",
    value: function update() {
      var video = this.image;
      var hasVideoFrameCallback = ('requestVideoFrameCallback' in video);

      if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
        this.needsUpdate = true;
      }
    }
  }]);

  return VideoTexture;
}(Texture);

exports.VideoTexture = VideoTexture;
VideoTexture.prototype.isVideoTexture = true;

var FramebufferTexture = /*#__PURE__*/function (_Texture7) {
  _inherits(FramebufferTexture, _Texture7);

  var _super55 = _createSuper(FramebufferTexture);

  function FramebufferTexture(width, height, format) {
    var _this45;

    _classCallCheck(this, FramebufferTexture);

    _this45 = _super55.call(this, {
      width: width,
      height: height
    });
    _this45.format = format;
    _this45.magFilter = NearestFilter;
    _this45.minFilter = NearestFilter;
    _this45.generateMipmaps = false;
    _this45.needsUpdate = true;
    return _this45;
  }

  return _createClass(FramebufferTexture);
}(Texture);

exports.FramebufferTexture = FramebufferTexture;
FramebufferTexture.prototype.isFramebufferTexture = true;

var CompressedTexture = /*#__PURE__*/function (_Texture8) {
  _inherits(CompressedTexture, _Texture8);

  var _super56 = _createSuper(CompressedTexture);

  function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
    var _this46;

    _classCallCheck(this, CompressedTexture);

    _this46 = _super56.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
    _this46.image = {
      width: width,
      height: height
    };
    _this46.mipmaps = mipmaps; // no flipping for cube textures
    // (also flipping doesn't work for compressed textures )

    _this46.flipY = false; // can't generate mipmaps for compressed textures
    // mips must be embedded in DDS files

    _this46.generateMipmaps = false;
    return _this46;
  }

  return _createClass(CompressedTexture);
}(Texture);

exports.CompressedTexture = CompressedTexture;
CompressedTexture.prototype.isCompressedTexture = true;

var CanvasTexture = /*#__PURE__*/function (_Texture9) {
  _inherits(CanvasTexture, _Texture9);

  var _super57 = _createSuper(CanvasTexture);

  function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    var _this47;

    _classCallCheck(this, CanvasTexture);

    _this47 = _super57.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    _this47.needsUpdate = true;
    return _this47;
  }

  return _createClass(CanvasTexture);
}(Texture);

exports.CanvasTexture = CanvasTexture;
CanvasTexture.prototype.isCanvasTexture = true;
/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

var Curve = /*#__PURE__*/function () {
  function Curve() {
    _classCallCheck(this, Curve);

    this.type = 'Curve';
    this.arcLengthDivisions = 200;
  } // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]


  _createClass(Curve, [{
    key: "getPoint",
    value: function
      /* t, optionalTarget */
    getPoint() {
      console.warn('THREE.Curve: .getPoint() not implemented.');
      return null;
    } // Get point at relative position in curve according to arc length
    // - u [0 .. 1]

  }, {
    key: "getPointAt",
    value: function getPointAt(u, optionalTarget) {
      var t = this.getUtoTmapping(u);
      return this.getPoint(t, optionalTarget);
    } // Get sequence of points using getPoint( t )

  }, {
    key: "getPoints",
    value: function getPoints(divisions = 5) {
      var points = [];

      for (var d = 0; d <= divisions; d++) {
        points.push(this.getPoint(d / divisions));
      }

      return points;
    } // Get sequence of points using getPointAt( u )

  }, {
    key: "getSpacedPoints",
    value: function getSpacedPoints(divisions = 5) {
      var points = [];

      for (var d = 0; d <= divisions; d++) {
        points.push(this.getPointAt(d / divisions));
      }

      return points;
    } // Get total curve arc length

  }, {
    key: "getLength",
    value: function getLength() {
      var lengths = this.getLengths();
      return lengths[lengths.length - 1];
    } // Get list of cumulative segment lengths

  }, {
    key: "getLengths",
    value: function getLengths(divisions = this.arcLengthDivisions) {
      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
        return this.cacheArcLengths;
      }

      this.needsUpdate = false;
      var cache = [];
      var current,
          last = this.getPoint(0);
      var sum = 0;
      cache.push(0);

      for (var p = 1; p <= divisions; p++) {
        current = this.getPoint(p / divisions);
        sum += current.distanceTo(last);
        cache.push(sum);
        last = current;
      }

      this.cacheArcLengths = cache;
      return cache; // { sums: cache, sum: sum }; Sum is in the last element.
    }
  }, {
    key: "updateArcLengths",
    value: function updateArcLengths() {
      this.needsUpdate = true;
      this.getLengths();
    } // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

  }, {
    key: "getUtoTmapping",
    value: function getUtoTmapping(u, distance) {
      var arcLengths = this.getLengths();
      var i = 0;
      var il = arcLengths.length;
      var targetArcLength; // The targeted u distance value to get

      if (distance) {
        targetArcLength = distance;
      } else {
        targetArcLength = u * arcLengths[il - 1];
      } // binary search for the index with largest value smaller than target u distance


      var low = 0,
          high = il - 1,
          comparison;

      while (low <= high) {
        i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

        comparison = arcLengths[i] - targetArcLength;

        if (comparison < 0) {
          low = i + 1;
        } else if (comparison > 0) {
          high = i - 1;
        } else {
          high = i;
          break; // DONE
        }
      }

      i = high;

      if (arcLengths[i] === targetArcLength) {
        return i / (il - 1);
      } // we could get finer grain at lengths, or use simple interpolation between two points


      var lengthBefore = arcLengths[i];
      var lengthAfter = arcLengths[i + 1];
      var segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points

      var segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t

      var t = (i + segmentFraction) / (il - 1);
      return t;
    } // Returns a unit vector tangent at t
    // In case any sub curve does not implement its tangent derivation,
    // 2 points a small delta apart will be used to find its gradient
    // which seems to give a reasonable approximation

  }, {
    key: "getTangent",
    value: function getTangent(t, optionalTarget) {
      var delta = 0.0001;
      var t1 = t - delta;
      var t2 = t + delta; // Capping in case of danger

      if (t1 < 0) t1 = 0;
      if (t2 > 1) t2 = 1;
      var pt1 = this.getPoint(t1);
      var pt2 = this.getPoint(t2);
      var tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
      tangent.copy(pt2).sub(pt1).normalize();
      return tangent;
    }
  }, {
    key: "getTangentAt",
    value: function getTangentAt(u, optionalTarget) {
      var t = this.getUtoTmapping(u);
      return this.getTangent(t, optionalTarget);
    }
  }, {
    key: "computeFrenetFrames",
    value: function computeFrenetFrames(segments, closed) {
      // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
      var normal = new Vector3();
      var tangents = [];
      var normals = [];
      var binormals = [];
      var vec = new Vector3();
      var mat = new Matrix4(); // compute the tangent vectors for each segment on the curve

      for (var _i179 = 0; _i179 <= segments; _i179++) {
        var u = _i179 / segments;
        tangents[_i179] = this.getTangentAt(u, new Vector3());
      } // select an initial normal vector perpendicular to the first tangent vector,
      // and in the direction of the minimum tangent xyz component


      normals[0] = new Vector3();
      binormals[0] = new Vector3();
      var min = Number.MAX_VALUE;
      var tx = Math.abs(tangents[0].x);
      var ty = Math.abs(tangents[0].y);
      var tz = Math.abs(tangents[0].z);

      if (tx <= min) {
        min = tx;
        normal.set(1, 0, 0);
      }

      if (ty <= min) {
        min = ty;
        normal.set(0, 1, 0);
      }

      if (tz <= min) {
        normal.set(0, 0, 1);
      }

      vec.crossVectors(tangents[0], normal).normalize();
      normals[0].crossVectors(tangents[0], vec);
      binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve

      for (var _i180 = 1; _i180 <= segments; _i180++) {
        normals[_i180] = normals[_i180 - 1].clone();
        binormals[_i180] = binormals[_i180 - 1].clone();
        vec.crossVectors(tangents[_i180 - 1], tangents[_i180]);

        if (vec.length() > Number.EPSILON) {
          vec.normalize();
          var theta = Math.acos(clamp(tangents[_i180 - 1].dot(tangents[_i180]), -1, 1)); // clamp for floating pt errors

          normals[_i180].applyMatrix4(mat.makeRotationAxis(vec, theta));
        }

        binormals[_i180].crossVectors(tangents[_i180], normals[_i180]);
      } // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same


      if (closed === true) {
        var _theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));

        _theta /= segments;

        if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
          _theta = -_theta;
        }

        for (var _i181 = 1; _i181 <= segments; _i181++) {
          // twist a little...
          normals[_i181].applyMatrix4(mat.makeRotationAxis(tangents[_i181], _theta * _i181));

          binormals[_i181].crossVectors(tangents[_i181], normals[_i181]);
        }
      }

      return {
        tangents: tangents,
        normals: normals,
        binormals: binormals
      };
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.arcLengthDivisions = source.arcLengthDivisions;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = {
        metadata: {
          version: 4.5,
          type: 'Curve',
          generator: 'Curve.toJSON'
        }
      };
      data.arcLengthDivisions = this.arcLengthDivisions;
      data.type = this.type;
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      this.arcLengthDivisions = json.arcLengthDivisions;
      return this;
    }
  }]);

  return Curve;
}();

exports.Curve = Curve;

var EllipseCurve = /*#__PURE__*/function (_Curve) {
  _inherits(EllipseCurve, _Curve);

  var _super58 = _createSuper(EllipseCurve);

  function EllipseCurve(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
    var _this48;

    _classCallCheck(this, EllipseCurve);

    _this48 = _super58.call(this);
    _this48.type = 'EllipseCurve';
    _this48.aX = aX;
    _this48.aY = aY;
    _this48.xRadius = xRadius;
    _this48.yRadius = yRadius;
    _this48.aStartAngle = aStartAngle;
    _this48.aEndAngle = aEndAngle;
    _this48.aClockwise = aClockwise;
    _this48.aRotation = aRotation;
    return _this48;
  }

  _createClass(EllipseCurve, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget) {
      var point = optionalTarget || new Vector2();
      var twoPi = Math.PI * 2;
      var deltaAngle = this.aEndAngle - this.aStartAngle;
      var samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI

      while (deltaAngle < 0) {
        deltaAngle += twoPi;
      }

      while (deltaAngle > twoPi) {
        deltaAngle -= twoPi;
      }

      if (deltaAngle < Number.EPSILON) {
        if (samePoints) {
          deltaAngle = 0;
        } else {
          deltaAngle = twoPi;
        }
      }

      if (this.aClockwise === true && !samePoints) {
        if (deltaAngle === twoPi) {
          deltaAngle = -twoPi;
        } else {
          deltaAngle = deltaAngle - twoPi;
        }
      }

      var angle = this.aStartAngle + t * deltaAngle;
      var x = this.aX + this.xRadius * Math.cos(angle);
      var y = this.aY + this.yRadius * Math.sin(angle);

      if (this.aRotation !== 0) {
        var cos = Math.cos(this.aRotation);
        var sin = Math.sin(this.aRotation);
        var tx = x - this.aX;
        var ty = y - this.aY; // Rotate the point about the center of the ellipse.

        x = tx * cos - ty * sin + this.aX;
        y = tx * sin + ty * cos + this.aY;
      }

      return point.set(x, y);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(EllipseCurve.prototype), "copy", this).call(this, source);

      this.aX = source.aX;
      this.aY = source.aY;
      this.xRadius = source.xRadius;
      this.yRadius = source.yRadius;
      this.aStartAngle = source.aStartAngle;
      this.aEndAngle = source.aEndAngle;
      this.aClockwise = source.aClockwise;
      this.aRotation = source.aRotation;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(EllipseCurve.prototype), "toJSON", this).call(this);

      data.aX = this.aX;
      data.aY = this.aY;
      data.xRadius = this.xRadius;
      data.yRadius = this.yRadius;
      data.aStartAngle = this.aStartAngle;
      data.aEndAngle = this.aEndAngle;
      data.aClockwise = this.aClockwise;
      data.aRotation = this.aRotation;
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(EllipseCurve.prototype), "fromJSON", this).call(this, json);

      this.aX = json.aX;
      this.aY = json.aY;
      this.xRadius = json.xRadius;
      this.yRadius = json.yRadius;
      this.aStartAngle = json.aStartAngle;
      this.aEndAngle = json.aEndAngle;
      this.aClockwise = json.aClockwise;
      this.aRotation = json.aRotation;
      return this;
    }
  }]);

  return EllipseCurve;
}(Curve);

exports.EllipseCurve = EllipseCurve;
EllipseCurve.prototype.isEllipseCurve = true;

var ArcCurve = /*#__PURE__*/function (_EllipseCurve) {
  _inherits(ArcCurve, _EllipseCurve);

  var _super59 = _createSuper(ArcCurve);

  function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    var _this49;

    _classCallCheck(this, ArcCurve);

    _this49 = _super59.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    _this49.type = 'ArcCurve';
    return _this49;
  }

  return _createClass(ArcCurve);
}(EllipseCurve);

exports.ArcCurve = ArcCurve;
ArcCurve.prototype.isArcCurve = true;
/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */

/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {
  var c0 = 0,
      c1 = 0,
      c2 = 0,
      c3 = 0;
  /*
   * Compute coefficients for a cubic polynomial
   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
   * such that
   *   p(0) = x0, p(1) = x1
   *  and
   *   p'(0) = t0, p'(1) = t1.
   */

  function init(x0, x1, t0, t1) {
    c0 = x0;
    c1 = t0;
    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
    c3 = 2 * x0 - 2 * x1 + t0 + t1;
  }

  return {
    initCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {
      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
    },
    initNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {
      // compute tangents when parameterized in [t1,t2]
      var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
      var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]

      t1 *= dt1;
      t2 *= dt1;
      init(x1, x2, t1, t2);
    },
    calc: function calc(t) {
      var t2 = t * t;
      var t3 = t2 * t;
      return c0 + c1 * t + c2 * t2 + c3 * t3;
    }
  };
} //


var tmp = new Vector3();
var px = new CubicPoly(),
    py = new CubicPoly(),
    pz = new CubicPoly();

var CatmullRomCurve3 = /*#__PURE__*/function (_Curve2) {
  _inherits(CatmullRomCurve3, _Curve2);

  var _super60 = _createSuper(CatmullRomCurve3);

  function CatmullRomCurve3(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {
    var _this50;

    _classCallCheck(this, CatmullRomCurve3);

    _this50 = _super60.call(this);
    _this50.type = 'CatmullRomCurve3';
    _this50.points = points;
    _this50.closed = closed;
    _this50.curveType = curveType;
    _this50.tension = tension;
    return _this50;
  }

  _createClass(CatmullRomCurve3, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector3()) {
      var point = optionalTarget;
      var points = this.points;
      var l = points.length;
      var p = (l - (this.closed ? 0 : 1)) * t;
      var intPoint = Math.floor(p);
      var weight = p - intPoint;

      if (this.closed) {
        intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
      } else if (weight === 0 && intPoint === l - 1) {
        intPoint = l - 2;
        weight = 1;
      }

      var p0, p3; // 4 points (p1 & p2 defined below)

      if (this.closed || intPoint > 0) {
        p0 = points[(intPoint - 1) % l];
      } else {
        // extrapolate first point
        tmp.subVectors(points[0], points[1]).add(points[0]);
        p0 = tmp;
      }

      var p1 = points[intPoint % l];
      var p2 = points[(intPoint + 1) % l];

      if (this.closed || intPoint + 2 < l) {
        p3 = points[(intPoint + 2) % l];
      } else {
        // extrapolate last point
        tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
        p3 = tmp;
      }

      if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
        // init Centripetal / Chordal Catmull-Rom
        var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
        var dt0 = Math.pow(p0.distanceToSquared(p1), pow);
        var dt1 = Math.pow(p1.distanceToSquared(p2), pow);
        var dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points

        if (dt1 < 1e-4) dt1 = 1.0;
        if (dt0 < 1e-4) dt0 = dt1;
        if (dt2 < 1e-4) dt2 = dt1;
        px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
        py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
        pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
      } else if (this.curveType === 'catmullrom') {
        px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
        py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
        pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
      }

      point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
      return point;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(CatmullRomCurve3.prototype), "copy", this).call(this, source);

      this.points = [];

      for (var _i182 = 0, l = source.points.length; _i182 < l; _i182++) {
        var point = source.points[_i182];
        this.points.push(point.clone());
      }

      this.closed = source.closed;
      this.curveType = source.curveType;
      this.tension = source.tension;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(CatmullRomCurve3.prototype), "toJSON", this).call(this);

      data.points = [];

      for (var _i183 = 0, l = this.points.length; _i183 < l; _i183++) {
        var point = this.points[_i183];
        data.points.push(point.toArray());
      }

      data.closed = this.closed;
      data.curveType = this.curveType;
      data.tension = this.tension;
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(CatmullRomCurve3.prototype), "fromJSON", this).call(this, json);

      this.points = [];

      for (var _i184 = 0, l = json.points.length; _i184 < l; _i184++) {
        var point = json.points[_i184];
        this.points.push(new Vector3().fromArray(point));
      }

      this.closed = json.closed;
      this.curveType = json.curveType;
      this.tension = json.tension;
      return this;
    }
  }]);

  return CatmullRomCurve3;
}(Curve);

exports.CatmullRomCurve3 = CatmullRomCurve3;
CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */

function CatmullRom(t, p0, p1, p2, p3) {
  var v0 = (p2 - p0) * 0.5;
  var v1 = (p3 - p1) * 0.5;
  var t2 = t * t;
  var t3 = t * t2;
  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
} //


function QuadraticBezierP0(t, p) {
  var k = 1 - t;
  return k * k * p;
}

function QuadraticBezierP1(t, p) {
  return 2 * (1 - t) * t * p;
}

function QuadraticBezierP2(t, p) {
  return t * t * p;
}

function QuadraticBezier(t, p0, p1, p2) {
  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
} //


function CubicBezierP0(t, p) {
  var k = 1 - t;
  return k * k * k * p;
}

function CubicBezierP1(t, p) {
  var k = 1 - t;
  return 3 * k * k * t * p;
}

function CubicBezierP2(t, p) {
  return 3 * (1 - t) * t * t * p;
}

function CubicBezierP3(t, p) {
  return t * t * t * p;
}

function CubicBezier(t, p0, p1, p2, p3) {
  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}

var CubicBezierCurve = /*#__PURE__*/function (_Curve3) {
  _inherits(CubicBezierCurve, _Curve3);

  var _super61 = _createSuper(CubicBezierCurve);

  function CubicBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
    var _this51;

    _classCallCheck(this, CubicBezierCurve);

    _this51 = _super61.call(this);
    _this51.type = 'CubicBezierCurve';
    _this51.v0 = v0;
    _this51.v1 = v1;
    _this51.v2 = v2;
    _this51.v3 = v3;
    return _this51;
  }

  _createClass(CubicBezierCurve, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector2()) {
      var point = optionalTarget;
      var v0 = this.v0,
          v1 = this.v1,
          v2 = this.v2,
          v3 = this.v3;
      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
      return point;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(CubicBezierCurve.prototype), "copy", this).call(this, source);

      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      this.v3.copy(source.v3);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(CubicBezierCurve.prototype), "toJSON", this).call(this);

      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      data.v3 = this.v3.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(CubicBezierCurve.prototype), "fromJSON", this).call(this, json);

      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      this.v3.fromArray(json.v3);
      return this;
    }
  }]);

  return CubicBezierCurve;
}(Curve);

exports.CubicBezierCurve = CubicBezierCurve;
CubicBezierCurve.prototype.isCubicBezierCurve = true;

var CubicBezierCurve3 = /*#__PURE__*/function (_Curve4) {
  _inherits(CubicBezierCurve3, _Curve4);

  var _super62 = _createSuper(CubicBezierCurve3);

  function CubicBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
    var _this52;

    _classCallCheck(this, CubicBezierCurve3);

    _this52 = _super62.call(this);
    _this52.type = 'CubicBezierCurve3';
    _this52.v0 = v0;
    _this52.v1 = v1;
    _this52.v2 = v2;
    _this52.v3 = v3;
    return _this52;
  }

  _createClass(CubicBezierCurve3, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector3()) {
      var point = optionalTarget;
      var v0 = this.v0,
          v1 = this.v1,
          v2 = this.v2,
          v3 = this.v3;
      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
      return point;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(CubicBezierCurve3.prototype), "copy", this).call(this, source);

      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      this.v3.copy(source.v3);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(CubicBezierCurve3.prototype), "toJSON", this).call(this);

      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      data.v3 = this.v3.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(CubicBezierCurve3.prototype), "fromJSON", this).call(this, json);

      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      this.v3.fromArray(json.v3);
      return this;
    }
  }]);

  return CubicBezierCurve3;
}(Curve);

exports.CubicBezierCurve3 = CubicBezierCurve3;
CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

var LineCurve = /*#__PURE__*/function (_Curve5) {
  _inherits(LineCurve, _Curve5);

  var _super63 = _createSuper(LineCurve);

  function LineCurve(v1 = new Vector2(), v2 = new Vector2()) {
    var _this53;

    _classCallCheck(this, LineCurve);

    _this53 = _super63.call(this);
    _this53.type = 'LineCurve';
    _this53.v1 = v1;
    _this53.v2 = v2;
    return _this53;
  }

  _createClass(LineCurve, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector2()) {
      var point = optionalTarget;

      if (t === 1) {
        point.copy(this.v2);
      } else {
        point.copy(this.v2).sub(this.v1);
        point.multiplyScalar(t).add(this.v1);
      }

      return point;
    } // Line curve is linear, so we can overwrite default getPointAt

  }, {
    key: "getPointAt",
    value: function getPointAt(u, optionalTarget) {
      return this.getPoint(u, optionalTarget);
    }
  }, {
    key: "getTangent",
    value: function getTangent(t, optionalTarget) {
      var tangent = optionalTarget || new Vector2();
      tangent.copy(this.v2).sub(this.v1).normalize();
      return tangent;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(LineCurve.prototype), "copy", this).call(this, source);

      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(LineCurve.prototype), "toJSON", this).call(this);

      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(LineCurve.prototype), "fromJSON", this).call(this, json);

      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  }]);

  return LineCurve;
}(Curve);

exports.LineCurve = LineCurve;
LineCurve.prototype.isLineCurve = true;

var LineCurve3 = /*#__PURE__*/function (_Curve6) {
  _inherits(LineCurve3, _Curve6);

  var _super64 = _createSuper(LineCurve3);

  function LineCurve3(v1 = new Vector3(), v2 = new Vector3()) {
    var _this54;

    _classCallCheck(this, LineCurve3);

    _this54 = _super64.call(this);
    _this54.type = 'LineCurve3';
    _this54.isLineCurve3 = true;
    _this54.v1 = v1;
    _this54.v2 = v2;
    return _this54;
  }

  _createClass(LineCurve3, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector3()) {
      var point = optionalTarget;

      if (t === 1) {
        point.copy(this.v2);
      } else {
        point.copy(this.v2).sub(this.v1);
        point.multiplyScalar(t).add(this.v1);
      }

      return point;
    } // Line curve is linear, so we can overwrite default getPointAt

  }, {
    key: "getPointAt",
    value: function getPointAt(u, optionalTarget) {
      return this.getPoint(u, optionalTarget);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(LineCurve3.prototype), "copy", this).call(this, source);

      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(LineCurve3.prototype), "toJSON", this).call(this);

      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(LineCurve3.prototype), "fromJSON", this).call(this, json);

      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  }]);

  return LineCurve3;
}(Curve);

exports.LineCurve3 = LineCurve3;

var QuadraticBezierCurve = /*#__PURE__*/function (_Curve7) {
  _inherits(QuadraticBezierCurve, _Curve7);

  var _super65 = _createSuper(QuadraticBezierCurve);

  function QuadraticBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
    var _this55;

    _classCallCheck(this, QuadraticBezierCurve);

    _this55 = _super65.call(this);
    _this55.type = 'QuadraticBezierCurve';
    _this55.v0 = v0;
    _this55.v1 = v1;
    _this55.v2 = v2;
    return _this55;
  }

  _createClass(QuadraticBezierCurve, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector2()) {
      var point = optionalTarget;
      var v0 = this.v0,
          v1 = this.v1,
          v2 = this.v2;
      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
      return point;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(QuadraticBezierCurve.prototype), "copy", this).call(this, source);

      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(QuadraticBezierCurve.prototype), "toJSON", this).call(this);

      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(QuadraticBezierCurve.prototype), "fromJSON", this).call(this, json);

      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  }]);

  return QuadraticBezierCurve;
}(Curve);

exports.QuadraticBezierCurve = QuadraticBezierCurve;
QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

var QuadraticBezierCurve3 = /*#__PURE__*/function (_Curve8) {
  _inherits(QuadraticBezierCurve3, _Curve8);

  var _super66 = _createSuper(QuadraticBezierCurve3);

  function QuadraticBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
    var _this56;

    _classCallCheck(this, QuadraticBezierCurve3);

    _this56 = _super66.call(this);
    _this56.type = 'QuadraticBezierCurve3';
    _this56.v0 = v0;
    _this56.v1 = v1;
    _this56.v2 = v2;
    return _this56;
  }

  _createClass(QuadraticBezierCurve3, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector3()) {
      var point = optionalTarget;
      var v0 = this.v0,
          v1 = this.v1,
          v2 = this.v2;
      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
      return point;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(QuadraticBezierCurve3.prototype), "copy", this).call(this, source);

      this.v0.copy(source.v0);
      this.v1.copy(source.v1);
      this.v2.copy(source.v2);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(QuadraticBezierCurve3.prototype), "toJSON", this).call(this);

      data.v0 = this.v0.toArray();
      data.v1 = this.v1.toArray();
      data.v2 = this.v2.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(QuadraticBezierCurve3.prototype), "fromJSON", this).call(this, json);

      this.v0.fromArray(json.v0);
      this.v1.fromArray(json.v1);
      this.v2.fromArray(json.v2);
      return this;
    }
  }]);

  return QuadraticBezierCurve3;
}(Curve);

exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

var SplineCurve = /*#__PURE__*/function (_Curve9) {
  _inherits(SplineCurve, _Curve9);

  var _super67 = _createSuper(SplineCurve);

  function SplineCurve(points = []) {
    var _this57;

    _classCallCheck(this, SplineCurve);

    _this57 = _super67.call(this);
    _this57.type = 'SplineCurve';
    _this57.points = points;
    return _this57;
  }

  _createClass(SplineCurve, [{
    key: "getPoint",
    value: function getPoint(t, optionalTarget = new Vector2()) {
      var point = optionalTarget;
      var points = this.points;
      var p = (points.length - 1) * t;
      var intPoint = Math.floor(p);
      var weight = p - intPoint;
      var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
      var p1 = points[intPoint];
      var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
      var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
      point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
      return point;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(SplineCurve.prototype), "copy", this).call(this, source);

      this.points = [];

      for (var _i185 = 0, l = source.points.length; _i185 < l; _i185++) {
        var point = source.points[_i185];
        this.points.push(point.clone());
      }

      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(SplineCurve.prototype), "toJSON", this).call(this);

      data.points = [];

      for (var _i186 = 0, l = this.points.length; _i186 < l; _i186++) {
        var point = this.points[_i186];
        data.points.push(point.toArray());
      }

      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(SplineCurve.prototype), "fromJSON", this).call(this, json);

      this.points = [];

      for (var _i187 = 0, l = json.points.length; _i187 < l; _i187++) {
        var point = json.points[_i187];
        this.points.push(new Vector2().fromArray(point));
      }

      return this;
    }
  }]);

  return SplineCurve;
}(Curve);

exports.SplineCurve = SplineCurve;
SplineCurve.prototype.isSplineCurve = true;
var Curves = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ArcCurve: ArcCurve,
  CatmullRomCurve3: CatmullRomCurve3,
  CubicBezierCurve: CubicBezierCurve,
  CubicBezierCurve3: CubicBezierCurve3,
  EllipseCurve: EllipseCurve,
  LineCurve: LineCurve,
  LineCurve3: LineCurve3,
  QuadraticBezierCurve: QuadraticBezierCurve,
  QuadraticBezierCurve3: QuadraticBezierCurve3,
  SplineCurve: SplineCurve
});
/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

var CurvePath = /*#__PURE__*/function (_Curve10) {
  _inherits(CurvePath, _Curve10);

  var _super68 = _createSuper(CurvePath);

  function CurvePath() {
    var _this58;

    _classCallCheck(this, CurvePath);

    _this58 = _super68.call(this);
    _this58.type = 'CurvePath';
    _this58.curves = [];
    _this58.autoClose = false; // Automatically closes the path

    return _this58;
  }

  _createClass(CurvePath, [{
    key: "add",
    value: function add(curve) {
      this.curves.push(curve);
    }
  }, {
    key: "closePath",
    value: function closePath() {
      // Add a line curve if start and end of lines are not connected
      var startPoint = this.curves[0].getPoint(0);
      var endPoint = this.curves[this.curves.length - 1].getPoint(1);

      if (!startPoint.equals(endPoint)) {
        this.curves.push(new LineCurve(endPoint, startPoint));
      }
    } // To get accurate point with reference to
    // entire path distance at time t,
    // following has to be done:
    // 1. Length of each sub path have to be known
    // 2. Locate and identify type of curve
    // 3. Get t for the curve
    // 4. Return curve.getPointAt(t')

  }, {
    key: "getPoint",
    value: function getPoint(t, optionalTarget) {
      var d = t * this.getLength();
      var curveLengths = this.getCurveLengths();
      var i = 0; // To think about boundaries points.

      while (i < curveLengths.length) {
        if (curveLengths[i] >= d) {
          var diff = curveLengths[i] - d;
          var curve = this.curves[i];
          var segmentLength = curve.getLength();
          var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
          return curve.getPointAt(u, optionalTarget);
        }

        i++;
      }

      return null; // loop where sum != 0, sum > d , sum+1 <d
    } // We cannot use the default THREE.Curve getPoint() with getLength() because in
    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    // getPoint() depends on getLength

  }, {
    key: "getLength",
    value: function getLength() {
      var lens = this.getCurveLengths();
      return lens[lens.length - 1];
    } // cacheLengths must be recalculated.

  }, {
    key: "updateArcLengths",
    value: function updateArcLengths() {
      this.needsUpdate = true;
      this.cacheLengths = null;
      this.getCurveLengths();
    } // Compute lengths and cache them
    // We cannot overwrite getLengths() because UtoT mapping uses it.

  }, {
    key: "getCurveLengths",
    value: function getCurveLengths() {
      // We use cache values if curves and cache array are same length
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
        return this.cacheLengths;
      } // Get length of sub-curve
      // Push sums into cached array


      var lengths = [];
      var sums = 0;

      for (var _i188 = 0, l = this.curves.length; _i188 < l; _i188++) {
        sums += this.curves[_i188].getLength();
        lengths.push(sums);
      }

      this.cacheLengths = lengths;
      return lengths;
    }
  }, {
    key: "getSpacedPoints",
    value: function getSpacedPoints(divisions = 40) {
      var points = [];

      for (var _i189 = 0; _i189 <= divisions; _i189++) {
        points.push(this.getPoint(_i189 / divisions));
      }

      if (this.autoClose) {
        points.push(points[0]);
      }

      return points;
    }
  }, {
    key: "getPoints",
    value: function getPoints(divisions = 12) {
      var points = [];
      var last;

      for (var _i190 = 0, curves = this.curves; _i190 < curves.length; _i190++) {
        var curve = curves[_i190];
        var resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
        var pts = curve.getPoints(resolution);

        for (var j = 0; j < pts.length; j++) {
          var point = pts[j];
          if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates

          points.push(point);
          last = point;
        }
      }

      if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
        points.push(points[0]);
      }

      return points;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(CurvePath.prototype), "copy", this).call(this, source);

      this.curves = [];

      for (var _i191 = 0, l = source.curves.length; _i191 < l; _i191++) {
        var curve = source.curves[_i191];
        this.curves.push(curve.clone());
      }

      this.autoClose = source.autoClose;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(CurvePath.prototype), "toJSON", this).call(this);

      data.autoClose = this.autoClose;
      data.curves = [];

      for (var _i192 = 0, l = this.curves.length; _i192 < l; _i192++) {
        var curve = this.curves[_i192];
        data.curves.push(curve.toJSON());
      }

      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(CurvePath.prototype), "fromJSON", this).call(this, json);

      this.autoClose = json.autoClose;
      this.curves = [];

      for (var _i193 = 0, l = json.curves.length; _i193 < l; _i193++) {
        var curve = json.curves[_i193];
        this.curves.push(new Curves[curve.type]().fromJSON(curve));
      }

      return this;
    }
  }]);

  return CurvePath;
}(Curve);

exports.CurvePath = CurvePath;

var Path = /*#__PURE__*/function (_CurvePath) {
  _inherits(Path, _CurvePath);

  var _super69 = _createSuper(Path);

  function Path(points) {
    var _this59;

    _classCallCheck(this, Path);

    _this59 = _super69.call(this);
    _this59.type = 'Path';
    _this59.currentPoint = new Vector2();

    if (points) {
      _this59.setFromPoints(points);
    }

    return _this59;
  }

  _createClass(Path, [{
    key: "setFromPoints",
    value: function setFromPoints(points) {
      this.moveTo(points[0].x, points[0].y);

      for (var _i194 = 1, l = points.length; _i194 < l; _i194++) {
        this.lineTo(points[_i194].x, points[_i194].y);
      }

      return this;
    }
  }, {
    key: "moveTo",
    value: function moveTo(x, y) {
      this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?

      return this;
    }
  }, {
    key: "lineTo",
    value: function lineTo(x, y) {
      var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
      this.curves.push(curve);
      this.currentPoint.set(x, y);
      return this;
    }
  }, {
    key: "quadraticCurveTo",
    value: function quadraticCurveTo(aCPx, aCPy, aX, aY) {
      var curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    }
  }, {
    key: "bezierCurveTo",
    value: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      var curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
      this.curves.push(curve);
      this.currentPoint.set(aX, aY);
      return this;
    }
  }, {
    key: "splineThru",
    value: function splineThru(pts
    /*Array of Vector*/
    ) {
      var npts = [this.currentPoint.clone()].concat(pts);
      var curve = new SplineCurve(npts);
      this.curves.push(curve);
      this.currentPoint.copy(pts[pts.length - 1]);
      return this;
    }
  }, {
    key: "arc",
    value: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      var x0 = this.currentPoint.x;
      var y0 = this.currentPoint.y;
      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    }
  }, {
    key: "absarc",
    value: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
      return this;
    }
  }, {
    key: "ellipse",
    value: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      var x0 = this.currentPoint.x;
      var y0 = this.currentPoint.y;
      this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
      return this;
    }
  }, {
    key: "absellipse",
    value: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
      var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);

      if (this.curves.length > 0) {
        // if a previous curve is present, attempt to join
        var firstPoint = curve.getPoint(0);

        if (!firstPoint.equals(this.currentPoint)) {
          this.lineTo(firstPoint.x, firstPoint.y);
        }
      }

      this.curves.push(curve);
      var lastPoint = curve.getPoint(1);
      this.currentPoint.copy(lastPoint);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Path.prototype), "copy", this).call(this, source);

      this.currentPoint.copy(source.currentPoint);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(Path.prototype), "toJSON", this).call(this);

      data.currentPoint = this.currentPoint.toArray();
      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(Path.prototype), "fromJSON", this).call(this, json);

      this.currentPoint.fromArray(json.currentPoint);
      return this;
    }
  }]);

  return Path;
}(CurvePath);

exports.Path = Path;

var LatheGeometry = /*#__PURE__*/function (_BufferGeometry3) {
  _inherits(LatheGeometry, _BufferGeometry3);

  var _super70 = _createSuper(LatheGeometry);

  function LatheGeometry(points = [new Vector2(0, 0.5), new Vector2(0.5, 0), new Vector2(0, -0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
    var _this60;

    _classCallCheck(this, LatheGeometry);

    _this60 = _super70.call(this);
    _this60.type = 'LatheGeometry';
    _this60.parameters = {
      points: points,
      segments: segments,
      phiStart: phiStart,
      phiLength: phiLength
    };
    segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]

    phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers

    var indices = [];
    var vertices = [];
    var uvs = [];
    var initNormals = [];
    var normals = []; // helper variables

    var inverseSegments = 1.0 / segments;
    var vertex = new Vector3();
    var uv = new Vector2();
    var normal = new Vector3();
    var curNormal = new Vector3();
    var prevNormal = new Vector3();
    var dx = 0;
    var dy = 0; // pre-compute normals for initial "meridian"

    for (var j = 0; j <= points.length - 1; j++) {
      switch (j) {
        case 0:
          // special handling for 1st vertex on path
          dx = points[j + 1].x - points[j].x;
          dy = points[j + 1].y - points[j].y;
          normal.x = dy * 1.0;
          normal.y = -dx;
          normal.z = dy * 0.0;
          prevNormal.copy(normal);
          normal.normalize();
          initNormals.push(normal.x, normal.y, normal.z);
          break;

        case points.length - 1:
          // special handling for last Vertex on path
          initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
          break;

        default:
          // default handling for all vertices in between
          dx = points[j + 1].x - points[j].x;
          dy = points[j + 1].y - points[j].y;
          normal.x = dy * 1.0;
          normal.y = -dx;
          normal.z = dy * 0.0;
          curNormal.copy(normal);
          normal.x += prevNormal.x;
          normal.y += prevNormal.y;
          normal.z += prevNormal.z;
          normal.normalize();
          initNormals.push(normal.x, normal.y, normal.z);
          prevNormal.copy(curNormal);
      }
    } // generate vertices, uvs and normals


    for (var _i195 = 0; _i195 <= segments; _i195++) {
      var phi = phiStart + _i195 * inverseSegments * phiLength;
      var sin = Math.sin(phi);
      var cos = Math.cos(phi);

      for (var _j5 = 0; _j5 <= points.length - 1; _j5++) {
        // vertex
        vertex.x = points[_j5].x * sin;
        vertex.y = points[_j5].y;
        vertex.z = points[_j5].x * cos;
        vertices.push(vertex.x, vertex.y, vertex.z); // uv

        uv.x = _i195 / segments;
        uv.y = _j5 / (points.length - 1);
        uvs.push(uv.x, uv.y); // normal

        var x = initNormals[3 * _j5 + 0] * sin;
        var y = initNormals[3 * _j5 + 1];
        var z = initNormals[3 * _j5 + 0] * cos;
        normals.push(x, y, z);
      }
    } // indices


    for (var _i196 = 0; _i196 < segments; _i196++) {
      for (var _j6 = 0; _j6 < points.length - 1; _j6++) {
        var base = _j6 + _i196 * points.length;
        var a = base;
        var b = base + points.length;
        var c = base + points.length + 1;
        var d = base + 1; // faces

        indices.push(a, b, d);
        indices.push(c, d, b);
      }
    } // build geometry


    _this60.setIndex(indices);

    _this60.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this60.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    _this60.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    return _this60;
  }

  _createClass(LatheGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
    }
  }]);

  return LatheGeometry;
}(BufferGeometry);

exports.LatheGeometry = exports.LatheBufferGeometry = LatheGeometry;

var CapsuleGeometry = /*#__PURE__*/function (_LatheGeometry) {
  _inherits(CapsuleGeometry, _LatheGeometry);

  var _super71 = _createSuper(CapsuleGeometry);

  function CapsuleGeometry(radius = 1, length = 1, capSegments = 4, radialSegments = 8) {
    var _this61;

    _classCallCheck(this, CapsuleGeometry);

    var path = new Path();
    path.absarc(0, -length / 2, radius, Math.PI * 1.5, 0);
    path.absarc(0, length / 2, radius, 0, Math.PI * 0.5);
    _this61 = _super71.call(this, path.getPoints(capSegments), radialSegments);
    _this61.type = 'CapsuleGeometry';
    _this61.parameters = {
      radius: radius,
      height: length,
      capSegments: capSegments,
      radialSegments: radialSegments
    };
    return _this61;
  }

  _createClass(CapsuleGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
    }
  }]);

  return CapsuleGeometry;
}(LatheGeometry);

exports.CapsuleGeometry = exports.CapsuleBufferGeometry = CapsuleGeometry;

var CircleGeometry = /*#__PURE__*/function (_BufferGeometry4) {
  _inherits(CircleGeometry, _BufferGeometry4);

  var _super72 = _createSuper(CircleGeometry);

  function CircleGeometry(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {
    var _this62;

    _classCallCheck(this, CircleGeometry);

    _this62 = _super72.call(this);
    _this62.type = 'CircleGeometry';
    _this62.parameters = {
      radius: radius,
      segments: segments,
      thetaStart: thetaStart,
      thetaLength: thetaLength
    };
    segments = Math.max(3, segments); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // helper variables

    var vertex = new Vector3();
    var uv = new Vector2(); // center point

    vertices.push(0, 0, 0);
    normals.push(0, 0, 1);
    uvs.push(0.5, 0.5);

    for (var s = 0, _i197 = 3; s <= segments; s++, _i197 += 3) {
      var segment = thetaStart + s / segments * thetaLength; // vertex

      vertex.x = radius * Math.cos(segment);
      vertex.y = radius * Math.sin(segment);
      vertices.push(vertex.x, vertex.y, vertex.z); // normal

      normals.push(0, 0, 1); // uvs

      uv.x = (vertices[_i197] / radius + 1) / 2;
      uv.y = (vertices[_i197 + 1] / radius + 1) / 2;
      uvs.push(uv.x, uv.y);
    } // indices


    for (var _i198 = 1; _i198 <= segments; _i198++) {
      indices.push(_i198, _i198 + 1, 0);
    } // build geometry


    _this62.setIndex(indices);

    _this62.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this62.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this62.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    return _this62;
  }

  _createClass(CircleGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
    }
  }]);

  return CircleGeometry;
}(BufferGeometry);

exports.CircleGeometry = exports.CircleBufferGeometry = CircleGeometry;

var CylinderGeometry = /*#__PURE__*/function (_BufferGeometry5) {
  _inherits(CylinderGeometry, _BufferGeometry5);

  var _super73 = _createSuper(CylinderGeometry);

  function CylinderGeometry(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    var _this63;

    _classCallCheck(this, CylinderGeometry);

    _this63 = _super73.call(this);
    _this63.type = 'CylinderGeometry';
    _this63.parameters = {
      radiusTop: radiusTop,
      radiusBottom: radiusBottom,
      height: height,
      radialSegments: radialSegments,
      heightSegments: heightSegments,
      openEnded: openEnded,
      thetaStart: thetaStart,
      thetaLength: thetaLength
    };

    var scope = _assertThisInitialized(_this63);

    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // helper variables

    var index = 0;
    var indexArray = [];
    var halfHeight = height / 2;
    var groupStart = 0; // generate geometry

    generateTorso();

    if (openEnded === false) {
      if (radiusTop > 0) generateCap(true);
      if (radiusBottom > 0) generateCap(false);
    } // build geometry


    _this63.setIndex(indices);

    _this63.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this63.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this63.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    function generateTorso() {
      var normal = new Vector3();
      var vertex = new Vector3();
      var groupCount = 0; // this will be used to calculate the normal

      var slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs

      for (var y = 0; y <= heightSegments; y++) {
        var indexRow = [];
        var v = y / heightSegments; // calculate the radius of the current row

        var radius = v * (radiusBottom - radiusTop) + radiusTop;

        for (var x = 0; x <= radialSegments; x++) {
          var u = x / radialSegments;
          var theta = u * thetaLength + thetaStart;
          var sinTheta = Math.sin(theta);
          var cosTheta = Math.cos(theta); // vertex

          vertex.x = radius * sinTheta;
          vertex.y = -v * height + halfHeight;
          vertex.z = radius * cosTheta;
          vertices.push(vertex.x, vertex.y, vertex.z); // normal

          normal.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal.x, normal.y, normal.z); // uv

          uvs.push(u, 1 - v); // save index of vertex in respective row

          indexRow.push(index++);
        } // now save vertices of the row in our index array


        indexArray.push(indexRow);
      } // generate indices


      for (var _x4 = 0; _x4 < radialSegments; _x4++) {
        for (var _y2 = 0; _y2 < heightSegments; _y2++) {
          // we use the index array to access the correct indices
          var a = indexArray[_y2][_x4];
          var b = indexArray[_y2 + 1][_x4];
          var c = indexArray[_y2 + 1][_x4 + 1];
          var d = indexArray[_y2][_x4 + 1]; // faces

          indices.push(a, b, d);
          indices.push(b, c, d); // update group counter

          groupCount += 6;
        }
      } // add a group to the geometry. this will ensure multi material support


      scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups

      groupStart += groupCount;
    }

    function generateCap(top) {
      // save the index of the first center vertex
      var centerIndexStart = index;
      var uv = new Vector2();
      var vertex = new Vector3();
      var groupCount = 0;
      var radius = top === true ? radiusTop : radiusBottom;
      var sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.
      // because the geometry needs one set of uvs per face,
      // we must generate a center vertex per face/segment

      for (var x = 1; x <= radialSegments; x++) {
        // vertex
        vertices.push(0, halfHeight * sign, 0); // normal

        normals.push(0, sign, 0); // uv

        uvs.push(0.5, 0.5); // increase index

        index++;
      } // save the index of the last center vertex


      var centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs

      for (var _x5 = 0; _x5 <= radialSegments; _x5++) {
        var u = _x5 / radialSegments;
        var theta = u * thetaLength + thetaStart;
        var cosTheta = Math.cos(theta);
        var sinTheta = Math.sin(theta); // vertex

        vertex.x = radius * sinTheta;
        vertex.y = halfHeight * sign;
        vertex.z = radius * cosTheta;
        vertices.push(vertex.x, vertex.y, vertex.z); // normal

        normals.push(0, sign, 0); // uv

        uv.x = cosTheta * 0.5 + 0.5;
        uv.y = sinTheta * 0.5 * sign + 0.5;
        uvs.push(uv.x, uv.y); // increase index

        index++;
      } // generate indices


      for (var _x6 = 0; _x6 < radialSegments; _x6++) {
        var c = centerIndexStart + _x6;

        var _i199 = centerIndexEnd + _x6;

        if (top === true) {
          // face top
          indices.push(_i199, _i199 + 1, c);
        } else {
          // face bottom
          indices.push(_i199 + 1, _i199, c);
        }

        groupCount += 3;
      } // add a group to the geometry. this will ensure multi material support


      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups

      groupStart += groupCount;
    }

    return _this63;
  }

  _createClass(CylinderGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
  }]);

  return CylinderGeometry;
}(BufferGeometry);

exports.CylinderGeometry = exports.CylinderBufferGeometry = CylinderGeometry;

var ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {
  _inherits(ConeGeometry, _CylinderGeometry);

  var _super74 = _createSuper(ConeGeometry);

  function ConeGeometry(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    var _this64;

    _classCallCheck(this, ConeGeometry);

    _this64 = _super74.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    _this64.type = 'ConeGeometry';
    _this64.parameters = {
      radius: radius,
      height: height,
      radialSegments: radialSegments,
      heightSegments: heightSegments,
      openEnded: openEnded,
      thetaStart: thetaStart,
      thetaLength: thetaLength
    };
    return _this64;
  }

  _createClass(ConeGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
  }]);

  return ConeGeometry;
}(CylinderGeometry);

exports.ConeGeometry = exports.ConeBufferGeometry = ConeGeometry;

var PolyhedronGeometry = /*#__PURE__*/function (_BufferGeometry6) {
  _inherits(PolyhedronGeometry, _BufferGeometry6);

  var _super75 = _createSuper(PolyhedronGeometry);

  function PolyhedronGeometry(vertices = [], indices = [], radius = 1, detail = 0) {
    var _this65;

    _classCallCheck(this, PolyhedronGeometry);

    _this65 = _super75.call(this);
    _this65.type = 'PolyhedronGeometry';
    _this65.parameters = {
      vertices: vertices,
      indices: indices,
      radius: radius,
      detail: detail
    }; // default buffer data

    var vertexBuffer = [];
    var uvBuffer = []; // the subdivision creates the vertex buffer data

    subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius

    applyRadius(radius); // finally, create the uv data

    generateUVs(); // build non-indexed geometry

    _this65.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));

    _this65.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));

    _this65.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));

    if (detail === 0) {
      _this65.computeVertexNormals(); // flat normals

    } else {
      _this65.normalizeNormals(); // smooth normals

    } // helper functions


    function subdivide(detail) {
      var a = new Vector3();
      var b = new Vector3();
      var c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value

      for (var _i200 = 0; _i200 < indices.length; _i200 += 3) {
        // get the vertices of the face
        getVertexByIndex(indices[_i200 + 0], a);
        getVertexByIndex(indices[_i200 + 1], b);
        getVertexByIndex(indices[_i200 + 2], c); // perform subdivision

        subdivideFace(a, b, c, detail);
      }
    }

    function subdivideFace(a, b, c, detail) {
      var cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision

      var v = []; // construct all of the vertices for this subdivision

      for (var _i201 = 0; _i201 <= cols; _i201++) {
        v[_i201] = [];
        var aj = a.clone().lerp(c, _i201 / cols);
        var bj = b.clone().lerp(c, _i201 / cols);
        var rows = cols - _i201;

        for (var j = 0; j <= rows; j++) {
          if (j === 0 && _i201 === cols) {
            v[_i201][j] = aj;
          } else {
            v[_i201][j] = aj.clone().lerp(bj, j / rows);
          }
        }
      } // construct all of the faces


      for (var _i202 = 0; _i202 < cols; _i202++) {
        for (var _j7 = 0; _j7 < 2 * (cols - _i202) - 1; _j7++) {
          var k = Math.floor(_j7 / 2);

          if (_j7 % 2 === 0) {
            pushVertex(v[_i202][k + 1]);
            pushVertex(v[_i202 + 1][k]);
            pushVertex(v[_i202][k]);
          } else {
            pushVertex(v[_i202][k + 1]);
            pushVertex(v[_i202 + 1][k + 1]);
            pushVertex(v[_i202 + 1][k]);
          }
        }
      }
    }

    function applyRadius(radius) {
      var vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex

      for (var _i203 = 0; _i203 < vertexBuffer.length; _i203 += 3) {
        vertex.x = vertexBuffer[_i203 + 0];
        vertex.y = vertexBuffer[_i203 + 1];
        vertex.z = vertexBuffer[_i203 + 2];
        vertex.normalize().multiplyScalar(radius);
        vertexBuffer[_i203 + 0] = vertex.x;
        vertexBuffer[_i203 + 1] = vertex.y;
        vertexBuffer[_i203 + 2] = vertex.z;
      }
    }

    function generateUVs() {
      var vertex = new Vector3();

      for (var _i204 = 0; _i204 < vertexBuffer.length; _i204 += 3) {
        vertex.x = vertexBuffer[_i204 + 0];
        vertex.y = vertexBuffer[_i204 + 1];
        vertex.z = vertexBuffer[_i204 + 2];
        var u = azimuth(vertex) / 2 / Math.PI + 0.5;
        var v = inclination(vertex) / Math.PI + 0.5;
        uvBuffer.push(u, 1 - v);
      }

      correctUVs();
      correctSeam();
    }

    function correctSeam() {
      // handle case when face straddles the seam, see #3269
      for (var _i205 = 0; _i205 < uvBuffer.length; _i205 += 6) {
        // uv data of a single face
        var x0 = uvBuffer[_i205 + 0];
        var x1 = uvBuffer[_i205 + 2];
        var x2 = uvBuffer[_i205 + 4];
        var max = Math.max(x0, x1, x2);
        var min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary

        if (max > 0.9 && min < 0.1) {
          if (x0 < 0.2) uvBuffer[_i205 + 0] += 1;
          if (x1 < 0.2) uvBuffer[_i205 + 2] += 1;
          if (x2 < 0.2) uvBuffer[_i205 + 4] += 1;
        }
      }
    }

    function pushVertex(vertex) {
      vertexBuffer.push(vertex.x, vertex.y, vertex.z);
    }

    function getVertexByIndex(index, vertex) {
      var stride = index * 3;
      vertex.x = vertices[stride + 0];
      vertex.y = vertices[stride + 1];
      vertex.z = vertices[stride + 2];
    }

    function correctUVs() {
      var a = new Vector3();
      var b = new Vector3();
      var c = new Vector3();
      var centroid = new Vector3();
      var uvA = new Vector2();
      var uvB = new Vector2();
      var uvC = new Vector2();

      for (var _i206 = 0, j = 0; _i206 < vertexBuffer.length; _i206 += 9, j += 6) {
        a.set(vertexBuffer[_i206 + 0], vertexBuffer[_i206 + 1], vertexBuffer[_i206 + 2]);
        b.set(vertexBuffer[_i206 + 3], vertexBuffer[_i206 + 4], vertexBuffer[_i206 + 5]);
        c.set(vertexBuffer[_i206 + 6], vertexBuffer[_i206 + 7], vertexBuffer[_i206 + 8]);
        uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
        uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
        uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
        centroid.copy(a).add(b).add(c).divideScalar(3);
        var azi = azimuth(centroid);
        correctUV(uvA, j + 0, a, azi);
        correctUV(uvB, j + 2, b, azi);
        correctUV(uvC, j + 4, c, azi);
      }
    }

    function correctUV(uv, stride, vector, azimuth) {
      if (azimuth < 0 && uv.x === 1) {
        uvBuffer[stride] = uv.x - 1;
      }

      if (vector.x === 0 && vector.z === 0) {
        uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
      }
    } // Angle around the Y axis, counter-clockwise when looking from above.


    function azimuth(vector) {
      return Math.atan2(vector.z, -vector.x);
    } // Angle above the XZ plane.


    function inclination(vector) {
      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
    }

    return _this65;
  }

  _createClass(PolyhedronGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
    }
  }]);

  return PolyhedronGeometry;
}(BufferGeometry);

exports.PolyhedronGeometry = exports.PolyhedronBufferGeometry = PolyhedronGeometry;

var DodecahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {
  _inherits(DodecahedronGeometry, _PolyhedronGeometry);

  var _super76 = _createSuper(DodecahedronGeometry);

  function DodecahedronGeometry(radius = 1, detail = 0) {
    var _this66;

    _classCallCheck(this, DodecahedronGeometry);

    var t = (1 + Math.sqrt(5)) / 2;
    var r = 1 / t;
    var vertices = [// (±1, ±1, ±1)
    -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)
    0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)
    -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)
    -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
    var indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
    _this66 = _super76.call(this, vertices, indices, radius, detail);
    _this66.type = 'DodecahedronGeometry';
    _this66.parameters = {
      radius: radius,
      detail: detail
    };
    return _this66;
  }

  _createClass(DodecahedronGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new DodecahedronGeometry(data.radius, data.detail);
    }
  }]);

  return DodecahedronGeometry;
}(PolyhedronGeometry);

exports.DodecahedronGeometry = exports.DodecahedronBufferGeometry = DodecahedronGeometry;

var _v0 = new Vector3();

var _v1$1 = new Vector3();

var _normal = new Vector3();

var _triangle = new Triangle();

var EdgesGeometry = /*#__PURE__*/function (_BufferGeometry7) {
  _inherits(EdgesGeometry, _BufferGeometry7);

  var _super77 = _createSuper(EdgesGeometry);

  function EdgesGeometry(geometry = null, thresholdAngle = 1) {
    var _this67;

    _classCallCheck(this, EdgesGeometry);

    _this67 = _super77.call(this);
    _this67.type = 'EdgesGeometry';
    _this67.parameters = {
      geometry: geometry,
      thresholdAngle: thresholdAngle
    };

    if (geometry !== null) {
      var precisionPoints = 4;
      var precision = Math.pow(10, precisionPoints);
      var thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
      var indexAttr = geometry.getIndex();
      var positionAttr = geometry.getAttribute('position');
      var indexCount = indexAttr ? indexAttr.count : positionAttr.count;
      var indexArr = [0, 0, 0];
      var vertKeys = ['a', 'b', 'c'];
      var hashes = new Array(3);
      var edgeData = {};
      var vertices = [];

      for (var _i207 = 0; _i207 < indexCount; _i207 += 3) {
        if (indexAttr) {
          indexArr[0] = indexAttr.getX(_i207);
          indexArr[1] = indexAttr.getX(_i207 + 1);
          indexArr[2] = indexAttr.getX(_i207 + 2);
        } else {
          indexArr[0] = _i207;
          indexArr[1] = _i207 + 1;
          indexArr[2] = _i207 + 2;
        }

        var a = _triangle.a,
            b = _triangle.b,
            c = _triangle.c;
        a.fromBufferAttribute(positionAttr, indexArr[0]);
        b.fromBufferAttribute(positionAttr, indexArr[1]);
        c.fromBufferAttribute(positionAttr, indexArr[2]);

        _triangle.getNormal(_normal); // create hashes for the edge from the vertices


        hashes[0] = "".concat(Math.round(a.x * precision), ",").concat(Math.round(a.y * precision), ",").concat(Math.round(a.z * precision));
        hashes[1] = "".concat(Math.round(b.x * precision), ",").concat(Math.round(b.y * precision), ",").concat(Math.round(b.z * precision));
        hashes[2] = "".concat(Math.round(c.x * precision), ",").concat(Math.round(c.y * precision), ",").concat(Math.round(c.z * precision)); // skip degenerate triangles

        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
          continue;
        } // iterate over every edge


        for (var j = 0; j < 3; j++) {
          // get the first and next vertex making up the edge
          var jNext = (j + 1) % 3;
          var vecHash0 = hashes[j];
          var vecHash1 = hashes[jNext];
          var v0 = _triangle[vertKeys[j]];
          var v1 = _triangle[vertKeys[jNext]];
          var hash = "".concat(vecHash0, "_").concat(vecHash1);
          var reverseHash = "".concat(vecHash1, "_").concat(vecHash0);

          if (reverseHash in edgeData && edgeData[reverseHash]) {
            // if we found a sibling edge add it into the vertex array if
            // it meets the angle threshold and delete the edge from the map.
            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
              vertices.push(v0.x, v0.y, v0.z);
              vertices.push(v1.x, v1.y, v1.z);
            }

            edgeData[reverseHash] = null;
          } else if (!(hash in edgeData)) {
            // if we've already got an edge here then skip adding a new one
            edgeData[hash] = {
              index0: indexArr[j],
              index1: indexArr[jNext],
              normal: _normal.clone()
            };
          }
        }
      } // iterate over all remaining, unmatched edges and add them to the vertex array


      for (var key in edgeData) {
        if (edgeData[key]) {
          var _edgeData$key = edgeData[key],
              index0 = _edgeData$key.index0,
              index1 = _edgeData$key.index1;

          _v0.fromBufferAttribute(positionAttr, index0);

          _v1$1.fromBufferAttribute(positionAttr, index1);

          vertices.push(_v0.x, _v0.y, _v0.z);
          vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
        }
      }

      _this67.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    }

    return _this67;
  }

  return _createClass(EdgesGeometry);
}(BufferGeometry);

exports.EdgesGeometry = EdgesGeometry;

var Shape = /*#__PURE__*/function (_Path) {
  _inherits(Shape, _Path);

  var _super78 = _createSuper(Shape);

  function Shape(points) {
    var _this68;

    _classCallCheck(this, Shape);

    _this68 = _super78.call(this, points);
    _this68.uuid = generateUUID();
    _this68.type = 'Shape';
    _this68.holes = [];
    return _this68;
  }

  _createClass(Shape, [{
    key: "getPointsHoles",
    value: function getPointsHoles(divisions) {
      var holesPts = [];

      for (var _i208 = 0, l = this.holes.length; _i208 < l; _i208++) {
        holesPts[_i208] = this.holes[_i208].getPoints(divisions);
      }

      return holesPts;
    } // get points of shape and holes (keypoints based on segments parameter)

  }, {
    key: "extractPoints",
    value: function extractPoints(divisions) {
      return {
        shape: this.getPoints(divisions),
        holes: this.getPointsHoles(divisions)
      };
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Shape.prototype), "copy", this).call(this, source);

      this.holes = [];

      for (var _i209 = 0, l = source.holes.length; _i209 < l; _i209++) {
        var hole = source.holes[_i209];
        this.holes.push(hole.clone());
      }

      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(Shape.prototype), "toJSON", this).call(this);

      data.uuid = this.uuid;
      data.holes = [];

      for (var _i210 = 0, l = this.holes.length; _i210 < l; _i210++) {
        var hole = this.holes[_i210];
        data.holes.push(hole.toJSON());
      }

      return data;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      _get(_getPrototypeOf(Shape.prototype), "fromJSON", this).call(this, json);

      this.uuid = json.uuid;
      this.holes = [];

      for (var _i211 = 0, l = json.holes.length; _i211 < l; _i211++) {
        var hole = json.holes[_i211];
        this.holes.push(new Path().fromJSON(hole));
      }

      return this;
    }
  }]);

  return Shape;
}(Path);
/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */


exports.Shape = Shape;
var Earcut = {
  triangulate: function triangulate(data, holeIndices, dim = 2) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    var outerNode = linkedList(data, 0, outerLen, dim, true);
    var triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    var minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];

      for (var _i212 = dim; _i212 < outerLen; _i212 += dim) {
        x = data[_i212];
        y = data[_i212 + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
      } // minX, minY and invSize are later used to transform coords into integers for z-order calculation


      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
  }
}; // create a circular doubly linked list from polygon points in the specified winding order

function linkedList(data, start, end, dim, clockwise) {
  var i, last;

  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i = start; i < end; i += dim) {
      last = insertNode(i, data[i], data[i + 1], last);
    }
  } else {
    for (i = end - dim; i >= start; i -= dim) {
      last = insertNode(i, data[i], data[i + 1], last);
    }
  }

  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }

  return last;
} // eliminate colinear or duplicate points


function filterPoints(start, end) {
  if (!start) return start;
  if (!end) end = start;
  var p = start,
      again;

  do {
    again = false;

    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
      removeNode(p);
      p = end = p.prev;
      if (p === p.next) break;
      again = true;
    } else {
      p = p.next;
    }
  } while (again || p !== end);

  return end;
} // main ear slicing loop which triangulates a polygon (given as a linked list)


function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return; // interlink polygon nodes in z-order

  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
  var stop = ear,
      prev,
      next; // iterate through ears, slicing them one by one

  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;

    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      // cut off the triangle
      triangles.push(prev.i / dim);
      triangles.push(ear.i / dim);
      triangles.push(next.i / dim);
      removeNode(ear); // skipping the next vertex leads to less sliver triangles

      ear = next.next;
      stop = next.next;
      continue;
    }

    ear = next; // if we looped through the whole remaining polygon and can't find any more ears

    if (ear === stop) {
      // try filtering points and slicing again
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }

      break;
    }
  }
} // check whether a polygon node forms a valid ear with adjacent nodes


function isEar(ear) {
  var a = ear.prev,
      b = ear,
      c = ear.next;
  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
  // now make sure we don't have other points inside the potential ear

  var p = ear.next.next;

  while (p !== ear.prev) {
    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.next;
  }

  return true;
}

function isEarHashed(ear, minX, minY, invSize) {
  var a = ear.prev,
      b = ear,
      c = ear.next;
  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
  // triangle bbox; min & max are calculated like this for speed

  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
      minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
      maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
      maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

  var minZ = zOrder(minTX, minTY, minX, minY, invSize),
      maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
  var p = ear.prevZ,
      n = ear.nextZ; // look for points inside the triangle in both directions

  while (p && p.z >= minZ && n && n.z <= maxZ) {
    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.prevZ;
    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  } // look for remaining points in decreasing z-order


  while (p && p.z >= minZ) {
    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.prevZ;
  } // look for remaining points in increasing z-order


  while (n && n.z <= maxZ) {
    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }

  return true;
} // go through all polygon nodes and cure small local self-intersections


function cureLocalIntersections(start, triangles, dim) {
  var p = start;

  do {
    var a = p.prev,
        b = p.next.next;

    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i / dim);
      triangles.push(p.i / dim);
      triangles.push(b.i / dim); // remove two nodes involved

      removeNode(p);
      removeNode(p.next);
      p = start = b;
    }

    p = p.next;
  } while (p !== start);

  return filterPoints(p);
} // try splitting polygon into two and triangulate them independently


function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  // look for a valid diagonal that divides the polygon into two
  var a = start;

  do {
    var b = a.next.next;

    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        // split the polygon in two by the diagonal
        var c = splitPolygon(a, b); // filter colinear points around the cuts

        a = filterPoints(a, a.next);
        c = filterPoints(c, c.next); // run earcut on each half

        earcutLinked(a, triangles, dim, minX, minY, invSize);
        earcutLinked(c, triangles, dim, minX, minY, invSize);
        return;
      }

      b = b.next;
    }

    a = a.next;
  } while (a !== start);
} // link every hole into the outer loop, producing a single-ring polygon without holes


function eliminateHoles(data, holeIndices, outerNode, dim) {
  var queue = [];
  var i, len, start, end, list;

  for (i = 0, len = holeIndices.length; i < len; i++) {
    start = holeIndices[i] * dim;
    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost(list));
  }

  queue.sort(compareX); // process holes from left to right

  for (i = 0; i < queue.length; i++) {
    eliminateHole(queue[i], outerNode);
    outerNode = filterPoints(outerNode, outerNode.next);
  }

  return outerNode;
}

function compareX(a, b) {
  return a.x - b.x;
} // find a bridge between vertices that connects hole with an outer ring and link it


function eliminateHole(hole, outerNode) {
  outerNode = findHoleBridge(hole, outerNode);

  if (outerNode) {
    var b = splitPolygon(outerNode, hole); // filter collinear points around the cuts

    filterPoints(outerNode, outerNode.next);
    filterPoints(b, b.next);
  }
} // David Eberly's algorithm for finding a bridge between hole and outer polygon


function findHoleBridge(hole, outerNode) {
  var p = outerNode;
  var hx = hole.x;
  var hy = hole.y;
  var qx = -Infinity,
      m; // find a segment intersected by a ray from the hole's leftmost point to the left;
  // segment's endpoint with lesser x will be potential connection point

  do {
    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

      if (x <= hx && x > qx) {
        qx = x;

        if (x === hx) {
          if (hy === p.y) return p;
          if (hy === p.next.y) return p.next;
        }

        m = p.x < p.next.x ? p : p.next;
      }
    }

    p = p.next;
  } while (p !== outerNode);

  if (!m) return null;
  if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
  // look for points inside the triangle of hole point, segment intersection and endpoint;
  // if there are no points found, we have a valid connection;
  // otherwise choose the point of the minimum angle with the ray as connection point

  var stop = m,
      mx = m.x,
      my = m.y;
  var tanMin = Infinity,
      tan;
  p = m;

  do {
    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
        m = p;
        tanMin = tan;
      }
    }

    p = p.next;
  } while (p !== stop);

  return m;
} // whether sector in vertex m contains sector in vertex p in the same coordinates


function sectorContainsSector(m, p) {
  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
} // interlink polygon nodes in z-order


function indexCurve(start, minX, minY, invSize) {
  var p = start;

  do {
    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
    p.prevZ = p.prev;
    p.nextZ = p.next;
    p = p.next;
  } while (p !== start);

  p.prevZ.nextZ = null;
  p.prevZ = null;
  sortLinked(p);
} // Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


function sortLinked(list) {
  var i,
      p,
      q,
      e,
      tail,
      numMerges,
      pSize,
      qSize,
      inSize = 1;

  do {
    p = list;
    list = null;
    tail = null;
    numMerges = 0;

    while (p) {
      numMerges++;
      q = p;
      pSize = 0;

      for (i = 0; i < inSize; i++) {
        pSize++;
        q = q.nextZ;
        if (!q) break;
      }

      qSize = inSize;

      while (pSize > 0 || qSize > 0 && q) {
        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
          e = p;
          p = p.nextZ;
          pSize--;
        } else {
          e = q;
          q = q.nextZ;
          qSize--;
        }

        if (tail) tail.nextZ = e;else list = e;
        e.prevZ = tail;
        tail = e;
      }

      p = q;
    }

    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);

  return list;
} // z-order of a point given coords and inverse of the longer side of data bbox


function zOrder(x, y, minX, minY, invSize) {
  // coords are transformed into non-negative 15-bit integer range
  x = 32767 * (x - minX) * invSize;
  y = 32767 * (y - minY) * invSize;
  x = (x | x << 8) & 0x00FF00FF;
  x = (x | x << 4) & 0x0F0F0F0F;
  x = (x | x << 2) & 0x33333333;
  x = (x | x << 1) & 0x55555555;
  y = (y | y << 8) & 0x00FF00FF;
  y = (y | y << 4) & 0x0F0F0F0F;
  y = (y | y << 2) & 0x33333333;
  y = (y | y << 1) & 0x55555555;
  return x | y << 1;
} // find the leftmost node of a polygon ring


function getLeftmost(start) {
  var p = start,
      leftmost = start;

  do {
    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
    p = p.next;
  } while (p !== start);

  return leftmost;
} // check if a point lies within a convex triangle


function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


function isValidDiagonal(a, b) {
  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // doesn't intersect other edges
  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
  area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
} // signed area of a triangle


function area(p, q, r) {
  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
} // check if two points are equal


function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
} // check if two segments intersect


function intersects(p1, q1, p2, q2) {
  var o1 = sign(area(p1, q1, p2));
  var o2 = sign(area(p1, q1, q2));
  var o3 = sign(area(p2, q2, p1));
  var o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true; // general case

  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1

  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1

  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2

  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

  return false;
} // for collinear points p, q, r, check if point q lies on segment pr


function onSegment(p, q, r) {
  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}

function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
} // check if a polygon diagonal intersects any polygon segments


function intersectsPolygon(a, b) {
  var p = a;

  do {
    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
    p = p.next;
  } while (p !== a);

  return false;
} // check if a polygon diagonal is locally inside the polygon


function locallyInside(a, b) {
  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
} // check if the middle point of a polygon diagonal is inside the polygon


function middleInside(a, b) {
  var p = a,
      inside = false;
  var px = (a.x + b.x) / 2,
      py = (a.y + b.y) / 2;

  do {
    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
    p = p.next;
  } while (p !== a);

  return inside;
} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring


function splitPolygon(a, b) {
  var a2 = new Node(a.i, a.x, a.y),
      b2 = new Node(b.i, b.x, b.y),
      an = a.next,
      bp = b.prev;
  a.next = b;
  b.prev = a;
  a2.next = an;
  an.prev = a2;
  b2.next = a2;
  a2.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
} // create a node and optionally link it with previous one (in a circular doubly linked list)


function insertNode(i, x, y, last) {
  var p = new Node(i, x, y);

  if (!last) {
    p.prev = p;
    p.next = p;
  } else {
    p.next = last.next;
    p.prev = last;
    last.next.prev = p;
    last.next = p;
  }

  return p;
}

function removeNode(p) {
  p.next.prev = p.prev;
  p.prev.next = p.next;
  if (p.prevZ) p.prevZ.nextZ = p.nextZ;
  if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
  // vertex index in coordinates array
  this.i = i; // vertex coordinates

  this.x = x;
  this.y = y; // previous and next vertex nodes in a polygon ring

  this.prev = null;
  this.next = null; // z-order curve value

  this.z = null; // previous and next nodes in z-order

  this.prevZ = null;
  this.nextZ = null; // indicates whether this is a steiner point

  this.steiner = false;
}

function signedArea(data, start, end, dim) {
  var sum = 0;

  for (var _i213 = start, j = end - dim; _i213 < end; _i213 += dim) {
    sum += (data[j] - data[_i213]) * (data[_i213 + 1] + data[j + 1]);
    j = _i213;
  }

  return sum;
}

var ShapeUtils = /*#__PURE__*/function () {
  function ShapeUtils() {
    _classCallCheck(this, ShapeUtils);
  }

  _createClass(ShapeUtils, null, [{
    key: "area",
    value: // calculate area of the contour polygon
    function area(contour) {
      var n = contour.length;
      var a = 0.0;

      for (var p = n - 1, q = 0; q < n; p = q++) {
        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
      }

      return a * 0.5;
    }
  }, {
    key: "isClockWise",
    value: function isClockWise(pts) {
      return ShapeUtils.area(pts) < 0;
    }
  }, {
    key: "triangulateShape",
    value: function triangulateShape(contour, holes) {
      var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]

      var holeIndices = []; // array of hole indices

      var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

      removeDupEndPts(contour);
      addContour(vertices, contour); //

      var holeIndex = contour.length;
      holes.forEach(removeDupEndPts);

      for (var _i214 = 0; _i214 < holes.length; _i214++) {
        holeIndices.push(holeIndex);
        holeIndex += holes[_i214].length;
        addContour(vertices, holes[_i214]);
      } //


      var triangles = Earcut.triangulate(vertices, holeIndices); //

      for (var _i215 = 0; _i215 < triangles.length; _i215 += 3) {
        faces.push(triangles.slice(_i215, _i215 + 3));
      }

      return faces;
    }
  }]);

  return ShapeUtils;
}();

exports.ShapeUtils = ShapeUtils;

function removeDupEndPts(points) {
  var l = points.length;

  if (l > 2 && points[l - 1].equals(points[0])) {
    points.pop();
  }
}

function addContour(vertices, contour) {
  for (var _i216 = 0; _i216 < contour.length; _i216++) {
    vertices.push(contour[_i216].x);
    vertices.push(contour[_i216].y);
  }
}
/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */


var ExtrudeGeometry = /*#__PURE__*/function (_BufferGeometry8) {
  _inherits(ExtrudeGeometry, _BufferGeometry8);

  var _super79 = _createSuper(ExtrudeGeometry);

  function ExtrudeGeometry(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
    var _this69;

    _classCallCheck(this, ExtrudeGeometry);

    _this69 = _super79.call(this);
    _this69.type = 'ExtrudeGeometry';
    _this69.parameters = {
      shapes: shapes,
      options: options
    };
    shapes = Array.isArray(shapes) ? shapes : [shapes];

    var scope = _assertThisInitialized(_this69);

    var verticesArray = [];
    var uvArray = [];

    for (var _i217 = 0, l = shapes.length; _i217 < l; _i217++) {
      var shape = shapes[_i217];
      addShape(shape);
    } // build geometry


    _this69.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));

    _this69.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));

    _this69.computeVertexNormals(); // functions


    function addShape(shape) {
      var placeholder = []; // options

      var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
      var steps = options.steps !== undefined ? options.steps : 1;
      var depth = options.depth !== undefined ? options.depth : 1;
      var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
      var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
      var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
      var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
      var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
      var extrudePath = options.extrudePath;
      var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options

      if (options.amount !== undefined) {
        console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');
        depth = options.amount;
      } //


      var extrudePts,
          extrudeByPath = false;
      var splineTube, binormal, normal, position2;

      if (extrudePath) {
        extrudePts = extrudePath.getSpacedPoints(steps);
        extrudeByPath = true;
        bevelEnabled = false; // bevels not supported for path extrusion
        // SETUP TNB variables
        // TODO1 - have a .isClosed in spline?

        splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

        binormal = new Vector3();
        normal = new Vector3();
        position2 = new Vector3();
      } // Safeguards if bevels are not enabled


      if (!bevelEnabled) {
        bevelSegments = 0;
        bevelThickness = 0;
        bevelSize = 0;
        bevelOffset = 0;
      } // Variables initialization


      var shapePoints = shape.extractPoints(curveSegments);
      var vertices = shapePoints.shape;
      var holes = shapePoints.holes;
      var reverse = !ShapeUtils.isClockWise(vertices);

      if (reverse) {
        vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...

        for (var h = 0, hl = holes.length; h < hl; h++) {
          var ahole = holes[h];

          if (ShapeUtils.isClockWise(ahole)) {
            holes[h] = ahole.reverse();
          }
        }
      }

      var faces = ShapeUtils.triangulateShape(vertices, holes);
      /* Vertices */

      var contour = vertices; // vertices has all points but contour has only points of circumference

      for (var _h = 0, _hl = holes.length; _h < _hl; _h++) {
        var _ahole = holes[_h];
        vertices = vertices.concat(_ahole);
      }

      function scalePt2(pt, vec, size) {
        if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
        return vec.clone().multiplyScalar(size).add(pt);
      }

      var vlen = vertices.length,
          flen = faces.length; // Find directions for point movement

      function getBevelVec(inPt, inPrev, inNext) {
        // computes for inPt the corresponding point inPt' on a new contour
        //   shifted by 1 unit (length of normalized vector) to the left
        // if we walk along contour clockwise, this new contour is outside the old one
        //
        // inPt' is the intersection of the two lines parallel to the two
        //  adjacent edges of inPt at a distance of 1 unit on the left side.
        var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
        // good reading for geometry algorithms (here: line-line intersection)
        // http://geomalgorithms.com/a05-_intersect-1.html

        var v_prev_x = inPt.x - inPrev.x,
            v_prev_y = inPt.y - inPrev.y;
        var v_next_x = inNext.x - inPt.x,
            v_next_y = inNext.y - inPt.y;
        var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges

        var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;

        if (Math.abs(collinear0) > Number.EPSILON) {
          // not collinear
          // length of vectors for normalizing
          var v_prev_len = Math.sqrt(v_prev_lensq);
          var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left

          var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
          var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
          var ptNextShift_x = inNext.x - v_next_y / v_next_len;
          var ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point

          var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point

          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly
          //  but prevent crazy spikes

          var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;

          if (v_trans_lensq <= 2) {
            return new Vector2(v_trans_x, v_trans_y);
          } else {
            shrink_by = Math.sqrt(v_trans_lensq / 2);
          }
        } else {
          // handle special case of collinear edges
          var direction_eq = false; // assumes: opposite

          if (v_prev_x > Number.EPSILON) {
            if (v_next_x > Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (v_prev_x < -Number.EPSILON) {
              if (v_next_x < -Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                direction_eq = true;
              }
            }
          }

          if (direction_eq) {
            // console.log("Warning: lines are a straight sequence");
            v_trans_x = -v_prev_y;
            v_trans_y = v_prev_x;
            shrink_by = Math.sqrt(v_prev_lensq);
          } else {
            // console.log("Warning: lines are a straight spike");
            v_trans_x = v_prev_x;
            v_trans_y = v_prev_y;
            shrink_by = Math.sqrt(v_prev_lensq / 2);
          }
        }

        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
      }

      var contourMovements = [];

      for (var _i218 = 0, il = contour.length, j = il - 1, k = _i218 + 1; _i218 < il; _i218++, j++, k++) {
        if (j === il) j = 0;
        if (k === il) k = 0; //  (j)---(i)---(k)
        // console.log('i,j,k', i, j , k)

        contourMovements[_i218] = getBevelVec(contour[_i218], contour[j], contour[k]);
      }

      var holesMovements = [];
      var oneHoleMovements,
          verticesMovements = contourMovements.concat();

      for (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {
        var _ahole2 = holes[_h2];
        oneHoleMovements = [];

        for (var _i219 = 0, _il13 = _ahole2.length, _j8 = _il13 - 1, _k = _i219 + 1; _i219 < _il13; _i219++, _j8++, _k++) {
          if (_j8 === _il13) _j8 = 0;
          if (_k === _il13) _k = 0; //  (j)---(i)---(k)

          oneHoleMovements[_i219] = getBevelVec(_ahole2[_i219], _ahole2[_j8], _ahole2[_k]);
        }

        holesMovements.push(oneHoleMovements);
        verticesMovements = verticesMovements.concat(oneHoleMovements);
      } // Loop bevelSegments, 1 for the front, 1 for the back


      for (var b = 0; b < bevelSegments; b++) {
        //for ( b = bevelSegments; b > 0; b -- ) {
        var t = b / bevelSegments;
        var z = bevelThickness * Math.cos(t * Math.PI / 2);

        var _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape


        for (var _i220 = 0, _il14 = contour.length; _i220 < _il14; _i220++) {
          var vert = scalePt2(contour[_i220], contourMovements[_i220], _bs);
          v(vert.x, vert.y, -z);
        } // expand holes


        for (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {
          var _ahole3 = holes[_h3];
          oneHoleMovements = holesMovements[_h3];

          for (var _i221 = 0, _il15 = _ahole3.length; _i221 < _il15; _i221++) {
            var _vert = scalePt2(_ahole3[_i221], oneHoleMovements[_i221], _bs);

            v(_vert.x, _vert.y, -z);
          }
        }
      }

      var bs = bevelSize + bevelOffset; // Back facing vertices

      for (var _i222 = 0; _i222 < vlen; _i222++) {
        var _vert2 = bevelEnabled ? scalePt2(vertices[_i222], verticesMovements[_i222], bs) : vertices[_i222];

        if (!extrudeByPath) {
          v(_vert2.x, _vert2.y, 0);
        } else {
          // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
          normal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);
          binormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);
          position2.copy(extrudePts[0]).add(normal).add(binormal);
          v(position2.x, position2.y, position2.z);
        }
      } // Add stepped vertices...
      // Including front facing vertices


      for (var s = 1; s <= steps; s++) {
        for (var _i223 = 0; _i223 < vlen; _i223++) {
          var _vert3 = bevelEnabled ? scalePt2(vertices[_i223], verticesMovements[_i223], bs) : vertices[_i223];

          if (!extrudeByPath) {
            v(_vert3.x, _vert3.y, depth / steps * s);
          } else {
            // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
            normal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);
            binormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);
            position2.copy(extrudePts[s]).add(normal).add(binormal);
            v(position2.x, position2.y, position2.z);
          }
        }
      } // Add bevel segments planes
      //for ( b = 1; b <= bevelSegments; b ++ ) {


      for (var _b5 = bevelSegments - 1; _b5 >= 0; _b5--) {
        var _t = _b5 / bevelSegments;

        var _z2 = bevelThickness * Math.cos(_t * Math.PI / 2);

        var _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape


        for (var _i224 = 0, _il16 = contour.length; _i224 < _il16; _i224++) {
          var _vert4 = scalePt2(contour[_i224], contourMovements[_i224], _bs2);

          v(_vert4.x, _vert4.y, depth + _z2);
        } // expand holes


        for (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {
          var _ahole4 = holes[_h4];
          oneHoleMovements = holesMovements[_h4];

          for (var _i225 = 0, _il17 = _ahole4.length; _i225 < _il17; _i225++) {
            var _vert5 = scalePt2(_ahole4[_i225], oneHoleMovements[_i225], _bs2);

            if (!extrudeByPath) {
              v(_vert5.x, _vert5.y, depth + _z2);
            } else {
              v(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z2);
            }
          }
        }
      }
      /* Faces */
      // Top and bottom faces


      buildLidFaces(); // Sides faces

      buildSideFaces(); /////  Internal functions

      function buildLidFaces() {
        var start = verticesArray.length / 3;

        if (bevelEnabled) {
          var layer = 0; // steps + 1

          var offset = vlen * layer; // Bottom faces

          for (var _i226 = 0; _i226 < flen; _i226++) {
            var face = faces[_i226];
            f3(face[2] + offset, face[1] + offset, face[0] + offset);
          }

          layer = steps + bevelSegments * 2;
          offset = vlen * layer; // Top faces

          for (var _i227 = 0; _i227 < flen; _i227++) {
            var _face = faces[_i227];
            f3(_face[0] + offset, _face[1] + offset, _face[2] + offset);
          }
        } else {
          // Bottom faces
          for (var _i228 = 0; _i228 < flen; _i228++) {
            var _face2 = faces[_i228];
            f3(_face2[2], _face2[1], _face2[0]);
          } // Top faces


          for (var _i229 = 0; _i229 < flen; _i229++) {
            var _face3 = faces[_i229];
            f3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);
          }
        }

        scope.addGroup(start, verticesArray.length / 3 - start, 0);
      } // Create faces for the z-sides of the shape


      function buildSideFaces() {
        var start = verticesArray.length / 3;
        var layeroffset = 0;
        sidewalls(contour, layeroffset);
        layeroffset += contour.length;

        for (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {
          var _ahole5 = holes[_h5];
          sidewalls(_ahole5, layeroffset); //, true

          layeroffset += _ahole5.length;
        }

        scope.addGroup(start, verticesArray.length / 3 - start, 1);
      }

      function sidewalls(contour, layeroffset) {
        var i = contour.length;

        while (--i >= 0) {
          var _j9 = i;

          var _k2 = i - 1;

          if (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);

          for (var _s4 = 0, sl = steps + bevelSegments * 2; _s4 < sl; _s4++) {
            var slen1 = vlen * _s4;
            var slen2 = vlen * (_s4 + 1);

            var a = layeroffset + _j9 + slen1,
                _b6 = layeroffset + _k2 + slen1,
                c = layeroffset + _k2 + slen2,
                d = layeroffset + _j9 + slen2;

            f4(a, _b6, c, d);
          }
        }
      }

      function v(x, y, z) {
        placeholder.push(x);
        placeholder.push(y);
        placeholder.push(z);
      }

      function f3(a, b, c) {
        addVertex(a);
        addVertex(b);
        addVertex(c);
        var nextIndex = verticesArray.length / 3;
        var uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[2]);
      }

      function f4(a, b, c, d) {
        addVertex(a);
        addVertex(b);
        addVertex(d);
        addVertex(b);
        addVertex(c);
        addVertex(d);
        var nextIndex = verticesArray.length / 3;
        var uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[3]);
        addUV(uvs[1]);
        addUV(uvs[2]);
        addUV(uvs[3]);
      }

      function addVertex(index) {
        verticesArray.push(placeholder[index * 3 + 0]);
        verticesArray.push(placeholder[index * 3 + 1]);
        verticesArray.push(placeholder[index * 3 + 2]);
      }

      function addUV(vector2) {
        uvArray.push(vector2.x);
        uvArray.push(vector2.y);
      }
    }

    return _this69;
  }

  _createClass(ExtrudeGeometry, [{
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(ExtrudeGeometry.prototype), "toJSON", this).call(this);

      var shapes = this.parameters.shapes;
      var options = this.parameters.options;
      return toJSON$1(shapes, options, data);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(data, shapes) {
      var geometryShapes = [];

      for (var j = 0, jl = data.shapes.length; j < jl; j++) {
        var shape = shapes[data.shapes[j]];
        geometryShapes.push(shape);
      }

      var extrudePath = data.options.extrudePath;

      if (extrudePath !== undefined) {
        data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
      }

      return new ExtrudeGeometry(geometryShapes, data.options);
    }
  }]);

  return ExtrudeGeometry;
}(BufferGeometry);

exports.ExtrudeGeometry = exports.ExtrudeBufferGeometry = ExtrudeGeometry;
var WorldUVGenerator = {
  generateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {
    var a_x = vertices[indexA * 3];
    var a_y = vertices[indexA * 3 + 1];
    var b_x = vertices[indexB * 3];
    var b_y = vertices[indexB * 3 + 1];
    var c_x = vertices[indexC * 3];
    var c_y = vertices[indexC * 3 + 1];
    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];
  },
  generateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {
    var a_x = vertices[indexA * 3];
    var a_y = vertices[indexA * 3 + 1];
    var a_z = vertices[indexA * 3 + 2];
    var b_x = vertices[indexB * 3];
    var b_y = vertices[indexB * 3 + 1];
    var b_z = vertices[indexB * 3 + 2];
    var c_x = vertices[indexC * 3];
    var c_y = vertices[indexC * 3 + 1];
    var c_z = vertices[indexC * 3 + 2];
    var d_x = vertices[indexD * 3];
    var d_y = vertices[indexD * 3 + 1];
    var d_z = vertices[indexD * 3 + 2];

    if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
      return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];
    } else {
      return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];
    }
  }
};

function toJSON$1(shapes, options, data) {
  data.shapes = [];

  if (Array.isArray(shapes)) {
    for (var _i230 = 0, l = shapes.length; _i230 < l; _i230++) {
      var shape = shapes[_i230];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }

  if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}

var IcosahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry2) {
  _inherits(IcosahedronGeometry, _PolyhedronGeometry2);

  var _super80 = _createSuper(IcosahedronGeometry);

  function IcosahedronGeometry(radius = 1, detail = 0) {
    var _this70;

    _classCallCheck(this, IcosahedronGeometry);

    var t = (1 + Math.sqrt(5)) / 2;
    var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];
    var indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
    _this70 = _super80.call(this, vertices, indices, radius, detail);
    _this70.type = 'IcosahedronGeometry';
    _this70.parameters = {
      radius: radius,
      detail: detail
    };
    return _this70;
  }

  _createClass(IcosahedronGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new IcosahedronGeometry(data.radius, data.detail);
    }
  }]);

  return IcosahedronGeometry;
}(PolyhedronGeometry);

exports.IcosahedronGeometry = exports.IcosahedronBufferGeometry = IcosahedronGeometry;

var OctahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry3) {
  _inherits(OctahedronGeometry, _PolyhedronGeometry3);

  var _super81 = _createSuper(OctahedronGeometry);

  function OctahedronGeometry(radius = 1, detail = 0) {
    var _this71;

    _classCallCheck(this, OctahedronGeometry);

    var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];
    var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
    _this71 = _super81.call(this, vertices, indices, radius, detail);
    _this71.type = 'OctahedronGeometry';
    _this71.parameters = {
      radius: radius,
      detail: detail
    };
    return _this71;
  }

  _createClass(OctahedronGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new OctahedronGeometry(data.radius, data.detail);
    }
  }]);

  return OctahedronGeometry;
}(PolyhedronGeometry);

exports.OctahedronGeometry = exports.OctahedronBufferGeometry = OctahedronGeometry;

var RingGeometry = /*#__PURE__*/function (_BufferGeometry9) {
  _inherits(RingGeometry, _BufferGeometry9);

  var _super82 = _createSuper(RingGeometry);

  function RingGeometry(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
    var _this72;

    _classCallCheck(this, RingGeometry);

    _this72 = _super82.call(this);
    _this72.type = 'RingGeometry';
    _this72.parameters = {
      innerRadius: innerRadius,
      outerRadius: outerRadius,
      thetaSegments: thetaSegments,
      phiSegments: phiSegments,
      thetaStart: thetaStart,
      thetaLength: thetaLength
    };
    thetaSegments = Math.max(3, thetaSegments);
    phiSegments = Math.max(1, phiSegments); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // some helper variables

    var radius = innerRadius;
    var radiusStep = (outerRadius - innerRadius) / phiSegments;
    var vertex = new Vector3();
    var uv = new Vector2(); // generate vertices, normals and uvs

    for (var j = 0; j <= phiSegments; j++) {
      for (var _i231 = 0; _i231 <= thetaSegments; _i231++) {
        // values are generate from the inside of the ring to the outside
        var segment = thetaStart + _i231 / thetaSegments * thetaLength; // vertex

        vertex.x = radius * Math.cos(segment);
        vertex.y = radius * Math.sin(segment);
        vertices.push(vertex.x, vertex.y, vertex.z); // normal

        normals.push(0, 0, 1); // uv

        uv.x = (vertex.x / outerRadius + 1) / 2;
        uv.y = (vertex.y / outerRadius + 1) / 2;
        uvs.push(uv.x, uv.y);
      } // increase the radius for next row of vertices


      radius += radiusStep;
    } // indices


    for (var _j10 = 0; _j10 < phiSegments; _j10++) {
      var thetaSegmentLevel = _j10 * (thetaSegments + 1);

      for (var _i232 = 0; _i232 < thetaSegments; _i232++) {
        var _segment = _i232 + thetaSegmentLevel;

        var a = _segment;
        var b = _segment + thetaSegments + 1;
        var c = _segment + thetaSegments + 2;
        var d = _segment + 1; // faces

        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    } // build geometry


    _this72.setIndex(indices);

    _this72.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this72.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this72.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    return _this72;
  }

  _createClass(RingGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
    }
  }]);

  return RingGeometry;
}(BufferGeometry);

exports.RingGeometry = exports.RingBufferGeometry = RingGeometry;

var ShapeGeometry = /*#__PURE__*/function (_BufferGeometry10) {
  _inherits(ShapeGeometry, _BufferGeometry10);

  var _super83 = _createSuper(ShapeGeometry);

  function ShapeGeometry(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {
    var _this73;

    _classCallCheck(this, ShapeGeometry);

    _this73 = _super83.call(this);
    _this73.type = 'ShapeGeometry';
    _this73.parameters = {
      shapes: shapes,
      curveSegments: curveSegments
    }; // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // helper variables

    var groupStart = 0;
    var groupCount = 0; // allow single and array values for "shapes" parameter

    if (Array.isArray(shapes) === false) {
      addShape(shapes);
    } else {
      for (var _i233 = 0; _i233 < shapes.length; _i233++) {
        addShape(shapes[_i233]);

        _this73.addGroup(groupStart, groupCount, _i233); // enables MultiMaterial support


        groupStart += groupCount;
        groupCount = 0;
      }
    } // build geometry


    _this73.setIndex(indices);

    _this73.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this73.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this73.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions


    function addShape(shape) {
      var indexOffset = vertices.length / 3;
      var points = shape.extractPoints(curveSegments);
      var shapeVertices = points.shape;
      var shapeHoles = points.holes; // check direction of vertices

      if (ShapeUtils.isClockWise(shapeVertices) === false) {
        shapeVertices = shapeVertices.reverse();
      }

      for (var _i234 = 0, l = shapeHoles.length; _i234 < l; _i234++) {
        var shapeHole = shapeHoles[_i234];

        if (ShapeUtils.isClockWise(shapeHole) === true) {
          shapeHoles[_i234] = shapeHole.reverse();
        }
      }

      var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array

      for (var _i235 = 0, _l8 = shapeHoles.length; _i235 < _l8; _i235++) {
        var _shapeHole = shapeHoles[_i235];
        shapeVertices = shapeVertices.concat(_shapeHole);
      } // vertices, normals, uvs


      for (var _i236 = 0, _l9 = shapeVertices.length; _i236 < _l9; _i236++) {
        var _vertex = shapeVertices[_i236];
        vertices.push(_vertex.x, _vertex.y, 0);
        normals.push(0, 0, 1);
        uvs.push(_vertex.x, _vertex.y); // world uvs
      } // incides


      for (var _i237 = 0, _l10 = faces.length; _i237 < _l10; _i237++) {
        var face = faces[_i237];
        var a = face[0] + indexOffset;
        var b = face[1] + indexOffset;
        var c = face[2] + indexOffset;
        indices.push(a, b, c);
        groupCount += 3;
      }
    }

    return _this73;
  }

  _createClass(ShapeGeometry, [{
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(ShapeGeometry.prototype), "toJSON", this).call(this);

      var shapes = this.parameters.shapes;
      return _toJSON(shapes, data);
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(data, shapes) {
      var geometryShapes = [];

      for (var j = 0, jl = data.shapes.length; j < jl; j++) {
        var shape = shapes[data.shapes[j]];
        geometryShapes.push(shape);
      }

      return new ShapeGeometry(geometryShapes, data.curveSegments);
    }
  }]);

  return ShapeGeometry;
}(BufferGeometry);

exports.ShapeGeometry = exports.ShapeBufferGeometry = ShapeGeometry;

function _toJSON(shapes, data) {
  data.shapes = [];

  if (Array.isArray(shapes)) {
    for (var _i238 = 0, l = shapes.length; _i238 < l; _i238++) {
      var shape = shapes[_i238];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }

  return data;
}

var SphereGeometry = /*#__PURE__*/function (_BufferGeometry11) {
  _inherits(SphereGeometry, _BufferGeometry11);

  var _super84 = _createSuper(SphereGeometry);

  function SphereGeometry(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
    var _this74;

    _classCallCheck(this, SphereGeometry);

    _this74 = _super84.call(this);
    _this74.type = 'SphereGeometry';
    _this74.parameters = {
      radius: radius,
      widthSegments: widthSegments,
      heightSegments: heightSegments,
      phiStart: phiStart,
      phiLength: phiLength,
      thetaStart: thetaStart,
      thetaLength: thetaLength
    };
    widthSegments = Math.max(3, Math.floor(widthSegments));
    heightSegments = Math.max(2, Math.floor(heightSegments));
    var thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    var index = 0;
    var grid = [];
    var vertex = new Vector3();
    var normal = new Vector3(); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // generate vertices, normals and uvs

    for (var iy = 0; iy <= heightSegments; iy++) {
      var verticesRow = [];
      var v = iy / heightSegments; // special case for the poles

      var uOffset = 0;

      if (iy == 0 && thetaStart == 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy == heightSegments && thetaEnd == Math.PI) {
        uOffset = -0.5 / widthSegments;
      }

      for (var ix = 0; ix <= widthSegments; ix++) {
        var u = ix / widthSegments; // vertex

        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertices.push(vertex.x, vertex.y, vertex.z); // normal

        normal.copy(vertex).normalize();
        normals.push(normal.x, normal.y, normal.z); // uv

        uvs.push(u + uOffset, 1 - v);
        verticesRow.push(index++);
      }

      grid.push(verticesRow);
    } // indices


    for (var _iy3 = 0; _iy3 < heightSegments; _iy3++) {
      for (var _ix3 = 0; _ix3 < widthSegments; _ix3++) {
        var a = grid[_iy3][_ix3 + 1];
        var b = grid[_iy3][_ix3];
        var c = grid[_iy3 + 1][_ix3];
        var d = grid[_iy3 + 1][_ix3 + 1];
        if (_iy3 !== 0 || thetaStart > 0) indices.push(a, b, d);
        if (_iy3 !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
      }
    } // build geometry


    _this74.setIndex(indices);

    _this74.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this74.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this74.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    return _this74;
  }

  _createClass(SphereGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
  }]);

  return SphereGeometry;
}(BufferGeometry);

exports.SphereGeometry = exports.SphereBufferGeometry = SphereGeometry;

var TetrahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry4) {
  _inherits(TetrahedronGeometry, _PolyhedronGeometry4);

  var _super85 = _createSuper(TetrahedronGeometry);

  function TetrahedronGeometry(radius = 1, detail = 0) {
    var _this75;

    _classCallCheck(this, TetrahedronGeometry);

    var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];
    var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
    _this75 = _super85.call(this, vertices, indices, radius, detail);
    _this75.type = 'TetrahedronGeometry';
    _this75.parameters = {
      radius: radius,
      detail: detail
    };
    return _this75;
  }

  _createClass(TetrahedronGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new TetrahedronGeometry(data.radius, data.detail);
    }
  }]);

  return TetrahedronGeometry;
}(PolyhedronGeometry);

exports.TetrahedronGeometry = exports.TetrahedronBufferGeometry = TetrahedronGeometry;

var TorusGeometry = /*#__PURE__*/function (_BufferGeometry12) {
  _inherits(TorusGeometry, _BufferGeometry12);

  var _super86 = _createSuper(TorusGeometry);

  function TorusGeometry(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {
    var _this76;

    _classCallCheck(this, TorusGeometry);

    _this76 = _super86.call(this);
    _this76.type = 'TorusGeometry';
    _this76.parameters = {
      radius: radius,
      tube: tube,
      radialSegments: radialSegments,
      tubularSegments: tubularSegments,
      arc: arc
    };
    radialSegments = Math.floor(radialSegments);
    tubularSegments = Math.floor(tubularSegments); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // helper variables

    var center = new Vector3();
    var vertex = new Vector3();
    var normal = new Vector3(); // generate vertices, normals and uvs

    for (var j = 0; j <= radialSegments; j++) {
      for (var _i239 = 0; _i239 <= tubularSegments; _i239++) {
        var u = _i239 / tubularSegments * arc;
        var v = j / radialSegments * Math.PI * 2; // vertex

        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
        vertex.z = tube * Math.sin(v);
        vertices.push(vertex.x, vertex.y, vertex.z); // normal

        center.x = radius * Math.cos(u);
        center.y = radius * Math.sin(u);
        normal.subVectors(vertex, center).normalize();
        normals.push(normal.x, normal.y, normal.z); // uv

        uvs.push(_i239 / tubularSegments);
        uvs.push(j / radialSegments);
      }
    } // generate indices


    for (var _j11 = 1; _j11 <= radialSegments; _j11++) {
      for (var _i240 = 1; _i240 <= tubularSegments; _i240++) {
        // indices
        var a = (tubularSegments + 1) * _j11 + _i240 - 1;
        var b = (tubularSegments + 1) * (_j11 - 1) + _i240 - 1;
        var c = (tubularSegments + 1) * (_j11 - 1) + _i240;
        var d = (tubularSegments + 1) * _j11 + _i240; // faces

        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    } // build geometry


    _this76.setIndex(indices);

    _this76.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this76.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this76.setAttribute('uv', new Float32BufferAttribute(uvs, 2));

    return _this76;
  }

  _createClass(TorusGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
    }
  }]);

  return TorusGeometry;
}(BufferGeometry);

exports.TorusGeometry = exports.TorusBufferGeometry = TorusGeometry;

var TorusKnotGeometry = /*#__PURE__*/function (_BufferGeometry13) {
  _inherits(TorusKnotGeometry, _BufferGeometry13);

  var _super87 = _createSuper(TorusKnotGeometry);

  function TorusKnotGeometry(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
    var _this77;

    _classCallCheck(this, TorusKnotGeometry);

    _this77 = _super87.call(this);
    _this77.type = 'TorusKnotGeometry';
    _this77.parameters = {
      radius: radius,
      tube: tube,
      tubularSegments: tubularSegments,
      radialSegments: radialSegments,
      p: p,
      q: q
    };
    tubularSegments = Math.floor(tubularSegments);
    radialSegments = Math.floor(radialSegments); // buffers

    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = []; // helper variables

    var vertex = new Vector3();
    var normal = new Vector3();
    var P1 = new Vector3();
    var P2 = new Vector3();
    var B = new Vector3();
    var T = new Vector3();
    var N = new Vector3(); // generate vertices, normals and uvs

    for (var _i241 = 0; _i241 <= tubularSegments; ++_i241) {
      // the radian "u" is used to calculate the position on the torus curve of the current tubular segment
      var u = _i241 / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
      // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

      calculatePositionOnCurve(u, p, q, radius, P1);
      calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis

      T.subVectors(P2, P1);
      N.addVectors(P2, P1);
      B.crossVectors(T, N);
      N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it

      B.normalize();
      N.normalize();

      for (var j = 0; j <= radialSegments; ++j) {
        // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
        // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
        var v = j / radialSegments * Math.PI * 2;
        var cx = -tube * Math.cos(v);
        var cy = tube * Math.sin(v); // now calculate the final vertex position.
        // first we orient the extrusion with our basis vectors, then we add it to the current position on the curve

        vertex.x = P1.x + (cx * N.x + cy * B.x);
        vertex.y = P1.y + (cx * N.y + cy * B.y);
        vertex.z = P1.z + (cx * N.z + cy * B.z);
        vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

        normal.subVectors(vertex, P1).normalize();
        normals.push(normal.x, normal.y, normal.z); // uv

        uvs.push(_i241 / tubularSegments);
        uvs.push(j / radialSegments);
      }
    } // generate indices


    for (var _j12 = 1; _j12 <= tubularSegments; _j12++) {
      for (var _i242 = 1; _i242 <= radialSegments; _i242++) {
        // indices
        var a = (radialSegments + 1) * (_j12 - 1) + (_i242 - 1);
        var b = (radialSegments + 1) * _j12 + (_i242 - 1);
        var c = (radialSegments + 1) * _j12 + _i242;
        var d = (radialSegments + 1) * (_j12 - 1) + _i242; // faces

        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    } // build geometry


    _this77.setIndex(indices);

    _this77.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this77.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this77.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve


    function calculatePositionOnCurve(u, p, q, radius, position) {
      var cu = Math.cos(u);
      var su = Math.sin(u);
      var quOverP = q / p * u;
      var cs = Math.cos(quOverP);
      position.x = radius * (2 + cs) * 0.5 * cu;
      position.y = radius * (2 + cs) * su * 0.5;
      position.z = radius * Math.sin(quOverP) * 0.5;
    }

    return _this77;
  }

  _createClass(TorusKnotGeometry, null, [{
    key: "fromJSON",
    value: function fromJSON(data) {
      return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
    }
  }]);

  return TorusKnotGeometry;
}(BufferGeometry);

exports.TorusKnotGeometry = exports.TorusKnotBufferGeometry = TorusKnotGeometry;

var TubeGeometry = /*#__PURE__*/function (_BufferGeometry14) {
  _inherits(TubeGeometry, _BufferGeometry14);

  var _super88 = _createSuper(TubeGeometry);

  function TubeGeometry(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
    var _this78;

    _classCallCheck(this, TubeGeometry);

    _this78 = _super88.call(this);
    _this78.type = 'TubeGeometry';
    _this78.parameters = {
      path: path,
      tubularSegments: tubularSegments,
      radius: radius,
      radialSegments: radialSegments,
      closed: closed
    };
    var frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals

    _this78.tangents = frames.tangents;
    _this78.normals = frames.normals;
    _this78.binormals = frames.binormals; // helper variables

    var vertex = new Vector3();
    var normal = new Vector3();
    var uv = new Vector2();
    var P = new Vector3(); // buffer

    var vertices = [];
    var normals = [];
    var uvs = [];
    var indices = []; // create buffer data

    generateBufferData(); // build geometry

    _this78.setIndex(indices);

    _this78.setAttribute('position', new Float32BufferAttribute(vertices, 3));

    _this78.setAttribute('normal', new Float32BufferAttribute(normals, 3));

    _this78.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions


    function generateBufferData() {
      for (var _i243 = 0; _i243 < tubularSegments; _i243++) {
        generateSegment(_i243);
      } // if the geometry is not closed, generate the last row of vertices and normals
      // at the regular position on the given path
      //
      // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)


      generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.
      // this makes it easy compute correct values for closed geometries

      generateUVs(); // finally create faces

      generateIndices();
    }

    function generateSegment(i) {
      // we use getPointAt to sample evenly distributed points from the given path
      P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal

      var N = frames.normals[i];
      var B = frames.binormals[i]; // generate normals and vertices for the current segment

      for (var j = 0; j <= radialSegments; j++) {
        var v = j / radialSegments * Math.PI * 2;
        var sin = Math.sin(v);
        var cos = -Math.cos(v); // normal

        normal.x = cos * N.x + sin * B.x;
        normal.y = cos * N.y + sin * B.y;
        normal.z = cos * N.z + sin * B.z;
        normal.normalize();
        normals.push(normal.x, normal.y, normal.z); // vertex

        vertex.x = P.x + radius * normal.x;
        vertex.y = P.y + radius * normal.y;
        vertex.z = P.z + radius * normal.z;
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
    }

    function generateIndices() {
      for (var j = 1; j <= tubularSegments; j++) {
        for (var _i244 = 1; _i244 <= radialSegments; _i244++) {
          var a = (radialSegments + 1) * (j - 1) + (_i244 - 1);
          var b = (radialSegments + 1) * j + (_i244 - 1);
          var c = (radialSegments + 1) * j + _i244;
          var d = (radialSegments + 1) * (j - 1) + _i244; // faces

          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
    }

    function generateUVs() {
      for (var _i245 = 0; _i245 <= tubularSegments; _i245++) {
        for (var j = 0; j <= radialSegments; j++) {
          uv.x = _i245 / tubularSegments;
          uv.y = j / radialSegments;
          uvs.push(uv.x, uv.y);
        }
      }
    }

    return _this78;
  }

  _createClass(TubeGeometry, [{
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(TubeGeometry.prototype), "toJSON", this).call(this);

      data.path = this.parameters.path.toJSON();
      return data;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(data) {
      // This only works for built-in curves (e.g. CatmullRomCurve3).
      // User defined curves or instances of CurvePath will not be deserialized.
      return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
    }
  }]);

  return TubeGeometry;
}(BufferGeometry);

exports.TubeGeometry = exports.TubeBufferGeometry = TubeGeometry;

var WireframeGeometry = /*#__PURE__*/function (_BufferGeometry15) {
  _inherits(WireframeGeometry, _BufferGeometry15);

  var _super89 = _createSuper(WireframeGeometry);

  function WireframeGeometry(geometry = null) {
    var _this79;

    _classCallCheck(this, WireframeGeometry);

    _this79 = _super89.call(this);
    _this79.type = 'WireframeGeometry';
    _this79.parameters = {
      geometry: geometry
    };

    if (geometry !== null) {
      // buffer
      var vertices = [];
      var edges = new Set(); // helper variables

      var start = new Vector3();
      var end = new Vector3();

      if (geometry.index !== null) {
        // indexed BufferGeometry
        var position = geometry.attributes.position;
        var indices = geometry.index;
        var groups = geometry.groups;

        if (groups.length === 0) {
          groups = [{
            start: 0,
            count: indices.count,
            materialIndex: 0
          }];
        } // create a data structure that contains all edges without duplicates


        for (var o = 0, ol = groups.length; o < ol; ++o) {
          var group = groups[o];
          var groupStart = group.start;
          var groupCount = group.count;

          for (var _i246 = groupStart, l = groupStart + groupCount; _i246 < l; _i246 += 3) {
            for (var j = 0; j < 3; j++) {
              var index1 = indices.getX(_i246 + j);
              var index2 = indices.getX(_i246 + (j + 1) % 3);
              start.fromBufferAttribute(position, index1);
              end.fromBufferAttribute(position, index2);

              if (isUniqueEdge(start, end, edges) === true) {
                vertices.push(start.x, start.y, start.z);
                vertices.push(end.x, end.y, end.z);
              }
            }
          }
        }
      } else {
        // non-indexed BufferGeometry
        var _position2 = geometry.attributes.position;

        for (var _i247 = 0, _l11 = _position2.count / 3; _i247 < _l11; _i247++) {
          for (var _j13 = 0; _j13 < 3; _j13++) {
            // three edges per triangle, an edge is represented as (index1, index2)
            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
            var _index = 3 * _i247 + _j13;

            var _index2 = 3 * _i247 + (_j13 + 1) % 3;

            start.fromBufferAttribute(_position2, _index);
            end.fromBufferAttribute(_position2, _index2);

            if (isUniqueEdge(start, end, edges) === true) {
              vertices.push(start.x, start.y, start.z);
              vertices.push(end.x, end.y, end.z);
            }
          }
        }
      } // build geometry


      _this79.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    }

    return _this79;
  }

  return _createClass(WireframeGeometry);
}(BufferGeometry);

exports.WireframeGeometry = WireframeGeometry;

function isUniqueEdge(start, end, edges) {
  var hash1 = "".concat(start.x, ",").concat(start.y, ",").concat(start.z, "-").concat(end.x, ",").concat(end.y, ",").concat(end.z);
  var hash2 = "".concat(end.x, ",").concat(end.y, ",").concat(end.z, "-").concat(start.x, ",").concat(start.y, ",").concat(start.z); // coincident edge

  if (edges.has(hash1) === true || edges.has(hash2) === true) {
    return false;
  } else {
    edges.add(hash1);
    edges.add(hash2);
    return true;
  }
}

var Geometries = /*#__PURE__*/Object.freeze({
  __proto__: null,
  BoxGeometry: BoxGeometry,
  BoxBufferGeometry: BoxGeometry,
  CapsuleGeometry: CapsuleGeometry,
  CapsuleBufferGeometry: CapsuleGeometry,
  CircleGeometry: CircleGeometry,
  CircleBufferGeometry: CircleGeometry,
  ConeGeometry: ConeGeometry,
  ConeBufferGeometry: ConeGeometry,
  CylinderGeometry: CylinderGeometry,
  CylinderBufferGeometry: CylinderGeometry,
  DodecahedronGeometry: DodecahedronGeometry,
  DodecahedronBufferGeometry: DodecahedronGeometry,
  EdgesGeometry: EdgesGeometry,
  ExtrudeGeometry: ExtrudeGeometry,
  ExtrudeBufferGeometry: ExtrudeGeometry,
  IcosahedronGeometry: IcosahedronGeometry,
  IcosahedronBufferGeometry: IcosahedronGeometry,
  LatheGeometry: LatheGeometry,
  LatheBufferGeometry: LatheGeometry,
  OctahedronGeometry: OctahedronGeometry,
  OctahedronBufferGeometry: OctahedronGeometry,
  PlaneGeometry: PlaneGeometry,
  PlaneBufferGeometry: PlaneGeometry,
  PolyhedronGeometry: PolyhedronGeometry,
  PolyhedronBufferGeometry: PolyhedronGeometry,
  RingGeometry: RingGeometry,
  RingBufferGeometry: RingGeometry,
  ShapeGeometry: ShapeGeometry,
  ShapeBufferGeometry: ShapeGeometry,
  SphereGeometry: SphereGeometry,
  SphereBufferGeometry: SphereGeometry,
  TetrahedronGeometry: TetrahedronGeometry,
  TetrahedronBufferGeometry: TetrahedronGeometry,
  TorusGeometry: TorusGeometry,
  TorusBufferGeometry: TorusGeometry,
  TorusKnotGeometry: TorusKnotGeometry,
  TorusKnotBufferGeometry: TorusKnotGeometry,
  TubeGeometry: TubeGeometry,
  TubeBufferGeometry: TubeGeometry,
  WireframeGeometry: WireframeGeometry
});

var ShadowMaterial = /*#__PURE__*/function (_Material8) {
  _inherits(ShadowMaterial, _Material8);

  var _super90 = _createSuper(ShadowMaterial);

  function ShadowMaterial(parameters) {
    var _this80;

    _classCallCheck(this, ShadowMaterial);

    _this80 = _super90.call(this);
    _this80.type = 'ShadowMaterial';
    _this80.color = new Color(0x000000);
    _this80.transparent = true;

    _this80.setValues(parameters);

    return _this80;
  }

  _createClass(ShadowMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(ShadowMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      return this;
    }
  }]);

  return ShadowMaterial;
}(Material);

exports.ShadowMaterial = ShadowMaterial;
ShadowMaterial.prototype.isShadowMaterial = true;

var RawShaderMaterial = /*#__PURE__*/function (_ShaderMaterial) {
  _inherits(RawShaderMaterial, _ShaderMaterial);

  var _super91 = _createSuper(RawShaderMaterial);

  function RawShaderMaterial(parameters) {
    var _this81;

    _classCallCheck(this, RawShaderMaterial);

    _this81 = _super91.call(this, parameters);
    _this81.type = 'RawShaderMaterial';
    return _this81;
  }

  return _createClass(RawShaderMaterial);
}(ShaderMaterial);

exports.RawShaderMaterial = RawShaderMaterial;
RawShaderMaterial.prototype.isRawShaderMaterial = true;

var MeshStandardMaterial = /*#__PURE__*/function (_Material9) {
  _inherits(MeshStandardMaterial, _Material9);

  var _super92 = _createSuper(MeshStandardMaterial);

  function MeshStandardMaterial(parameters) {
    var _this82;

    _classCallCheck(this, MeshStandardMaterial);

    _this82 = _super92.call(this);
    _this82.defines = {
      'STANDARD': ''
    };
    _this82.type = 'MeshStandardMaterial';
    _this82.color = new Color(0xffffff); // diffuse

    _this82.roughness = 1.0;
    _this82.metalness = 0.0;
    _this82.map = null;
    _this82.lightMap = null;
    _this82.lightMapIntensity = 1.0;
    _this82.aoMap = null;
    _this82.aoMapIntensity = 1.0;
    _this82.emissive = new Color(0x000000);
    _this82.emissiveIntensity = 1.0;
    _this82.emissiveMap = null;
    _this82.bumpMap = null;
    _this82.bumpScale = 1;
    _this82.normalMap = null;
    _this82.normalMapType = TangentSpaceNormalMap;
    _this82.normalScale = new Vector2(1, 1);
    _this82.displacementMap = null;
    _this82.displacementScale = 1;
    _this82.displacementBias = 0;
    _this82.roughnessMap = null;
    _this82.metalnessMap = null;
    _this82.alphaMap = null;
    _this82.envMap = null;
    _this82.envMapIntensity = 1.0;
    _this82.wireframe = false;
    _this82.wireframeLinewidth = 1;
    _this82.wireframeLinecap = 'round';
    _this82.wireframeLinejoin = 'round';
    _this82.flatShading = false;

    _this82.setValues(parameters);

    return _this82;
  }

  _createClass(MeshStandardMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshStandardMaterial.prototype), "copy", this).call(this, source);

      this.defines = {
        'STANDARD': ''
      };
      this.color.copy(source.color);
      this.roughness = source.roughness;
      this.metalness = source.metalness;
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.roughnessMap = source.roughnessMap;
      this.metalnessMap = source.metalnessMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapIntensity = source.envMapIntensity;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      return this;
    }
  }]);

  return MeshStandardMaterial;
}(Material);

exports.MeshStandardMaterial = MeshStandardMaterial;
MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

var MeshPhysicalMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {
  _inherits(MeshPhysicalMaterial, _MeshStandardMaterial);

  var _super93 = _createSuper(MeshPhysicalMaterial);

  function MeshPhysicalMaterial(parameters) {
    var _this83;

    _classCallCheck(this, MeshPhysicalMaterial);

    _this83 = _super93.call(this);
    _this83.defines = {
      'STANDARD': '',
      'PHYSICAL': ''
    };
    _this83.type = 'MeshPhysicalMaterial';
    _this83.clearcoatMap = null;
    _this83.clearcoatRoughness = 0.0;
    _this83.clearcoatRoughnessMap = null;
    _this83.clearcoatNormalScale = new Vector2(1, 1);
    _this83.clearcoatNormalMap = null;
    _this83.ior = 1.5;
    Object.defineProperty(_assertThisInitialized(_this83), 'reflectivity', {
      get: function get() {
        return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function set(reflectivity) {
        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
      }
    });
    _this83.sheenColor = new Color(0x000000);
    _this83.sheenColorMap = null;
    _this83.sheenRoughness = 1.0;
    _this83.sheenRoughnessMap = null;
    _this83.transmissionMap = null;
    _this83.thickness = 0;
    _this83.thicknessMap = null;
    _this83.attenuationDistance = 0.0;
    _this83.attenuationColor = new Color(1, 1, 1);
    _this83.specularIntensity = 1.0;
    _this83.specularIntensityMap = null;
    _this83.specularColor = new Color(1, 1, 1);
    _this83.specularColorMap = null;
    _this83._sheen = 0.0;
    _this83._clearcoat = 0;
    _this83._transmission = 0;

    _this83.setValues(parameters);

    return _this83;
  }

  _createClass(MeshPhysicalMaterial, [{
    key: "sheen",
    get: function get() {
      return this._sheen;
    },
    set: function set(value) {
      if (this._sheen > 0 !== value > 0) {
        this.version++;
      }

      this._sheen = value;
    }
  }, {
    key: "clearcoat",
    get: function get() {
      return this._clearcoat;
    },
    set: function set(value) {
      if (this._clearcoat > 0 !== value > 0) {
        this.version++;
      }

      this._clearcoat = value;
    }
  }, {
    key: "transmission",
    get: function get() {
      return this._transmission;
    },
    set: function set(value) {
      if (this._transmission > 0 !== value > 0) {
        this.version++;
      }

      this._transmission = value;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshPhysicalMaterial.prototype), "copy", this).call(this, source);

      this.defines = {
        'STANDARD': '',
        'PHYSICAL': ''
      };
      this.clearcoat = source.clearcoat;
      this.clearcoatMap = source.clearcoatMap;
      this.clearcoatRoughness = source.clearcoatRoughness;
      this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
      this.clearcoatNormalMap = source.clearcoatNormalMap;
      this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
      this.ior = source.ior;
      this.sheen = source.sheen;
      this.sheenColor.copy(source.sheenColor);
      this.sheenColorMap = source.sheenColorMap;
      this.sheenRoughness = source.sheenRoughness;
      this.sheenRoughnessMap = source.sheenRoughnessMap;
      this.transmission = source.transmission;
      this.transmissionMap = source.transmissionMap;
      this.thickness = source.thickness;
      this.thicknessMap = source.thicknessMap;
      this.attenuationDistance = source.attenuationDistance;
      this.attenuationColor.copy(source.attenuationColor);
      this.specularIntensity = source.specularIntensity;
      this.specularIntensityMap = source.specularIntensityMap;
      this.specularColor.copy(source.specularColor);
      this.specularColorMap = source.specularColorMap;
      return this;
    }
  }]);

  return MeshPhysicalMaterial;
}(MeshStandardMaterial);

exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

var MeshPhongMaterial = /*#__PURE__*/function (_Material10) {
  _inherits(MeshPhongMaterial, _Material10);

  var _super94 = _createSuper(MeshPhongMaterial);

  function MeshPhongMaterial(parameters) {
    var _this84;

    _classCallCheck(this, MeshPhongMaterial);

    _this84 = _super94.call(this);
    _this84.type = 'MeshPhongMaterial';
    _this84.color = new Color(0xffffff); // diffuse

    _this84.specular = new Color(0x111111);
    _this84.shininess = 30;
    _this84.map = null;
    _this84.lightMap = null;
    _this84.lightMapIntensity = 1.0;
    _this84.aoMap = null;
    _this84.aoMapIntensity = 1.0;
    _this84.emissive = new Color(0x000000);
    _this84.emissiveIntensity = 1.0;
    _this84.emissiveMap = null;
    _this84.bumpMap = null;
    _this84.bumpScale = 1;
    _this84.normalMap = null;
    _this84.normalMapType = TangentSpaceNormalMap;
    _this84.normalScale = new Vector2(1, 1);
    _this84.displacementMap = null;
    _this84.displacementScale = 1;
    _this84.displacementBias = 0;
    _this84.specularMap = null;
    _this84.alphaMap = null;
    _this84.envMap = null;
    _this84.combine = MultiplyOperation;
    _this84.reflectivity = 1;
    _this84.refractionRatio = 0.98;
    _this84.wireframe = false;
    _this84.wireframeLinewidth = 1;
    _this84.wireframeLinecap = 'round';
    _this84.wireframeLinejoin = 'round';
    _this84.flatShading = false;

    _this84.setValues(parameters);

    return _this84;
  }

  _createClass(MeshPhongMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshPhongMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.specular.copy(source.specular);
      this.shininess = source.shininess;
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      return this;
    }
  }]);

  return MeshPhongMaterial;
}(Material);

exports.MeshPhongMaterial = MeshPhongMaterial;
MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

var MeshToonMaterial = /*#__PURE__*/function (_Material11) {
  _inherits(MeshToonMaterial, _Material11);

  var _super95 = _createSuper(MeshToonMaterial);

  function MeshToonMaterial(parameters) {
    var _this85;

    _classCallCheck(this, MeshToonMaterial);

    _this85 = _super95.call(this);
    _this85.defines = {
      'TOON': ''
    };
    _this85.type = 'MeshToonMaterial';
    _this85.color = new Color(0xffffff);
    _this85.map = null;
    _this85.gradientMap = null;
    _this85.lightMap = null;
    _this85.lightMapIntensity = 1.0;
    _this85.aoMap = null;
    _this85.aoMapIntensity = 1.0;
    _this85.emissive = new Color(0x000000);
    _this85.emissiveIntensity = 1.0;
    _this85.emissiveMap = null;
    _this85.bumpMap = null;
    _this85.bumpScale = 1;
    _this85.normalMap = null;
    _this85.normalMapType = TangentSpaceNormalMap;
    _this85.normalScale = new Vector2(1, 1);
    _this85.displacementMap = null;
    _this85.displacementScale = 1;
    _this85.displacementBias = 0;
    _this85.alphaMap = null;
    _this85.wireframe = false;
    _this85.wireframeLinewidth = 1;
    _this85.wireframeLinecap = 'round';
    _this85.wireframeLinejoin = 'round';

    _this85.setValues(parameters);

    return _this85;
  }

  _createClass(MeshToonMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshToonMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.map = source.map;
      this.gradientMap = source.gradientMap;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.alphaMap = source.alphaMap;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      return this;
    }
  }]);

  return MeshToonMaterial;
}(Material);

exports.MeshToonMaterial = MeshToonMaterial;
MeshToonMaterial.prototype.isMeshToonMaterial = true;

var MeshNormalMaterial = /*#__PURE__*/function (_Material12) {
  _inherits(MeshNormalMaterial, _Material12);

  var _super96 = _createSuper(MeshNormalMaterial);

  function MeshNormalMaterial(parameters) {
    var _this86;

    _classCallCheck(this, MeshNormalMaterial);

    _this86 = _super96.call(this);
    _this86.type = 'MeshNormalMaterial';
    _this86.bumpMap = null;
    _this86.bumpScale = 1;
    _this86.normalMap = null;
    _this86.normalMapType = TangentSpaceNormalMap;
    _this86.normalScale = new Vector2(1, 1);
    _this86.displacementMap = null;
    _this86.displacementScale = 1;
    _this86.displacementBias = 0;
    _this86.wireframe = false;
    _this86.wireframeLinewidth = 1;
    _this86.fog = false;
    _this86.flatShading = false;

    _this86.setValues(parameters);

    return _this86;
  }

  _createClass(MeshNormalMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshNormalMaterial.prototype), "copy", this).call(this, source);

      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.flatShading = source.flatShading;
      return this;
    }
  }]);

  return MeshNormalMaterial;
}(Material);

exports.MeshNormalMaterial = MeshNormalMaterial;
MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

var MeshLambertMaterial = /*#__PURE__*/function (_Material13) {
  _inherits(MeshLambertMaterial, _Material13);

  var _super97 = _createSuper(MeshLambertMaterial);

  function MeshLambertMaterial(parameters) {
    var _this87;

    _classCallCheck(this, MeshLambertMaterial);

    _this87 = _super97.call(this);
    _this87.type = 'MeshLambertMaterial';
    _this87.color = new Color(0xffffff); // diffuse

    _this87.map = null;
    _this87.lightMap = null;
    _this87.lightMapIntensity = 1.0;
    _this87.aoMap = null;
    _this87.aoMapIntensity = 1.0;
    _this87.emissive = new Color(0x000000);
    _this87.emissiveIntensity = 1.0;
    _this87.emissiveMap = null;
    _this87.specularMap = null;
    _this87.alphaMap = null;
    _this87.envMap = null;
    _this87.combine = MultiplyOperation;
    _this87.reflectivity = 1;
    _this87.refractionRatio = 0.98;
    _this87.wireframe = false;
    _this87.wireframeLinewidth = 1;
    _this87.wireframeLinecap = 'round';
    _this87.wireframeLinejoin = 'round';

    _this87.setValues(parameters);

    return _this87;
  }

  _createClass(MeshLambertMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshLambertMaterial.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      return this;
    }
  }]);

  return MeshLambertMaterial;
}(Material);

exports.MeshLambertMaterial = MeshLambertMaterial;
MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

var MeshMatcapMaterial = /*#__PURE__*/function (_Material14) {
  _inherits(MeshMatcapMaterial, _Material14);

  var _super98 = _createSuper(MeshMatcapMaterial);

  function MeshMatcapMaterial(parameters) {
    var _this88;

    _classCallCheck(this, MeshMatcapMaterial);

    _this88 = _super98.call(this);
    _this88.defines = {
      'MATCAP': ''
    };
    _this88.type = 'MeshMatcapMaterial';
    _this88.color = new Color(0xffffff); // diffuse

    _this88.matcap = null;
    _this88.map = null;
    _this88.bumpMap = null;
    _this88.bumpScale = 1;
    _this88.normalMap = null;
    _this88.normalMapType = TangentSpaceNormalMap;
    _this88.normalScale = new Vector2(1, 1);
    _this88.displacementMap = null;
    _this88.displacementScale = 1;
    _this88.displacementBias = 0;
    _this88.alphaMap = null;
    _this88.flatShading = false;

    _this88.setValues(parameters);

    return _this88;
  }

  _createClass(MeshMatcapMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(MeshMatcapMaterial.prototype), "copy", this).call(this, source);

      this.defines = {
        'MATCAP': ''
      };
      this.color.copy(source.color);
      this.matcap = source.matcap;
      this.map = source.map;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.alphaMap = source.alphaMap;
      this.flatShading = source.flatShading;
      return this;
    }
  }]);

  return MeshMatcapMaterial;
}(Material);

exports.MeshMatcapMaterial = MeshMatcapMaterial;
MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

var LineDashedMaterial = /*#__PURE__*/function (_LineBasicMaterial) {
  _inherits(LineDashedMaterial, _LineBasicMaterial);

  var _super99 = _createSuper(LineDashedMaterial);

  function LineDashedMaterial(parameters) {
    var _this89;

    _classCallCheck(this, LineDashedMaterial);

    _this89 = _super99.call(this);
    _this89.type = 'LineDashedMaterial';
    _this89.scale = 1;
    _this89.dashSize = 3;
    _this89.gapSize = 1;

    _this89.setValues(parameters);

    return _this89;
  }

  _createClass(LineDashedMaterial, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(LineDashedMaterial.prototype), "copy", this).call(this, source);

      this.scale = source.scale;
      this.dashSize = source.dashSize;
      this.gapSize = source.gapSize;
      return this;
    }
  }]);

  return LineDashedMaterial;
}(LineBasicMaterial);

exports.LineDashedMaterial = LineDashedMaterial;
LineDashedMaterial.prototype.isLineDashedMaterial = true;
var materialLib = {
  ShadowMaterial: ShadowMaterial,
  SpriteMaterial: SpriteMaterial,
  RawShaderMaterial: RawShaderMaterial,
  ShaderMaterial: ShaderMaterial,
  PointsMaterial: PointsMaterial,
  MeshPhysicalMaterial: MeshPhysicalMaterial,
  MeshStandardMaterial: MeshStandardMaterial,
  MeshPhongMaterial: MeshPhongMaterial,
  MeshToonMaterial: MeshToonMaterial,
  MeshNormalMaterial: MeshNormalMaterial,
  MeshLambertMaterial: MeshLambertMaterial,
  MeshDepthMaterial: MeshDepthMaterial,
  MeshDistanceMaterial: MeshDistanceMaterial,
  MeshBasicMaterial: MeshBasicMaterial,
  MeshMatcapMaterial: MeshMatcapMaterial,
  LineDashedMaterial: LineDashedMaterial,
  LineBasicMaterial: LineBasicMaterial,
  Material: Material
};

Material.fromType = function (type) {
  return new materialLib[type]();
};

var AnimationUtils = {
  // same as Array.prototype.slice, but also works on typed arrays
  arraySlice: function arraySlice(array, from, to) {
    if (AnimationUtils.isTypedArray(array)) {
      // in ios9 array.subarray(from, undefined) will return empty array
      // but array.subarray(from) or array.subarray(from, len) is correct
      return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
    }

    return array.slice(from, to);
  },
  // converts an array to a specific type
  convertArray: function convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type) return array;

    if (typeof type.BYTES_PER_ELEMENT === 'number') {
      return new type(array); // create typed array
    }

    return Array.prototype.slice.call(array); // create Array
  },
  isTypedArray: function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  },
  // returns an array by which times and values can be sorted
  getKeyframeOrder: function getKeyframeOrder(times) {
    function compareTime(i, j) {
      return times[i] - times[j];
    }

    var n = times.length;
    var result = new Array(n);

    for (var _i248 = 0; _i248 !== n; ++_i248) {
      result[_i248] = _i248;
    }

    result.sort(compareTime);
    return result;
  },
  // uses the array previously returned by 'getKeyframeOrder' to sort data
  sortedArray: function sortedArray(values, stride, order) {
    var nValues = values.length;
    var result = new values.constructor(nValues);

    for (var _i249 = 0, dstOffset = 0; dstOffset !== nValues; ++_i249) {
      var srcOffset = order[_i249] * stride;

      for (var j = 0; j !== stride; ++j) {
        result[dstOffset++] = values[srcOffset + j];
      }
    }

    return result;
  },
  // function for parsing AOS keyframe formats
  flattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {
    var i = 1,
        key = jsonKeys[0];

    while (key !== undefined && key[valuePropertyName] === undefined) {
      key = jsonKeys[i++];
    }

    if (key === undefined) return; // no data

    var value = key[valuePropertyName];
    if (value === undefined) return; // no data

    if (Array.isArray(value)) {
      do {
        value = key[valuePropertyName];

        if (value !== undefined) {
          times.push(key.time);
          values.push.apply(values, value); // push all elements
        }

        key = jsonKeys[i++];
      } while (key !== undefined);
    } else if (value.toArray !== undefined) {
      // ...assume THREE.Math-ish
      do {
        value = key[valuePropertyName];

        if (value !== undefined) {
          times.push(key.time);
          value.toArray(values, values.length);
        }

        key = jsonKeys[i++];
      } while (key !== undefined);
    } else {
      // otherwise push as-is
      do {
        value = key[valuePropertyName];

        if (value !== undefined) {
          times.push(key.time);
          values.push(value);
        }

        key = jsonKeys[i++];
      } while (key !== undefined);
    }
  },
  subclip: function subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
    var clip = sourceClip.clone();
    clip.name = name;
    var tracks = [];

    for (var _i250 = 0; _i250 < clip.tracks.length; ++_i250) {
      var track = clip.tracks[_i250];
      var valueSize = track.getValueSize();
      var times = [];
      var values = [];

      for (var j = 0; j < track.times.length; ++j) {
        var frame = track.times[j] * fps;
        if (frame < startFrame || frame >= endFrame) continue;
        times.push(track.times[j]);

        for (var k = 0; k < valueSize; ++k) {
          values.push(track.values[j * valueSize + k]);
        }
      }

      if (times.length === 0) continue;
      track.times = AnimationUtils.convertArray(times, track.times.constructor);
      track.values = AnimationUtils.convertArray(values, track.values.constructor);
      tracks.push(track);
    }

    clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip

    var minStartTime = Infinity;

    for (var _i251 = 0; _i251 < clip.tracks.length; ++_i251) {
      if (minStartTime > clip.tracks[_i251].times[0]) {
        minStartTime = clip.tracks[_i251].times[0];
      }
    } // shift all tracks such that clip begins at t=0


    for (var _i252 = 0; _i252 < clip.tracks.length; ++_i252) {
      clip.tracks[_i252].shift(-1 * minStartTime);
    }

    clip.resetDuration();
    return clip;
  },
  makeClipAdditive: function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
    if (fps <= 0) fps = 30;
    var numTracks = referenceClip.tracks.length;
    var referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame

    var _loop = function _loop(_i253) {
      var referenceTrack = referenceClip.tracks[_i253];
      var referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric

      if (referenceTrackType === 'bool' || referenceTrackType === 'string') return "continue"; // Find the track in the target clip whose name and type matches the reference track

      var targetTrack = targetClip.tracks.find(function (track) {
        return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
      });
      if (targetTrack === undefined) return "continue";
      var referenceOffset = 0;
      var referenceValueSize = referenceTrack.getValueSize();

      if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        referenceOffset = referenceValueSize / 3;
      }

      var targetOffset = 0;
      var targetValueSize = targetTrack.getValueSize();

      if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        targetOffset = targetValueSize / 3;
      }

      var lastIndex = referenceTrack.times.length - 1;
      var referenceValue = void 0; // Find the value to subtract out of the track

      if (referenceTime <= referenceTrack.times[0]) {
        // Reference frame is earlier than the first keyframe, so just use the first keyframe
        var startIndex = referenceOffset;
        var endIndex = referenceValueSize - referenceOffset;
        referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
      } else if (referenceTime >= referenceTrack.times[lastIndex]) {
        // Reference frame is after the last keyframe, so just use the last keyframe
        var _startIndex = lastIndex * referenceValueSize + referenceOffset;

        var _endIndex = _startIndex + referenceValueSize - referenceOffset;

        referenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);
      } else {
        // Interpolate to the reference value
        var interpolant = referenceTrack.createInterpolant();
        var _startIndex2 = referenceOffset;

        var _endIndex2 = referenceValueSize - referenceOffset;

        interpolant.evaluate(referenceTime);
        referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);
      } // Conjugate the quaternion


      if (referenceTrackType === 'quaternion') {
        var referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
        referenceQuat.toArray(referenceValue);
      } // Subtract the reference value from all of the track values


      var numTimes = targetTrack.times.length;

      for (var j = 0; j < numTimes; ++j) {
        var valueStart = j * targetValueSize + targetOffset;

        if (referenceTrackType === 'quaternion') {
          // Multiply the conjugate for quaternion track types
          Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
        } else {
          var valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types

          for (var k = 0; k < valueEnd; ++k) {
            targetTrack.values[valueStart + k] -= referenceValue[k];
          }
        }
      }
    };

    for (var _i253 = 0; _i253 < numTracks; ++_i253) {
      var _ret = _loop(_i253);

      if (_ret === "continue") continue;
    }

    targetClip.blendMode = AdditiveAnimationBlendMode;
    return targetClip;
  }
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */

exports.AnimationUtils = AnimationUtils;

var Interpolant = /*#__PURE__*/function () {
  function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    _classCallCheck(this, Interpolant);

    this.parameterPositions = parameterPositions;
    this._cachedIndex = 0;
    this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
    this.sampleValues = sampleValues;
    this.valueSize = sampleSize;
    this.settings = null;
    this.DefaultSettings_ = {};
  }

  _createClass(Interpolant, [{
    key: "evaluate",
    value: function evaluate(t) {
      var pp = this.parameterPositions;
      var i1 = this._cachedIndex,
          t1 = pp[i1],
          t0 = pp[i1 - 1];

      validate_interval: {
        seek: {
          var right;

          linear_scan: {
            //- See http://jsperf.com/comparison-to-undefined/3
            //- slower code:
            //-
            //- 				if ( t >= t1 || t1 === undefined ) {
            forward_scan: if (!(t < t1)) {
              for (var giveUpAt = i1 + 2;;) {
                if (t1 === undefined) {
                  if (t < t0) break forward_scan; // after end

                  i1 = pp.length;
                  this._cachedIndex = i1;
                  return this.afterEnd_(i1 - 1, t, t0);
                }

                if (i1 === giveUpAt) break; // this loop

                t0 = t1;
                t1 = pp[++i1];

                if (t < t1) {
                  // we have arrived at the sought interval
                  break seek;
                }
              } // prepare binary search on the right side of the index


              right = pp.length;
              break linear_scan;
            } //- slower code:
            //-					if ( t < t0 || t0 === undefined ) {


            if (!(t >= t0)) {
              // looping?
              var t1global = pp[1];

              if (t < t1global) {
                i1 = 2; // + 1, using the scan for the details

                t0 = t1global;
              } // linear reverse scan


              for (var _giveUpAt = i1 - 2;;) {
                if (t0 === undefined) {
                  // before start
                  this._cachedIndex = 0;
                  return this.beforeStart_(0, t, t1);
                }

                if (i1 === _giveUpAt) break; // this loop

                t1 = t0;
                t0 = pp[--i1 - 1];

                if (t >= t0) {
                  // we have arrived at the sought interval
                  break seek;
                }
              } // prepare binary search on the left side of the index


              right = i1;
              i1 = 0;
              break linear_scan;
            } // the interval is valid


            break validate_interval;
          } // linear scan
          // binary search


          while (i1 < right) {
            var mid = i1 + right >>> 1;

            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }

          t1 = pp[i1];
          t0 = pp[i1 - 1]; // check boundary cases, again

          if (t0 === undefined) {
            this._cachedIndex = 0;
            return this.beforeStart_(0, t, t1);
          }

          if (t1 === undefined) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.afterEnd_(i1 - 1, t0, t);
          }
        } // seek


        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      } // validate_interval


      return this.interpolate_(i1, t0, t, t1);
    }
  }, {
    key: "getSettings_",
    value: function getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
  }, {
    key: "copySampleValue_",
    value: function copySampleValue_(index) {
      // copies a sample value to the result buffer
      var result = this.resultBuffer,
          values = this.sampleValues,
          stride = this.valueSize,
          offset = index * stride;

      for (var _i254 = 0; _i254 !== stride; ++_i254) {
        result[_i254] = values[offset + _i254];
      }

      return result;
    } // Template methods for derived classes:

  }, {
    key: "interpolate_",
    value: function
      /* i1, t0, t, t1 */
    interpolate_() {
      throw new Error('call to abstract method'); // implementations shall return this.resultBuffer
    }
  }, {
    key: "intervalChanged_",
    value: function
      /* i1, t0, t1 */
    intervalChanged_() {// empty
    }
  }]);

  return Interpolant;
}(); // ALIAS DEFINITIONS


exports.Interpolant = Interpolant;
Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */

var CubicInterpolant = /*#__PURE__*/function (_Interpolant) {
  _inherits(CubicInterpolant, _Interpolant);

  var _super100 = _createSuper(CubicInterpolant);

  function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    var _this90;

    _classCallCheck(this, CubicInterpolant);

    _this90 = _super100.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    _this90._weightPrev = -0;
    _this90._offsetPrev = -0;
    _this90._weightNext = -0;
    _this90._offsetNext = -0;
    _this90.DefaultSettings_ = {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    };
    return _this90;
  }

  _createClass(CubicInterpolant, [{
    key: "intervalChanged_",
    value: function intervalChanged_(i1, t0, t1) {
      var pp = this.parameterPositions;
      var iPrev = i1 - 2,
          iNext = i1 + 1,
          tPrev = pp[iPrev],
          tNext = pp[iNext];

      if (tPrev === undefined) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            // f'(t0) = 0
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;

          case WrapAroundEnding:
            // use the other end of the curve
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;

          default:
            // ZeroCurvatureEnding
            // f''(t0) = 0 a.k.a. Natural Spline
            iPrev = i1;
            tPrev = t1;
        }
      }

      if (tNext === undefined) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            // f'(tN) = 0
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;

          case WrapAroundEnding:
            // use the other end of the curve
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;

          default:
            // ZeroCurvatureEnding
            // f''(tN) = 0, a.k.a. Natural Spline
            iNext = i1 - 1;
            tNext = t0;
        }
      }

      var halfDt = (t1 - t0) * 0.5,
          stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    }
  }, {
    key: "interpolate_",
    value: function interpolate_(i1, t0, t, t1) {
      var result = this.resultBuffer,
          values = this.sampleValues,
          stride = this.valueSize,
          o1 = i1 * stride,
          o0 = o1 - stride,
          oP = this._offsetPrev,
          oN = this._offsetNext,
          wP = this._weightPrev,
          wN = this._weightNext,
          p = (t - t0) / (t1 - t0),
          pp = p * p,
          ppp = pp * p; // evaluate polynomials

      var sP = -wP * ppp + 2 * wP * pp - wP * p;
      var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      var sN = wN * ppp - wN * pp; // combine data linearly

      for (var _i255 = 0; _i255 !== stride; ++_i255) {
        result[_i255] = sP * values[oP + _i255] + s0 * values[o0 + _i255] + s1 * values[o1 + _i255] + sN * values[oN + _i255];
      }

      return result;
    }
  }]);

  return CubicInterpolant;
}(Interpolant);

exports.CubicInterpolant = CubicInterpolant;

var LinearInterpolant = /*#__PURE__*/function (_Interpolant2) {
  _inherits(LinearInterpolant, _Interpolant2);

  var _super101 = _createSuper(LinearInterpolant);

  function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    _classCallCheck(this, LinearInterpolant);

    return _super101.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }

  _createClass(LinearInterpolant, [{
    key: "interpolate_",
    value: function interpolate_(i1, t0, t, t1) {
      var result = this.resultBuffer,
          values = this.sampleValues,
          stride = this.valueSize,
          offset1 = i1 * stride,
          offset0 = offset1 - stride,
          weight1 = (t - t0) / (t1 - t0),
          weight0 = 1 - weight1;

      for (var _i256 = 0; _i256 !== stride; ++_i256) {
        result[_i256] = values[offset0 + _i256] * weight0 + values[offset1 + _i256] * weight1;
      }

      return result;
    }
  }]);

  return LinearInterpolant;
}(Interpolant);
/**
 *
 * Interpolant that evaluates to the sample value at the position preceding
 * the parameter.
 */


exports.LinearInterpolant = LinearInterpolant;

var DiscreteInterpolant = /*#__PURE__*/function (_Interpolant3) {
  _inherits(DiscreteInterpolant, _Interpolant3);

  var _super102 = _createSuper(DiscreteInterpolant);

  function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    _classCallCheck(this, DiscreteInterpolant);

    return _super102.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }

  _createClass(DiscreteInterpolant, [{
    key: "interpolate_",
    value: function interpolate_(i1
    /*, t0, t, t1 */
    ) {
      return this.copySampleValue_(i1 - 1);
    }
  }]);

  return DiscreteInterpolant;
}(Interpolant);

exports.DiscreteInterpolant = DiscreteInterpolant;

var KeyframeTrack = /*#__PURE__*/function () {
  function KeyframeTrack(name, times, values, interpolation) {
    _classCallCheck(this, KeyframeTrack);

    if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');
    if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);
    this.name = name;
    this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
    this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
    this.setInterpolation(interpolation || this.DefaultInterpolation);
  } // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):


  _createClass(KeyframeTrack, [{
    key: "InterpolantFactoryMethodDiscrete",
    value: function InterpolantFactoryMethodDiscrete(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  }, {
    key: "InterpolantFactoryMethodLinear",
    value: function InterpolantFactoryMethodLinear(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  }, {
    key: "InterpolantFactoryMethodSmooth",
    value: function InterpolantFactoryMethodSmooth(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  }, {
    key: "setInterpolation",
    value: function setInterpolation(interpolation) {
      var factoryMethod;

      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;

        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;

        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }

      if (factoryMethod === undefined) {
        var message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;

        if (this.createInterpolant === undefined) {
          // fall back to default, unless the default itself is messed up
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message); // fatal, in this case
          }
        }

        console.warn('THREE.KeyframeTrack:', message);
        return this;
      }

      this.createInterpolant = factoryMethod;
      return this;
    }
  }, {
    key: "getInterpolation",
    value: function getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;

        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;

        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    }
  }, {
    key: "getValueSize",
    value: function getValueSize() {
      return this.values.length / this.times.length;
    } // move all keyframes either forwards or backwards in time

  }, {
    key: "shift",
    value: function shift(timeOffset) {
      if (timeOffset !== 0.0) {
        var times = this.times;

        for (var _i257 = 0, n = times.length; _i257 !== n; ++_i257) {
          times[_i257] += timeOffset;
        }
      }

      return this;
    } // scale all keyframe times by a factor (useful for frame <-> seconds conversions)

  }, {
    key: "scale",
    value: function scale(timeScale) {
      if (timeScale !== 1.0) {
        var times = this.times;

        for (var _i258 = 0, n = times.length; _i258 !== n; ++_i258) {
          times[_i258] *= timeScale;
        }
      }

      return this;
    } // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values

  }, {
    key: "trim",
    value: function trim(startTime, endTime) {
      var times = this.times,
          nKeys = times.length;
      var from = 0,
          to = nKeys - 1;

      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }

      while (to !== -1 && times[to] > endTime) {
        --to;
      }

      ++to; // inclusive -> exclusive bound

      if (from !== 0 || to !== nKeys) {
        // empty tracks are forbidden, so keep at least one keyframe
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }

        var stride = this.getValueSize();
        this.times = AnimationUtils.arraySlice(times, from, to);
        this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
      }

      return this;
    } // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable

  }, {
    key: "validate",
    value: function validate() {
      var valid = true;
      var valueSize = this.getValueSize();

      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
        valid = false;
      }

      var times = this.times,
          values = this.values,
          nKeys = times.length;

      if (nKeys === 0) {
        console.error('THREE.KeyframeTrack: Track is empty.', this);
        valid = false;
      }

      var prevTime = null;

      for (var _i259 = 0; _i259 !== nKeys; _i259++) {
        var currTime = times[_i259];

        if (typeof currTime === 'number' && isNaN(currTime)) {
          console.error('THREE.KeyframeTrack: Time is not a valid number.', this, _i259, currTime);
          valid = false;
          break;
        }

        if (prevTime !== null && prevTime > currTime) {
          console.error('THREE.KeyframeTrack: Out of order keys.', this, _i259, currTime, prevTime);
          valid = false;
          break;
        }

        prevTime = currTime;
      }

      if (values !== undefined) {
        if (AnimationUtils.isTypedArray(values)) {
          for (var _i260 = 0, n = values.length; _i260 !== n; ++_i260) {
            var _value5 = values[_i260];

            if (isNaN(_value5)) {
              console.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i260, _value5);
              valid = false;
              break;
            }
          }
        }
      }

      return valid;
    } // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)

  }, {
    key: "optimize",
    value: function optimize() {
      // times or values may be shared with other tracks, so overwriting is unsafe
      var times = AnimationUtils.arraySlice(this.times),
          values = AnimationUtils.arraySlice(this.values),
          stride = this.getValueSize(),
          smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
          lastIndex = times.length - 1;
      var writeIndex = 1;

      for (var _i261 = 1; _i261 < lastIndex; ++_i261) {
        var keep = false;
        var time = times[_i261];
        var timeNext = times[_i261 + 1]; // remove adjacent keyframes scheduled at the same time

        if (time !== timeNext && (_i261 !== 1 || time !== times[0])) {
          if (!smoothInterpolation) {
            // remove unnecessary keyframes same as their neighbors
            var offset = _i261 * stride,
                offsetP = offset - stride,
                offsetN = offset + stride;

            for (var j = 0; j !== stride; ++j) {
              var _value6 = values[offset + j];

              if (_value6 !== values[offsetP + j] || _value6 !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        } // in-place compaction


        if (keep) {
          if (_i261 !== writeIndex) {
            times[writeIndex] = times[_i261];
            var readOffset = _i261 * stride,
                writeOffset = writeIndex * stride;

            for (var _j14 = 0; _j14 !== stride; ++_j14) {
              values[writeOffset + _j14] = values[readOffset + _j14];
            }
          }

          ++writeIndex;
        }
      } // flush last keyframe (compaction looks ahead)


      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];

        for (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j15 = 0; _j15 !== stride; ++_j15) {
          values[_writeOffset + _j15] = values[_readOffset + _j15];
        }

        ++writeIndex;
      }

      if (writeIndex !== times.length) {
        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      var times = AnimationUtils.arraySlice(this.times, 0);
      var values = AnimationUtils.arraySlice(this.values, 0);
      var TypedKeyframeTrack = this.constructor;
      var track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.

      track.createInterpolant = this.createInterpolant;
      return track;
    }
  }], [{
    key: "toJSON",
    value: function toJSON(track) {
      var trackType = track.constructor;
      var json; // derived classes can define a static toJSON method

      if (trackType.toJSON !== this.toJSON) {
        json = trackType.toJSON(track);
      } else {
        // by default, we assume the data can be serialized as-is
        json = {
          'name': track.name,
          'times': AnimationUtils.convertArray(track.times, Array),
          'values': AnimationUtils.convertArray(track.values, Array)
        };
        var interpolation = track.getInterpolation();

        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }

      json.type = track.ValueTypeName; // mandatory

      return json;
    }
  }]);

  return KeyframeTrack;
}();

exports.KeyframeTrack = KeyframeTrack;
KeyframeTrack.prototype.TimeBufferType = Float32Array;
KeyframeTrack.prototype.ValueBufferType = Float32Array;
KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
/**
 * A Track of Boolean keyframe values.
 */

var BooleanKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {
  _inherits(BooleanKeyframeTrack, _KeyframeTrack);

  var _super103 = _createSuper(BooleanKeyframeTrack);

  function BooleanKeyframeTrack() {
    _classCallCheck(this, BooleanKeyframeTrack);

    return _super103.apply(this, arguments);
  }

  return _createClass(BooleanKeyframeTrack);
}(KeyframeTrack);

exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
BooleanKeyframeTrack.prototype.ValueBufferType = Array;
BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of keyframe values that represent color.
 */

var ColorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack2) {
  _inherits(ColorKeyframeTrack, _KeyframeTrack2);

  var _super104 = _createSuper(ColorKeyframeTrack);

  function ColorKeyframeTrack() {
    _classCallCheck(this, ColorKeyframeTrack);

    return _super104.apply(this, arguments);
  }

  return _createClass(ColorKeyframeTrack);
}(KeyframeTrack);

exports.ColorKeyframeTrack = ColorKeyframeTrack;
ColorKeyframeTrack.prototype.ValueTypeName = 'color';
/**
 * A Track of numeric keyframe values.
 */

var NumberKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack3) {
  _inherits(NumberKeyframeTrack, _KeyframeTrack3);

  var _super105 = _createSuper(NumberKeyframeTrack);

  function NumberKeyframeTrack() {
    _classCallCheck(this, NumberKeyframeTrack);

    return _super105.apply(this, arguments);
  }

  return _createClass(NumberKeyframeTrack);
}(KeyframeTrack);

exports.NumberKeyframeTrack = NumberKeyframeTrack;
NumberKeyframeTrack.prototype.ValueTypeName = 'number';
/**
 * Spherical linear unit quaternion interpolant.
 */

var QuaternionLinearInterpolant = /*#__PURE__*/function (_Interpolant4) {
  _inherits(QuaternionLinearInterpolant, _Interpolant4);

  var _super106 = _createSuper(QuaternionLinearInterpolant);

  function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    _classCallCheck(this, QuaternionLinearInterpolant);

    return _super106.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  }

  _createClass(QuaternionLinearInterpolant, [{
    key: "interpolate_",
    value: function interpolate_(i1, t0, t, t1) {
      var result = this.resultBuffer,
          values = this.sampleValues,
          stride = this.valueSize,
          alpha = (t - t0) / (t1 - t0);
      var offset = i1 * stride;

      for (var end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }

      return result;
    }
  }]);

  return QuaternionLinearInterpolant;
}(Interpolant);
/**
 * A Track of quaternion keyframe values.
 */


exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;

var QuaternionKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack4) {
  _inherits(QuaternionKeyframeTrack, _KeyframeTrack4);

  var _super107 = _createSuper(QuaternionKeyframeTrack);

  function QuaternionKeyframeTrack() {
    _classCallCheck(this, QuaternionKeyframeTrack);

    return _super107.apply(this, arguments);
  }

  _createClass(QuaternionKeyframeTrack, [{
    key: "InterpolantFactoryMethodLinear",
    value: function InterpolantFactoryMethodLinear(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  }]);

  return QuaternionKeyframeTrack;
}(KeyframeTrack);

exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited

QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track that interpolates Strings
 */

var StringKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack5) {
  _inherits(StringKeyframeTrack, _KeyframeTrack5);

  var _super108 = _createSuper(StringKeyframeTrack);

  function StringKeyframeTrack() {
    _classCallCheck(this, StringKeyframeTrack);

    return _super108.apply(this, arguments);
  }

  return _createClass(StringKeyframeTrack);
}(KeyframeTrack);

exports.StringKeyframeTrack = StringKeyframeTrack;
StringKeyframeTrack.prototype.ValueTypeName = 'string';
StringKeyframeTrack.prototype.ValueBufferType = Array;
StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of vectored keyframe values.
 */

var VectorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack6) {
  _inherits(VectorKeyframeTrack, _KeyframeTrack6);

  var _super109 = _createSuper(VectorKeyframeTrack);

  function VectorKeyframeTrack() {
    _classCallCheck(this, VectorKeyframeTrack);

    return _super109.apply(this, arguments);
  }

  return _createClass(VectorKeyframeTrack);
}(KeyframeTrack);

exports.VectorKeyframeTrack = VectorKeyframeTrack;
VectorKeyframeTrack.prototype.ValueTypeName = 'vector';

var AnimationClip = /*#__PURE__*/function () {
  function AnimationClip(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
    _classCallCheck(this, AnimationClip);

    this.name = name;
    this.tracks = tracks;
    this.duration = duration;
    this.blendMode = blendMode;
    this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks

    if (this.duration < 0) {
      this.resetDuration();
    }
  }

  _createClass(AnimationClip, [{
    key: "resetDuration",
    value: function resetDuration() {
      var tracks = this.tracks;
      var duration = 0;

      for (var _i262 = 0, n = tracks.length; _i262 !== n; ++_i262) {
        var track = this.tracks[_i262];
        duration = Math.max(duration, track.times[track.times.length - 1]);
      }

      this.duration = duration;
      return this;
    }
  }, {
    key: "trim",
    value: function trim() {
      for (var _i263 = 0; _i263 < this.tracks.length; _i263++) {
        this.tracks[_i263].trim(0, this.duration);
      }

      return this;
    }
  }, {
    key: "validate",
    value: function validate() {
      var valid = true;

      for (var _i264 = 0; _i264 < this.tracks.length; _i264++) {
        valid = valid && this.tracks[_i264].validate();
      }

      return valid;
    }
  }, {
    key: "optimize",
    value: function optimize() {
      for (var _i265 = 0; _i265 < this.tracks.length; _i265++) {
        this.tracks[_i265].optimize();
      }

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      var tracks = [];

      for (var _i266 = 0; _i266 < this.tracks.length; _i266++) {
        tracks.push(this.tracks[_i266].clone());
      }

      return new this.constructor(this.name, this.duration, tracks, this.blendMode);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.constructor.toJSON(this);
    }
  }], [{
    key: "parse",
    value: function parse(json) {
      var tracks = [],
          jsonTracks = json.tracks,
          frameTime = 1.0 / (json.fps || 1.0);

      for (var _i267 = 0, n = jsonTracks.length; _i267 !== n; ++_i267) {
        tracks.push(parseKeyframeTrack(jsonTracks[_i267]).scale(frameTime));
      }

      var clip = new this(json.name, json.duration, tracks, json.blendMode);
      clip.uuid = json.uuid;
      return clip;
    }
  }, {
    key: "toJSON",
    value: function toJSON(clip) {
      var tracks = [],
          clipTracks = clip.tracks;
      var json = {
        'name': clip.name,
        'duration': clip.duration,
        'tracks': tracks,
        'uuid': clip.uuid,
        'blendMode': clip.blendMode
      };

      for (var _i268 = 0, n = clipTracks.length; _i268 !== n; ++_i268) {
        tracks.push(KeyframeTrack.toJSON(clipTracks[_i268]));
      }

      return json;
    }
  }, {
    key: "CreateFromMorphTargetSequence",
    value: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
      var numMorphTargets = morphTargetSequence.length;
      var tracks = [];

      for (var _i269 = 0; _i269 < numMorphTargets; _i269++) {
        var times = [];
        var values = [];
        times.push((_i269 + numMorphTargets - 1) % numMorphTargets, _i269, (_i269 + 1) % numMorphTargets);
        values.push(0, 1, 0);
        var order = AnimationUtils.getKeyframeOrder(times);
        times = AnimationUtils.sortedArray(times, 1, order);
        values = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the
        // last frame as well for perfect loop.

        if (!noLoop && times[0] === 0) {
          times.push(numMorphTargets);
          values.push(values[0]);
        }

        tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[_i269].name + ']', times, values).scale(1.0 / fps));
      }

      return new this(name, -1, tracks);
    }
  }, {
    key: "findByName",
    value: function findByName(objectOrClipArray, name) {
      var clipArray = objectOrClipArray;

      if (!Array.isArray(objectOrClipArray)) {
        var o = objectOrClipArray;
        clipArray = o.geometry && o.geometry.animations || o.animations;
      }

      for (var _i270 = 0; _i270 < clipArray.length; _i270++) {
        if (clipArray[_i270].name === name) {
          return clipArray[_i270];
        }
      }

      return null;
    }
  }, {
    key: "CreateClipsFromMorphTargetSequences",
    value: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
      var animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences
      // such flamingo_flyA_003, flamingo_run1_003, crdeath0059

      var pattern = /^([\w-]*?)([\d]+)$/; // sort morph target names into animation groups based
      // patterns like Walk_001, Walk_002, Run_001, Run_002

      for (var _i271 = 0, il = morphTargets.length; _i271 < il; _i271++) {
        var morphTarget = morphTargets[_i271];
        var parts = morphTarget.name.match(pattern);

        if (parts && parts.length > 1) {
          var name = parts[1];
          var animationMorphTargets = animationToMorphTargets[name];

          if (!animationMorphTargets) {
            animationToMorphTargets[name] = animationMorphTargets = [];
          }

          animationMorphTargets.push(morphTarget);
        }
      }

      var clips = [];

      for (var _name4 in animationToMorphTargets) {
        clips.push(this.CreateFromMorphTargetSequence(_name4, animationToMorphTargets[_name4], fps, noLoop));
      }

      return clips;
    } // parse the animation.hierarchy format

  }, {
    key: "parseAnimation",
    value: function parseAnimation(animation, bones) {
      if (!animation) {
        console.error('THREE.AnimationClip: No animation in JSONLoader data.');
        return null;
      }

      var addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {
        // only return track if there are actually keys.
        if (animationKeys.length !== 0) {
          var times = [];
          var values = [];
          AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again

          if (times.length !== 0) {
            destTracks.push(new trackType(trackName, times, values));
          }
        }
      };

      var tracks = [];
      var clipName = animation.name || 'default';
      var fps = animation.fps || 30;
      var blendMode = animation.blendMode; // automatic length determination in AnimationClip.

      var duration = animation.length || -1;
      var hierarchyTracks = animation.hierarchy || [];

      for (var h = 0; h < hierarchyTracks.length; h++) {
        var animationKeys = hierarchyTracks[h].keys; // skip empty tracks

        if (!animationKeys || animationKeys.length === 0) continue; // process morph targets

        if (animationKeys[0].morphTargets) {
          // figure out all morph targets used in this track
          var morphTargetNames = {};
          var k = void 0;

          for (k = 0; k < animationKeys.length; k++) {
            if (animationKeys[k].morphTargets) {
              for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {
                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
              }
            }
          } // create a track for each morph target with all zero
          // morphTargetInfluences except for the keys in which
          // the morphTarget is named.


          for (var morphTargetName in morphTargetNames) {
            var times = [];
            var values = [];

            for (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {
              var animationKey = animationKeys[k];
              times.push(animationKey.time);
              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
            }

            tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
          }

          duration = morphTargetNames.length * fps;
        } else {
          // ...assume skeletal animation
          var boneName = '.bones[' + bones[h].name + ']';
          addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
          addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
          addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
        }
      }

      if (tracks.length === 0) {
        return null;
      }

      var clip = new this(clipName, duration, tracks, blendMode);
      return clip;
    }
  }]);

  return AnimationClip;
}();

exports.AnimationClip = AnimationClip;

function getTrackTypeForValueTypeName(typeName) {
  switch (typeName.toLowerCase()) {
    case 'scalar':
    case 'double':
    case 'float':
    case 'number':
    case 'integer':
      return NumberKeyframeTrack;

    case 'vector':
    case 'vector2':
    case 'vector3':
    case 'vector4':
      return VectorKeyframeTrack;

    case 'color':
      return ColorKeyframeTrack;

    case 'quaternion':
      return QuaternionKeyframeTrack;

    case 'bool':
    case 'boolean':
      return BooleanKeyframeTrack;

    case 'string':
      return StringKeyframeTrack;
  }

  throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
}

function parseKeyframeTrack(json) {
  if (json.type === undefined) {
    throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
  }

  var trackType = getTrackTypeForValueTypeName(json.type);

  if (json.times === undefined) {
    var times = [],
        values = [];
    AnimationUtils.flattenJSON(json.keys, times, values, 'value');
    json.times = times;
    json.values = values;
  } // derived classes can define a static parse method


  if (trackType.parse !== undefined) {
    return trackType.parse(json);
  } else {
    // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
  }
}

var Cache = {
  enabled: false,
  files: {},
  add: function add(key, file) {
    if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );

    this.files[key] = file;
  },
  get: function get(key) {
    if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );

    return this.files[key];
  },
  remove: function remove(key) {
    delete this.files[key];
  },
  clear: function clear() {
    this.files = {};
  }
};
exports.Cache = Cache;

var LoadingManager = /*#__PURE__*/_createClass(function LoadingManager(onLoad, onProgress, onError) {
  _classCallCheck(this, LoadingManager);

  var scope = this;
  var isLoading = false;
  var itemsLoaded = 0;
  var itemsTotal = 0;
  var urlModifier = undefined;
  var handlers = []; // Refer to #5689 for the reason why we don't set .onStart
  // in the constructor

  this.onStart = undefined;
  this.onLoad = onLoad;
  this.onProgress = onProgress;
  this.onError = onError;

  this.itemStart = function (url) {
    itemsTotal++;

    if (isLoading === false) {
      if (scope.onStart !== undefined) {
        scope.onStart(url, itemsLoaded, itemsTotal);
      }
    }

    isLoading = true;
  };

  this.itemEnd = function (url) {
    itemsLoaded++;

    if (scope.onProgress !== undefined) {
      scope.onProgress(url, itemsLoaded, itemsTotal);
    }

    if (itemsLoaded === itemsTotal) {
      isLoading = false;

      if (scope.onLoad !== undefined) {
        scope.onLoad();
      }
    }
  };

  this.itemError = function (url) {
    if (scope.onError !== undefined) {
      scope.onError(url);
    }
  };

  this.resolveURL = function (url) {
    if (urlModifier) {
      return urlModifier(url);
    }

    return url;
  };

  this.setURLModifier = function (transform) {
    urlModifier = transform;
    return this;
  };

  this.addHandler = function (regex, loader) {
    handlers.push(regex, loader);
    return this;
  };

  this.removeHandler = function (regex) {
    var index = handlers.indexOf(regex);

    if (index !== -1) {
      handlers.splice(index, 2);
    }

    return this;
  };

  this.getHandler = function (file) {
    for (var _i272 = 0, l = handlers.length; _i272 < l; _i272 += 2) {
      var regex = handlers[_i272];
      var loader = handlers[_i272 + 1];
      if (regex.global) regex.lastIndex = 0; // see #17920

      if (regex.test(file)) {
        return loader;
      }
    }

    return null;
  };
});

exports.LoadingManager = LoadingManager;
var DefaultLoadingManager = new LoadingManager();
exports.DefaultLoadingManager = DefaultLoadingManager;

var Loader = /*#__PURE__*/function () {
  function Loader(manager) {
    _classCallCheck(this, Loader);

    this.manager = manager !== undefined ? manager : DefaultLoadingManager;
    this.crossOrigin = 'anonymous';
    this.withCredentials = false;
    this.path = '';
    this.resourcePath = '';
    this.requestHeader = {};
  }

  _createClass(Loader, [{
    key: "load",
    value: function
      /* url, onLoad, onProgress, onError */
    load() {}
  }, {
    key: "loadAsync",
    value: function loadAsync(url, onProgress) {
      var scope = this;
      return new Promise(function (resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    }
  }, {
    key: "parse",
    value: function
      /* data */
    parse() {}
  }, {
    key: "setCrossOrigin",
    value: function setCrossOrigin(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    }
  }, {
    key: "setWithCredentials",
    value: function setWithCredentials(value) {
      this.withCredentials = value;
      return this;
    }
  }, {
    key: "setPath",
    value: function setPath(path) {
      this.path = path;
      return this;
    }
  }, {
    key: "setResourcePath",
    value: function setResourcePath(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    }
  }, {
    key: "setRequestHeader",
    value: function setRequestHeader(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  }]);

  return Loader;
}();

exports.Loader = Loader;
var loading = {};

var FileLoader = /*#__PURE__*/function (_Loader) {
  _inherits(FileLoader, _Loader);

  var _super110 = _createSuper(FileLoader);

  function FileLoader(manager) {
    _classCallCheck(this, FileLoader);

    return _super110.call(this, manager);
  }

  _createClass(FileLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var _this91 = this;

      if (url === undefined) url = '';
      if (this.path !== undefined) url = this.path + url;
      url = this.manager.resolveURL(url);
      var cached = Cache.get(url);

      if (cached !== undefined) {
        this.manager.itemStart(url);
        setTimeout(function () {
          if (onLoad) onLoad(cached);

          _this91.manager.itemEnd(url);
        }, 0);
        return cached;
      } // Check if request is duplicate


      if (loading[url] !== undefined) {
        loading[url].push({
          onLoad: onLoad,
          onProgress: onProgress,
          onError: onError
        });
        return;
      } // Initialise array for duplicate requests


      loading[url] = [];
      loading[url].push({
        onLoad: onLoad,
        onProgress: onProgress,
        onError: onError
      }); // create request

      var req = new Request(url, {
        headers: new Headers(this.requestHeader),
        credentials: this.withCredentials ? 'include' : 'same-origin' // An abort controller could be added within a future PR

      }); // record states ( avoid data race )

      var mimeType = this.mimeType;
      var responseType = this.responseType; // start the fetch

      fetch(req).then(function (response) {
        if (response.status === 200 || response.status === 0) {
          // Some browsers return HTTP Status 0 when using non-http protocol
          // e.g. 'file://' or 'data://'. Handle as success.
          if (response.status === 0) {
            console.warn('THREE.FileLoader: HTTP Status 0 received.');
          } // Workaround: Checking if response.body === undefined for Alipay browser #23548


          if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {
            return response;
          }

          var callbacks = loading[url];
          var reader = response.body.getReader();
          var contentLength = response.headers.get('Content-Length');
          var total = contentLength ? parseInt(contentLength) : 0;
          var lengthComputable = total !== 0;
          var loaded = 0; // periodically read data into the new stream tracking while download progress

          var stream = new ReadableStream({
            start: function start(controller) {
              readData();

              function readData() {
                reader.read().then(function ({
                  done: done,
                  value: value
                }) {
                  if (done) {
                    controller.close();
                  } else {
                    loaded += value.byteLength;
                    var event = new ProgressEvent('progress', {
                      lengthComputable: lengthComputable,
                      loaded: loaded,
                      total: total
                    });

                    for (var _i273 = 0, il = callbacks.length; _i273 < il; _i273++) {
                      var callback = callbacks[_i273];
                      if (callback.onProgress) callback.onProgress(event);
                    }

                    controller.enqueue(value);
                    readData();
                  }
                });
              }
            }
          });
          return new Response(stream);
        } else {
          throw Error("fetch for \"".concat(response.url, "\" responded with ").concat(response.status, ": ").concat(response.statusText));
        }
      }).then(function (response) {
        switch (responseType) {
          case 'arraybuffer':
            return response.arrayBuffer();

          case 'blob':
            return response.blob();

          case 'document':
            return response.text().then(function (text) {
              var parser = new DOMParser();
              return parser.parseFromString(text, mimeType);
            });

          case 'json':
            return response.json();

          default:
            if (mimeType === undefined) {
              return response.text();
            } else {
              // sniff encoding
              var re = /charset="?([^;"\s]*)"?/i;
              var exec = re.exec(mimeType);
              var label = exec && exec[1] ? exec[1].toLowerCase() : undefined;
              var decoder = new TextDecoder(label);
              return response.arrayBuffer().then(function (ab) {
                return decoder.decode(ab);
              });
            }

        }
      }).then(function (data) {
        // Add to cache only on HTTP success, so that we do not cache
        // error response bodies as proper responses to requests.
        Cache.add(url, data);
        var callbacks = loading[url];
        delete loading[url];

        for (var _i274 = 0, il = callbacks.length; _i274 < il; _i274++) {
          var callback = callbacks[_i274];
          if (callback.onLoad) callback.onLoad(data);
        }
      }).catch(function (err) {
        // Abort errors and other errors are handled the same
        var callbacks = loading[url];

        if (callbacks === undefined) {
          // When onLoad was called and url was deleted in `loading`
          _this91.manager.itemError(url);

          throw err;
        }

        delete loading[url];

        for (var _i275 = 0, il = callbacks.length; _i275 < il; _i275++) {
          var callback = callbacks[_i275];
          if (callback.onError) callback.onError(err);
        }

        _this91.manager.itemError(url);
      }).finally(function () {
        _this91.manager.itemEnd(url);
      });
      this.manager.itemStart(url);
    }
  }, {
    key: "setResponseType",
    value: function setResponseType(value) {
      this.responseType = value;
      return this;
    }
  }, {
    key: "setMimeType",
    value: function setMimeType(value) {
      this.mimeType = value;
      return this;
    }
  }]);

  return FileLoader;
}(Loader);

exports.FileLoader = FileLoader;

var AnimationLoader = /*#__PURE__*/function (_Loader2) {
  _inherits(AnimationLoader, _Loader2);

  var _super111 = _createSuper(AnimationLoader);

  function AnimationLoader(manager) {
    _classCallCheck(this, AnimationLoader);

    return _super111.call(this, manager);
  }

  _createClass(AnimationLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(this.withCredentials);
      loader.load(url, function (text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }

          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  }, {
    key: "parse",
    value: function parse(json) {
      var animations = [];

      for (var _i276 = 0; _i276 < json.length; _i276++) {
        var clip = AnimationClip.parse(json[_i276]);
        animations.push(clip);
      }

      return animations;
    }
  }]);

  return AnimationLoader;
}(Loader);
/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */


exports.AnimationLoader = AnimationLoader;

var CompressedTextureLoader = /*#__PURE__*/function (_Loader3) {
  _inherits(CompressedTextureLoader, _Loader3);

  var _super112 = _createSuper(CompressedTextureLoader);

  function CompressedTextureLoader(manager) {
    _classCallCheck(this, CompressedTextureLoader);

    return _super112.call(this, manager);
  }

  _createClass(CompressedTextureLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var images = [];
      var texture = new CompressedTexture();
      var loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setResponseType('arraybuffer');
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      var loaded = 0;

      function loadTexture(i) {
        loader.load(url[i], function (buffer) {
          var texDatas = scope.parse(buffer, true);
          images[i] = {
            width: texDatas.width,
            height: texDatas.height,
            format: texDatas.format,
            mipmaps: texDatas.mipmaps
          };
          loaded += 1;

          if (loaded === 6) {
            if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
            texture.image = images;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture);
          }
        }, onProgress, onError);
      }

      if (Array.isArray(url)) {
        for (var _i277 = 0, il = url.length; _i277 < il; ++_i277) {
          loadTexture(_i277);
        }
      } else {
        // compressed cubemap texture stored in a single DDS file
        loader.load(url, function (buffer) {
          var texDatas = scope.parse(buffer, true);

          if (texDatas.isCubemap) {
            var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

            for (var f = 0; f < faces; f++) {
              images[f] = {
                mipmaps: []
              };

              for (var _i278 = 0; _i278 < texDatas.mipmapCount; _i278++) {
                images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i278]);
                images[f].format = texDatas.format;
                images[f].width = texDatas.width;
                images[f].height = texDatas.height;
              }
            }

            texture.image = images;
          } else {
            texture.image.width = texDatas.width;
            texture.image.height = texDatas.height;
            texture.mipmaps = texDatas.mipmaps;
          }

          if (texDatas.mipmapCount === 1) {
            texture.minFilter = LinearFilter;
          }

          texture.format = texDatas.format;
          texture.needsUpdate = true;
          if (onLoad) onLoad(texture);
        }, onProgress, onError);
      }

      return texture;
    }
  }]);

  return CompressedTextureLoader;
}(Loader);

exports.CompressedTextureLoader = CompressedTextureLoader;

var ImageLoader = /*#__PURE__*/function (_Loader4) {
  _inherits(ImageLoader, _Loader4);

  var _super113 = _createSuper(ImageLoader);

  function ImageLoader(manager) {
    _classCallCheck(this, ImageLoader);

    return _super113.call(this, manager);
  }

  _createClass(ImageLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      if (this.path !== undefined) url = this.path + url;
      url = this.manager.resolveURL(url);
      var scope = this;
      var cached = Cache.get(url);

      if (cached !== undefined) {
        scope.manager.itemStart(url);
        setTimeout(function () {
          if (onLoad) onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }

      var image = createElementNS('img');

      function onImageLoad() {
        removeEventListeners();
        Cache.add(url, this);
        if (onLoad) onLoad(this);
        scope.manager.itemEnd(url);
      }

      function onImageError(event) {
        removeEventListeners();
        if (onError) onError(event);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }

      function removeEventListeners() {
        image.removeEventListener('load', onImageLoad, false);
        image.removeEventListener('error', onImageError, false);
      }

      image.addEventListener('load', onImageLoad, false);
      image.addEventListener('error', onImageError, false);

      if (url.slice(0, 5) !== 'data:') {
        if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
      }

      scope.manager.itemStart(url);
      image.src = url;
      return image;
    }
  }]);

  return ImageLoader;
}(Loader);

exports.ImageLoader = ImageLoader;

var CubeTextureLoader = /*#__PURE__*/function (_Loader5) {
  _inherits(CubeTextureLoader, _Loader5);

  var _super114 = _createSuper(CubeTextureLoader);

  function CubeTextureLoader(manager) {
    _classCallCheck(this, CubeTextureLoader);

    return _super114.call(this, manager);
  }

  _createClass(CubeTextureLoader, [{
    key: "load",
    value: function load(urls, onLoad, onProgress, onError) {
      var texture = new CubeTexture();
      var loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      var loaded = 0;

      function loadTexture(i) {
        loader.load(urls[i], function (image) {
          texture.images[i] = image;
          loaded++;

          if (loaded === 6) {
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture);
          }
        }, undefined, onError);
      }

      for (var _i279 = 0; _i279 < urls.length; ++_i279) {
        loadTexture(_i279);
      }

      return texture;
    }
  }]);

  return CubeTextureLoader;
}(Loader);
/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */


exports.CubeTextureLoader = CubeTextureLoader;

var DataTextureLoader = /*#__PURE__*/function (_Loader6) {
  _inherits(DataTextureLoader, _Loader6);

  var _super115 = _createSuper(DataTextureLoader);

  function DataTextureLoader(manager) {
    _classCallCheck(this, DataTextureLoader);

    return _super115.call(this, manager);
  }

  _createClass(DataTextureLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var texture = new DataTexture();
      var loader = new FileLoader(this.manager);
      loader.setResponseType('arraybuffer');
      loader.setRequestHeader(this.requestHeader);
      loader.setPath(this.path);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function (buffer) {
        var texData = scope.parse(buffer);
        if (!texData) return;

        if (texData.image !== undefined) {
          texture.image = texData.image;
        } else if (texData.data !== undefined) {
          texture.image.width = texData.width;
          texture.image.height = texData.height;
          texture.image.data = texData.data;
        }

        texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
        texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
        texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
        texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
        texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

        if (texData.encoding !== undefined) {
          texture.encoding = texData.encoding;
        }

        if (texData.flipY !== undefined) {
          texture.flipY = texData.flipY;
        }

        if (texData.format !== undefined) {
          texture.format = texData.format;
        }

        if (texData.type !== undefined) {
          texture.type = texData.type;
        }

        if (texData.mipmaps !== undefined) {
          texture.mipmaps = texData.mipmaps;
          texture.minFilter = LinearMipmapLinearFilter; // presumably...
        }

        if (texData.mipmapCount === 1) {
          texture.minFilter = LinearFilter;
        }

        if (texData.generateMipmaps !== undefined) {
          texture.generateMipmaps = texData.generateMipmaps;
        }

        texture.needsUpdate = true;
        if (onLoad) onLoad(texture, texData);
      }, onProgress, onError);
      return texture;
    }
  }]);

  return DataTextureLoader;
}(Loader);

exports.DataTextureLoader = DataTextureLoader;

var TextureLoader = /*#__PURE__*/function (_Loader7) {
  _inherits(TextureLoader, _Loader7);

  var _super116 = _createSuper(TextureLoader);

  function TextureLoader(manager) {
    _classCallCheck(this, TextureLoader);

    return _super116.call(this, manager);
  }

  _createClass(TextureLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var texture = new Texture();
      var loader = new ImageLoader(this.manager);
      loader.setCrossOrigin(this.crossOrigin);
      loader.setPath(this.path);
      loader.load(url, function (image) {
        texture.image = image;
        texture.needsUpdate = true;

        if (onLoad !== undefined) {
          onLoad(texture);
        }
      }, onProgress, onError);
      return texture;
    }
  }]);

  return TextureLoader;
}(Loader);

exports.TextureLoader = TextureLoader;

var Light = /*#__PURE__*/function (_Object3D11) {
  _inherits(Light, _Object3D11);

  var _super117 = _createSuper(Light);

  function Light(color, intensity = 1) {
    var _this92;

    _classCallCheck(this, Light);

    _this92 = _super117.call(this);
    _this92.type = 'Light';
    _this92.color = new Color(color);
    _this92.intensity = intensity;
    return _this92;
  }

  _createClass(Light, [{
    key: "dispose",
    value: function dispose() {// Empty here in base class; some subclasses override.
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(Light.prototype), "copy", this).call(this, source);

      this.color.copy(source.color);
      this.intensity = source.intensity;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(Light.prototype), "toJSON", this).call(this, meta);

      data.object.color = this.color.getHex();
      data.object.intensity = this.intensity;
      if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
      if (this.distance !== undefined) data.object.distance = this.distance;
      if (this.angle !== undefined) data.object.angle = this.angle;
      if (this.decay !== undefined) data.object.decay = this.decay;
      if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
      if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
      return data;
    }
  }]);

  return Light;
}(Object3D);

exports.Light = Light;
Light.prototype.isLight = true;

var HemisphereLight = /*#__PURE__*/function (_Light) {
  _inherits(HemisphereLight, _Light);

  var _super118 = _createSuper(HemisphereLight);

  function HemisphereLight(skyColor, groundColor, intensity) {
    var _this93;

    _classCallCheck(this, HemisphereLight);

    _this93 = _super118.call(this, skyColor, intensity);
    _this93.type = 'HemisphereLight';

    _this93.position.copy(Object3D.DefaultUp);

    _this93.updateMatrix();

    _this93.groundColor = new Color(groundColor);
    return _this93;
  }

  _createClass(HemisphereLight, [{
    key: "copy",
    value: function copy(source) {
      Light.prototype.copy.call(this, source);
      this.groundColor.copy(source.groundColor);
      return this;
    }
  }]);

  return HemisphereLight;
}(Light);

exports.HemisphereLight = HemisphereLight;
HemisphereLight.prototype.isHemisphereLight = true;

var _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();

var _lightPositionWorld$1 = /*@__PURE__*/new Vector3();

var _lookTarget$1 = /*@__PURE__*/new Vector3();

var LightShadow = /*#__PURE__*/function () {
  function LightShadow(camera) {
    _classCallCheck(this, LightShadow);

    this.camera = camera;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.blurSamples = 8;
    this.mapSize = new Vector2(512, 512);
    this.map = null;
    this.mapPass = null;
    this.matrix = new Matrix4();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new Frustum();
    this._frameExtents = new Vector2(1, 1);
    this._viewportCount = 1;
    this._viewports = [new Vector4(0, 0, 1, 1)];
  }

  _createClass(LightShadow, [{
    key: "getViewportCount",
    value: function getViewportCount() {
      return this._viewportCount;
    }
  }, {
    key: "getFrustum",
    value: function getFrustum() {
      return this._frustum;
    }
  }, {
    key: "updateMatrices",
    value: function updateMatrices(light) {
      var shadowCamera = this.camera;
      var shadowMatrix = this.matrix;

      _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);

      shadowCamera.position.copy(_lightPositionWorld$1);

      _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);

      shadowCamera.lookAt(_lookTarget$1);
      shadowCamera.updateMatrixWorld();

      _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);

      this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);

      shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
      shadowMatrix.multiply(shadowCamera.projectionMatrix);
      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
    }
  }, {
    key: "getViewport",
    value: function getViewport(viewportIndex) {
      return this._viewports[viewportIndex];
    }
  }, {
    key: "getFrameExtents",
    value: function getFrameExtents() {
      return this._frameExtents;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this.map) {
        this.map.dispose();
      }

      if (this.mapPass) {
        this.mapPass.dispose();
      }
    }
  }, {
    key: "copy",
    value: function copy(source) {
      this.camera = source.camera.clone();
      this.bias = source.bias;
      this.radius = source.radius;
      this.mapSize.copy(source.mapSize);
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var object = {};
      if (this.bias !== 0) object.bias = this.bias;
      if (this.normalBias !== 0) object.normalBias = this.normalBias;
      if (this.radius !== 1) object.radius = this.radius;
      if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
      object.camera = this.camera.toJSON(false).object;
      delete object.camera.matrix;
      return object;
    }
  }]);

  return LightShadow;
}();

var SpotLightShadow = /*#__PURE__*/function (_LightShadow) {
  _inherits(SpotLightShadow, _LightShadow);

  var _super119 = _createSuper(SpotLightShadow);

  function SpotLightShadow() {
    var _this94;

    _classCallCheck(this, SpotLightShadow);

    _this94 = _super119.call(this, new PerspectiveCamera(50, 1, 0.5, 500));
    _this94.focus = 1;
    return _this94;
  }

  _createClass(SpotLightShadow, [{
    key: "updateMatrices",
    value: function updateMatrices(light) {
      var camera = this.camera;
      var fov = RAD2DEG * 2 * light.angle * this.focus;
      var aspect = this.mapSize.width / this.mapSize.height;
      var far = light.distance || camera.far;

      if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
        camera.fov = fov;
        camera.aspect = aspect;
        camera.far = far;
        camera.updateProjectionMatrix();
      }

      _get(_getPrototypeOf(SpotLightShadow.prototype), "updateMatrices", this).call(this, light);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(SpotLightShadow.prototype), "copy", this).call(this, source);

      this.focus = source.focus;
      return this;
    }
  }]);

  return SpotLightShadow;
}(LightShadow);

SpotLightShadow.prototype.isSpotLightShadow = true;

var SpotLight = /*#__PURE__*/function (_Light2) {
  _inherits(SpotLight, _Light2);

  var _super120 = _createSuper(SpotLight);

  function SpotLight(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {
    var _this95;

    _classCallCheck(this, SpotLight);

    _this95 = _super120.call(this, color, intensity);
    _this95.type = 'SpotLight';

    _this95.position.copy(Object3D.DefaultUp);

    _this95.updateMatrix();

    _this95.target = new Object3D();
    _this95.distance = distance;
    _this95.angle = angle;
    _this95.penumbra = penumbra;
    _this95.decay = decay; // for physically correct lights, should be 2.

    _this95.shadow = new SpotLightShadow();
    return _this95;
  }

  _createClass(SpotLight, [{
    key: "power",
    get: function get() {
      // compute the light's luminous power (in lumens) from its intensity (in candela)
      // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
      return this.intensity * Math.PI;
    },
    set: function set(power) {
      // set the light's intensity (in candela) from the desired luminous power (in lumens)
      this.intensity = power / Math.PI;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.shadow.dispose();
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(SpotLight.prototype), "copy", this).call(this, source);

      this.distance = source.distance;
      this.angle = source.angle;
      this.penumbra = source.penumbra;
      this.decay = source.decay;
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  }]);

  return SpotLight;
}(Light);

exports.SpotLight = SpotLight;
SpotLight.prototype.isSpotLight = true;

var _projScreenMatrix = /*@__PURE__*/new Matrix4();

var _lightPositionWorld = /*@__PURE__*/new Vector3();

var _lookTarget = /*@__PURE__*/new Vector3();

var PointLightShadow = /*#__PURE__*/function (_LightShadow2) {
  _inherits(PointLightShadow, _LightShadow2);

  var _super121 = _createSuper(PointLightShadow);

  function PointLightShadow() {
    var _this96;

    _classCallCheck(this, PointLightShadow);

    _this96 = _super121.call(this, new PerspectiveCamera(90, 1, 0.5, 500));
    _this96._frameExtents = new Vector2(4, 2);
    _this96._viewportCount = 6;
    _this96._viewports = [// These viewports map a cube-map onto a 2D texture with the
    // following orientation:
    //
    //  xzXZ
    //   y Y
    //
    // X - Positive x direction
    // x - Negative x direction
    // Y - Positive y direction
    // y - Negative y direction
    // Z - Positive z direction
    // z - Negative z direction
    // positive X
    new Vector4(2, 1, 1, 1), // negative X
    new Vector4(0, 1, 1, 1), // positive Z
    new Vector4(3, 1, 1, 1), // negative Z
    new Vector4(1, 1, 1, 1), // positive Y
    new Vector4(3, 0, 1, 1), // negative Y
    new Vector4(1, 0, 1, 1)];
    _this96._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
    _this96._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
    return _this96;
  }

  _createClass(PointLightShadow, [{
    key: "updateMatrices",
    value: function updateMatrices(light, viewportIndex = 0) {
      var camera = this.camera;
      var shadowMatrix = this.matrix;
      var far = light.distance || camera.far;

      if (far !== camera.far) {
        camera.far = far;
        camera.updateProjectionMatrix();
      }

      _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);

      camera.position.copy(_lightPositionWorld);

      _lookTarget.copy(camera.position);

      _lookTarget.add(this._cubeDirections[viewportIndex]);

      camera.up.copy(this._cubeUps[viewportIndex]);
      camera.lookAt(_lookTarget);
      camera.updateMatrixWorld();
      shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);

      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

      this._frustum.setFromProjectionMatrix(_projScreenMatrix);
    }
  }]);

  return PointLightShadow;
}(LightShadow);

PointLightShadow.prototype.isPointLightShadow = true;

var PointLight = /*#__PURE__*/function (_Light3) {
  _inherits(PointLight, _Light3);

  var _super122 = _createSuper(PointLight);

  function PointLight(color, intensity, distance = 0, decay = 1) {
    var _this97;

    _classCallCheck(this, PointLight);

    _this97 = _super122.call(this, color, intensity);
    _this97.type = 'PointLight';
    _this97.distance = distance;
    _this97.decay = decay; // for physically correct lights, should be 2.

    _this97.shadow = new PointLightShadow();
    return _this97;
  }

  _createClass(PointLight, [{
    key: "power",
    get: function get() {
      // compute the light's luminous power (in lumens) from its intensity (in candela)
      // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
      return this.intensity * 4 * Math.PI;
    },
    set: function set(power) {
      // set the light's intensity (in candela) from the desired luminous power (in lumens)
      this.intensity = power / (4 * Math.PI);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.shadow.dispose();
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(PointLight.prototype), "copy", this).call(this, source);

      this.distance = source.distance;
      this.decay = source.decay;
      this.shadow = source.shadow.clone();
      return this;
    }
  }]);

  return PointLight;
}(Light);

exports.PointLight = PointLight;
PointLight.prototype.isPointLight = true;

var DirectionalLightShadow = /*#__PURE__*/function (_LightShadow3) {
  _inherits(DirectionalLightShadow, _LightShadow3);

  var _super123 = _createSuper(DirectionalLightShadow);

  function DirectionalLightShadow() {
    _classCallCheck(this, DirectionalLightShadow);

    return _super123.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
  }

  return _createClass(DirectionalLightShadow);
}(LightShadow);

DirectionalLightShadow.prototype.isDirectionalLightShadow = true;

var DirectionalLight = /*#__PURE__*/function (_Light4) {
  _inherits(DirectionalLight, _Light4);

  var _super124 = _createSuper(DirectionalLight);

  function DirectionalLight(color, intensity) {
    var _this98;

    _classCallCheck(this, DirectionalLight);

    _this98 = _super124.call(this, color, intensity);
    _this98.type = 'DirectionalLight';

    _this98.position.copy(Object3D.DefaultUp);

    _this98.updateMatrix();

    _this98.target = new Object3D();
    _this98.shadow = new DirectionalLightShadow();
    return _this98;
  }

  _createClass(DirectionalLight, [{
    key: "dispose",
    value: function dispose() {
      this.shadow.dispose();
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(DirectionalLight.prototype), "copy", this).call(this, source);

      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  }]);

  return DirectionalLight;
}(Light);

exports.DirectionalLight = DirectionalLight;
DirectionalLight.prototype.isDirectionalLight = true;

var AmbientLight = /*#__PURE__*/function (_Light5) {
  _inherits(AmbientLight, _Light5);

  var _super125 = _createSuper(AmbientLight);

  function AmbientLight(color, intensity) {
    var _this99;

    _classCallCheck(this, AmbientLight);

    _this99 = _super125.call(this, color, intensity);
    _this99.type = 'AmbientLight';
    return _this99;
  }

  return _createClass(AmbientLight);
}(Light);

exports.AmbientLight = AmbientLight;
AmbientLight.prototype.isAmbientLight = true;

var RectAreaLight = /*#__PURE__*/function (_Light6) {
  _inherits(RectAreaLight, _Light6);

  var _super126 = _createSuper(RectAreaLight);

  function RectAreaLight(color, intensity, width = 10, height = 10) {
    var _this100;

    _classCallCheck(this, RectAreaLight);

    _this100 = _super126.call(this, color, intensity);
    _this100.type = 'RectAreaLight';
    _this100.width = width;
    _this100.height = height;
    return _this100;
  }

  _createClass(RectAreaLight, [{
    key: "power",
    get: function get() {
      // compute the light's luminous power (in lumens) from its intensity (in nits)
      return this.intensity * this.width * this.height * Math.PI;
    },
    set: function set(power) {
      // set the light's intensity (in nits) from the desired luminous power (in lumens)
      this.intensity = power / (this.width * this.height * Math.PI);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(RectAreaLight.prototype), "copy", this).call(this, source);

      this.width = source.width;
      this.height = source.height;
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(RectAreaLight.prototype), "toJSON", this).call(this, meta);

      data.object.width = this.width;
      data.object.height = this.height;
      return data;
    }
  }]);

  return RectAreaLight;
}(Light);

exports.RectAreaLight = RectAreaLight;
RectAreaLight.prototype.isRectAreaLight = true;
/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */
// 3-band SH defined by 9 coefficients

var SphericalHarmonics3 = /*#__PURE__*/function () {
  function SphericalHarmonics3() {
    _classCallCheck(this, SphericalHarmonics3);

    this.coefficients = [];

    for (var _i280 = 0; _i280 < 9; _i280++) {
      this.coefficients.push(new Vector3());
    }
  }

  _createClass(SphericalHarmonics3, [{
    key: "set",
    value: function set(coefficients) {
      for (var _i281 = 0; _i281 < 9; _i281++) {
        this.coefficients[_i281].copy(coefficients[_i281]);
      }

      return this;
    }
  }, {
    key: "zero",
    value: function zero() {
      for (var _i282 = 0; _i282 < 9; _i282++) {
        this.coefficients[_i282].set(0, 0, 0);
      }

      return this;
    } // get the radiance in the direction of the normal
    // target is a Vector3

  }, {
    key: "getAt",
    value: function getAt(normal, target) {
      // normal is assumed to be unit length
      var x = normal.x,
          y = normal.y,
          z = normal.z;
      var coeff = this.coefficients; // band 0

      target.copy(coeff[0]).multiplyScalar(0.282095); // band 1

      target.addScaledVector(coeff[1], 0.488603 * y);
      target.addScaledVector(coeff[2], 0.488603 * z);
      target.addScaledVector(coeff[3], 0.488603 * x); // band 2

      target.addScaledVector(coeff[4], 1.092548 * (x * y));
      target.addScaledVector(coeff[5], 1.092548 * (y * z));
      target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
      target.addScaledVector(coeff[7], 1.092548 * (x * z));
      target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
      return target;
    } // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
    // target is a Vector3
    // https://graphics.stanford.edu/papers/envmap/envmap.pdf

  }, {
    key: "getIrradianceAt",
    value: function getIrradianceAt(normal, target) {
      // normal is assumed to be unit length
      var x = normal.x,
          y = normal.y,
          z = normal.z;
      var coeff = this.coefficients; // band 0

      target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
      // band 1

      target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603

      target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);
      target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2

      target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548

      target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);
      target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3

      target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);
      target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274

      return target;
    }
  }, {
    key: "add",
    value: function add(sh) {
      for (var _i283 = 0; _i283 < 9; _i283++) {
        this.coefficients[_i283].add(sh.coefficients[_i283]);
      }

      return this;
    }
  }, {
    key: "addScaledSH",
    value: function addScaledSH(sh, s) {
      for (var _i284 = 0; _i284 < 9; _i284++) {
        this.coefficients[_i284].addScaledVector(sh.coefficients[_i284], s);
      }

      return this;
    }
  }, {
    key: "scale",
    value: function scale(s) {
      for (var _i285 = 0; _i285 < 9; _i285++) {
        this.coefficients[_i285].multiplyScalar(s);
      }

      return this;
    }
  }, {
    key: "lerp",
    value: function lerp(sh, alpha) {
      for (var _i286 = 0; _i286 < 9; _i286++) {
        this.coefficients[_i286].lerp(sh.coefficients[_i286], alpha);
      }

      return this;
    }
  }, {
    key: "equals",
    value: function equals(sh) {
      for (var _i287 = 0; _i287 < 9; _i287++) {
        if (!this.coefficients[_i287].equals(sh.coefficients[_i287])) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "copy",
    value: function copy(sh) {
      return this.set(sh.coefficients);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "fromArray",
    value: function fromArray(array, offset = 0) {
      var coefficients = this.coefficients;

      for (var _i288 = 0; _i288 < 9; _i288++) {
        coefficients[_i288].fromArray(array, offset + _i288 * 3);
      }

      return this;
    }
  }, {
    key: "toArray",
    value: function toArray(array = [], offset = 0) {
      var coefficients = this.coefficients;

      for (var _i289 = 0; _i289 < 9; _i289++) {
        coefficients[_i289].toArray(array, offset + _i289 * 3);
      }

      return array;
    } // evaluate the basis functions
    // shBasis is an Array[ 9 ]

  }], [{
    key: "getBasisAt",
    value: function getBasisAt(normal, shBasis) {
      // normal is assumed to be unit length
      var x = normal.x,
          y = normal.y,
          z = normal.z; // band 0

      shBasis[0] = 0.282095; // band 1

      shBasis[1] = 0.488603 * y;
      shBasis[2] = 0.488603 * z;
      shBasis[3] = 0.488603 * x; // band 2

      shBasis[4] = 1.092548 * x * y;
      shBasis[5] = 1.092548 * y * z;
      shBasis[6] = 0.315392 * (3 * z * z - 1);
      shBasis[7] = 1.092548 * x * z;
      shBasis[8] = 0.546274 * (x * x - y * y);
    }
  }]);

  return SphericalHarmonics3;
}();

exports.SphericalHarmonics3 = SphericalHarmonics3;
SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;

var LightProbe = /*#__PURE__*/function (_Light7) {
  _inherits(LightProbe, _Light7);

  var _super127 = _createSuper(LightProbe);

  function LightProbe(sh = new SphericalHarmonics3(), intensity = 1) {
    var _this101;

    _classCallCheck(this, LightProbe);

    _this101 = _super127.call(this, undefined, intensity);
    _this101.sh = sh;
    return _this101;
  }

  _createClass(LightProbe, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(LightProbe.prototype), "copy", this).call(this, source);

      this.sh.copy(source.sh);
      return this;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();

      this.sh.fromArray(json.sh);
      return this;
    }
  }, {
    key: "toJSON",
    value: function toJSON(meta) {
      var data = _get(_getPrototypeOf(LightProbe.prototype), "toJSON", this).call(this, meta);

      data.object.sh = this.sh.toArray();
      return data;
    }
  }]);

  return LightProbe;
}(Light);

exports.LightProbe = LightProbe;
LightProbe.prototype.isLightProbe = true;

var MaterialLoader = /*#__PURE__*/function (_Loader8) {
  _inherits(MaterialLoader, _Loader8);

  var _super128 = _createSuper(MaterialLoader);

  function MaterialLoader(manager) {
    var _this102;

    _classCallCheck(this, MaterialLoader);

    _this102 = _super128.call(this, manager);
    _this102.textures = {};
    return _this102;
  }

  _createClass(MaterialLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function (text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }

          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  }, {
    key: "parse",
    value: function parse(json) {
      var textures = this.textures;

      function getTexture(name) {
        if (textures[name] === undefined) {
          console.warn('THREE.MaterialLoader: Undefined texture', name);
        }

        return textures[name];
      }

      var material = Material.fromType(json.type);
      if (json.uuid !== undefined) material.uuid = json.uuid;
      if (json.name !== undefined) material.name = json.name;
      if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
      if (json.roughness !== undefined) material.roughness = json.roughness;
      if (json.metalness !== undefined) material.metalness = json.metalness;
      if (json.sheen !== undefined) material.sheen = json.sheen;
      if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);
      if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;
      if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
      if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
      if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;
      if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);
      if (json.shininess !== undefined) material.shininess = json.shininess;
      if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
      if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
      if (json.transmission !== undefined) material.transmission = json.transmission;
      if (json.thickness !== undefined) material.thickness = json.thickness;
      if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;
      if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);
      if (json.fog !== undefined) material.fog = json.fog;
      if (json.flatShading !== undefined) material.flatShading = json.flatShading;
      if (json.blending !== undefined) material.blending = json.blending;
      if (json.combine !== undefined) material.combine = json.combine;
      if (json.side !== undefined) material.side = json.side;
      if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
      if (json.opacity !== undefined) material.opacity = json.opacity;
      if (json.transparent !== undefined) material.transparent = json.transparent;
      if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
      if (json.depthTest !== undefined) material.depthTest = json.depthTest;
      if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
      if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
      if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
      if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
      if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
      if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
      if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
      if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
      if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
      if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
      if (json.wireframe !== undefined) material.wireframe = json.wireframe;
      if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
      if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
      if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
      if (json.rotation !== undefined) material.rotation = json.rotation;
      if (json.linewidth !== 1) material.linewidth = json.linewidth;
      if (json.dashSize !== undefined) material.dashSize = json.dashSize;
      if (json.gapSize !== undefined) material.gapSize = json.gapSize;
      if (json.scale !== undefined) material.scale = json.scale;
      if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
      if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
      if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
      if (json.dithering !== undefined) material.dithering = json.dithering;
      if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
      if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
      if (json.visible !== undefined) material.visible = json.visible;
      if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
      if (json.userData !== undefined) material.userData = json.userData;

      if (json.vertexColors !== undefined) {
        if (typeof json.vertexColors === 'number') {
          material.vertexColors = json.vertexColors > 0 ? true : false;
        } else {
          material.vertexColors = json.vertexColors;
        }
      } // Shader Material


      if (json.uniforms !== undefined) {
        for (var name in json.uniforms) {
          var uniform = json.uniforms[name];
          material.uniforms[name] = {};

          switch (uniform.type) {
            case 't':
              material.uniforms[name].value = getTexture(uniform.value);
              break;

            case 'c':
              material.uniforms[name].value = new Color().setHex(uniform.value);
              break;

            case 'v2':
              material.uniforms[name].value = new Vector2().fromArray(uniform.value);
              break;

            case 'v3':
              material.uniforms[name].value = new Vector3().fromArray(uniform.value);
              break;

            case 'v4':
              material.uniforms[name].value = new Vector4().fromArray(uniform.value);
              break;

            case 'm3':
              material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
              break;

            case 'm4':
              material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
              break;

            default:
              material.uniforms[name].value = uniform.value;
          }
        }
      }

      if (json.defines !== undefined) material.defines = json.defines;
      if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
      if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;

      if (json.extensions !== undefined) {
        for (var key in json.extensions) {
          material.extensions[key] = json.extensions[key];
        }
      } // Deprecated


      if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading
      // for PointsMaterial

      if (json.size !== undefined) material.size = json.size;
      if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps

      if (json.map !== undefined) material.map = getTexture(json.map);
      if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
      if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
      if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
      if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
      if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
      if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;

      if (json.normalScale !== undefined) {
        var normalScale = json.normalScale;

        if (Array.isArray(normalScale) === false) {
          // Blender exporter used to export a scalar. See #7459
          normalScale = [normalScale, normalScale];
        }

        material.normalScale = new Vector2().fromArray(normalScale);
      }

      if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
      if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
      if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
      if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
      if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
      if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
      if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
      if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
      if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);
      if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);
      if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
      if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
      if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
      if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
      if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
      if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
      if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
      if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
      if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
      if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
      if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
      if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
      if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
      if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
      if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);
      if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);
      if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
      return material;
    }
  }, {
    key: "setTextures",
    value: function setTextures(value) {
      this.textures = value;
      return this;
    }
  }]);

  return MaterialLoader;
}(Loader);

exports.MaterialLoader = MaterialLoader;

var LoaderUtils = /*#__PURE__*/function () {
  function LoaderUtils() {
    _classCallCheck(this, LoaderUtils);
  }

  _createClass(LoaderUtils, null, [{
    key: "decodeText",
    value: function decodeText(array) {
      if (typeof TextDecoder !== 'undefined') {
        return new TextDecoder().decode(array);
      } // Avoid the String.fromCharCode.apply(null, array) shortcut, which
      // throws a "maximum call stack size exceeded" error for large arrays.


      var s = '';

      for (var _i290 = 0, il = array.length; _i290 < il; _i290++) {
        // Implicitly assumes little-endian.
        s += String.fromCharCode(array[_i290]);
      }

      try {
        // merges multi-byte utf-8 characters.
        return decodeURIComponent(escape(s));
      } catch (e) {
        // see #16358
        return s;
      }
    }
  }, {
    key: "extractUrlBase",
    value: function extractUrlBase(url) {
      var index = url.lastIndexOf('/');
      if (index === -1) return './';
      return url.slice(0, index + 1);
    }
  }, {
    key: "resolveURL",
    value: function resolveURL(url, path) {
      // Invalid URL
      if (typeof url !== 'string' || url === '') return ''; // Host Relative URL

      if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
        path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
      } // Absolute URL http://,https://,//


      if (/^(https?:)?\/\//i.test(url)) return url; // Data URI

      if (/^data:.*,.*$/i.test(url)) return url; // Blob URL

      if (/^blob:.*$/i.test(url)) return url; // Relative URL

      return path + url;
    }
  }]);

  return LoaderUtils;
}();

exports.LoaderUtils = LoaderUtils;

var InstancedBufferGeometry = /*#__PURE__*/function (_BufferGeometry16) {
  _inherits(InstancedBufferGeometry, _BufferGeometry16);

  var _super129 = _createSuper(InstancedBufferGeometry);

  function InstancedBufferGeometry() {
    var _this103;

    _classCallCheck(this, InstancedBufferGeometry);

    _this103 = _super129.call(this);
    _this103.type = 'InstancedBufferGeometry';
    _this103.instanceCount = Infinity;
    return _this103;
  }

  _createClass(InstancedBufferGeometry, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(InstancedBufferGeometry.prototype), "copy", this).call(this, source);

      this.instanceCount = source.instanceCount;
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var data = _get(_getPrototypeOf(InstancedBufferGeometry.prototype), "toJSON", this).call(this, this);

      data.instanceCount = this.instanceCount;
      data.isInstancedBufferGeometry = true;
      return data;
    }
  }]);

  return InstancedBufferGeometry;
}(BufferGeometry);

exports.InstancedBufferGeometry = InstancedBufferGeometry;
InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

var BufferGeometryLoader = /*#__PURE__*/function (_Loader9) {
  _inherits(BufferGeometryLoader, _Loader9);

  var _super130 = _createSuper(BufferGeometryLoader);

  function BufferGeometryLoader(manager) {
    _classCallCheck(this, BufferGeometryLoader);

    return _super130.call(this, manager);
  }

  _createClass(BufferGeometryLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var loader = new FileLoader(scope.manager);
      loader.setPath(scope.path);
      loader.setRequestHeader(scope.requestHeader);
      loader.setWithCredentials(scope.withCredentials);
      loader.load(url, function (text) {
        try {
          onLoad(scope.parse(JSON.parse(text)));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }

          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  }, {
    key: "parse",
    value: function parse(json) {
      var interleavedBufferMap = {};
      var arrayBufferMap = {};

      function getInterleavedBuffer(json, uuid) {
        if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
        var interleavedBuffers = json.interleavedBuffers;
        var interleavedBuffer = interleavedBuffers[uuid];
        var buffer = getArrayBuffer(json, interleavedBuffer.buffer);
        var array = getTypedArray(interleavedBuffer.type, buffer);
        var ib = new InterleavedBuffer(array, interleavedBuffer.stride);
        ib.uuid = interleavedBuffer.uuid;
        interleavedBufferMap[uuid] = ib;
        return ib;
      }

      function getArrayBuffer(json, uuid) {
        if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
        var arrayBuffers = json.arrayBuffers;
        var arrayBuffer = arrayBuffers[uuid];
        var ab = new Uint32Array(arrayBuffer).buffer;
        arrayBufferMap[uuid] = ab;
        return ab;
      }

      var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
      var index = json.data.index;

      if (index !== undefined) {
        var typedArray = getTypedArray(index.type, index.array);
        geometry.setIndex(new BufferAttribute(typedArray, 1));
      }

      var attributes = json.data.attributes;

      for (var key in attributes) {
        var attribute = attributes[key];
        var bufferAttribute = void 0;

        if (attribute.isInterleavedBufferAttribute) {
          var interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
          bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
        } else {
          var _typedArray = getTypedArray(attribute.type, attribute.array);

          var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
          bufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);
        }

        if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
        if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);

        if (attribute.updateRange !== undefined) {
          bufferAttribute.updateRange.offset = attribute.updateRange.offset;
          bufferAttribute.updateRange.count = attribute.updateRange.count;
        }

        geometry.setAttribute(key, bufferAttribute);
      }

      var morphAttributes = json.data.morphAttributes;

      if (morphAttributes) {
        for (var _key3 in morphAttributes) {
          var attributeArray = morphAttributes[_key3];
          var array = [];

          for (var _i291 = 0, il = attributeArray.length; _i291 < il; _i291++) {
            var _attribute3 = attributeArray[_i291];

            var _bufferAttribute = void 0;

            if (_attribute3.isInterleavedBufferAttribute) {
              var _interleavedBuffer = getInterleavedBuffer(json.data, _attribute3.data);

              _bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute3.itemSize, _attribute3.offset, _attribute3.normalized);
            } else {
              var _typedArray2 = getTypedArray(_attribute3.type, _attribute3.array);

              _bufferAttribute = new BufferAttribute(_typedArray2, _attribute3.itemSize, _attribute3.normalized);
            }

            if (_attribute3.name !== undefined) _bufferAttribute.name = _attribute3.name;
            array.push(_bufferAttribute);
          }

          geometry.morphAttributes[_key3] = array;
        }
      }

      var morphTargetsRelative = json.data.morphTargetsRelative;

      if (morphTargetsRelative) {
        geometry.morphTargetsRelative = true;
      }

      var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

      if (groups !== undefined) {
        for (var _i292 = 0, n = groups.length; _i292 !== n; ++_i292) {
          var group = groups[_i292];
          geometry.addGroup(group.start, group.count, group.materialIndex);
        }
      }

      var boundingSphere = json.data.boundingSphere;

      if (boundingSphere !== undefined) {
        var center = new Vector3();

        if (boundingSphere.center !== undefined) {
          center.fromArray(boundingSphere.center);
        }

        geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
      }

      if (json.name) geometry.name = json.name;
      if (json.userData) geometry.userData = json.userData;
      return geometry;
    }
  }]);

  return BufferGeometryLoader;
}(Loader);

exports.BufferGeometryLoader = BufferGeometryLoader;

var ObjectLoader = /*#__PURE__*/function (_Loader10) {
  _inherits(ObjectLoader, _Loader10);

  var _super131 = _createSuper(ObjectLoader);

  function ObjectLoader(manager) {
    _classCallCheck(this, ObjectLoader);

    return _super131.call(this, manager);
  }

  _createClass(ObjectLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
      this.resourcePath = this.resourcePath || path;
      var loader = new FileLoader(this.manager);
      loader.setPath(this.path);
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(this.withCredentials);
      loader.load(url, function (text) {
        var json = null;

        try {
          json = JSON.parse(text);
        } catch (error) {
          if (onError !== undefined) onError(error);
          console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
          return;
        }

        var metadata = json.metadata;

        if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
          console.error('THREE.ObjectLoader: Can\'t load ' + url);
          return;
        }

        scope.parse(json, onLoad);
      }, onProgress, onError);
    }
  }, {
    key: "loadAsync",
    value: function () {
      var _loadAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, onProgress) {
        var scope, path, loader, text, json, metadata;
        return _regeneratorRuntime().wrap(function _callee2$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                scope = this;
                path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;
                this.resourcePath = this.resourcePath || path;
                loader = new FileLoader(this.manager);
                loader.setPath(this.path);
                loader.setRequestHeader(this.requestHeader);
                loader.setWithCredentials(this.withCredentials);
                _context6.next = 9;
                return loader.loadAsync(url, onProgress);

              case 9:
                text = _context6.sent;
                json = JSON.parse(text);
                metadata = json.metadata;

                if (!(metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry')) {
                  _context6.next = 14;
                  break;
                }

                throw new Error('THREE.ObjectLoader: Can\'t load ' + url);

              case 14:
                _context6.next = 16;
                return scope.parseAsync(json);

              case 16:
                return _context6.abrupt("return", _context6.sent);

              case 17:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadAsync(_x7, _x8) {
        return _loadAsync.apply(this, arguments);
      }

      return loadAsync;
    }()
  }, {
    key: "parse",
    value: function parse(json, onLoad) {
      var animations = this.parseAnimations(json.animations);
      var shapes = this.parseShapes(json.shapes);
      var geometries = this.parseGeometries(json.geometries, shapes);
      var images = this.parseImages(json.images, function () {
        if (onLoad !== undefined) onLoad(object);
      });
      var textures = this.parseTextures(json.textures, images);
      var materials = this.parseMaterials(json.materials, textures);
      var object = this.parseObject(json.object, geometries, materials, textures, animations);
      var skeletons = this.parseSkeletons(json.skeletons, object);
      this.bindSkeletons(object, skeletons); //

      if (onLoad !== undefined) {
        var hasImages = false;

        for (var uuid in images) {
          if (images[uuid] instanceof HTMLImageElement) {
            hasImages = true;
            break;
          }
        }

        if (hasImages === false) onLoad(object);
      }

      return object;
    }
  }, {
    key: "parseAsync",
    value: function () {
      var _parseAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(json) {
        var animations, shapes, geometries, images, textures, materials, object, skeletons;
        return _regeneratorRuntime().wrap(function _callee3$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                animations = this.parseAnimations(json.animations);
                shapes = this.parseShapes(json.shapes);
                geometries = this.parseGeometries(json.geometries, shapes);
                _context7.next = 5;
                return this.parseImagesAsync(json.images);

              case 5:
                images = _context7.sent;
                textures = this.parseTextures(json.textures, images);
                materials = this.parseMaterials(json.materials, textures);
                object = this.parseObject(json.object, geometries, materials, textures, animations);
                skeletons = this.parseSkeletons(json.skeletons, object);
                this.bindSkeletons(object, skeletons);
                return _context7.abrupt("return", object);

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee3, this);
      }));

      function parseAsync(_x9) {
        return _parseAsync.apply(this, arguments);
      }

      return parseAsync;
    }()
  }, {
    key: "parseShapes",
    value: function parseShapes(json) {
      var shapes = {};

      if (json !== undefined) {
        for (var _i293 = 0, l = json.length; _i293 < l; _i293++) {
          var shape = new Shape().fromJSON(json[_i293]);
          shapes[shape.uuid] = shape;
        }
      }

      return shapes;
    }
  }, {
    key: "parseSkeletons",
    value: function parseSkeletons(json, object) {
      var skeletons = {};
      var bones = {}; // generate bone lookup table

      object.traverse(function (child) {
        if (child.isBone) bones[child.uuid] = child;
      }); // create skeletons

      if (json !== undefined) {
        for (var _i294 = 0, l = json.length; _i294 < l; _i294++) {
          var skeleton = new Skeleton().fromJSON(json[_i294], bones);
          skeletons[skeleton.uuid] = skeleton;
        }
      }

      return skeletons;
    }
  }, {
    key: "parseGeometries",
    value: function parseGeometries(json, shapes) {
      var geometries = {};

      if (json !== undefined) {
        var bufferGeometryLoader = new BufferGeometryLoader();

        for (var _i295 = 0, l = json.length; _i295 < l; _i295++) {
          var geometry = void 0;
          var data = json[_i295];

          switch (data.type) {
            case 'BufferGeometry':
            case 'InstancedBufferGeometry':
              geometry = bufferGeometryLoader.parse(data);
              break;

            case 'Geometry':
              console.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');
              break;

            default:
              if (data.type in Geometries) {
                geometry = Geometries[data.type].fromJSON(data, shapes);
              } else {
                console.warn("THREE.ObjectLoader: Unsupported geometry type \"".concat(data.type, "\""));
              }

          }

          geometry.uuid = data.uuid;
          if (data.name !== undefined) geometry.name = data.name;
          if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
          geometries[data.uuid] = geometry;
        }
      }

      return geometries;
    }
  }, {
    key: "parseMaterials",
    value: function parseMaterials(json, textures) {
      var cache = {}; // MultiMaterial

      var materials = {};

      if (json !== undefined) {
        var loader = new MaterialLoader();
        loader.setTextures(textures);

        for (var _i296 = 0, l = json.length; _i296 < l; _i296++) {
          var data = json[_i296];

          if (data.type === 'MultiMaterial') {
            // Deprecated
            var array = [];

            for (var j = 0; j < data.materials.length; j++) {
              var material = data.materials[j];

              if (cache[material.uuid] === undefined) {
                cache[material.uuid] = loader.parse(material);
              }

              array.push(cache[material.uuid]);
            }

            materials[data.uuid] = array;
          } else {
            if (cache[data.uuid] === undefined) {
              cache[data.uuid] = loader.parse(data);
            }

            materials[data.uuid] = cache[data.uuid];
          }
        }
      }

      return materials;
    }
  }, {
    key: "parseAnimations",
    value: function parseAnimations(json) {
      var animations = {};

      if (json !== undefined) {
        for (var _i297 = 0; _i297 < json.length; _i297++) {
          var data = json[_i297];
          var clip = AnimationClip.parse(data);
          animations[clip.uuid] = clip;
        }
      }

      return animations;
    }
  }, {
    key: "parseImages",
    value: function parseImages(json, onLoad) {
      var scope = this;
      var images = {};
      var loader;

      function loadImage(url) {
        scope.manager.itemStart(url);
        return loader.load(url, function () {
          scope.manager.itemEnd(url);
        }, undefined, function () {
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        });
      }

      function deserializeImage(image) {
        if (typeof image === 'string') {
          var url = image;
          var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
          return loadImage(path);
        } else {
          if (image.data) {
            return {
              data: getTypedArray(image.type, image.data),
              width: image.width,
              height: image.height
            };
          } else {
            return null;
          }
        }
      }

      if (json !== undefined && json.length > 0) {
        var manager = new LoadingManager(onLoad);
        loader = new ImageLoader(manager);
        loader.setCrossOrigin(this.crossOrigin);

        for (var _i298 = 0, il = json.length; _i298 < il; _i298++) {
          var image = json[_i298];
          var url = image.url;

          if (Array.isArray(url)) {
            // load array of images e.g CubeTexture
            var imageArray = [];

            for (var j = 0, jl = url.length; j < jl; j++) {
              var currentUrl = url[j];
              var deserializedImage = deserializeImage(currentUrl);

              if (deserializedImage !== null) {
                if (deserializedImage instanceof HTMLImageElement) {
                  imageArray.push(deserializedImage);
                } else {
                  // special case: handle array of data textures for cube textures
                  imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                }
              }
            }

            images[image.uuid] = new Source(imageArray);
          } else {
            // load single image
            var _deserializedImage = deserializeImage(image.url);

            images[image.uuid] = new Source(_deserializedImage);
          }
        }
      }

      return images;
    }
  }, {
    key: "parseImagesAsync",
    value: function () {
      var _parseImagesAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(json) {
        var scope, images, loader, deserializeImage, _deserializeImage, _i299, il, image, url, imageArray, j, jl, currentUrl, deserializedImage, _deserializedImage2;

        return _regeneratorRuntime().wrap(function _callee5$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _deserializeImage = function _deserializeImage3() {
                  _deserializeImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(image) {
                    var _url, path;

                    return _regeneratorRuntime().wrap(function _callee4$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            if (!(typeof image === 'string')) {
                              _context8.next = 8;
                              break;
                            }

                            _url = image;
                            path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(_url) ? _url : scope.resourcePath + _url;
                            _context8.next = 5;
                            return loader.loadAsync(path);

                          case 5:
                            return _context8.abrupt("return", _context8.sent);

                          case 8:
                            if (!image.data) {
                              _context8.next = 12;
                              break;
                            }

                            return _context8.abrupt("return", {
                              data: getTypedArray(image.type, image.data),
                              width: image.width,
                              height: image.height
                            });

                          case 12:
                            return _context8.abrupt("return", null);

                          case 13:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee4);
                  }));
                  return _deserializeImage.apply(this, arguments);
                };

                deserializeImage = function _deserializeImage2(_x11) {
                  return _deserializeImage.apply(this, arguments);
                };

                scope = this;
                images = {};

                if (!(json !== undefined && json.length > 0)) {
                  _context9.next = 33;
                  break;
                }

                loader = new ImageLoader(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                _i299 = 0, il = json.length;

              case 8:
                if (!(_i299 < il)) {
                  _context9.next = 33;
                  break;
                }

                image = json[_i299];
                url = image.url;

                if (!Array.isArray(url)) {
                  _context9.next = 26;
                  break;
                }

                // load array of images e.g CubeTexture
                imageArray = [];
                j = 0, jl = url.length;

              case 14:
                if (!(j < jl)) {
                  _context9.next = 23;
                  break;
                }

                currentUrl = url[j];
                _context9.next = 18;
                return deserializeImage(currentUrl);

              case 18:
                deserializedImage = _context9.sent;

                if (deserializedImage !== null) {
                  if (deserializedImage instanceof HTMLImageElement) {
                    imageArray.push(deserializedImage);
                  } else {
                    // special case: handle array of data textures for cube textures
                    imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                  }
                }

              case 20:
                j++;
                _context9.next = 14;
                break;

              case 23:
                images[image.uuid] = new Source(imageArray);
                _context9.next = 30;
                break;

              case 26:
                _context9.next = 28;
                return deserializeImage(image.url);

              case 28:
                _deserializedImage2 = _context9.sent;
                images[image.uuid] = new Source(_deserializedImage2);

              case 30:
                _i299++;
                _context9.next = 8;
                break;

              case 33:
                return _context9.abrupt("return", images);

              case 34:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee5, this);
      }));

      function parseImagesAsync(_x10) {
        return _parseImagesAsync.apply(this, arguments);
      }

      return parseImagesAsync;
    }()
  }, {
    key: "parseTextures",
    value: function parseTextures(json, images) {
      function parseConstant(value, type) {
        if (typeof value === 'number') return value;
        console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
        return type[value];
      }

      var textures = {};

      if (json !== undefined) {
        for (var _i300 = 0, l = json.length; _i300 < l; _i300++) {
          var data = json[_i300];

          if (data.image === undefined) {
            console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
          }

          if (images[data.image] === undefined) {
            console.warn('THREE.ObjectLoader: Undefined image', data.image);
          }

          var source = images[data.image];
          var image = source.data;
          var texture = void 0;

          if (Array.isArray(image)) {
            texture = new CubeTexture();
            if (image.length === 6) texture.needsUpdate = true;
          } else {
            if (image && image.data) {
              texture = new DataTexture();
            } else {
              texture = new Texture();
            }

            if (image) texture.needsUpdate = true; // textures can have undefined image data
          }

          texture.source = source;
          texture.uuid = data.uuid;
          if (data.name !== undefined) texture.name = data.name;
          if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
          if (data.offset !== undefined) texture.offset.fromArray(data.offset);
          if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
          if (data.center !== undefined) texture.center.fromArray(data.center);
          if (data.rotation !== undefined) texture.rotation = data.rotation;

          if (data.wrap !== undefined) {
            texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
            texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
          }

          if (data.format !== undefined) texture.format = data.format;
          if (data.type !== undefined) texture.type = data.type;
          if (data.encoding !== undefined) texture.encoding = data.encoding;
          if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
          if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
          if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
          if (data.flipY !== undefined) texture.flipY = data.flipY;
          if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
          if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
          if (data.userData !== undefined) texture.userData = data.userData;
          textures[data.uuid] = texture;
        }
      }

      return textures;
    }
  }, {
    key: "parseObject",
    value: function parseObject(data, geometries, materials, textures, animations) {
      var object;

      function getGeometry(name) {
        if (geometries[name] === undefined) {
          console.warn('THREE.ObjectLoader: Undefined geometry', name);
        }

        return geometries[name];
      }

      function getMaterial(name) {
        if (name === undefined) return undefined;

        if (Array.isArray(name)) {
          var array = [];

          for (var _i301 = 0, l = name.length; _i301 < l; _i301++) {
            var uuid = name[_i301];

            if (materials[uuid] === undefined) {
              console.warn('THREE.ObjectLoader: Undefined material', uuid);
            }

            array.push(materials[uuid]);
          }

          return array;
        }

        if (materials[name] === undefined) {
          console.warn('THREE.ObjectLoader: Undefined material', name);
        }

        return materials[name];
      }

      function getTexture(uuid) {
        if (textures[uuid] === undefined) {
          console.warn('THREE.ObjectLoader: Undefined texture', uuid);
        }

        return textures[uuid];
      }

      var geometry, material;

      switch (data.type) {
        case 'Scene':
          object = new Scene();

          if (data.background !== undefined) {
            if (Number.isInteger(data.background)) {
              object.background = new Color(data.background);
            } else {
              object.background = getTexture(data.background);
            }
          }

          if (data.environment !== undefined) {
            object.environment = getTexture(data.environment);
          }

          if (data.fog !== undefined) {
            if (data.fog.type === 'Fog') {
              object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
            } else if (data.fog.type === 'FogExp2') {
              object.fog = new FogExp2(data.fog.color, data.fog.density);
            }
          }

          break;

        case 'PerspectiveCamera':
          object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
          if (data.focus !== undefined) object.focus = data.focus;
          if (data.zoom !== undefined) object.zoom = data.zoom;
          if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
          if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
          if (data.view !== undefined) object.view = Object.assign({}, data.view);
          break;

        case 'OrthographicCamera':
          object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
          if (data.zoom !== undefined) object.zoom = data.zoom;
          if (data.view !== undefined) object.view = Object.assign({}, data.view);
          break;

        case 'AmbientLight':
          object = new AmbientLight(data.color, data.intensity);
          break;

        case 'DirectionalLight':
          object = new DirectionalLight(data.color, data.intensity);
          break;

        case 'PointLight':
          object = new PointLight(data.color, data.intensity, data.distance, data.decay);
          break;

        case 'RectAreaLight':
          object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
          break;

        case 'SpotLight':
          object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
          break;

        case 'HemisphereLight':
          object = new HemisphereLight(data.color, data.groundColor, data.intensity);
          break;

        case 'LightProbe':
          object = new LightProbe().fromJSON(data);
          break;

        case 'SkinnedMesh':
          geometry = getGeometry(data.geometry);
          material = getMaterial(data.material);
          object = new SkinnedMesh(geometry, material);
          if (data.bindMode !== undefined) object.bindMode = data.bindMode;
          if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
          if (data.skeleton !== undefined) object.skeleton = data.skeleton;
          break;

        case 'Mesh':
          geometry = getGeometry(data.geometry);
          material = getMaterial(data.material);
          object = new Mesh(geometry, material);
          break;

        case 'InstancedMesh':
          geometry = getGeometry(data.geometry);
          material = getMaterial(data.material);
          var count = data.count;
          var instanceMatrix = data.instanceMatrix;
          var instanceColor = data.instanceColor;
          object = new InstancedMesh(geometry, material, count);
          object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
          if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
          break;

        case 'LOD':
          object = new LOD();
          break;

        case 'Line':
          object = new Line(getGeometry(data.geometry), getMaterial(data.material));
          break;

        case 'LineLoop':
          object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
          break;

        case 'LineSegments':
          object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
          break;

        case 'PointCloud':
        case 'Points':
          object = new Points(getGeometry(data.geometry), getMaterial(data.material));
          break;

        case 'Sprite':
          object = new Sprite(getMaterial(data.material));
          break;

        case 'Group':
          object = new Group();
          break;

        case 'Bone':
          object = new Bone();
          break;

        default:
          object = new Object3D();
      }

      object.uuid = data.uuid;
      if (data.name !== undefined) object.name = data.name;

      if (data.matrix !== undefined) {
        object.matrix.fromArray(data.matrix);
        if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
        if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
      } else {
        if (data.position !== undefined) object.position.fromArray(data.position);
        if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
        if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
        if (data.scale !== undefined) object.scale.fromArray(data.scale);
      }

      if (data.castShadow !== undefined) object.castShadow = data.castShadow;
      if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;

      if (data.shadow) {
        if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
        if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
        if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
        if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
        if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
      }

      if (data.visible !== undefined) object.visible = data.visible;
      if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
      if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
      if (data.userData !== undefined) object.userData = data.userData;
      if (data.layers !== undefined) object.layers.mask = data.layers;

      if (data.children !== undefined) {
        var children = data.children;

        for (var _i302 = 0; _i302 < children.length; _i302++) {
          object.add(this.parseObject(children[_i302], geometries, materials, textures, animations));
        }
      }

      if (data.animations !== undefined) {
        var objectAnimations = data.animations;

        for (var _i303 = 0; _i303 < objectAnimations.length; _i303++) {
          var uuid = objectAnimations[_i303];
          object.animations.push(animations[uuid]);
        }
      }

      if (data.type === 'LOD') {
        if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
        var levels = data.levels;

        for (var l = 0; l < levels.length; l++) {
          var level = levels[l];
          var child = object.getObjectByProperty('uuid', level.object);

          if (child !== undefined) {
            object.addLevel(child, level.distance);
          }
        }
      }

      return object;
    }
  }, {
    key: "bindSkeletons",
    value: function bindSkeletons(object, skeletons) {
      if (Object.keys(skeletons).length === 0) return;
      object.traverse(function (child) {
        if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
          var skeleton = skeletons[child.skeleton];

          if (skeleton === undefined) {
            console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
          } else {
            child.bind(skeleton, child.bindMatrix);
          }
        }
      });
    }
    /* DEPRECATED */

  }, {
    key: "setTexturePath",
    value: function setTexturePath(value) {
      console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');
      return this.setResourcePath(value);
    }
  }]);

  return ObjectLoader;
}(Loader);

exports.ObjectLoader = ObjectLoader;
var TEXTURE_MAPPING = {
  UVMapping: UVMapping,
  CubeReflectionMapping: CubeReflectionMapping,
  CubeRefractionMapping: CubeRefractionMapping,
  EquirectangularReflectionMapping: EquirectangularReflectionMapping,
  EquirectangularRefractionMapping: EquirectangularRefractionMapping,
  CubeUVReflectionMapping: CubeUVReflectionMapping
};
var TEXTURE_WRAPPING = {
  RepeatWrapping: RepeatWrapping,
  ClampToEdgeWrapping: ClampToEdgeWrapping,
  MirroredRepeatWrapping: MirroredRepeatWrapping
};
var TEXTURE_FILTER = {
  NearestFilter: NearestFilter,
  NearestMipmapNearestFilter: NearestMipmapNearestFilter,
  NearestMipmapLinearFilter: NearestMipmapLinearFilter,
  LinearFilter: LinearFilter,
  LinearMipmapNearestFilter: LinearMipmapNearestFilter,
  LinearMipmapLinearFilter: LinearMipmapLinearFilter
};

var ImageBitmapLoader = /*#__PURE__*/function (_Loader11) {
  _inherits(ImageBitmapLoader, _Loader11);

  var _super132 = _createSuper(ImageBitmapLoader);

  function ImageBitmapLoader(manager) {
    var _this104;

    _classCallCheck(this, ImageBitmapLoader);

    _this104 = _super132.call(this, manager);

    if (typeof createImageBitmap === 'undefined') {
      console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
    }

    if (typeof fetch === 'undefined') {
      console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
    }

    _this104.options = {
      premultiplyAlpha: 'none'
    };
    return _this104;
  }

  _createClass(ImageBitmapLoader, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
      return this;
    }
  }, {
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      if (url === undefined) url = '';
      if (this.path !== undefined) url = this.path + url;
      url = this.manager.resolveURL(url);
      var scope = this;
      var cached = Cache.get(url);

      if (cached !== undefined) {
        scope.manager.itemStart(url);
        setTimeout(function () {
          if (onLoad) onLoad(cached);
          scope.manager.itemEnd(url);
        }, 0);
        return cached;
      }

      var fetchOptions = {};
      fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
      fetchOptions.headers = this.requestHeader;
      fetch(url, fetchOptions).then(function (res) {
        return res.blob();
      }).then(function (blob) {
        return createImageBitmap(blob, Object.assign(scope.options, {
          colorSpaceConversion: 'none'
        }));
      }).then(function (imageBitmap) {
        Cache.add(url, imageBitmap);
        if (onLoad) onLoad(imageBitmap);
        scope.manager.itemEnd(url);
      }).catch(function (e) {
        if (onError) onError(e);
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
      scope.manager.itemStart(url);
    }
  }]);

  return ImageBitmapLoader;
}(Loader);

exports.ImageBitmapLoader = ImageBitmapLoader;
ImageBitmapLoader.prototype.isImageBitmapLoader = true;

var _context;

var AudioContext = {
  getContext: function getContext() {
    if (_context === undefined) {
      _context = new (window.AudioContext || window.webkitAudioContext)();
    }

    return _context;
  },
  setContext: function setContext(value) {
    _context = value;
  }
};
exports.AudioContext = AudioContext;

var AudioLoader = /*#__PURE__*/function (_Loader12) {
  _inherits(AudioLoader, _Loader12);

  var _super133 = _createSuper(AudioLoader);

  function AudioLoader(manager) {
    _classCallCheck(this, AudioLoader);

    return _super133.call(this, manager);
  }

  _createClass(AudioLoader, [{
    key: "load",
    value: function load(url, onLoad, onProgress, onError) {
      var scope = this;
      var loader = new FileLoader(this.manager);
      loader.setResponseType('arraybuffer');
      loader.setPath(this.path);
      loader.setRequestHeader(this.requestHeader);
      loader.setWithCredentials(this.withCredentials);
      loader.load(url, function (buffer) {
        try {
          // Create a copy of the buffer. The `decodeAudioData` method
          // detaches the buffer when complete, preventing reuse.
          var bufferCopy = buffer.slice(0);
          var context = AudioContext.getContext();
          context.decodeAudioData(bufferCopy, function (audioBuffer) {
            onLoad(audioBuffer);
          });
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }

          scope.manager.itemError(url);
        }
      }, onProgress, onError);
    }
  }]);

  return AudioLoader;
}(Loader);

exports.AudioLoader = AudioLoader;

var HemisphereLightProbe = /*#__PURE__*/function (_LightProbe) {
  _inherits(HemisphereLightProbe, _LightProbe);

  var _super134 = _createSuper(HemisphereLightProbe);

  function HemisphereLightProbe(skyColor, groundColor, intensity = 1) {
    var _this105;

    _classCallCheck(this, HemisphereLightProbe);

    _this105 = _super134.call(this, undefined, intensity);
    var color1 = new Color().set(skyColor);
    var color2 = new Color().set(groundColor);
    var sky = new Vector3(color1.r, color1.g, color1.b);
    var ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );

    var c0 = Math.sqrt(Math.PI);
    var c1 = c0 * Math.sqrt(0.75);

    _this105.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);

    _this105.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);

    return _this105;
  }

  return _createClass(HemisphereLightProbe);
}(LightProbe);

exports.HemisphereLightProbe = HemisphereLightProbe;
HemisphereLightProbe.prototype.isHemisphereLightProbe = true;

var AmbientLightProbe = /*#__PURE__*/function (_LightProbe2) {
  _inherits(AmbientLightProbe, _LightProbe2);

  var _super135 = _createSuper(AmbientLightProbe);

  function AmbientLightProbe(color, intensity = 1) {
    var _this106;

    _classCallCheck(this, AmbientLightProbe);

    _this106 = _super135.call(this, undefined, intensity);
    var color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );

    _this106.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));

    return _this106;
  }

  return _createClass(AmbientLightProbe);
}(LightProbe);

exports.AmbientLightProbe = AmbientLightProbe;
AmbientLightProbe.prototype.isAmbientLightProbe = true;

var _eyeRight = /*@__PURE__*/new Matrix4();

var _eyeLeft = /*@__PURE__*/new Matrix4();

var _projectionMatrix = /*@__PURE__*/new Matrix4();

var StereoCamera = /*#__PURE__*/function () {
  function StereoCamera() {
    _classCallCheck(this, StereoCamera);

    this.type = 'StereoCamera';
    this.aspect = 1;
    this.eyeSep = 0.064;
    this.cameraL = new PerspectiveCamera();
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = false;
    this.cameraR = new PerspectiveCamera();
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = false;
    this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }

  _createClass(StereoCamera, [{
    key: "update",
    value: function update(camera) {
      var cache = this._cache;
      var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

      if (needsUpdate) {
        cache.focus = camera.focus;
        cache.fov = camera.fov;
        cache.aspect = camera.aspect * this.aspect;
        cache.near = camera.near;
        cache.far = camera.far;
        cache.zoom = camera.zoom;
        cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on
        // http://paulbourke.net/stereographics/stereorender/

        _projectionMatrix.copy(camera.projectionMatrix);

        var eyeSepHalf = cache.eyeSep / 2;
        var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
        var ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
        var xmin, xmax; // translate xOffset

        _eyeLeft.elements[12] = -eyeSepHalf;
        _eyeRight.elements[12] = eyeSepHalf; // for left eye

        xmin = -ymax * cache.aspect + eyeSepOnProjection;
        xmax = ymax * cache.aspect + eyeSepOnProjection;
        _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
        _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraL.projectionMatrix.copy(_projectionMatrix); // for right eye

        xmin = -ymax * cache.aspect - eyeSepOnProjection;
        xmax = ymax * cache.aspect - eyeSepOnProjection;
        _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
        _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraR.projectionMatrix.copy(_projectionMatrix);
      }

      this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
      this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
    }
  }]);

  return StereoCamera;
}();

exports.StereoCamera = StereoCamera;

var Clock = /*#__PURE__*/function () {
  function Clock(autoStart = true) {
    _classCallCheck(this, Clock);

    this.autoStart = autoStart;
    this.startTime = 0;
    this.oldTime = 0;
    this.elapsedTime = 0;
    this.running = false;
  }

  _createClass(Clock, [{
    key: "start",
    value: function start() {
      this.startTime = now();
      this.oldTime = this.startTime;
      this.elapsedTime = 0;
      this.running = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      this.getElapsedTime();
      this.running = false;
      this.autoStart = false;
    }
  }, {
    key: "getElapsedTime",
    value: function getElapsedTime() {
      this.getDelta();
      return this.elapsedTime;
    }
  }, {
    key: "getDelta",
    value: function getDelta() {
      var diff = 0;

      if (this.autoStart && !this.running) {
        this.start();
        return 0;
      }

      if (this.running) {
        var newTime = now();
        diff = (newTime - this.oldTime) / 1000;
        this.oldTime = newTime;
        this.elapsedTime += diff;
      }

      return diff;
    }
  }]);

  return Clock;
}();

exports.Clock = Clock;

function now() {
  return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
}

var _position$1 = /*@__PURE__*/new Vector3();

var _quaternion$1 = /*@__PURE__*/new Quaternion();

var _scale$1 = /*@__PURE__*/new Vector3();

var _orientation$1 = /*@__PURE__*/new Vector3();

var AudioListener = /*#__PURE__*/function (_Object3D12) {
  _inherits(AudioListener, _Object3D12);

  var _super136 = _createSuper(AudioListener);

  function AudioListener() {
    var _this107;

    _classCallCheck(this, AudioListener);

    _this107 = _super136.call(this);
    _this107.type = 'AudioListener';
    _this107.context = AudioContext.getContext();
    _this107.gain = _this107.context.createGain();

    _this107.gain.connect(_this107.context.destination);

    _this107.filter = null;
    _this107.timeDelta = 0; // private

    _this107._clock = new Clock();
    return _this107;
  }

  _createClass(AudioListener, [{
    key: "getInput",
    value: function getInput() {
      return this.gain;
    }
  }, {
    key: "removeFilter",
    value: function removeFilter() {
      if (this.filter !== null) {
        this.gain.disconnect(this.filter);
        this.filter.disconnect(this.context.destination);
        this.gain.connect(this.context.destination);
        this.filter = null;
      }

      return this;
    }
  }, {
    key: "getFilter",
    value: function getFilter() {
      return this.filter;
    }
  }, {
    key: "setFilter",
    value: function setFilter(value) {
      if (this.filter !== null) {
        this.gain.disconnect(this.filter);
        this.filter.disconnect(this.context.destination);
      } else {
        this.gain.disconnect(this.context.destination);
      }

      this.filter = value;
      this.gain.connect(this.filter);
      this.filter.connect(this.context.destination);
      return this;
    }
  }, {
    key: "getMasterVolume",
    value: function getMasterVolume() {
      return this.gain.gain.value;
    }
  }, {
    key: "setMasterVolume",
    value: function setMasterVolume(value) {
      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
      return this;
    }
  }, {
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      _get(_getPrototypeOf(AudioListener.prototype), "updateMatrixWorld", this).call(this, force);

      var listener = this.context.listener;
      var up = this.up;
      this.timeDelta = this._clock.getDelta();
      this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);

      _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);

      if (listener.positionX) {
        // code path for Chrome (see #14393)
        var endTime = this.context.currentTime + this.timeDelta;
        listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
        listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
        listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
        listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
        listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
        listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
        listener.upX.linearRampToValueAtTime(up.x, endTime);
        listener.upY.linearRampToValueAtTime(up.y, endTime);
        listener.upZ.linearRampToValueAtTime(up.z, endTime);
      } else {
        listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
        listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
      }
    }
  }]);

  return AudioListener;
}(Object3D);

exports.AudioListener = AudioListener;

var Audio = /*#__PURE__*/function (_Object3D13) {
  _inherits(Audio, _Object3D13);

  var _super137 = _createSuper(Audio);

  function Audio(listener) {
    var _this108;

    _classCallCheck(this, Audio);

    _this108 = _super137.call(this);
    _this108.type = 'Audio';
    _this108.listener = listener;
    _this108.context = listener.context;
    _this108.gain = _this108.context.createGain();

    _this108.gain.connect(listener.getInput());

    _this108.autoplay = false;
    _this108.buffer = null;
    _this108.detune = 0;
    _this108.loop = false;
    _this108.loopStart = 0;
    _this108.loopEnd = 0;
    _this108.offset = 0;
    _this108.duration = undefined;
    _this108.playbackRate = 1;
    _this108.isPlaying = false;
    _this108.hasPlaybackControl = true;
    _this108.source = null;
    _this108.sourceType = 'empty';
    _this108._startedAt = 0;
    _this108._progress = 0;
    _this108._connected = false;
    _this108.filters = [];
    return _this108;
  }

  _createClass(Audio, [{
    key: "getOutput",
    value: function getOutput() {
      return this.gain;
    }
  }, {
    key: "setNodeSource",
    value: function setNodeSource(audioNode) {
      this.hasPlaybackControl = false;
      this.sourceType = 'audioNode';
      this.source = audioNode;
      this.connect();
      return this;
    }
  }, {
    key: "setMediaElementSource",
    value: function setMediaElementSource(mediaElement) {
      this.hasPlaybackControl = false;
      this.sourceType = 'mediaNode';
      this.source = this.context.createMediaElementSource(mediaElement);
      this.connect();
      return this;
    }
  }, {
    key: "setMediaStreamSource",
    value: function setMediaStreamSource(mediaStream) {
      this.hasPlaybackControl = false;
      this.sourceType = 'mediaStreamNode';
      this.source = this.context.createMediaStreamSource(mediaStream);
      this.connect();
      return this;
    }
  }, {
    key: "setBuffer",
    value: function setBuffer(audioBuffer) {
      this.buffer = audioBuffer;
      this.sourceType = 'buffer';
      if (this.autoplay) this.play();
      return this;
    }
  }, {
    key: "play",
    value: function play(delay = 0) {
      if (this.isPlaying === true) {
        console.warn('THREE.Audio: Audio is already playing.');
        return;
      }

      if (this.hasPlaybackControl === false) {
        console.warn('THREE.Audio: this Audio has no playback control.');
        return;
      }

      this._startedAt = this.context.currentTime + delay;
      var source = this.context.createBufferSource();
      source.buffer = this.buffer;
      source.loop = this.loop;
      source.loopStart = this.loopStart;
      source.loopEnd = this.loopEnd;
      source.onended = this.onEnded.bind(this);
      source.start(this._startedAt, this._progress + this.offset, this.duration);
      this.isPlaying = true;
      this.source = source;
      this.setDetune(this.detune);
      this.setPlaybackRate(this.playbackRate);
      return this.connect();
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.hasPlaybackControl === false) {
        console.warn('THREE.Audio: this Audio has no playback control.');
        return;
      }

      if (this.isPlaying === true) {
        // update current progress
        this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;

        if (this.loop === true) {
          // ensure _progress does not exceed duration with looped audios
          this._progress = this._progress % (this.duration || this.buffer.duration);
        }

        this.source.stop();
        this.source.onended = null;
        this.isPlaying = false;
      }

      return this;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.hasPlaybackControl === false) {
        console.warn('THREE.Audio: this Audio has no playback control.');
        return;
      }

      this._progress = 0;
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
      return this;
    }
  }, {
    key: "connect",
    value: function connect() {
      if (this.filters.length > 0) {
        this.source.connect(this.filters[0]);

        for (var _i304 = 1, l = this.filters.length; _i304 < l; _i304++) {
          this.filters[_i304 - 1].connect(this.filters[_i304]);
        }

        this.filters[this.filters.length - 1].connect(this.getOutput());
      } else {
        this.source.connect(this.getOutput());
      }

      this._connected = true;
      return this;
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);

        for (var _i305 = 1, l = this.filters.length; _i305 < l; _i305++) {
          this.filters[_i305 - 1].disconnect(this.filters[_i305]);
        }

        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else {
        this.source.disconnect(this.getOutput());
      }

      this._connected = false;
      return this;
    }
  }, {
    key: "getFilters",
    value: function getFilters() {
      return this.filters;
    }
  }, {
    key: "setFilters",
    value: function setFilters(value) {
      if (!value) value = [];

      if (this._connected === true) {
        this.disconnect();
        this.filters = value.slice();
        this.connect();
      } else {
        this.filters = value.slice();
      }

      return this;
    }
  }, {
    key: "setDetune",
    value: function setDetune(value) {
      this.detune = value;
      if (this.source.detune === undefined) return; // only set detune when available

      if (this.isPlaying === true) {
        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
      }

      return this;
    }
  }, {
    key: "getDetune",
    value: function getDetune() {
      return this.detune;
    }
  }, {
    key: "getFilter",
    value: function getFilter() {
      return this.getFilters()[0];
    }
  }, {
    key: "setFilter",
    value: function setFilter(filter) {
      return this.setFilters(filter ? [filter] : []);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(value) {
      if (this.hasPlaybackControl === false) {
        console.warn('THREE.Audio: this Audio has no playback control.');
        return;
      }

      this.playbackRate = value;

      if (this.isPlaying === true) {
        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
      }

      return this;
    }
  }, {
    key: "getPlaybackRate",
    value: function getPlaybackRate() {
      return this.playbackRate;
    }
  }, {
    key: "onEnded",
    value: function onEnded() {
      this.isPlaying = false;
    }
  }, {
    key: "getLoop",
    value: function getLoop() {
      if (this.hasPlaybackControl === false) {
        console.warn('THREE.Audio: this Audio has no playback control.');
        return false;
      }

      return this.loop;
    }
  }, {
    key: "setLoop",
    value: function setLoop(value) {
      if (this.hasPlaybackControl === false) {
        console.warn('THREE.Audio: this Audio has no playback control.');
        return;
      }

      this.loop = value;

      if (this.isPlaying === true) {
        this.source.loop = this.loop;
      }

      return this;
    }
  }, {
    key: "setLoopStart",
    value: function setLoopStart(value) {
      this.loopStart = value;
      return this;
    }
  }, {
    key: "setLoopEnd",
    value: function setLoopEnd(value) {
      this.loopEnd = value;
      return this;
    }
  }, {
    key: "getVolume",
    value: function getVolume() {
      return this.gain.gain.value;
    }
  }, {
    key: "setVolume",
    value: function setVolume(value) {
      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
      return this;
    }
  }]);

  return Audio;
}(Object3D);

exports.Audio = Audio;

var _position = /*@__PURE__*/new Vector3();

var _quaternion = /*@__PURE__*/new Quaternion();

var _scale = /*@__PURE__*/new Vector3();

var _orientation = /*@__PURE__*/new Vector3();

var PositionalAudio = /*#__PURE__*/function (_Audio) {
  _inherits(PositionalAudio, _Audio);

  var _super138 = _createSuper(PositionalAudio);

  function PositionalAudio(listener) {
    var _this109;

    _classCallCheck(this, PositionalAudio);

    _this109 = _super138.call(this, listener);
    _this109.panner = _this109.context.createPanner();
    _this109.panner.panningModel = 'HRTF';

    _this109.panner.connect(_this109.gain);

    return _this109;
  }

  _createClass(PositionalAudio, [{
    key: "disconnect",
    value: function disconnect() {
      _get(_getPrototypeOf(PositionalAudio.prototype), "disconnect", this).call(this);

      this.panner.disconnect(this.gain);
    }
  }, {
    key: "getOutput",
    value: function getOutput() {
      return this.panner;
    }
  }, {
    key: "getRefDistance",
    value: function getRefDistance() {
      return this.panner.refDistance;
    }
  }, {
    key: "setRefDistance",
    value: function setRefDistance(value) {
      this.panner.refDistance = value;
      return this;
    }
  }, {
    key: "getRolloffFactor",
    value: function getRolloffFactor() {
      return this.panner.rolloffFactor;
    }
  }, {
    key: "setRolloffFactor",
    value: function setRolloffFactor(value) {
      this.panner.rolloffFactor = value;
      return this;
    }
  }, {
    key: "getDistanceModel",
    value: function getDistanceModel() {
      return this.panner.distanceModel;
    }
  }, {
    key: "setDistanceModel",
    value: function setDistanceModel(value) {
      this.panner.distanceModel = value;
      return this;
    }
  }, {
    key: "getMaxDistance",
    value: function getMaxDistance() {
      return this.panner.maxDistance;
    }
  }, {
    key: "setMaxDistance",
    value: function setMaxDistance(value) {
      this.panner.maxDistance = value;
      return this;
    }
  }, {
    key: "setDirectionalCone",
    value: function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
      this.panner.coneInnerAngle = coneInnerAngle;
      this.panner.coneOuterAngle = coneOuterAngle;
      this.panner.coneOuterGain = coneOuterGain;
      return this;
    }
  }, {
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      _get(_getPrototypeOf(PositionalAudio.prototype), "updateMatrixWorld", this).call(this, force);

      if (this.hasPlaybackControl === true && this.isPlaying === false) return;
      this.matrixWorld.decompose(_position, _quaternion, _scale);

      _orientation.set(0, 0, 1).applyQuaternion(_quaternion);

      var panner = this.panner;

      if (panner.positionX) {
        // code path for Chrome and Firefox (see #14393)
        var endTime = this.context.currentTime + this.listener.timeDelta;
        panner.positionX.linearRampToValueAtTime(_position.x, endTime);
        panner.positionY.linearRampToValueAtTime(_position.y, endTime);
        panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
        panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
        panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
        panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
      } else {
        panner.setPosition(_position.x, _position.y, _position.z);
        panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
      }
    }
  }]);

  return PositionalAudio;
}(Audio);

exports.PositionalAudio = PositionalAudio;

var AudioAnalyser = /*#__PURE__*/function () {
  function AudioAnalyser(audio, fftSize = 2048) {
    _classCallCheck(this, AudioAnalyser);

    this.analyser = audio.context.createAnalyser();
    this.analyser.fftSize = fftSize;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    audio.getOutput().connect(this.analyser);
  }

  _createClass(AudioAnalyser, [{
    key: "getFrequencyData",
    value: function getFrequencyData() {
      this.analyser.getByteFrequencyData(this.data);
      return this.data;
    }
  }, {
    key: "getAverageFrequency",
    value: function getAverageFrequency() {
      var value = 0;
      var data = this.getFrequencyData();

      for (var _i306 = 0; _i306 < data.length; _i306++) {
        value += data[_i306];
      }

      return value / data.length;
    }
  }]);

  return AudioAnalyser;
}();

exports.AudioAnalyser = AudioAnalyser;

var PropertyMixer = /*#__PURE__*/function () {
  function PropertyMixer(binding, typeName, valueSize) {
    _classCallCheck(this, PropertyMixer);

    this.binding = binding;
    this.valueSize = valueSize;
    var mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
    //
    // interpolators can use .buffer as their .result
    // the data then goes to 'incoming'
    //
    // 'accu0' and 'accu1' are used frame-interleaved for
    // the cumulative result and are compared to detect
    // changes
    //
    // 'orig' stores the original state of the property
    //
    // 'add' is used for additive cumulative results
    //
    // 'work' is optional and is only present for quaternion types. It is used
    // to store intermediate quaternion multiplication results

    switch (typeName) {
      case 'quaternion':
        mixFunction = this._slerp;
        mixFunctionAdditive = this._slerpAdditive;
        setIdentity = this._setAdditiveIdentityQuaternion;
        this.buffer = new Float64Array(valueSize * 6);
        this._workIndex = 5;
        break;

      case 'string':
      case 'bool':
        mixFunction = this._select; // Use the regular mix function and for additive on these types,
        // additive is not relevant for non-numeric types

        mixFunctionAdditive = this._select;
        setIdentity = this._setAdditiveIdentityOther;
        this.buffer = new Array(valueSize * 5);
        break;

      default:
        mixFunction = this._lerp;
        mixFunctionAdditive = this._lerpAdditive;
        setIdentity = this._setAdditiveIdentityNumeric;
        this.buffer = new Float64Array(valueSize * 5);
    }

    this._mixBufferRegion = mixFunction;
    this._mixBufferRegionAdditive = mixFunctionAdditive;
    this._setIdentity = setIdentity;
    this._origIndex = 3;
    this._addIndex = 4;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    this.useCount = 0;
    this.referenceCount = 0;
  } // accumulate data in the 'incoming' region into 'accu<i>'


  _createClass(PropertyMixer, [{
    key: "accumulate",
    value: function accumulate(accuIndex, weight) {
      // note: happily accumulating nothing when weight = 0, the caller knows
      // the weight and shouldn't have made the call in the first place
      var buffer = this.buffer,
          stride = this.valueSize,
          offset = accuIndex * stride + stride;
      var currentWeight = this.cumulativeWeight;

      if (currentWeight === 0) {
        // accuN := incoming * weight
        for (var _i307 = 0; _i307 !== stride; ++_i307) {
          buffer[offset + _i307] = buffer[_i307];
        }

        currentWeight = weight;
      } else {
        // accuN := accuN + incoming * weight
        currentWeight += weight;
        var mix = weight / currentWeight;

        this._mixBufferRegion(buffer, offset, 0, mix, stride);
      }

      this.cumulativeWeight = currentWeight;
    } // accumulate data in the 'incoming' region into 'add'

  }, {
    key: "accumulateAdditive",
    value: function accumulateAdditive(weight) {
      var buffer = this.buffer,
          stride = this.valueSize,
          offset = stride * this._addIndex;

      if (this.cumulativeWeightAdditive === 0) {
        // add = identity
        this._setIdentity();
      } // add := add + incoming * weight


      this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);

      this.cumulativeWeightAdditive += weight;
    } // apply the state of 'accu<i>' to the binding when accus differ

  }, {
    key: "apply",
    value: function apply(accuIndex) {
      var stride = this.valueSize,
          buffer = this.buffer,
          offset = accuIndex * stride + stride,
          weight = this.cumulativeWeight,
          weightAdditive = this.cumulativeWeightAdditive,
          binding = this.binding;
      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;

      if (weight < 1) {
        // accuN := accuN + original * ( 1 - cumulativeWeight )
        var originalValueOffset = stride * this._origIndex;

        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
      }

      if (weightAdditive > 0) {
        // accuN := accuN + additive accuN
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
      }

      for (var _i308 = stride, e = stride + stride; _i308 !== e; ++_i308) {
        if (buffer[_i308] !== buffer[_i308 + stride]) {
          // value has changed -> update scene graph
          binding.setValue(buffer, offset);
          break;
        }
      }
    } // remember the state of the bound property and copy it to both accus

  }, {
    key: "saveOriginalState",
    value: function saveOriginalState() {
      var binding = this.binding;
      var buffer = this.buffer,
          stride = this.valueSize,
          originalValueOffset = stride * this._origIndex;
      binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original

      for (var _i309 = stride, e = originalValueOffset; _i309 !== e; ++_i309) {
        buffer[_i309] = buffer[originalValueOffset + _i309 % stride];
      } // Add to identity for additive


      this._setIdentity();

      this.cumulativeWeight = 0;
      this.cumulativeWeightAdditive = 0;
    } // apply the state previously taken via 'saveOriginalState' to the binding

  }, {
    key: "restoreOriginalState",
    value: function restoreOriginalState() {
      var originalValueOffset = this.valueSize * 3;
      this.binding.setValue(this.buffer, originalValueOffset);
    }
  }, {
    key: "_setAdditiveIdentityNumeric",
    value: function _setAdditiveIdentityNumeric() {
      var startIndex = this._addIndex * this.valueSize;
      var endIndex = startIndex + this.valueSize;

      for (var _i310 = startIndex; _i310 < endIndex; _i310++) {
        this.buffer[_i310] = 0;
      }
    }
  }, {
    key: "_setAdditiveIdentityQuaternion",
    value: function _setAdditiveIdentityQuaternion() {
      this._setAdditiveIdentityNumeric();

      this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
  }, {
    key: "_setAdditiveIdentityOther",
    value: function _setAdditiveIdentityOther() {
      var startIndex = this._origIndex * this.valueSize;
      var targetIndex = this._addIndex * this.valueSize;

      for (var _i311 = 0; _i311 < this.valueSize; _i311++) {
        this.buffer[targetIndex + _i311] = this.buffer[startIndex + _i311];
      }
    } // mix functions

  }, {
    key: "_select",
    value: function _select(buffer, dstOffset, srcOffset, t, stride) {
      if (t >= 0.5) {
        for (var _i312 = 0; _i312 !== stride; ++_i312) {
          buffer[dstOffset + _i312] = buffer[srcOffset + _i312];
        }
      }
    }
  }, {
    key: "_slerp",
    value: function _slerp(buffer, dstOffset, srcOffset, t) {
      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    }
  }, {
    key: "_slerpAdditive",
    value: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
      var workOffset = this._workIndex * stride; // Store result in intermediate buffer offset

      Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result

      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    }
  }, {
    key: "_lerp",
    value: function _lerp(buffer, dstOffset, srcOffset, t, stride) {
      var s = 1 - t;

      for (var _i313 = 0; _i313 !== stride; ++_i313) {
        var j = dstOffset + _i313;
        buffer[j] = buffer[j] * s + buffer[srcOffset + _i313] * t;
      }
    }
  }, {
    key: "_lerpAdditive",
    value: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
      for (var _i314 = 0; _i314 !== stride; ++_i314) {
        var j = dstOffset + _i314;
        buffer[j] = buffer[j] + buffer[srcOffset + _i314] * t;
      }
    }
  }]);

  return PropertyMixer;
}(); // Characters [].:/ are reserved for track binding syntax.


exports.PropertyMixer = PropertyMixer;
var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

var _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.


var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';

var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.


var _directoryRe = /((?:WC+[\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.


var _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.


var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.


var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar);

var _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');

var _supportedObjectNames = ['material', 'materials', 'bones'];

var Composite = /*#__PURE__*/function () {
  function Composite(targetGroup, path, optionalParsedPath) {
    _classCallCheck(this, Composite);

    var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
    this._targetGroup = targetGroup;
    this._bindings = targetGroup.subscribe_(path, parsedPath);
  }

  _createClass(Composite, [{
    key: "getValue",
    value: function getValue(array, offset) {
      this.bind(); // bind all binding

      var firstValidIndex = this._targetGroup.nCachedObjects_,
          binding = this._bindings[firstValidIndex]; // and only call .getValue on the first

      if (binding !== undefined) binding.getValue(array, offset);
    }
  }, {
    key: "setValue",
    value: function setValue(array, offset) {
      var bindings = this._bindings;

      for (var _i315 = this._targetGroup.nCachedObjects_, n = bindings.length; _i315 !== n; ++_i315) {
        bindings[_i315].setValue(array, offset);
      }
    }
  }, {
    key: "bind",
    value: function bind() {
      var bindings = this._bindings;

      for (var _i316 = this._targetGroup.nCachedObjects_, n = bindings.length; _i316 !== n; ++_i316) {
        bindings[_i316].bind();
      }
    }
  }, {
    key: "unbind",
    value: function unbind() {
      var bindings = this._bindings;

      for (var _i317 = this._targetGroup.nCachedObjects_, n = bindings.length; _i317 !== n; ++_i317) {
        bindings[_i317].unbind();
      }
    }
  }]);

  return Composite;
}(); // Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.


var PropertyBinding = /*#__PURE__*/function () {
  function PropertyBinding(rootNode, path, parsedPath) {
    _classCallCheck(this, PropertyBinding);

    this.path = path;
    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
    this.rootNode = rootNode; // initial state of these methods that calls 'bind'

    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }

  _createClass(PropertyBinding, [{
    key: "_getValue_unavailable",
    value: // these are used to "bind" a nonexistent property
    function _getValue_unavailable() {}
  }, {
    key: "_setValue_unavailable",
    value: function _setValue_unavailable() {} // Getters

  }, {
    key: "_getValue_direct",
    value: function _getValue_direct(buffer, offset) {
      buffer[offset] = this.targetObject[this.propertyName];
    }
  }, {
    key: "_getValue_array",
    value: function _getValue_array(buffer, offset) {
      var source = this.resolvedProperty;

      for (var _i318 = 0, n = source.length; _i318 !== n; ++_i318) {
        buffer[offset++] = source[_i318];
      }
    }
  }, {
    key: "_getValue_arrayElement",
    value: function _getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
  }, {
    key: "_getValue_toArray",
    value: function _getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    } // Direct

  }, {
    key: "_setValue_direct",
    value: function _setValue_direct(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
    }
  }, {
    key: "_setValue_direct_setNeedsUpdate",
    value: function _setValue_direct_setNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
  }, {
    key: "_setValue_direct_setMatrixWorldNeedsUpdate",
    value: function _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    } // EntireArray

  }, {
    key: "_setValue_array",
    value: function _setValue_array(buffer, offset) {
      var dest = this.resolvedProperty;

      for (var _i319 = 0, n = dest.length; _i319 !== n; ++_i319) {
        dest[_i319] = buffer[offset++];
      }
    }
  }, {
    key: "_setValue_array_setNeedsUpdate",
    value: function _setValue_array_setNeedsUpdate(buffer, offset) {
      var dest = this.resolvedProperty;

      for (var _i320 = 0, n = dest.length; _i320 !== n; ++_i320) {
        dest[_i320] = buffer[offset++];
      }

      this.targetObject.needsUpdate = true;
    }
  }, {
    key: "_setValue_array_setMatrixWorldNeedsUpdate",
    value: function _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
      var dest = this.resolvedProperty;

      for (var _i321 = 0, n = dest.length; _i321 !== n; ++_i321) {
        dest[_i321] = buffer[offset++];
      }

      this.targetObject.matrixWorldNeedsUpdate = true;
    } // ArrayElement

  }, {
    key: "_setValue_arrayElement",
    value: function _setValue_arrayElement(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
  }, {
    key: "_setValue_arrayElement_setNeedsUpdate",
    value: function _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
  }, {
    key: "_setValue_arrayElement_setMatrixWorldNeedsUpdate",
    value: function _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    } // HasToFromArray

  }, {
    key: "_setValue_fromArray",
    value: function _setValue_fromArray(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
    }
  }, {
    key: "_setValue_fromArray_setNeedsUpdate",
    value: function _setValue_fromArray_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.needsUpdate = true;
    }
  }, {
    key: "_setValue_fromArray_setMatrixWorldNeedsUpdate",
    value: function _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
  }, {
    key: "_getValue_unbound",
    value: function _getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    }
  }, {
    key: "_setValue_unbound",
    value: function _setValue_unbound(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    } // create getter / setter pair for a property in the scene graph

  }, {
    key: "bind",
    value: function bind() {
      var targetObject = this.node;
      var parsedPath = this.parsedPath;
      var objectName = parsedPath.objectName;
      var propertyName = parsedPath.propertyName;
      var propertyIndex = parsedPath.propertyIndex;

      if (!targetObject) {
        targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
        this.node = targetObject;
      } // set fail state so we can just 'return' on error


      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable; // ensure there is a value node

      if (!targetObject) {
        console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
        return;
      }

      if (objectName) {
        var objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....

        switch (objectName) {
          case 'materials':
            if (!targetObject.material) {
              console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
              return;
            }

            if (!targetObject.material.materials) {
              console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
              return;
            }

            targetObject = targetObject.material.materials;
            break;

          case 'bones':
            if (!targetObject.skeleton) {
              console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
              return;
            } // potential future optimization: skip this if propertyIndex is already an integer
            // and convert the integer string to a true integer.


            targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.

            for (var _i322 = 0; _i322 < targetObject.length; _i322++) {
              if (targetObject[_i322].name === objectIndex) {
                objectIndex = _i322;
                break;
              }
            }

            break;

          default:
            if (targetObject[objectName] === undefined) {
              console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
              return;
            }

            targetObject = targetObject[objectName];
        }

        if (objectIndex !== undefined) {
          if (targetObject[objectIndex] === undefined) {
            console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
            return;
          }

          targetObject = targetObject[objectIndex];
        }
      } // resolve property


      var nodeProperty = targetObject[propertyName];

      if (nodeProperty === undefined) {
        var nodeName = parsedPath.nodeName;
        console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
        return;
      } // determine versioning scheme


      var versioning = this.Versioning.None;
      this.targetObject = targetObject;

      if (targetObject.needsUpdate !== undefined) {
        // material
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
        // node transform
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      } // determine how the property gets bound


      var bindingType = this.BindingType.Direct;

      if (propertyIndex !== undefined) {
        // access a sub element of the property array (only primitives are supported right now)
        if (propertyName === 'morphTargetInfluences') {
          // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
          // support resolving morphTarget names into indices.
          if (!targetObject.geometry) {
            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
            return;
          }

          if (targetObject.geometry.isBufferGeometry) {
            if (!targetObject.geometry.morphAttributes) {
              console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
              return;
            }

            if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {
              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
          } else {
            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);
            return;
          }
        }

        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
        // must use copy for Object3D.Euler/Quaternion
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      } // select getter / setter


      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
  }, {
    key: "unbind",
    value: function unbind() {
      this.node = null; // back to the prototype version of getValue / setValue
      // note: avoiding to mutate the shape of 'this' via 'delete'

      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  }], [{
    key: "create",
    value: function create(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new PropertyBinding(root, path, parsedPath);
      } else {
        return new PropertyBinding.Composite(root, path, parsedPath);
      }
    }
    /**
     * Replaces spaces with underscores and removes unsupported characters from
     * node names, to ensure compatibility with parseTrackName().
     *
     * @param {string} name Node name to be sanitized.
     * @return {string}
     */

  }, {
    key: "sanitizeNodeName",
    value: function sanitizeNodeName(name) {
      return name.replace(/\s/g, '_').replace(_reservedRe, '');
    }
  }, {
    key: "parseTrackName",
    value: function parseTrackName(trackName) {
      var matches = _trackRe.exec(trackName);

      if (matches === null) {
        throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
      }

      var results = {
        // directoryName: matches[ 1 ], // (tschw) currently unused
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        // required
        propertyIndex: matches[6]
      };
      var lastDot = results.nodeName && results.nodeName.lastIndexOf('.');

      if (lastDot !== undefined && lastDot !== -1) {
        var objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there
        // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
        // 'bar' could be the objectName, or part of a nodeName (which can
        // include '.' characters).

        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }

      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
      }

      return results;
    }
  }, {
    key: "findNode",
    value: function findNode(root, nodeName) {
      if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      } // search into skeleton bones.


      if (root.skeleton) {
        var bone = root.skeleton.getBoneByName(nodeName);

        if (bone !== undefined) {
          return bone;
        }
      } // search into node subtree.


      if (root.children) {
        var searchNodeSubtree = function searchNodeSubtree(children) {
          for (var _i323 = 0; _i323 < children.length; _i323++) {
            var childNode = children[_i323];

            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }

            var result = searchNodeSubtree(childNode.children);
            if (result) return result;
          }

          return null;
        };

        var subTreeNode = searchNodeSubtree(root.children);

        if (subTreeNode) {
          return subTreeNode;
        }
      }

      return null;
    }
  }]);

  return PropertyBinding;
}();

exports.PropertyBinding = PropertyBinding;
PropertyBinding.Composite = Composite;
PropertyBinding.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
PropertyBinding.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];
PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct
PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray
PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement
PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray
PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */

var AnimationObjectGroup = /*#__PURE__*/function () {
  function AnimationObjectGroup() {
    _classCallCheck(this, AnimationObjectGroup);

    this.uuid = generateUUID(); // cached objects followed by the active ones

    this._objects = Array.prototype.slice.call(arguments);
    this.nCachedObjects_ = 0; // threshold
    // note: read by PropertyBinding.Composite

    var indices = {};
    this._indicesByUUID = indices; // for bookkeeping

    for (var _i324 = 0, n = arguments.length; _i324 !== n; ++_i324) {
      indices[arguments[_i324].uuid] = _i324;
    }

    this._paths = []; // inside: string

    this._parsedPaths = []; // inside: { we don't care, here }

    this._bindings = []; // inside: Array< PropertyBinding >

    this._bindingsIndicesByPath = {}; // inside: indices in these arrays

    var scope = this;
    this.stats = {
      objects: {
        get total() {
          return scope._objects.length;
        },

        get inUse() {
          return this.total - scope.nCachedObjects_;
        }

      },

      get bindingsPerObject() {
        return scope._bindings.length;
      }

    };
  }

  _createClass(AnimationObjectGroup, [{
    key: "add",
    value: function add() {
      var objects = this._objects,
          indicesByUUID = this._indicesByUUID,
          paths = this._paths,
          parsedPaths = this._parsedPaths,
          bindings = this._bindings,
          nBindings = bindings.length;
      var knownObject = undefined,
          nObjects = objects.length,
          nCachedObjects = this.nCachedObjects_;

      for (var _i325 = 0, n = arguments.length; _i325 !== n; ++_i325) {
        var object = arguments[_i325],
            uuid = object.uuid;
        var index = indicesByUUID[uuid];

        if (index === undefined) {
          // unknown object -> add it to the ACTIVE region
          index = nObjects++;
          indicesByUUID[uuid] = index;
          objects.push(object); // accounting is done, now do the same for all bindings

          for (var j = 0, m = nBindings; j !== m; ++j) {
            bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
          }
        } else if (index < nCachedObjects) {
          knownObject = objects[index]; // move existing object to the ACTIVE region

          var firstActiveIndex = --nCachedObjects,
              lastCachedObject = objects[firstActiveIndex];
          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject;
          indicesByUUID[uuid] = firstActiveIndex;
          objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings

          for (var _j16 = 0, _m2 = nBindings; _j16 !== _m2; ++_j16) {
            var bindingsForPath = bindings[_j16],
                lastCached = bindingsForPath[firstActiveIndex];
            var binding = bindingsForPath[index];
            bindingsForPath[index] = lastCached;

            if (binding === undefined) {
              // since we do not bother to create new bindings
              // for objects that are cached, the binding may
              // or may not exist
              binding = new PropertyBinding(object, paths[_j16], parsedPaths[_j16]);
            }

            bindingsForPath[firstActiveIndex] = binding;
          }
        } else if (objects[index] !== knownObject) {
          console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');
        } // else the object is already where we want it to be

      } // for arguments


      this.nCachedObjects_ = nCachedObjects;
    }
  }, {
    key: "remove",
    value: function remove() {
      var objects = this._objects,
          indicesByUUID = this._indicesByUUID,
          bindings = this._bindings,
          nBindings = bindings.length;
      var nCachedObjects = this.nCachedObjects_;

      for (var _i326 = 0, n = arguments.length; _i326 !== n; ++_i326) {
        var object = arguments[_i326],
            uuid = object.uuid,
            index = indicesByUUID[uuid];

        if (index !== undefined && index >= nCachedObjects) {
          // move existing object into the CACHED region
          var lastCachedIndex = nCachedObjects++,
              firstActiveObject = objects[lastCachedIndex];
          indicesByUUID[firstActiveObject.uuid] = index;
          objects[index] = firstActiveObject;
          indicesByUUID[uuid] = lastCachedIndex;
          objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings

          for (var j = 0, m = nBindings; j !== m; ++j) {
            var bindingsForPath = bindings[j],
                firstActive = bindingsForPath[lastCachedIndex],
                binding = bindingsForPath[index];
            bindingsForPath[index] = firstActive;
            bindingsForPath[lastCachedIndex] = binding;
          }
        }
      } // for arguments


      this.nCachedObjects_ = nCachedObjects;
    } // remove & forget

  }, {
    key: "uncache",
    value: function uncache() {
      var objects = this._objects,
          indicesByUUID = this._indicesByUUID,
          bindings = this._bindings,
          nBindings = bindings.length;
      var nCachedObjects = this.nCachedObjects_,
          nObjects = objects.length;

      for (var _i327 = 0, n = arguments.length; _i327 !== n; ++_i327) {
        var object = arguments[_i327],
            uuid = object.uuid,
            index = indicesByUUID[uuid];

        if (index !== undefined) {
          delete indicesByUUID[uuid];

          if (index < nCachedObjects) {
            // object is cached, shrink the CACHED region
            var firstActiveIndex = --nCachedObjects,
                lastCachedObject = objects[firstActiveIndex],
                lastIndex = --nObjects,
                lastObject = objects[lastIndex]; // last cached object takes this object's place

            indicesByUUID[lastCachedObject.uuid] = index;
            objects[index] = lastCachedObject; // last object goes to the activated slot and pop

            indicesByUUID[lastObject.uuid] = firstActiveIndex;
            objects[firstActiveIndex] = lastObject;
            objects.pop(); // accounting is done, now do the same for all bindings

            for (var j = 0, m = nBindings; j !== m; ++j) {
              var bindingsForPath = bindings[j],
                  lastCached = bindingsForPath[firstActiveIndex],
                  last = bindingsForPath[lastIndex];
              bindingsForPath[index] = lastCached;
              bindingsForPath[firstActiveIndex] = last;
              bindingsForPath.pop();
            }
          } else {
            // object is active, just swap with the last and pop
            var _lastIndex = --nObjects,
                _lastObject = objects[_lastIndex];

            if (_lastIndex > 0) {
              indicesByUUID[_lastObject.uuid] = index;
            }

            objects[index] = _lastObject;
            objects.pop(); // accounting is done, now do the same for all bindings

            for (var _j17 = 0, _m3 = nBindings; _j17 !== _m3; ++_j17) {
              var _bindingsForPath = bindings[_j17];
              _bindingsForPath[index] = _bindingsForPath[_lastIndex];

              _bindingsForPath.pop();
            }
          } // cached or active

        } // if object is known

      } // for arguments


      this.nCachedObjects_ = nCachedObjects;
    } // Internal interface used by befriended PropertyBinding.Composite:

  }, {
    key: "subscribe_",
    value: function subscribe_(path, parsedPath) {
      // returns an array of bindings for the given path that is changed
      // according to the contained objects in the group
      var indicesByPath = this._bindingsIndicesByPath;
      var index = indicesByPath[path];
      var bindings = this._bindings;
      if (index !== undefined) return bindings[index];
      var paths = this._paths,
          parsedPaths = this._parsedPaths,
          objects = this._objects,
          nObjects = objects.length,
          nCachedObjects = this.nCachedObjects_,
          bindingsForPath = new Array(nObjects);
      index = bindings.length;
      indicesByPath[path] = index;
      paths.push(path);
      parsedPaths.push(parsedPath);
      bindings.push(bindingsForPath);

      for (var _i328 = nCachedObjects, n = objects.length; _i328 !== n; ++_i328) {
        var object = objects[_i328];
        bindingsForPath[_i328] = new PropertyBinding(object, path, parsedPath);
      }

      return bindingsForPath;
    }
  }, {
    key: "unsubscribe_",
    value: function unsubscribe_(path) {
      // tells the group to forget about a property path and no longer
      // update the array previously obtained with 'subscribe_'
      var indicesByPath = this._bindingsIndicesByPath,
          index = indicesByPath[path];

      if (index !== undefined) {
        var paths = this._paths,
            parsedPaths = this._parsedPaths,
            bindings = this._bindings,
            lastBindingsIndex = bindings.length - 1,
            lastBindings = bindings[lastBindingsIndex],
            lastBindingsPath = path[lastBindingsIndex];
        indicesByPath[lastBindingsPath] = index;
        bindings[index] = lastBindings;
        bindings.pop();
        parsedPaths[index] = parsedPaths[lastBindingsIndex];
        parsedPaths.pop();
        paths[index] = paths[lastBindingsIndex];
        paths.pop();
      }
    }
  }]);

  return AnimationObjectGroup;
}();

exports.AnimationObjectGroup = AnimationObjectGroup;
AnimationObjectGroup.prototype.isAnimationObjectGroup = true;

var AnimationAction = /*#__PURE__*/function () {
  function AnimationAction(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
    _classCallCheck(this, AnimationAction);

    this._mixer = mixer;
    this._clip = clip;
    this._localRoot = localRoot;
    this.blendMode = blendMode;
    var tracks = clip.tracks,
        nTracks = tracks.length,
        interpolants = new Array(nTracks);
    var interpolantSettings = {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    };

    for (var _i329 = 0; _i329 !== nTracks; ++_i329) {
      var interpolant = tracks[_i329].createInterpolant(null);

      interpolants[_i329] = interpolant;
      interpolant.settings = interpolantSettings;
    }

    this._interpolantSettings = interpolantSettings;
    this._interpolants = interpolants; // bound by the mixer
    // inside: PropertyMixer (managed by the mixer)

    this._propertyBindings = new Array(nTracks);
    this._cacheIndex = null; // for the memory manager

    this._byClipCacheIndex = null; // for the memory manager

    this._timeScaleInterpolant = null;
    this._weightInterpolant = null;
    this.loop = LoopRepeat;
    this._loopCount = -1; // global mixer time when the action is to be started
    // it's set back to 'null' upon start of the action

    this._startTime = null; // scaled local time of the action
    // gets clamped or wrapped to 0..clip.duration according to loop

    this.time = 0;
    this.timeScale = 1;
    this._effectiveTimeScale = 1;
    this.weight = 1;
    this._effectiveWeight = 1;
    this.repetitions = Infinity; // no. of repetitions when looping

    this.paused = false; // true -> zero effective time scale

    this.enabled = true; // false -> zero effective weight

    this.clampWhenFinished = false; // keep feeding the last frame?

    this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate

    this.zeroSlopeAtEnd = true; // clips for start, loop and end
  } // State & Scheduling


  _createClass(AnimationAction, [{
    key: "play",
    value: function play() {
      this._mixer._activateAction(this);

      return this;
    }
  }, {
    key: "stop",
    value: function stop() {
      this._mixer._deactivateAction(this);

      return this.reset();
    }
  }, {
    key: "reset",
    value: function reset() {
      this.paused = false;
      this.enabled = true;
      this.time = 0; // restart clip

      this._loopCount = -1; // forget previous loops

      this._startTime = null; // forget scheduling

      return this.stopFading().stopWarping();
    }
  }, {
    key: "isRunning",
    value: function isRunning() {
      return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    } // return true when play has been called

  }, {
    key: "isScheduled",
    value: function isScheduled() {
      return this._mixer._isActiveAction(this);
    }
  }, {
    key: "startAt",
    value: function startAt(time) {
      this._startTime = time;
      return this;
    }
  }, {
    key: "setLoop",
    value: function setLoop(mode, repetitions) {
      this.loop = mode;
      this.repetitions = repetitions;
      return this;
    } // Weight
    // set the weight stopping any scheduled fading
    // although .enabled = false yields an effective weight of zero, this
    // method does *not* change .enabled, because it would be confusing

  }, {
    key: "setEffectiveWeight",
    value: function setEffectiveWeight(weight) {
      this.weight = weight; // note: same logic as when updated at runtime

      this._effectiveWeight = this.enabled ? weight : 0;
      return this.stopFading();
    } // return the weight considering fading and .enabled

  }, {
    key: "getEffectiveWeight",
    value: function getEffectiveWeight() {
      return this._effectiveWeight;
    }
  }, {
    key: "fadeIn",
    value: function fadeIn(duration) {
      return this._scheduleFading(duration, 0, 1);
    }
  }, {
    key: "fadeOut",
    value: function fadeOut(duration) {
      return this._scheduleFading(duration, 1, 0);
    }
  }, {
    key: "crossFadeFrom",
    value: function crossFadeFrom(fadeOutAction, duration, warp) {
      fadeOutAction.fadeOut(duration);
      this.fadeIn(duration);

      if (warp) {
        var fadeInDuration = this._clip.duration,
            fadeOutDuration = fadeOutAction._clip.duration,
            startEndRatio = fadeOutDuration / fadeInDuration,
            endStartRatio = fadeInDuration / fadeOutDuration;
        fadeOutAction.warp(1.0, startEndRatio, duration);
        this.warp(endStartRatio, 1.0, duration);
      }

      return this;
    }
  }, {
    key: "crossFadeTo",
    value: function crossFadeTo(fadeInAction, duration, warp) {
      return fadeInAction.crossFadeFrom(this, duration, warp);
    }
  }, {
    key: "stopFading",
    value: function stopFading() {
      var weightInterpolant = this._weightInterpolant;

      if (weightInterpolant !== null) {
        this._weightInterpolant = null;

        this._mixer._takeBackControlInterpolant(weightInterpolant);
      }

      return this;
    } // Time Scale Control
    // set the time scale stopping any scheduled warping
    // although .paused = true yields an effective time scale of zero, this
    // method does *not* change .paused, because it would be confusing

  }, {
    key: "setEffectiveTimeScale",
    value: function setEffectiveTimeScale(timeScale) {
      this.timeScale = timeScale;
      this._effectiveTimeScale = this.paused ? 0 : timeScale;
      return this.stopWarping();
    } // return the time scale considering warping and .paused

  }, {
    key: "getEffectiveTimeScale",
    value: function getEffectiveTimeScale() {
      return this._effectiveTimeScale;
    }
  }, {
    key: "setDuration",
    value: function setDuration(duration) {
      this.timeScale = this._clip.duration / duration;
      return this.stopWarping();
    }
  }, {
    key: "syncWith",
    value: function syncWith(action) {
      this.time = action.time;
      this.timeScale = action.timeScale;
      return this.stopWarping();
    }
  }, {
    key: "halt",
    value: function halt(duration) {
      return this.warp(this._effectiveTimeScale, 0, duration);
    }
  }, {
    key: "warp",
    value: function warp(startTimeScale, endTimeScale, duration) {
      var mixer = this._mixer,
          now = mixer.time,
          timeScale = this.timeScale;
      var interpolant = this._timeScaleInterpolant;

      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._timeScaleInterpolant = interpolant;
      }

      var times = interpolant.parameterPositions,
          values = interpolant.sampleValues;
      times[0] = now;
      times[1] = now + duration;
      values[0] = startTimeScale / timeScale;
      values[1] = endTimeScale / timeScale;
      return this;
    }
  }, {
    key: "stopWarping",
    value: function stopWarping() {
      var timeScaleInterpolant = this._timeScaleInterpolant;

      if (timeScaleInterpolant !== null) {
        this._timeScaleInterpolant = null;

        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
      }

      return this;
    } // Object Accessors

  }, {
    key: "getMixer",
    value: function getMixer() {
      return this._mixer;
    }
  }, {
    key: "getClip",
    value: function getClip() {
      return this._clip;
    }
  }, {
    key: "getRoot",
    value: function getRoot() {
      return this._localRoot || this._mixer._root;
    } // Interna

  }, {
    key: "_update",
    value: function _update(time, deltaTime, timeDirection, accuIndex) {
      // called by the mixer
      if (!this.enabled) {
        // call ._updateWeight() to update ._effectiveWeight
        this._updateWeight(time);

        return;
      }

      var startTime = this._startTime;

      if (startTime !== null) {
        // check for scheduled start of action
        var timeRunning = (time - startTime) * timeDirection;

        if (timeRunning < 0 || timeDirection === 0) {
          return; // yet to come / don't decide when delta = 0
        } // start


        this._startTime = null; // unschedule

        deltaTime = timeDirection * timeRunning;
      } // apply time scale and advance time


      deltaTime *= this._updateTimeScale(time);

      var clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in
      // an effective weight of 0


      var weight = this._updateWeight(time);

      if (weight > 0) {
        var interpolants = this._interpolants;
        var propertyMixers = this._propertyBindings;

        switch (this.blendMode) {
          case AdditiveAnimationBlendMode:
            for (var j = 0, m = interpolants.length; j !== m; ++j) {
              interpolants[j].evaluate(clipTime);
              propertyMixers[j].accumulateAdditive(weight);
            }

            break;

          case NormalAnimationBlendMode:
          default:
            for (var _j18 = 0, _m4 = interpolants.length; _j18 !== _m4; ++_j18) {
              interpolants[_j18].evaluate(clipTime);

              propertyMixers[_j18].accumulate(accuIndex, weight);
            }

        }
      }
    }
  }, {
    key: "_updateWeight",
    value: function _updateWeight(time) {
      var weight = 0;

      if (this.enabled) {
        weight = this.weight;
        var interpolant = this._weightInterpolant;

        if (interpolant !== null) {
          var interpolantValue = interpolant.evaluate(time)[0];
          weight *= interpolantValue;

          if (time > interpolant.parameterPositions[1]) {
            this.stopFading();

            if (interpolantValue === 0) {
              // faded out, disable
              this.enabled = false;
            }
          }
        }
      }

      this._effectiveWeight = weight;
      return weight;
    }
  }, {
    key: "_updateTimeScale",
    value: function _updateTimeScale(time) {
      var timeScale = 0;

      if (!this.paused) {
        timeScale = this.timeScale;
        var interpolant = this._timeScaleInterpolant;

        if (interpolant !== null) {
          var interpolantValue = interpolant.evaluate(time)[0];
          timeScale *= interpolantValue;

          if (time > interpolant.parameterPositions[1]) {
            this.stopWarping();

            if (timeScale === 0) {
              // motion has halted, pause
              this.paused = true;
            } else {
              // warp done - apply final time scale
              this.timeScale = timeScale;
            }
          }
        }
      }

      this._effectiveTimeScale = timeScale;
      return timeScale;
    }
  }, {
    key: "_updateTime",
    value: function _updateTime(deltaTime) {
      var duration = this._clip.duration;
      var loop = this.loop;
      var time = this.time + deltaTime;
      var loopCount = this._loopCount;
      var pingPong = loop === LoopPingPong;

      if (deltaTime === 0) {
        if (loopCount === -1) return time;
        return pingPong && (loopCount & 1) === 1 ? duration - time : time;
      }

      if (loop === LoopOnce) {
        if (loopCount === -1) {
          // just started
          this._loopCount = 0;

          this._setEndings(true, true, false);
        }

        handle_stop: {
          if (time >= duration) {
            time = duration;
          } else if (time < 0) {
            time = 0;
          } else {
            this.time = time;
            break handle_stop;
          }

          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
          this.time = time;

          this._mixer.dispatchEvent({
            type: 'finished',
            action: this,
            direction: deltaTime < 0 ? -1 : 1
          });
        }
      } else {
        // repetitive Repeat or PingPong
        if (loopCount === -1) {
          // just started
          if (deltaTime >= 0) {
            loopCount = 0;

            this._setEndings(true, this.repetitions === 0, pingPong);
          } else {
            // when looping in reverse direction, the initial
            // transition through zero counts as a repetition,
            // so leave loopCount at -1
            this._setEndings(this.repetitions === 0, true, pingPong);
          }
        }

        if (time >= duration || time < 0) {
          // wrap around
          var loopDelta = Math.floor(time / duration); // signed

          time -= duration * loopDelta;
          loopCount += Math.abs(loopDelta);
          var pending = this.repetitions - loopCount;

          if (pending <= 0) {
            // have to stop (switch state, clamp time, fire event)
            if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
            time = deltaTime > 0 ? duration : 0;
            this.time = time;

            this._mixer.dispatchEvent({
              type: 'finished',
              action: this,
              direction: deltaTime > 0 ? 1 : -1
            });
          } else {
            // keep running
            if (pending === 1) {
              // entering the last round
              var atStart = deltaTime < 0;

              this._setEndings(atStart, !atStart, pingPong);
            } else {
              this._setEndings(false, false, pingPong);
            }

            this._loopCount = loopCount;
            this.time = time;

            this._mixer.dispatchEvent({
              type: 'loop',
              action: this,
              loopDelta: loopDelta
            });
          }
        } else {
          this.time = time;
        }

        if (pingPong && (loopCount & 1) === 1) {
          // invert time for the "pong round"
          return duration - time;
        }
      }

      return time;
    }
  }, {
    key: "_setEndings",
    value: function _setEndings(atStart, atEnd, pingPong) {
      var settings = this._interpolantSettings;

      if (pingPong) {
        settings.endingStart = ZeroSlopeEnding;
        settings.endingEnd = ZeroSlopeEnding;
      } else {
        // assuming for LoopOnce atStart == atEnd == true
        if (atStart) {
          settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings.endingStart = WrapAroundEnding;
        }

        if (atEnd) {
          settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
        } else {
          settings.endingEnd = WrapAroundEnding;
        }
      }
    }
  }, {
    key: "_scheduleFading",
    value: function _scheduleFading(duration, weightNow, weightThen) {
      var mixer = this._mixer,
          now = mixer.time;
      var interpolant = this._weightInterpolant;

      if (interpolant === null) {
        interpolant = mixer._lendControlInterpolant();
        this._weightInterpolant = interpolant;
      }

      var times = interpolant.parameterPositions,
          values = interpolant.sampleValues;
      times[0] = now;
      values[0] = weightNow;
      times[1] = now + duration;
      values[1] = weightThen;
      return this;
    }
  }]);

  return AnimationAction;
}();

var AnimationMixer = /*#__PURE__*/function (_EventDispatcher7) {
  _inherits(AnimationMixer, _EventDispatcher7);

  var _super139 = _createSuper(AnimationMixer);

  function AnimationMixer(root) {
    var _this110;

    _classCallCheck(this, AnimationMixer);

    _this110 = _super139.call(this);
    _this110._root = root;

    _this110._initMemoryManager();

    _this110._accuIndex = 0;
    _this110.time = 0;
    _this110.timeScale = 1.0;
    return _this110;
  }

  _createClass(AnimationMixer, [{
    key: "_bindAction",
    value: function _bindAction(action, prototypeAction) {
      var root = action._localRoot || this._root,
          tracks = action._clip.tracks,
          nTracks = tracks.length,
          bindings = action._propertyBindings,
          interpolants = action._interpolants,
          rootUuid = root.uuid,
          bindingsByRoot = this._bindingsByRootAndName;
      var bindingsByName = bindingsByRoot[rootUuid];

      if (bindingsByName === undefined) {
        bindingsByName = {};
        bindingsByRoot[rootUuid] = bindingsByName;
      }

      for (var _i330 = 0; _i330 !== nTracks; ++_i330) {
        var track = tracks[_i330],
            trackName = track.name;
        var binding = bindingsByName[trackName];

        if (binding !== undefined) {
          ++binding.referenceCount;
          bindings[_i330] = binding;
        } else {
          binding = bindings[_i330];

          if (binding !== undefined) {
            // existing binding, make sure the cache knows
            if (binding._cacheIndex === null) {
              ++binding.referenceCount;

              this._addInactiveBinding(binding, rootUuid, trackName);
            }

            continue;
          }

          var path = prototypeAction && prototypeAction._propertyBindings[_i330].binding.parsedPath;
          binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
          ++binding.referenceCount;

          this._addInactiveBinding(binding, rootUuid, trackName);

          bindings[_i330] = binding;
        }

        interpolants[_i330].resultBuffer = binding.buffer;
      }
    }
  }, {
    key: "_activateAction",
    value: function _activateAction(action) {
      if (!this._isActiveAction(action)) {
        if (action._cacheIndex === null) {
          // this action has been forgotten by the cache, but the user
          // appears to be still using it -> rebind
          var rootUuid = (action._localRoot || this._root).uuid,
              clipUuid = action._clip.uuid,
              actionsForClip = this._actionsByClip[clipUuid];

          this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);

          this._addInactiveAction(action, clipUuid, rootUuid);
        }

        var bindings = action._propertyBindings; // increment reference counts / sort out state

        for (var _i331 = 0, n = bindings.length; _i331 !== n; ++_i331) {
          var binding = bindings[_i331];

          if (binding.useCount++ === 0) {
            this._lendBinding(binding);

            binding.saveOriginalState();
          }
        }

        this._lendAction(action);
      }
    }
  }, {
    key: "_deactivateAction",
    value: function _deactivateAction(action) {
      if (this._isActiveAction(action)) {
        var bindings = action._propertyBindings; // decrement reference counts / sort out state

        for (var _i332 = 0, n = bindings.length; _i332 !== n; ++_i332) {
          var binding = bindings[_i332];

          if (--binding.useCount === 0) {
            binding.restoreOriginalState();

            this._takeBackBinding(binding);
          }
        }

        this._takeBackAction(action);
      }
    } // Memory manager

  }, {
    key: "_initMemoryManager",
    value: function _initMemoryManager() {
      this._actions = []; // 'nActiveActions' followed by inactive ones

      this._nActiveActions = 0;
      this._actionsByClip = {}; // inside:
      // {
      // 	knownActions: Array< AnimationAction > - used as prototypes
      // 	actionByRoot: AnimationAction - lookup
      // }

      this._bindings = []; // 'nActiveBindings' followed by inactive ones

      this._nActiveBindings = 0;
      this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >

      this._controlInterpolants = []; // same game as above

      this._nActiveControlInterpolants = 0;
      var scope = this;
      this.stats = {
        actions: {
          get total() {
            return scope._actions.length;
          },

          get inUse() {
            return scope._nActiveActions;
          }

        },
        bindings: {
          get total() {
            return scope._bindings.length;
          },

          get inUse() {
            return scope._nActiveBindings;
          }

        },
        controlInterpolants: {
          get total() {
            return scope._controlInterpolants.length;
          },

          get inUse() {
            return scope._nActiveControlInterpolants;
          }

        }
      };
    } // Memory management for AnimationAction objects

  }, {
    key: "_isActiveAction",
    value: function _isActiveAction(action) {
      var index = action._cacheIndex;
      return index !== null && index < this._nActiveActions;
    }
  }, {
    key: "_addInactiveAction",
    value: function _addInactiveAction(action, clipUuid, rootUuid) {
      var actions = this._actions,
          actionsByClip = this._actionsByClip;
      var actionsForClip = actionsByClip[clipUuid];

      if (actionsForClip === undefined) {
        actionsForClip = {
          knownActions: [action],
          actionByRoot: {}
        };
        action._byClipCacheIndex = 0;
        actionsByClip[clipUuid] = actionsForClip;
      } else {
        var knownActions = actionsForClip.knownActions;
        action._byClipCacheIndex = knownActions.length;
        knownActions.push(action);
      }

      action._cacheIndex = actions.length;
      actions.push(action);
      actionsForClip.actionByRoot[rootUuid] = action;
    }
  }, {
    key: "_removeInactiveAction",
    value: function _removeInactiveAction(action) {
      var actions = this._actions,
          lastInactiveAction = actions[actions.length - 1],
          cacheIndex = action._cacheIndex;
      lastInactiveAction._cacheIndex = cacheIndex;
      actions[cacheIndex] = lastInactiveAction;
      actions.pop();
      action._cacheIndex = null;
      var clipUuid = action._clip.uuid,
          actionsByClip = this._actionsByClip,
          actionsForClip = actionsByClip[clipUuid],
          knownActionsForClip = actionsForClip.knownActions,
          lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
          byClipCacheIndex = action._byClipCacheIndex;
      lastKnownAction._byClipCacheIndex = byClipCacheIndex;
      knownActionsForClip[byClipCacheIndex] = lastKnownAction;
      knownActionsForClip.pop();
      action._byClipCacheIndex = null;
      var actionByRoot = actionsForClip.actionByRoot,
          rootUuid = (action._localRoot || this._root).uuid;
      delete actionByRoot[rootUuid];

      if (knownActionsForClip.length === 0) {
        delete actionsByClip[clipUuid];
      }

      this._removeInactiveBindingsForAction(action);
    }
  }, {
    key: "_removeInactiveBindingsForAction",
    value: function _removeInactiveBindingsForAction(action) {
      var bindings = action._propertyBindings;

      for (var _i333 = 0, n = bindings.length; _i333 !== n; ++_i333) {
        var binding = bindings[_i333];

        if (--binding.referenceCount === 0) {
          this._removeInactiveBinding(binding);
        }
      }
    }
  }, {
    key: "_lendAction",
    value: function _lendAction(action) {
      // [ active actions |  inactive actions  ]
      // [  active actions >| inactive actions ]
      //                 s        a
      //                  <-swap->
      //                 a        s
      var actions = this._actions,
          prevIndex = action._cacheIndex,
          lastActiveIndex = this._nActiveActions++,
          firstInactiveAction = actions[lastActiveIndex];
      action._cacheIndex = lastActiveIndex;
      actions[lastActiveIndex] = action;
      firstInactiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = firstInactiveAction;
    }
  }, {
    key: "_takeBackAction",
    value: function _takeBackAction(action) {
      // [  active actions  | inactive actions ]
      // [ active actions |< inactive actions  ]
      //        a        s
      //         <-swap->
      //        s        a
      var actions = this._actions,
          prevIndex = action._cacheIndex,
          firstInactiveIndex = --this._nActiveActions,
          lastActiveAction = actions[firstInactiveIndex];
      action._cacheIndex = firstInactiveIndex;
      actions[firstInactiveIndex] = action;
      lastActiveAction._cacheIndex = prevIndex;
      actions[prevIndex] = lastActiveAction;
    } // Memory management for PropertyMixer objects

  }, {
    key: "_addInactiveBinding",
    value: function _addInactiveBinding(binding, rootUuid, trackName) {
      var bindingsByRoot = this._bindingsByRootAndName,
          bindings = this._bindings;
      var bindingByName = bindingsByRoot[rootUuid];

      if (bindingByName === undefined) {
        bindingByName = {};
        bindingsByRoot[rootUuid] = bindingByName;
      }

      bindingByName[trackName] = binding;
      binding._cacheIndex = bindings.length;
      bindings.push(binding);
    }
  }, {
    key: "_removeInactiveBinding",
    value: function _removeInactiveBinding(binding) {
      var bindings = this._bindings,
          propBinding = binding.binding,
          rootUuid = propBinding.rootNode.uuid,
          trackName = propBinding.path,
          bindingsByRoot = this._bindingsByRootAndName,
          bindingByName = bindingsByRoot[rootUuid],
          lastInactiveBinding = bindings[bindings.length - 1],
          cacheIndex = binding._cacheIndex;
      lastInactiveBinding._cacheIndex = cacheIndex;
      bindings[cacheIndex] = lastInactiveBinding;
      bindings.pop();
      delete bindingByName[trackName];

      if (Object.keys(bindingByName).length === 0) {
        delete bindingsByRoot[rootUuid];
      }
    }
  }, {
    key: "_lendBinding",
    value: function _lendBinding(binding) {
      var bindings = this._bindings,
          prevIndex = binding._cacheIndex,
          lastActiveIndex = this._nActiveBindings++,
          firstInactiveBinding = bindings[lastActiveIndex];
      binding._cacheIndex = lastActiveIndex;
      bindings[lastActiveIndex] = binding;
      firstInactiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = firstInactiveBinding;
    }
  }, {
    key: "_takeBackBinding",
    value: function _takeBackBinding(binding) {
      var bindings = this._bindings,
          prevIndex = binding._cacheIndex,
          firstInactiveIndex = --this._nActiveBindings,
          lastActiveBinding = bindings[firstInactiveIndex];
      binding._cacheIndex = firstInactiveIndex;
      bindings[firstInactiveIndex] = binding;
      lastActiveBinding._cacheIndex = prevIndex;
      bindings[prevIndex] = lastActiveBinding;
    } // Memory management of Interpolants for weight and time scale

  }, {
    key: "_lendControlInterpolant",
    value: function _lendControlInterpolant() {
      var interpolants = this._controlInterpolants,
          lastActiveIndex = this._nActiveControlInterpolants++;
      var interpolant = interpolants[lastActiveIndex];

      if (interpolant === undefined) {
        interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
        interpolant.__cacheIndex = lastActiveIndex;
        interpolants[lastActiveIndex] = interpolant;
      }

      return interpolant;
    }
  }, {
    key: "_takeBackControlInterpolant",
    value: function _takeBackControlInterpolant(interpolant) {
      var interpolants = this._controlInterpolants,
          prevIndex = interpolant.__cacheIndex,
          firstInactiveIndex = --this._nActiveControlInterpolants,
          lastActiveInterpolant = interpolants[firstInactiveIndex];
      interpolant.__cacheIndex = firstInactiveIndex;
      interpolants[firstInactiveIndex] = interpolant;
      lastActiveInterpolant.__cacheIndex = prevIndex;
      interpolants[prevIndex] = lastActiveInterpolant;
    } // return an action for a clip optionally using a custom root target
    // object (this method allocates a lot of dynamic memory in case a
    // previously unknown clip/root combination is specified)

  }, {
    key: "clipAction",
    value: function clipAction(clip, optionalRoot, blendMode) {
      var root = optionalRoot || this._root,
          rootUuid = root.uuid;
      var clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;
      var clipUuid = clipObject !== null ? clipObject.uuid : clip;
      var actionsForClip = this._actionsByClip[clipUuid];
      var prototypeAction = null;

      if (blendMode === undefined) {
        if (clipObject !== null) {
          blendMode = clipObject.blendMode;
        } else {
          blendMode = NormalAnimationBlendMode;
        }
      }

      if (actionsForClip !== undefined) {
        var existingAction = actionsForClip.actionByRoot[rootUuid];

        if (existingAction !== undefined && existingAction.blendMode === blendMode) {
          return existingAction;
        } // we know the clip, so we don't have to parse all
        // the bindings again but can just copy


        prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action

        if (clipObject === null) clipObject = prototypeAction._clip;
      } // clip must be known when specified via string


      if (clipObject === null) return null; // allocate all resources required to run it

      var newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);

      this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager


      this._addInactiveAction(newAction, clipUuid, rootUuid);

      return newAction;
    } // get an existing action

  }, {
    key: "existingAction",
    value: function existingAction(clip, optionalRoot) {
      var root = optionalRoot || this._root,
          rootUuid = root.uuid,
          clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
          clipUuid = clipObject ? clipObject.uuid : clip,
          actionsForClip = this._actionsByClip[clipUuid];

      if (actionsForClip !== undefined) {
        return actionsForClip.actionByRoot[rootUuid] || null;
      }

      return null;
    } // deactivates all previously scheduled actions

  }, {
    key: "stopAllAction",
    value: function stopAllAction() {
      var actions = this._actions,
          nActions = this._nActiveActions;

      for (var _i334 = nActions - 1; _i334 >= 0; --_i334) {
        actions[_i334].stop();
      }

      return this;
    } // advance the time and update apply the animation

  }, {
    key: "update",
    value: function update(deltaTime) {
      deltaTime *= this.timeScale;
      var actions = this._actions,
          nActions = this._nActiveActions,
          time = this.time += deltaTime,
          timeDirection = Math.sign(deltaTime),
          accuIndex = this._accuIndex ^= 1; // run active actions

      for (var _i335 = 0; _i335 !== nActions; ++_i335) {
        var action = actions[_i335];

        action._update(time, deltaTime, timeDirection, accuIndex);
      } // update scene graph


      var bindings = this._bindings,
          nBindings = this._nActiveBindings;

      for (var _i336 = 0; _i336 !== nBindings; ++_i336) {
        bindings[_i336].apply(accuIndex);
      }

      return this;
    } // Allows you to seek to a specific time in an animation.

  }, {
    key: "setTime",
    value: function setTime(timeInSeconds) {
      this.time = 0; // Zero out time attribute for AnimationMixer object;

      for (var _i337 = 0; _i337 < this._actions.length; _i337++) {
        this._actions[_i337].time = 0; // Zero out time attribute for all associated AnimationAction objects.
      }

      return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
    } // return this mixer's root target object

  }, {
    key: "getRoot",
    value: function getRoot() {
      return this._root;
    } // free all resources specific to a particular clip

  }, {
    key: "uncacheClip",
    value: function uncacheClip(clip) {
      var actions = this._actions,
          clipUuid = clip.uuid,
          actionsByClip = this._actionsByClip,
          actionsForClip = actionsByClip[clipUuid];

      if (actionsForClip !== undefined) {
        // note: just calling _removeInactiveAction would mess up the
        // iteration state and also require updating the state we can
        // just throw away
        var actionsToRemove = actionsForClip.knownActions;

        for (var _i338 = 0, n = actionsToRemove.length; _i338 !== n; ++_i338) {
          var action = actionsToRemove[_i338];

          this._deactivateAction(action);

          var cacheIndex = action._cacheIndex,
              lastInactiveAction = actions[actions.length - 1];
          action._cacheIndex = null;
          action._byClipCacheIndex = null;
          lastInactiveAction._cacheIndex = cacheIndex;
          actions[cacheIndex] = lastInactiveAction;
          actions.pop();

          this._removeInactiveBindingsForAction(action);
        }

        delete actionsByClip[clipUuid];
      }
    } // free all resources specific to a particular root target object

  }, {
    key: "uncacheRoot",
    value: function uncacheRoot(root) {
      var rootUuid = root.uuid,
          actionsByClip = this._actionsByClip;

      for (var clipUuid in actionsByClip) {
        var actionByRoot = actionsByClip[clipUuid].actionByRoot,
            action = actionByRoot[rootUuid];

        if (action !== undefined) {
          this._deactivateAction(action);

          this._removeInactiveAction(action);
        }
      }

      var bindingsByRoot = this._bindingsByRootAndName,
          bindingByName = bindingsByRoot[rootUuid];

      if (bindingByName !== undefined) {
        for (var trackName in bindingByName) {
          var binding = bindingByName[trackName];
          binding.restoreOriginalState();

          this._removeInactiveBinding(binding);
        }
      }
    } // remove a targeted clip from the cache

  }, {
    key: "uncacheAction",
    value: function uncacheAction(clip, optionalRoot) {
      var action = this.existingAction(clip, optionalRoot);

      if (action !== null) {
        this._deactivateAction(action);

        this._removeInactiveAction(action);
      }
    }
  }]);

  return AnimationMixer;
}(EventDispatcher);

exports.AnimationMixer = AnimationMixer;
AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);

var Uniform = /*#__PURE__*/function () {
  function Uniform(value) {
    _classCallCheck(this, Uniform);

    if (typeof value === 'string') {
      console.warn('THREE.Uniform: Type parameter is no longer needed.');
      value = arguments[1];
    }

    this.value = value;
  }

  _createClass(Uniform, [{
    key: "clone",
    value: function clone() {
      return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
    }
  }]);

  return Uniform;
}();

exports.Uniform = Uniform;

var InstancedInterleavedBuffer = /*#__PURE__*/function (_InterleavedBuffer) {
  _inherits(InstancedInterleavedBuffer, _InterleavedBuffer);

  var _super140 = _createSuper(InstancedInterleavedBuffer);

  function InstancedInterleavedBuffer(array, stride, meshPerAttribute = 1) {
    var _this111;

    _classCallCheck(this, InstancedInterleavedBuffer);

    _this111 = _super140.call(this, array, stride);
    _this111.meshPerAttribute = meshPerAttribute;
    return _this111;
  }

  _createClass(InstancedInterleavedBuffer, [{
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(InstancedInterleavedBuffer.prototype), "copy", this).call(this, source);

      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
  }, {
    key: "clone",
    value: function clone(data) {
      var ib = _get(_getPrototypeOf(InstancedInterleavedBuffer.prototype), "clone", this).call(this, data);

      ib.meshPerAttribute = this.meshPerAttribute;
      return ib;
    }
  }, {
    key: "toJSON",
    value: function toJSON(data) {
      var json = _get(_getPrototypeOf(InstancedInterleavedBuffer.prototype), "toJSON", this).call(this, data);

      json.isInstancedInterleavedBuffer = true;
      json.meshPerAttribute = this.meshPerAttribute;
      return json;
    }
  }]);

  return InstancedInterleavedBuffer;
}(InterleavedBuffer);

exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

var GLBufferAttribute = /*#__PURE__*/function () {
  function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
    _classCallCheck(this, GLBufferAttribute);

    this.buffer = buffer;
    this.type = type;
    this.itemSize = itemSize;
    this.elementSize = elementSize;
    this.count = count;
    this.version = 0;
  }

  _createClass(GLBufferAttribute, [{
    key: "needsUpdate",
    set: function set(value) {
      if (value === true) this.version++;
    }
  }, {
    key: "setBuffer",
    value: function setBuffer(buffer) {
      this.buffer = buffer;
      return this;
    }
  }, {
    key: "setType",
    value: function setType(type, elementSize) {
      this.type = type;
      this.elementSize = elementSize;
      return this;
    }
  }, {
    key: "setItemSize",
    value: function setItemSize(itemSize) {
      this.itemSize = itemSize;
      return this;
    }
  }, {
    key: "setCount",
    value: function setCount(count) {
      this.count = count;
      return this;
    }
  }]);

  return GLBufferAttribute;
}();

exports.GLBufferAttribute = GLBufferAttribute;
GLBufferAttribute.prototype.isGLBufferAttribute = true;

var Raycaster = /*#__PURE__*/function () {
  function Raycaster(origin, direction, near = 0, far = Infinity) {
    _classCallCheck(this, Raycaster);

    this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)

    this.near = near;
    this.far = far;
    this.camera = null;
    this.layers = new Layers();
    this.params = {
      Mesh: {},
      Line: {
        threshold: 1
      },
      LOD: {},
      Points: {
        threshold: 1
      },
      Sprite: {}
    };
  }

  _createClass(Raycaster, [{
    key: "set",
    value: function set(origin, direction) {
      // direction is assumed to be normalized (for accurate distance calculations)
      this.ray.set(origin, direction);
    }
  }, {
    key: "setFromCamera",
    value: function setFromCamera(coords, camera) {
      if (camera.isPerspectiveCamera) {
        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
        this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
        this.camera = camera;
      } else if (camera.isOrthographicCamera) {
        this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera

        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
        this.camera = camera;
      } else {
        console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
      }
    }
  }, {
    key: "intersectObject",
    value: function intersectObject(object, recursive = true, intersects = []) {
      _intersectObject(object, this, intersects, recursive);

      intersects.sort(ascSort);
      return intersects;
    }
  }, {
    key: "intersectObjects",
    value: function intersectObjects(objects, recursive = true, intersects = []) {
      for (var _i339 = 0, l = objects.length; _i339 < l; _i339++) {
        _intersectObject(objects[_i339], this, intersects, recursive);
      }

      intersects.sort(ascSort);
      return intersects;
    }
  }]);

  return Raycaster;
}();

exports.Raycaster = Raycaster;

function ascSort(a, b) {
  return a.distance - b.distance;
}

function _intersectObject(object, raycaster, intersects, recursive) {
  if (object.layers.test(raycaster.layers)) {
    object.raycast(raycaster, intersects);
  }

  if (recursive === true) {
    var children = object.children;

    for (var _i340 = 0, l = children.length; _i340 < l; _i340++) {
      _intersectObject(children[_i340], raycaster, intersects, true);
    }
  }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */


var Spherical = /*#__PURE__*/function () {
  function Spherical(radius = 1, phi = 0, theta = 0) {
    _classCallCheck(this, Spherical);

    this.radius = radius;
    this.phi = phi; // polar angle

    this.theta = theta; // azimuthal angle

    return this;
  }

  _createClass(Spherical, [{
    key: "set",
    value: function set(radius, phi, theta) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this;
    }
  }, {
    key: "copy",
    value: function copy(other) {
      this.radius = other.radius;
      this.phi = other.phi;
      this.theta = other.theta;
      return this;
    } // restrict phi to be between EPS and PI-EPS

  }, {
    key: "makeSafe",
    value: function makeSafe() {
      var EPS = 0.000001;
      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
      return this;
    }
  }, {
    key: "setFromVector3",
    value: function setFromVector3(v) {
      return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
  }, {
    key: "setFromCartesianCoords",
    value: function setFromCartesianCoords(x, y, z) {
      this.radius = Math.sqrt(x * x + y * y + z * z);

      if (this.radius === 0) {
        this.theta = 0;
        this.phi = 0;
      } else {
        this.theta = Math.atan2(x, z);
        this.phi = Math.acos(clamp(y / this.radius, -1, 1));
      }

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Spherical;
}();
/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */


exports.Spherical = Spherical;

var Cylindrical = /*#__PURE__*/function () {
  function Cylindrical(radius = 1, theta = 0, y = 0) {
    _classCallCheck(this, Cylindrical);

    this.radius = radius; // distance from the origin to a point in the x-z plane

    this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis

    this.y = y; // height above the x-z plane

    return this;
  }

  _createClass(Cylindrical, [{
    key: "set",
    value: function set(radius, theta, y) {
      this.radius = radius;
      this.theta = theta;
      this.y = y;
      return this;
    }
  }, {
    key: "copy",
    value: function copy(other) {
      this.radius = other.radius;
      this.theta = other.theta;
      this.y = other.y;
      return this;
    }
  }, {
    key: "setFromVector3",
    value: function setFromVector3(v) {
      return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
  }, {
    key: "setFromCartesianCoords",
    value: function setFromCartesianCoords(x, y, z) {
      this.radius = Math.sqrt(x * x + z * z);
      this.theta = Math.atan2(x, z);
      this.y = y;
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Cylindrical;
}();

exports.Cylindrical = Cylindrical;

var _vector$4 = /*@__PURE__*/new Vector2();

var Box2 = /*#__PURE__*/function () {
  function Box2(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {
    _classCallCheck(this, Box2);

    this.min = min;
    this.max = max;
  }

  _createClass(Box2, [{
    key: "set",
    value: function set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
  }, {
    key: "setFromPoints",
    value: function setFromPoints(points) {
      this.makeEmpty();

      for (var _i341 = 0, il = points.length; _i341 < il; _i341++) {
        this.expandByPoint(points[_i341]);
      }

      return this;
    }
  }, {
    key: "setFromCenterAndSize",
    value: function setFromCenterAndSize(center, size) {
      var halfSize = _vector$4.copy(size).multiplyScalar(0.5);

      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
  }, {
    key: "makeEmpty",
    value: function makeEmpty() {
      this.min.x = this.min.y = +Infinity;
      this.max.x = this.max.y = -Infinity;
      return this;
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
      return this.max.x < this.min.x || this.max.y < this.min.y;
    }
  }, {
    key: "getCenter",
    value: function getCenter(target) {
      return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
  }, {
    key: "getSize",
    value: function getSize(target) {
      return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
  }, {
    key: "expandByPoint",
    value: function expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
  }, {
    key: "expandByVector",
    value: function expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
  }, {
    key: "expandByScalar",
    value: function expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
  }, {
    key: "containsBox",
    value: function containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
  }, {
    key: "getParameter",
    value: function getParameter(point, target) {
      // This can potentially have a divide by zero if the box
      // has a size dimension of 0.
      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
  }, {
    key: "intersectsBox",
    value: function intersectsBox(box) {
      // using 4 splitting planes to rule out intersections
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
  }, {
    key: "clampPoint",
    value: function clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
  }, {
    key: "distanceToPoint",
    value: function distanceToPoint(point) {
      var clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);

      return clampedPoint.sub(point).length();
    }
  }, {
    key: "intersect",
    value: function intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      return this;
    }
  }, {
    key: "union",
    value: function union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
  }, {
    key: "translate",
    value: function translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
  }, {
    key: "equals",
    value: function equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  }]);

  return Box2;
}();

exports.Box2 = Box2;
Box2.prototype.isBox2 = true;

var _startP = /*@__PURE__*/new Vector3();

var _startEnd = /*@__PURE__*/new Vector3();

var Line3 = /*#__PURE__*/function () {
  function Line3(start = new Vector3(), end = new Vector3()) {
    _classCallCheck(this, Line3);

    this.start = start;
    this.end = end;
  }

  _createClass(Line3, [{
    key: "set",
    value: function set(start, end) {
      this.start.copy(start);
      this.end.copy(end);
      return this;
    }
  }, {
    key: "copy",
    value: function copy(line) {
      this.start.copy(line.start);
      this.end.copy(line.end);
      return this;
    }
  }, {
    key: "getCenter",
    value: function getCenter(target) {
      return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
  }, {
    key: "delta",
    value: function delta(target) {
      return target.subVectors(this.end, this.start);
    }
  }, {
    key: "distanceSq",
    value: function distanceSq() {
      return this.start.distanceToSquared(this.end);
    }
  }, {
    key: "distance",
    value: function distance() {
      return this.start.distanceTo(this.end);
    }
  }, {
    key: "at",
    value: function at(t, target) {
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
  }, {
    key: "closestPointToPointParameter",
    value: function closestPointToPointParameter(point, clampToLine) {
      _startP.subVectors(point, this.start);

      _startEnd.subVectors(this.end, this.start);

      var startEnd2 = _startEnd.dot(_startEnd);

      var startEnd_startP = _startEnd.dot(_startP);

      var t = startEnd_startP / startEnd2;

      if (clampToLine) {
        t = clamp(t, 0, 1);
      }

      return t;
    }
  }, {
    key: "closestPointToPoint",
    value: function closestPointToPoint(point, clampToLine, target) {
      var t = this.closestPointToPointParameter(point, clampToLine);
      return this.delta(target).multiplyScalar(t).add(this.start);
    }
  }, {
    key: "applyMatrix4",
    value: function applyMatrix4(matrix) {
      this.start.applyMatrix4(matrix);
      this.end.applyMatrix4(matrix);
      return this;
    }
  }, {
    key: "equals",
    value: function equals(line) {
      return line.start.equals(this.start) && line.end.equals(this.end);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }]);

  return Line3;
}();

exports.Line3 = Line3;

var _vector$3 = /*@__PURE__*/new Vector3();

var SpotLightHelper = /*#__PURE__*/function (_Object3D14) {
  _inherits(SpotLightHelper, _Object3D14);

  var _super141 = _createSuper(SpotLightHelper);

  function SpotLightHelper(light, color) {
    var _this112;

    _classCallCheck(this, SpotLightHelper);

    _this112 = _super141.call(this);
    _this112.light = light;

    _this112.light.updateMatrixWorld();

    _this112.matrix = light.matrixWorld;
    _this112.matrixAutoUpdate = false;
    _this112.color = color;
    var geometry = new BufferGeometry();
    var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];

    for (var _i342 = 0, j = 1, l = 32; _i342 < l; _i342++, j++) {
      var p1 = _i342 / l * Math.PI * 2;
      var p2 = j / l * Math.PI * 2;
      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
    }

    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
    var material = new LineBasicMaterial({
      fog: false,
      toneMapped: false
    });
    _this112.cone = new LineSegments(geometry, material);

    _this112.add(_this112.cone);

    _this112.update();

    return _this112;
  }

  _createClass(SpotLightHelper, [{
    key: "dispose",
    value: function dispose() {
      this.cone.geometry.dispose();
      this.cone.material.dispose();
    }
  }, {
    key: "update",
    value: function update() {
      this.light.updateMatrixWorld();
      var coneLength = this.light.distance ? this.light.distance : 1000;
      var coneWidth = coneLength * Math.tan(this.light.angle);
      this.cone.scale.set(coneWidth, coneWidth, coneLength);

      _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);

      this.cone.lookAt(_vector$3);

      if (this.color !== undefined) {
        this.cone.material.color.set(this.color);
      } else {
        this.cone.material.color.copy(this.light.color);
      }
    }
  }]);

  return SpotLightHelper;
}(Object3D);

exports.SpotLightHelper = SpotLightHelper;

var _vector$2 = /*@__PURE__*/new Vector3();

var _boneMatrix = /*@__PURE__*/new Matrix4();

var _matrixWorldInv = /*@__PURE__*/new Matrix4();

var SkeletonHelper = /*#__PURE__*/function (_LineSegments) {
  _inherits(SkeletonHelper, _LineSegments);

  var _super142 = _createSuper(SkeletonHelper);

  function SkeletonHelper(object) {
    var _this113;

    _classCallCheck(this, SkeletonHelper);

    var bones = getBoneList(object);
    var geometry = new BufferGeometry();
    var vertices = [];
    var colors = [];
    var color1 = new Color(0, 0, 1);
    var color2 = new Color(0, 1, 0);

    for (var _i343 = 0; _i343 < bones.length; _i343++) {
      var bone = bones[_i343];

      if (bone.parent && bone.parent.isBone) {
        vertices.push(0, 0, 0);
        vertices.push(0, 0, 0);
        colors.push(color1.r, color1.g, color1.b);
        colors.push(color2.r, color2.g, color2.b);
      }
    }

    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
    var material = new LineBasicMaterial({
      vertexColors: true,
      depthTest: false,
      depthWrite: false,
      toneMapped: false,
      transparent: true
    });
    _this113 = _super142.call(this, geometry, material);
    _this113.type = 'SkeletonHelper';
    _this113.isSkeletonHelper = true;
    _this113.root = object;
    _this113.bones = bones;
    _this113.matrix = object.matrixWorld;
    _this113.matrixAutoUpdate = false;
    return _this113;
  }

  _createClass(SkeletonHelper, [{
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      var bones = this.bones;
      var geometry = this.geometry;
      var position = geometry.getAttribute('position');

      _matrixWorldInv.copy(this.root.matrixWorld).invert();

      for (var _i344 = 0, j = 0; _i344 < bones.length; _i344++) {
        var bone = bones[_i344];

        if (bone.parent && bone.parent.isBone) {
          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);

          _vector$2.setFromMatrixPosition(_boneMatrix);

          position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);

          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);

          _vector$2.setFromMatrixPosition(_boneMatrix);

          position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
          j += 2;
        }
      }

      geometry.getAttribute('position').needsUpdate = true;

      _get(_getPrototypeOf(SkeletonHelper.prototype), "updateMatrixWorld", this).call(this, force);
    }
  }]);

  return SkeletonHelper;
}(LineSegments);

exports.SkeletonHelper = SkeletonHelper;

function getBoneList(object) {
  var boneList = [];

  if (object.isBone === true) {
    boneList.push(object);
  }

  for (var _i345 = 0; _i345 < object.children.length; _i345++) {
    boneList.push.apply(boneList, getBoneList(object.children[_i345]));
  }

  return boneList;
}

var PointLightHelper = /*#__PURE__*/function (_Mesh3) {
  _inherits(PointLightHelper, _Mesh3);

  var _super143 = _createSuper(PointLightHelper);

  function PointLightHelper(light, sphereSize, color) {
    var _this114;

    _classCallCheck(this, PointLightHelper);

    var geometry = new SphereGeometry(sphereSize, 4, 2);
    var material = new MeshBasicMaterial({
      wireframe: true,
      fog: false,
      toneMapped: false
    });
    _this114 = _super143.call(this, geometry, material);
    _this114.light = light;

    _this114.light.updateMatrixWorld();

    _this114.color = color;
    _this114.type = 'PointLightHelper';
    _this114.matrix = _this114.light.matrixWorld;
    _this114.matrixAutoUpdate = false;

    _this114.update();
    /*
    // TODO: delete this comment?
    const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
    const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
    this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
    this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
    const d = light.distance;
    if ( d === 0.0 ) {
    	this.lightDistance.visible = false;
    } else {
    	this.lightDistance.scale.set( d, d, d );
    }
    this.add( this.lightDistance );
    */


    return _this114;
  }

  _createClass(PointLightHelper, [{
    key: "dispose",
    value: function dispose() {
      this.geometry.dispose();
      this.material.dispose();
    }
  }, {
    key: "update",
    value: function update() {
      if (this.color !== undefined) {
        this.material.color.set(this.color);
      } else {
        this.material.color.copy(this.light.color);
      }
      /*
      const d = this.light.distance;
      	if ( d === 0.0 ) {
      		this.lightDistance.visible = false;
      	} else {
      		this.lightDistance.visible = true;
      	this.lightDistance.scale.set( d, d, d );
      	}
      */

    }
  }]);

  return PointLightHelper;
}(Mesh);

exports.PointLightHelper = PointLightHelper;

var _vector$1 = /*@__PURE__*/new Vector3();

var _color1 = /*@__PURE__*/new Color();

var _color2 = /*@__PURE__*/new Color();

var HemisphereLightHelper = /*#__PURE__*/function (_Object3D15) {
  _inherits(HemisphereLightHelper, _Object3D15);

  var _super144 = _createSuper(HemisphereLightHelper);

  function HemisphereLightHelper(light, size, color) {
    var _this115;

    _classCallCheck(this, HemisphereLightHelper);

    _this115 = _super144.call(this);
    _this115.light = light;

    _this115.light.updateMatrixWorld();

    _this115.matrix = light.matrixWorld;
    _this115.matrixAutoUpdate = false;
    _this115.color = color;
    var geometry = new OctahedronGeometry(size);
    geometry.rotateY(Math.PI * 0.5);
    _this115.material = new MeshBasicMaterial({
      wireframe: true,
      fog: false,
      toneMapped: false
    });
    if (_this115.color === undefined) _this115.material.vertexColors = true;
    var position = geometry.getAttribute('position');
    var colors = new Float32Array(position.count * 3);
    geometry.setAttribute('color', new BufferAttribute(colors, 3));

    _this115.add(new Mesh(geometry, _this115.material));

    _this115.update();

    return _this115;
  }

  _createClass(HemisphereLightHelper, [{
    key: "dispose",
    value: function dispose() {
      this.children[0].geometry.dispose();
      this.children[0].material.dispose();
    }
  }, {
    key: "update",
    value: function update() {
      var mesh = this.children[0];

      if (this.color !== undefined) {
        this.material.color.set(this.color);
      } else {
        var colors = mesh.geometry.getAttribute('color');

        _color1.copy(this.light.color);

        _color2.copy(this.light.groundColor);

        for (var _i346 = 0, l = colors.count; _i346 < l; _i346++) {
          var color = _i346 < l / 2 ? _color1 : _color2;
          colors.setXYZ(_i346, color.r, color.g, color.b);
        }

        colors.needsUpdate = true;
      }

      mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
  }]);

  return HemisphereLightHelper;
}(Object3D);

exports.HemisphereLightHelper = HemisphereLightHelper;

var GridHelper = /*#__PURE__*/function (_LineSegments2) {
  _inherits(GridHelper, _LineSegments2);

  var _super145 = _createSuper(GridHelper);

  function GridHelper(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {
    var _this116;

    _classCallCheck(this, GridHelper);

    color1 = new Color(color1);
    color2 = new Color(color2);
    var center = divisions / 2;
    var step = size / divisions;
    var halfSize = size / 2;
    var vertices = [],
        colors = [];

    for (var _i347 = 0, j = 0, k = -halfSize; _i347 <= divisions; _i347++, k += step) {
      vertices.push(-halfSize, 0, k, halfSize, 0, k);
      vertices.push(k, 0, -halfSize, k, 0, halfSize);
      var color = _i347 === center ? color1 : color2;
      color.toArray(colors, j);
      j += 3;
      color.toArray(colors, j);
      j += 3;
      color.toArray(colors, j);
      j += 3;
      color.toArray(colors, j);
      j += 3;
    }

    var geometry = new BufferGeometry();
    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
    var material = new LineBasicMaterial({
      vertexColors: true,
      toneMapped: false
    });
    _this116 = _super145.call(this, geometry, material);
    _this116.type = 'GridHelper';
    return _this116;
  }

  return _createClass(GridHelper);
}(LineSegments);

exports.GridHelper = GridHelper;

var PolarGridHelper = /*#__PURE__*/function (_LineSegments3) {
  _inherits(PolarGridHelper, _LineSegments3);

  var _super146 = _createSuper(PolarGridHelper);

  function PolarGridHelper(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {
    var _this117;

    _classCallCheck(this, PolarGridHelper);

    color1 = new Color(color1);
    color2 = new Color(color2);
    var vertices = [];
    var colors = []; // create the radials

    for (var _i348 = 0; _i348 <= radials; _i348++) {
      var v = _i348 / radials * (Math.PI * 2);
      var x = Math.sin(v) * radius;
      var z = Math.cos(v) * radius;
      vertices.push(0, 0, 0);
      vertices.push(x, 0, z);
      var color = _i348 & 1 ? color1 : color2;
      colors.push(color.r, color.g, color.b);
      colors.push(color.r, color.g, color.b);
    } // create the circles


    for (var _i349 = 0; _i349 <= circles; _i349++) {
      var _color = _i349 & 1 ? color1 : color2;

      var r = radius - radius / circles * _i349;

      for (var j = 0; j < divisions; j++) {
        // first vertex
        var _v = j / divisions * (Math.PI * 2);

        var _x12 = Math.sin(_v) * r;

        var _z3 = Math.cos(_v) * r;

        vertices.push(_x12, 0, _z3);
        colors.push(_color.r, _color.g, _color.b); // second vertex

        _v = (j + 1) / divisions * (Math.PI * 2);
        _x12 = Math.sin(_v) * r;
        _z3 = Math.cos(_v) * r;
        vertices.push(_x12, 0, _z3);
        colors.push(_color.r, _color.g, _color.b);
      }
    }

    var geometry = new BufferGeometry();
    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
    var material = new LineBasicMaterial({
      vertexColors: true,
      toneMapped: false
    });
    _this117 = _super146.call(this, geometry, material);
    _this117.type = 'PolarGridHelper';
    return _this117;
  }

  return _createClass(PolarGridHelper);
}(LineSegments);

exports.PolarGridHelper = PolarGridHelper;

var _v1 = /*@__PURE__*/new Vector3();

var _v2 = /*@__PURE__*/new Vector3();

var _v3 = /*@__PURE__*/new Vector3();

var DirectionalLightHelper = /*#__PURE__*/function (_Object3D16) {
  _inherits(DirectionalLightHelper, _Object3D16);

  var _super147 = _createSuper(DirectionalLightHelper);

  function DirectionalLightHelper(light, size, color) {
    var _this118;

    _classCallCheck(this, DirectionalLightHelper);

    _this118 = _super147.call(this);
    _this118.light = light;

    _this118.light.updateMatrixWorld();

    _this118.matrix = light.matrixWorld;
    _this118.matrixAutoUpdate = false;
    _this118.color = color;
    if (size === undefined) size = 1;
    var geometry = new BufferGeometry();
    geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));
    var material = new LineBasicMaterial({
      fog: false,
      toneMapped: false
    });
    _this118.lightPlane = new Line(geometry, material);

    _this118.add(_this118.lightPlane);

    geometry = new BufferGeometry();
    geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
    _this118.targetLine = new Line(geometry, material);

    _this118.add(_this118.targetLine);

    _this118.update();

    return _this118;
  }

  _createClass(DirectionalLightHelper, [{
    key: "dispose",
    value: function dispose() {
      this.lightPlane.geometry.dispose();
      this.lightPlane.material.dispose();
      this.targetLine.geometry.dispose();
      this.targetLine.material.dispose();
    }
  }, {
    key: "update",
    value: function update() {
      _v1.setFromMatrixPosition(this.light.matrixWorld);

      _v2.setFromMatrixPosition(this.light.target.matrixWorld);

      _v3.subVectors(_v2, _v1);

      this.lightPlane.lookAt(_v2);

      if (this.color !== undefined) {
        this.lightPlane.material.color.set(this.color);
        this.targetLine.material.color.set(this.color);
      } else {
        this.lightPlane.material.color.copy(this.light.color);
        this.targetLine.material.color.copy(this.light.color);
      }

      this.targetLine.lookAt(_v2);
      this.targetLine.scale.z = _v3.length();
    }
  }]);

  return DirectionalLightHelper;
}(Object3D);

exports.DirectionalLightHelper = DirectionalLightHelper;

var _vector = /*@__PURE__*/new Vector3();

var _camera = /*@__PURE__*/new Camera();
/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 */


var CameraHelper = /*#__PURE__*/function (_LineSegments4) {
  _inherits(CameraHelper, _LineSegments4);

  var _super148 = _createSuper(CameraHelper);

  function CameraHelper(camera) {
    var _this119;

    _classCallCheck(this, CameraHelper);

    var geometry = new BufferGeometry();
    var material = new LineBasicMaterial({
      color: 0xffffff,
      vertexColors: true,
      toneMapped: false
    });
    var vertices = [];
    var colors = [];
    var pointMap = {}; // colors

    var colorFrustum = new Color(0xffaa00);
    var colorCone = new Color(0xff0000);
    var colorUp = new Color(0x00aaff);
    var colorTarget = new Color(0xffffff);
    var colorCross = new Color(0x333333); // near

    addLine('n1', 'n2', colorFrustum);
    addLine('n2', 'n4', colorFrustum);
    addLine('n4', 'n3', colorFrustum);
    addLine('n3', 'n1', colorFrustum); // far

    addLine('f1', 'f2', colorFrustum);
    addLine('f2', 'f4', colorFrustum);
    addLine('f4', 'f3', colorFrustum);
    addLine('f3', 'f1', colorFrustum); // sides

    addLine('n1', 'f1', colorFrustum);
    addLine('n2', 'f2', colorFrustum);
    addLine('n3', 'f3', colorFrustum);
    addLine('n4', 'f4', colorFrustum); // cone

    addLine('p', 'n1', colorCone);
    addLine('p', 'n2', colorCone);
    addLine('p', 'n3', colorCone);
    addLine('p', 'n4', colorCone); // up

    addLine('u1', 'u2', colorUp);
    addLine('u2', 'u3', colorUp);
    addLine('u3', 'u1', colorUp); // target

    addLine('c', 't', colorTarget);
    addLine('p', 'c', colorCross); // cross

    addLine('cn1', 'cn2', colorCross);
    addLine('cn3', 'cn4', colorCross);
    addLine('cf1', 'cf2', colorCross);
    addLine('cf3', 'cf4', colorCross);

    function addLine(a, b, color) {
      addPoint(a, color);
      addPoint(b, color);
    }

    function addPoint(id, color) {
      vertices.push(0, 0, 0);
      colors.push(color.r, color.g, color.b);

      if (pointMap[id] === undefined) {
        pointMap[id] = [];
      }

      pointMap[id].push(vertices.length / 3 - 1);
    }

    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
    _this119 = _super148.call(this, geometry, material);
    _this119.type = 'CameraHelper';
    _this119.camera = camera;
    if (_this119.camera.updateProjectionMatrix) _this119.camera.updateProjectionMatrix();
    _this119.matrix = camera.matrixWorld;
    _this119.matrixAutoUpdate = false;
    _this119.pointMap = pointMap;

    _this119.update();

    return _this119;
  }

  _createClass(CameraHelper, [{
    key: "update",
    value: function update() {
      var geometry = this.geometry;
      var pointMap = this.pointMap;
      var w = 1,
          h = 1; // we need just camera projection matrix inverse
      // world matrix must be identity

      _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target


      setPoint('c', pointMap, geometry, _camera, 0, 0, -1);
      setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near

      setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);
      setPoint('n2', pointMap, geometry, _camera, w, -h, -1);
      setPoint('n3', pointMap, geometry, _camera, -w, h, -1);
      setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far

      setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);
      setPoint('f2', pointMap, geometry, _camera, w, -h, 1);
      setPoint('f3', pointMap, geometry, _camera, -w, h, 1);
      setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up

      setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
      setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
      setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross

      setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);
      setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);
      setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);
      setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);
      setPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);
      setPoint('cn2', pointMap, geometry, _camera, w, 0, -1);
      setPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);
      setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);
      geometry.getAttribute('position').needsUpdate = true;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.geometry.dispose();
      this.material.dispose();
    }
  }]);

  return CameraHelper;
}(LineSegments);

exports.CameraHelper = CameraHelper;

function setPoint(point, pointMap, geometry, camera, x, y, z) {
  _vector.set(x, y, z).unproject(camera);

  var points = pointMap[point];

  if (points !== undefined) {
    var position = geometry.getAttribute('position');

    for (var _i350 = 0, l = points.length; _i350 < l; _i350++) {
      position.setXYZ(points[_i350], _vector.x, _vector.y, _vector.z);
    }
  }
}

var _box = /*@__PURE__*/new Box3();

var BoxHelper = /*#__PURE__*/function (_LineSegments5) {
  _inherits(BoxHelper, _LineSegments5);

  var _super149 = _createSuper(BoxHelper);

  function BoxHelper(object, color = 0xffff00) {
    var _this120;

    _classCallCheck(this, BoxHelper);

    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var positions = new Float32Array(8 * 3);
    var geometry = new BufferGeometry();
    geometry.setIndex(new BufferAttribute(indices, 1));
    geometry.setAttribute('position', new BufferAttribute(positions, 3));
    _this120 = _super149.call(this, geometry, new LineBasicMaterial({
      color: color,
      toneMapped: false
    }));
    _this120.object = object;
    _this120.type = 'BoxHelper';
    _this120.matrixAutoUpdate = false;

    _this120.update();

    return _this120;
  }

  _createClass(BoxHelper, [{
    key: "update",
    value: function update(object) {
      if (object !== undefined) {
        console.warn('THREE.BoxHelper: .update() has no longer arguments.');
      }

      if (this.object !== undefined) {
        _box.setFromObject(this.object);
      }

      if (_box.isEmpty()) return;
      var min = _box.min;
      var max = _box.max;
      /*
      	5____4
      1/___0/|
      | 6__|_7
      2/___3/
      	0: max.x, max.y, max.z
      1: min.x, max.y, max.z
      2: min.x, min.y, max.z
      3: max.x, min.y, max.z
      4: max.x, max.y, min.z
      5: min.x, max.y, min.z
      6: min.x, min.y, min.z
      7: max.x, min.y, min.z
      */

      var position = this.geometry.attributes.position;
      var array = position.array;
      array[0] = max.x;
      array[1] = max.y;
      array[2] = max.z;
      array[3] = min.x;
      array[4] = max.y;
      array[5] = max.z;
      array[6] = min.x;
      array[7] = min.y;
      array[8] = max.z;
      array[9] = max.x;
      array[10] = min.y;
      array[11] = max.z;
      array[12] = max.x;
      array[13] = max.y;
      array[14] = min.z;
      array[15] = min.x;
      array[16] = max.y;
      array[17] = min.z;
      array[18] = min.x;
      array[19] = min.y;
      array[20] = min.z;
      array[21] = max.x;
      array[22] = min.y;
      array[23] = min.z;
      position.needsUpdate = true;
      this.geometry.computeBoundingSphere();
    }
  }, {
    key: "setFromObject",
    value: function setFromObject(object) {
      this.object = object;
      this.update();
      return this;
    }
  }, {
    key: "copy",
    value: function copy(source) {
      LineSegments.prototype.copy.call(this, source);
      this.object = source.object;
      return this;
    }
  }]);

  return BoxHelper;
}(LineSegments);

exports.BoxHelper = BoxHelper;

var Box3Helper = /*#__PURE__*/function (_LineSegments6) {
  _inherits(Box3Helper, _LineSegments6);

  var _super150 = _createSuper(Box3Helper);

  function Box3Helper(box, color = 0xffff00) {
    var _this121;

    _classCallCheck(this, Box3Helper);

    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
    var geometry = new BufferGeometry();
    geometry.setIndex(new BufferAttribute(indices, 1));
    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
    _this121 = _super150.call(this, geometry, new LineBasicMaterial({
      color: color,
      toneMapped: false
    }));
    _this121.box = box;
    _this121.type = 'Box3Helper';

    _this121.geometry.computeBoundingSphere();

    return _this121;
  }

  _createClass(Box3Helper, [{
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      var box = this.box;
      if (box.isEmpty()) return;
      box.getCenter(this.position);
      box.getSize(this.scale);
      this.scale.multiplyScalar(0.5);

      _get(_getPrototypeOf(Box3Helper.prototype), "updateMatrixWorld", this).call(this, force);
    }
  }]);

  return Box3Helper;
}(LineSegments);

exports.Box3Helper = Box3Helper;

var PlaneHelper = /*#__PURE__*/function (_Line3) {
  _inherits(PlaneHelper, _Line3);

  var _super151 = _createSuper(PlaneHelper);

  function PlaneHelper(plane, size = 1, hex = 0xffff00) {
    var _this122;

    _classCallCheck(this, PlaneHelper);

    var color = hex;
    var positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
    var geometry = new BufferGeometry();
    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
    geometry.computeBoundingSphere();
    _this122 = _super151.call(this, geometry, new LineBasicMaterial({
      color: color,
      toneMapped: false
    }));
    _this122.type = 'PlaneHelper';
    _this122.plane = plane;
    _this122.size = size;
    var positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
    var geometry2 = new BufferGeometry();
    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));
    geometry2.computeBoundingSphere();

    _this122.add(new Mesh(geometry2, new MeshBasicMaterial({
      color: color,
      opacity: 0.2,
      transparent: true,
      depthWrite: false,
      toneMapped: false
    })));

    return _this122;
  }

  _createClass(PlaneHelper, [{
    key: "updateMatrixWorld",
    value: function updateMatrixWorld(force) {
      var scale = -this.plane.constant;
      if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter

      this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
      this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

      this.lookAt(this.plane.normal);

      _get(_getPrototypeOf(PlaneHelper.prototype), "updateMatrixWorld", this).call(this, force);
    }
  }]);

  return PlaneHelper;
}(Line);

exports.PlaneHelper = PlaneHelper;

var _axis = /*@__PURE__*/new Vector3();

var _lineGeometry, _coneGeometry;

var ArrowHelper = /*#__PURE__*/function (_Object3D17) {
  _inherits(ArrowHelper, _Object3D17);

  var _super152 = _createSuper(ArrowHelper);

  // dir is assumed to be normalized
  function ArrowHelper(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {
    var _this123;

    _classCallCheck(this, ArrowHelper);

    _this123 = _super152.call(this);
    _this123.type = 'ArrowHelper';

    if (_lineGeometry === undefined) {
      _lineGeometry = new BufferGeometry();

      _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));

      _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);

      _coneGeometry.translate(0, -0.5, 0);
    }

    _this123.position.copy(origin);

    _this123.line = new Line(_lineGeometry, new LineBasicMaterial({
      color: color,
      toneMapped: false
    }));
    _this123.line.matrixAutoUpdate = false;

    _this123.add(_this123.line);

    _this123.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
      color: color,
      toneMapped: false
    }));
    _this123.cone.matrixAutoUpdate = false;

    _this123.add(_this123.cone);

    _this123.setDirection(dir);

    _this123.setLength(length, headLength, headWidth);

    return _this123;
  }

  _createClass(ArrowHelper, [{
    key: "setDirection",
    value: function setDirection(dir) {
      // dir is assumed to be normalized
      if (dir.y > 0.99999) {
        this.quaternion.set(0, 0, 0, 1);
      } else if (dir.y < -0.99999) {
        this.quaternion.set(1, 0, 0, 0);
      } else {
        _axis.set(dir.z, 0, -dir.x).normalize();

        var radians = Math.acos(dir.y);
        this.quaternion.setFromAxisAngle(_axis, radians);
      }
    }
  }, {
    key: "setLength",
    value: function setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
      this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458

      this.line.updateMatrix();
      this.cone.scale.set(headWidth, headLength, headWidth);
      this.cone.position.y = length;
      this.cone.updateMatrix();
    }
  }, {
    key: "setColor",
    value: function setColor(color) {
      this.line.material.color.set(color);
      this.cone.material.color.set(color);
    }
  }, {
    key: "copy",
    value: function copy(source) {
      _get(_getPrototypeOf(ArrowHelper.prototype), "copy", this).call(this, source, false);

      this.line.copy(source.line);
      this.cone.copy(source.cone);
      return this;
    }
  }]);

  return ArrowHelper;
}(Object3D);

exports.ArrowHelper = ArrowHelper;

var AxesHelper = /*#__PURE__*/function (_LineSegments7) {
  _inherits(AxesHelper, _LineSegments7);

  var _super153 = _createSuper(AxesHelper);

  function AxesHelper(size = 1) {
    var _this124;

    _classCallCheck(this, AxesHelper);

    var vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];
    var colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];
    var geometry = new BufferGeometry();
    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
    var material = new LineBasicMaterial({
      vertexColors: true,
      toneMapped: false
    });
    _this124 = _super153.call(this, geometry, material);
    _this124.type = 'AxesHelper';
    return _this124;
  }

  _createClass(AxesHelper, [{
    key: "setColors",
    value: function setColors(xAxisColor, yAxisColor, zAxisColor) {
      var color = new Color();
      var array = this.geometry.attributes.color.array;
      color.set(xAxisColor);
      color.toArray(array, 0);
      color.toArray(array, 3);
      color.set(yAxisColor);
      color.toArray(array, 6);
      color.toArray(array, 9);
      color.set(zAxisColor);
      color.toArray(array, 12);
      color.toArray(array, 15);
      this.geometry.attributes.color.needsUpdate = true;
      return this;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.geometry.dispose();
      this.material.dispose();
    }
  }]);

  return AxesHelper;
}(LineSegments);

exports.AxesHelper = AxesHelper;

var ShapePath = /*#__PURE__*/function () {
  function ShapePath() {
    _classCallCheck(this, ShapePath);

    this.type = 'ShapePath';
    this.color = new Color();
    this.subPaths = [];
    this.currentPath = null;
  }

  _createClass(ShapePath, [{
    key: "moveTo",
    value: function moveTo(x, y) {
      this.currentPath = new Path();
      this.subPaths.push(this.currentPath);
      this.currentPath.moveTo(x, y);
      return this;
    }
  }, {
    key: "lineTo",
    value: function lineTo(x, y) {
      this.currentPath.lineTo(x, y);
      return this;
    }
  }, {
    key: "quadraticCurveTo",
    value: function quadraticCurveTo(aCPx, aCPy, aX, aY) {
      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
      return this;
    }
  }, {
    key: "bezierCurveTo",
    value: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
      return this;
    }
  }, {
    key: "splineThru",
    value: function splineThru(pts) {
      this.currentPath.splineThru(pts);
      return this;
    }
  }, {
    key: "toShapes",
    value: function toShapes(isCCW, noHoles) {
      function toShapesNoHoles(inSubpaths) {
        var shapes = [];

        for (var _i351 = 0, l = inSubpaths.length; _i351 < l; _i351++) {
          var _tmpPath = inSubpaths[_i351];

          var _tmpShape = new Shape();

          _tmpShape.curves = _tmpPath.curves;
          shapes.push(_tmpShape);
        }

        return shapes;
      }

      function isPointInsidePolygon(inPt, inPolygon) {
        var polyLen = inPolygon.length; // inPt on polygon contour => immediate success    or
        // toggling of inside/outside at every single! intersection point of an edge
        //  with the horizontal line through inPt, left of inPt
        //  not counting lowerY endpoints of edges and whole edges on that line

        var inside = false;

        for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {
          var edgeLowPt = inPolygon[p];
          var edgeHighPt = inPolygon[q];
          var edgeDx = edgeHighPt.x - edgeLowPt.x;
          var edgeDy = edgeHighPt.y - edgeLowPt.y;

          if (Math.abs(edgeDy) > Number.EPSILON) {
            // not parallel
            if (edgeDy < 0) {
              edgeLowPt = inPolygon[q];
              edgeDx = -edgeDx;
              edgeHighPt = inPolygon[p];
              edgeDy = -edgeDy;
            }

            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;

            if (inPt.y === edgeLowPt.y) {
              if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
              // continue;				// no intersection or edgeLowPt => doesn't count !!!
            } else {
              var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
              if (perpEdge === 0) return true; // inPt is on contour ?

              if (perpEdge < 0) continue;
              inside = !inside; // true intersection left of inPt
            }
          } else {
            // parallel or collinear
            if (inPt.y !== edgeLowPt.y) continue; // parallel
            // edge lies on the same horizontal line as inPt

            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
            // continue;
          }
        }

        return inside;
      }

      var isClockWise = ShapeUtils.isClockWise;
      var subPaths = this.subPaths;
      if (subPaths.length === 0) return [];
      if (noHoles === true) return toShapesNoHoles(subPaths);
      var solid, tmpPath, tmpShape;
      var shapes = [];

      if (subPaths.length === 1) {
        tmpPath = subPaths[0];
        tmpShape = new Shape();
        tmpShape.curves = tmpPath.curves;
        shapes.push(tmpShape);
        return shapes;
      }

      var holesFirst = !isClockWise(subPaths[0].getPoints());
      holesFirst = isCCW ? !holesFirst : holesFirst; // console.log("Holes first", holesFirst);

      var betterShapeHoles = [];
      var newShapes = [];
      var newShapeHoles = [];
      var mainIdx = 0;
      var tmpPoints;
      newShapes[mainIdx] = undefined;
      newShapeHoles[mainIdx] = [];

      for (var _i352 = 0, l = subPaths.length; _i352 < l; _i352++) {
        tmpPath = subPaths[_i352];
        tmpPoints = tmpPath.getPoints();
        solid = isClockWise(tmpPoints);
        solid = isCCW ? !solid : solid;

        if (solid) {
          if (!holesFirst && newShapes[mainIdx]) mainIdx++;
          newShapes[mainIdx] = {
            s: new Shape(),
            p: tmpPoints
          };
          newShapes[mainIdx].s.curves = tmpPath.curves;
          if (holesFirst) mainIdx++;
          newShapeHoles[mainIdx] = []; //console.log('cw', i);
        } else {
          newShapeHoles[mainIdx].push({
            h: tmpPath,
            p: tmpPoints[0]
          }); //console.log('ccw', i);
        }
      } // only Holes? -> probably all Shapes with wrong orientation


      if (!newShapes[0]) return toShapesNoHoles(subPaths);

      if (newShapes.length > 1) {
        var ambiguous = false;
        var toChange = 0;

        for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
          betterShapeHoles[sIdx] = [];
        }

        for (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {
          var sho = newShapeHoles[_sIdx];

          for (var hIdx = 0; hIdx < sho.length; hIdx++) {
            var ho = sho[hIdx];
            var hole_unassigned = true;

            for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                if (_sIdx !== s2Idx) toChange++;

                if (hole_unassigned) {
                  hole_unassigned = false;
                  betterShapeHoles[s2Idx].push(ho);
                } else {
                  ambiguous = true;
                }
              }
            }

            if (hole_unassigned) {
              betterShapeHoles[_sIdx].push(ho);
            }
          }
        }

        if (toChange > 0 && ambiguous === false) {
          newShapeHoles = betterShapeHoles;
        }
      }

      var tmpHoles;

      for (var _i353 = 0, il = newShapes.length; _i353 < il; _i353++) {
        tmpShape = newShapes[_i353].s;
        shapes.push(tmpShape);
        tmpHoles = newShapeHoles[_i353];

        for (var j = 0, jl = tmpHoles.length; j < jl; j++) {
          tmpShape.holes.push(tmpHoles[j].h);
        }
      } //console.log("shape", shapes);


      return shapes;
    }
  }]);

  return ShapePath;
}(); // Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf


exports.ShapePath = ShapePath;

var DataUtils = /*#__PURE__*/function () {
  function DataUtils() {
    _classCallCheck(this, DataUtils);
  }

  _createClass(DataUtils, null, [{
    key: "toHalfFloat",
    value: // float32 to float16
    function toHalfFloat(val) {
      if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');
      val = clamp(val, -65504, 65504);
      _floatView[0] = val;
      var f = _uint32View[0];
      var e = f >> 23 & 0x1ff;
      return _baseTable[e] + ((f & 0x007fffff) >> _shiftTable[e]);
    } // float16 to float32

  }, {
    key: "fromHalfFloat",
    value: function fromHalfFloat(val) {
      var m = val >> 10;
      _uint32View[0] = _mantissaTable[_offsetTable[m] + (val & 0x3ff)] + _exponentTable[m];
      return _floatView[0];
    }
  }]);

  return DataUtils;
}(); // float32 to float16 helpers


exports.DataUtils = DataUtils;

var _buffer = new ArrayBuffer(4);

var _floatView = new Float32Array(_buffer);

var _uint32View = new Uint32Array(_buffer);

var _baseTable = new Uint32Array(512);

var _shiftTable = new Uint32Array(512);

for (var _i354 = 0; _i354 < 256; ++_i354) {
  var e = _i354 - 127; // very small number (0, -0)

  if (e < -27) {
    _baseTable[_i354] = 0x0000;
    _baseTable[_i354 | 0x100] = 0x8000;
    _shiftTable[_i354] = 24;
    _shiftTable[_i354 | 0x100] = 24; // small number (denorm)
  } else if (e < -14) {
    _baseTable[_i354] = 0x0400 >> -e - 14;
    _baseTable[_i354 | 0x100] = 0x0400 >> -e - 14 | 0x8000;
    _shiftTable[_i354] = -e - 1;
    _shiftTable[_i354 | 0x100] = -e - 1; // normal number
  } else if (e <= 15) {
    _baseTable[_i354] = e + 15 << 10;
    _baseTable[_i354 | 0x100] = e + 15 << 10 | 0x8000;
    _shiftTable[_i354] = 13;
    _shiftTable[_i354 | 0x100] = 13; // large number (Infinity, -Infinity)
  } else if (e < 128) {
    _baseTable[_i354] = 0x7c00;
    _baseTable[_i354 | 0x100] = 0xfc00;
    _shiftTable[_i354] = 24;
    _shiftTable[_i354 | 0x100] = 24; // stay (NaN, Infinity, -Infinity)
  } else {
    _baseTable[_i354] = 0x7c00;
    _baseTable[_i354 | 0x100] = 0xfc00;
    _shiftTable[_i354] = 13;
    _shiftTable[_i354 | 0x100] = 13;
  }
} // float16 to float32 helpers


var _mantissaTable = new Uint32Array(2048);

var _exponentTable = new Uint32Array(64);

var _offsetTable = new Uint32Array(64);

for (var _i355 = 1; _i355 < 1024; ++_i355) {
  var m = _i355 << 13; // zero pad mantissa bits

  var _e2 = 0; // zero exponent
  // normalized

  while ((m & 0x00800000) === 0) {
    m <<= 1;
    _e2 -= 0x00800000; // decrement exponent
  }

  m &= ~0x00800000; // clear leading 1 bit

  _e2 += 0x38800000; // adjust bias

  _mantissaTable[_i355] = m | _e2;
}

for (var _i356 = 1024; _i356 < 2048; ++_i356) {
  _mantissaTable[_i356] = 0x38000000 + (_i356 - 1024 << 13);
}

for (var _i357 = 1; _i357 < 31; ++_i357) {
  _exponentTable[_i357] = _i357 << 23;
}

_exponentTable[31] = 0x47800000;
_exponentTable[32] = 0x80000000;

for (var _i358 = 33; _i358 < 63; ++_i358) {
  _exponentTable[_i358] = 0x80000000 + (_i358 - 32 << 23);
}

_exponentTable[63] = 0xc7800000;

for (var _i359 = 1; _i359 < 64; ++_i359) {
  if (_i359 !== 32) {
    _offsetTable[_i359] = 1024;
  }
}

var LineStrip = 0;
exports.LineStrip = LineStrip;
var LinePieces = 1;
exports.LinePieces = LinePieces;
var NoColors = 0;
exports.NoColors = NoColors;
var FaceColors = 1;
exports.FaceColors = FaceColors;
var VertexColors = 2;
exports.VertexColors = VertexColors;

function MeshFaceMaterial(materials) {
  console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');
  return materials;
}

function MultiMaterial(materials = []) {
  console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');
  materials.isMultiMaterial = true;
  materials.materials = materials;

  materials.clone = function () {
    return materials.slice();
  };

  return materials;
}

var PointCloud = /*#__PURE__*/function (_Points) {
  _inherits(PointCloud, _Points);

  var _super154 = _createSuper(PointCloud);

  function PointCloud(geometry, material) {
    _classCallCheck(this, PointCloud);

    console.warn('THREE.PointCloud has been renamed to THREE.Points.');
    return _super154.call(this, geometry, material);
  }

  return _createClass(PointCloud);
}(Points);

exports.PointCloud = PointCloud;

var Particle = /*#__PURE__*/function (_Sprite) {
  _inherits(Particle, _Sprite);

  var _super155 = _createSuper(Particle);

  function Particle(material) {
    _classCallCheck(this, Particle);

    console.warn('THREE.Particle has been renamed to THREE.Sprite.');
    return _super155.call(this, material);
  }

  return _createClass(Particle);
}(Sprite);

exports.Particle = Particle;

var ParticleSystem = /*#__PURE__*/function (_Points2) {
  _inherits(ParticleSystem, _Points2);

  var _super156 = _createSuper(ParticleSystem);

  function ParticleSystem(geometry, material) {
    _classCallCheck(this, ParticleSystem);

    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
    return _super156.call(this, geometry, material);
  }

  return _createClass(ParticleSystem);
}(Points);

exports.ParticleSystem = ParticleSystem;

var PointCloudMaterial = /*#__PURE__*/function (_PointsMaterial) {
  _inherits(PointCloudMaterial, _PointsMaterial);

  var _super157 = _createSuper(PointCloudMaterial);

  function PointCloudMaterial(parameters) {
    _classCallCheck(this, PointCloudMaterial);

    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
    return _super157.call(this, parameters);
  }

  return _createClass(PointCloudMaterial);
}(PointsMaterial);

exports.PointCloudMaterial = PointCloudMaterial;

var ParticleBasicMaterial = /*#__PURE__*/function (_PointsMaterial2) {
  _inherits(ParticleBasicMaterial, _PointsMaterial2);

  var _super158 = _createSuper(ParticleBasicMaterial);

  function ParticleBasicMaterial(parameters) {
    _classCallCheck(this, ParticleBasicMaterial);

    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
    return _super158.call(this, parameters);
  }

  return _createClass(ParticleBasicMaterial);
}(PointsMaterial);

exports.ParticleBasicMaterial = ParticleBasicMaterial;

var ParticleSystemMaterial = /*#__PURE__*/function (_PointsMaterial3) {
  _inherits(ParticleSystemMaterial, _PointsMaterial3);

  var _super159 = _createSuper(ParticleSystemMaterial);

  function ParticleSystemMaterial(parameters) {
    _classCallCheck(this, ParticleSystemMaterial);

    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
    return _super159.call(this, parameters);
  }

  return _createClass(ParticleSystemMaterial);
}(PointsMaterial);

exports.ParticleSystemMaterial = ParticleSystemMaterial;

var Vertex = /*#__PURE__*/function (_Vector) {
  _inherits(Vertex, _Vector);

  var _super160 = _createSuper(Vertex);

  function Vertex(x, y, z) {
    _classCallCheck(this, Vertex);

    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
    return _super160.call(this, x, y, z);
  }

  return _createClass(Vertex);
}(Vector3); //


exports.Vertex = Vertex;

var DynamicBufferAttribute = /*#__PURE__*/function (_BufferAttribute12) {
  _inherits(DynamicBufferAttribute, _BufferAttribute12);

  var _super161 = _createSuper(DynamicBufferAttribute);

  function DynamicBufferAttribute(array, itemSize) {
    var _this125;

    _classCallCheck(this, DynamicBufferAttribute);

    console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');
    _this125 = _super161.call(this, array, itemSize);

    _this125.setUsage(DynamicDrawUsage);

    return _this125;
  }

  return _createClass(DynamicBufferAttribute);
}(BufferAttribute);

exports.DynamicBufferAttribute = DynamicBufferAttribute;

var Int8Attribute = /*#__PURE__*/function (_Int8BufferAttribute) {
  _inherits(Int8Attribute, _Int8BufferAttribute);

  var _super162 = _createSuper(Int8Attribute);

  function Int8Attribute(array, itemSize) {
    _classCallCheck(this, Int8Attribute);

    console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
    return _super162.call(this, array, itemSize);
  }

  return _createClass(Int8Attribute);
}(Int8BufferAttribute);

exports.Int8Attribute = Int8Attribute;

var Uint8Attribute = /*#__PURE__*/function (_Uint8BufferAttribute) {
  _inherits(Uint8Attribute, _Uint8BufferAttribute);

  var _super163 = _createSuper(Uint8Attribute);

  function Uint8Attribute(array, itemSize) {
    _classCallCheck(this, Uint8Attribute);

    console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
    return _super163.call(this, array, itemSize);
  }

  return _createClass(Uint8Attribute);
}(Uint8BufferAttribute);

exports.Uint8Attribute = Uint8Attribute;

var Uint8ClampedAttribute = /*#__PURE__*/function (_Uint8ClampedBufferAt) {
  _inherits(Uint8ClampedAttribute, _Uint8ClampedBufferAt);

  var _super164 = _createSuper(Uint8ClampedAttribute);

  function Uint8ClampedAttribute(array, itemSize) {
    _classCallCheck(this, Uint8ClampedAttribute);

    console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
    return _super164.call(this, array, itemSize);
  }

  return _createClass(Uint8ClampedAttribute);
}(Uint8ClampedBufferAttribute);

exports.Uint8ClampedAttribute = Uint8ClampedAttribute;

var Int16Attribute = /*#__PURE__*/function (_Int16BufferAttribute) {
  _inherits(Int16Attribute, _Int16BufferAttribute);

  var _super165 = _createSuper(Int16Attribute);

  function Int16Attribute(array, itemSize) {
    _classCallCheck(this, Int16Attribute);

    console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
    return _super165.call(this, array, itemSize);
  }

  return _createClass(Int16Attribute);
}(Int16BufferAttribute);

exports.Int16Attribute = Int16Attribute;

var Uint16Attribute = /*#__PURE__*/function (_Uint16BufferAttribut) {
  _inherits(Uint16Attribute, _Uint16BufferAttribut);

  var _super166 = _createSuper(Uint16Attribute);

  function Uint16Attribute(array, itemSize) {
    _classCallCheck(this, Uint16Attribute);

    console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
    return _super166.call(this, array, itemSize);
  }

  return _createClass(Uint16Attribute);
}(Uint16BufferAttribute);

exports.Uint16Attribute = Uint16Attribute;

var Int32Attribute = /*#__PURE__*/function (_Int32BufferAttribute) {
  _inherits(Int32Attribute, _Int32BufferAttribute);

  var _super167 = _createSuper(Int32Attribute);

  function Int32Attribute(array, itemSize) {
    _classCallCheck(this, Int32Attribute);

    console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
    return _super167.call(this, array, itemSize);
  }

  return _createClass(Int32Attribute);
}(Int32BufferAttribute);

exports.Int32Attribute = Int32Attribute;

var Uint32Attribute = /*#__PURE__*/function (_Uint32BufferAttribut) {
  _inherits(Uint32Attribute, _Uint32BufferAttribut);

  var _super168 = _createSuper(Uint32Attribute);

  function Uint32Attribute(array, itemSize) {
    _classCallCheck(this, Uint32Attribute);

    console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
    return _super168.call(this, array, itemSize);
  }

  return _createClass(Uint32Attribute);
}(Uint32BufferAttribute);

exports.Uint32Attribute = Uint32Attribute;

var Float32Attribute = /*#__PURE__*/function (_Float32BufferAttribu) {
  _inherits(Float32Attribute, _Float32BufferAttribu);

  var _super169 = _createSuper(Float32Attribute);

  function Float32Attribute(array, itemSize) {
    _classCallCheck(this, Float32Attribute);

    console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
    return _super169.call(this, array, itemSize);
  }

  return _createClass(Float32Attribute);
}(Float32BufferAttribute);

exports.Float32Attribute = Float32Attribute;

var Float64Attribute = /*#__PURE__*/function (_Float64BufferAttribu) {
  _inherits(Float64Attribute, _Float64BufferAttribu);

  var _super170 = _createSuper(Float64Attribute);

  function Float64Attribute(array, itemSize) {
    _classCallCheck(this, Float64Attribute);

    console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
    return _super170.call(this, array, itemSize);
  }

  return _createClass(Float64Attribute);
}(Float64BufferAttribute); //


exports.Float64Attribute = Float64Attribute;

Curve.create = function (construct, getPoint) {
  console.log('THREE.Curve.create() has been deprecated');
  construct.prototype = Object.create(Curve.prototype);
  construct.prototype.constructor = construct;
  construct.prototype.getPoint = getPoint;
  return construct;
}; //


Path.prototype.fromPoints = function (points) {
  console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');
  return this.setFromPoints(points);
}; //


var AxisHelper = /*#__PURE__*/function (_AxesHelper) {
  _inherits(AxisHelper, _AxesHelper);

  var _super171 = _createSuper(AxisHelper);

  function AxisHelper(size) {
    _classCallCheck(this, AxisHelper);

    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');
    return _super171.call(this, size);
  }

  return _createClass(AxisHelper);
}(AxesHelper);

exports.AxisHelper = AxisHelper;

var BoundingBoxHelper = /*#__PURE__*/function (_BoxHelper) {
  _inherits(BoundingBoxHelper, _BoxHelper);

  var _super172 = _createSuper(BoundingBoxHelper);

  function BoundingBoxHelper(object, color) {
    _classCallCheck(this, BoundingBoxHelper);

    console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
    return _super172.call(this, object, color);
  }

  return _createClass(BoundingBoxHelper);
}(BoxHelper);

exports.BoundingBoxHelper = BoundingBoxHelper;

var EdgesHelper = /*#__PURE__*/function (_LineSegments8) {
  _inherits(EdgesHelper, _LineSegments8);

  var _super173 = _createSuper(EdgesHelper);

  function EdgesHelper(object, hex) {
    _classCallCheck(this, EdgesHelper);

    console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
    return _super173.call(this, new EdgesGeometry(object.geometry), new LineBasicMaterial({
      color: hex !== undefined ? hex : 0xffffff
    }));
  }

  return _createClass(EdgesHelper);
}(LineSegments);

exports.EdgesHelper = EdgesHelper;

GridHelper.prototype.setColors = function () {
  console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
};

SkeletonHelper.prototype.update = function () {
  console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
};

var WireframeHelper = /*#__PURE__*/function (_LineSegments9) {
  _inherits(WireframeHelper, _LineSegments9);

  var _super174 = _createSuper(WireframeHelper);

  function WireframeHelper(object, hex) {
    _classCallCheck(this, WireframeHelper);

    console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
    return _super174.call(this, new WireframeGeometry(object.geometry), new LineBasicMaterial({
      color: hex !== undefined ? hex : 0xffffff
    }));
  }

  return _createClass(WireframeHelper);
}(LineSegments); //


exports.WireframeHelper = WireframeHelper;

Loader.prototype.extractUrlBase = function (url) {
  console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');
  return LoaderUtils.extractUrlBase(url);
};

Loader.Handlers = {
  add: function
    /* regex, loader */
  add() {
    console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');
  },
  get: function
    /* file */
  get() {
    console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');
  }
};

var XHRLoader = /*#__PURE__*/function (_FileLoader) {
  _inherits(XHRLoader, _FileLoader);

  var _super175 = _createSuper(XHRLoader);

  function XHRLoader(manager) {
    _classCallCheck(this, XHRLoader);

    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
    return _super175.call(this, manager);
  }

  return _createClass(XHRLoader);
}(FileLoader);

exports.XHRLoader = XHRLoader;

var BinaryTextureLoader = /*#__PURE__*/function (_DataTextureLoader) {
  _inherits(BinaryTextureLoader, _DataTextureLoader);

  var _super176 = _createSuper(BinaryTextureLoader);

  function BinaryTextureLoader(manager) {
    _classCallCheck(this, BinaryTextureLoader);

    console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
    return _super176.call(this, manager);
  }

  return _createClass(BinaryTextureLoader);
}(DataTextureLoader); //


exports.BinaryTextureLoader = BinaryTextureLoader;

Box2.prototype.center = function (optionalTarget) {
  console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
  return this.getCenter(optionalTarget);
};

Box2.prototype.empty = function () {
  console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
  return this.isEmpty();
};

Box2.prototype.isIntersectionBox = function (box) {
  console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
  return this.intersectsBox(box);
};

Box2.prototype.size = function (optionalTarget) {
  console.warn('THREE.Box2: .size() has been renamed to .getSize().');
  return this.getSize(optionalTarget);
}; //


Box3.prototype.center = function (optionalTarget) {
  console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
  return this.getCenter(optionalTarget);
};

Box3.prototype.empty = function () {
  console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
  return this.isEmpty();
};

Box3.prototype.isIntersectionBox = function (box) {
  console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
  return this.intersectsBox(box);
};

Box3.prototype.isIntersectionSphere = function (sphere) {
  console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
  return this.intersectsSphere(sphere);
};

Box3.prototype.size = function (optionalTarget) {
  console.warn('THREE.Box3: .size() has been renamed to .getSize().');
  return this.getSize(optionalTarget);
}; //


Euler.prototype.toVector3 = function () {
  console.error('THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead');
}; //


Sphere.prototype.empty = function () {
  console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');
  return this.isEmpty();
}; //


Frustum.prototype.setFromMatrix = function (m) {
  console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');
  return this.setFromProjectionMatrix(m);
}; //


Line3.prototype.center = function (optionalTarget) {
  console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
  return this.getCenter(optionalTarget);
}; //


Matrix3.prototype.flattenToArrayOffset = function (array, offset) {
  console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
  return this.toArray(array, offset);
};

Matrix3.prototype.multiplyVector3 = function (vector) {
  console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
  return vector.applyMatrix3(this);
};

Matrix3.prototype.multiplyVector3Array = function
  /* a */
() {
  console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
};

Matrix3.prototype.applyToBufferAttribute = function (attribute) {
  console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');
  return attribute.applyMatrix3(this);
};

Matrix3.prototype.applyToVector3Array = function
  /* array, offset, length */
() {
  console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
};

Matrix3.prototype.getInverse = function (matrix) {
  console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
  return this.copy(matrix).invert();
}; //


Matrix4.prototype.extractPosition = function (m) {
  console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
  return this.copyPosition(m);
};

Matrix4.prototype.flattenToArrayOffset = function (array, offset) {
  console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
  return this.toArray(array, offset);
};

Matrix4.prototype.getPosition = function () {
  console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
  return new Vector3().setFromMatrixColumn(this, 3);
};

Matrix4.prototype.setRotationFromQuaternion = function (q) {
  console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
  return this.makeRotationFromQuaternion(q);
};

Matrix4.prototype.multiplyToArray = function () {
  console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
};

Matrix4.prototype.multiplyVector3 = function (vector) {
  console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
  return vector.applyMatrix4(this);
};

Matrix4.prototype.multiplyVector4 = function (vector) {
  console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
  return vector.applyMatrix4(this);
};

Matrix4.prototype.multiplyVector3Array = function
  /* a */
() {
  console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
};

Matrix4.prototype.rotateAxis = function (v) {
  console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
  v.transformDirection(this);
};

Matrix4.prototype.crossVector = function (vector) {
  console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
  return vector.applyMatrix4(this);
};

Matrix4.prototype.translate = function () {
  console.error('THREE.Matrix4: .translate() has been removed.');
};

Matrix4.prototype.rotateX = function () {
  console.error('THREE.Matrix4: .rotateX() has been removed.');
};

Matrix4.prototype.rotateY = function () {
  console.error('THREE.Matrix4: .rotateY() has been removed.');
};

Matrix4.prototype.rotateZ = function () {
  console.error('THREE.Matrix4: .rotateZ() has been removed.');
};

Matrix4.prototype.rotateByAxis = function () {
  console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
};

Matrix4.prototype.applyToBufferAttribute = function (attribute) {
  console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');
  return attribute.applyMatrix4(this);
};

Matrix4.prototype.applyToVector3Array = function
  /* array, offset, length */
() {
  console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
};

Matrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {
  console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
  return this.makePerspective(left, right, top, bottom, near, far);
};

Matrix4.prototype.getInverse = function (matrix) {
  console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
  return this.copy(matrix).invert();
}; //


Plane.prototype.isIntersectionLine = function (line) {
  console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
  return this.intersectsLine(line);
}; //


Quaternion.prototype.multiplyVector3 = function (vector) {
  console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
  return vector.applyQuaternion(this);
};

Quaternion.prototype.inverse = function () {
  console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');
  return this.invert();
}; //


Ray.prototype.isIntersectionBox = function (box) {
  console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
  return this.intersectsBox(box);
};

Ray.prototype.isIntersectionPlane = function (plane) {
  console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
  return this.intersectsPlane(plane);
};

Ray.prototype.isIntersectionSphere = function (sphere) {
  console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
  return this.intersectsSphere(sphere);
}; //


Triangle.prototype.area = function () {
  console.warn('THREE.Triangle: .area() has been renamed to .getArea().');
  return this.getArea();
};

Triangle.prototype.barycoordFromPoint = function (point, target) {
  console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
  return this.getBarycoord(point, target);
};

Triangle.prototype.midpoint = function (target) {
  console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');
  return this.getMidpoint(target);
};

Triangle.prototypenormal = function (target) {
  console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
  return this.getNormal(target);
};

Triangle.prototype.plane = function (target) {
  console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');
  return this.getPlane(target);
};

Triangle.barycoordFromPoint = function (point, a, b, c, target) {
  console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
  return Triangle.getBarycoord(point, a, b, c, target);
};

Triangle.normal = function (a, b, c, target) {
  console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
  return Triangle.getNormal(a, b, c, target);
}; //


Shape.prototype.extractAllPoints = function (divisions) {
  console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');
  return this.extractPoints(divisions);
};

Shape.prototype.extrude = function (options) {
  console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
  return new ExtrudeGeometry(this, options);
};

Shape.prototype.makeGeometry = function (options) {
  console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
  return new ShapeGeometry(this, options);
}; //


Vector2.prototype.fromAttribute = function (attribute, index, offset) {
  console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
  return this.fromBufferAttribute(attribute, index, offset);
};

Vector2.prototype.distanceToManhattan = function (v) {
  console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
  return this.manhattanDistanceTo(v);
};

Vector2.prototype.lengthManhattan = function () {
  console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');
  return this.manhattanLength();
}; //


Vector3.prototype.setEulerFromRotationMatrix = function () {
  console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
};

Vector3.prototype.setEulerFromQuaternion = function () {
  console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
};

Vector3.prototype.getPositionFromMatrix = function (m) {
  console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
  return this.setFromMatrixPosition(m);
};

Vector3.prototype.getScaleFromMatrix = function (m) {
  console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
  return this.setFromMatrixScale(m);
};

Vector3.prototype.getColumnFromMatrix = function (index, matrix) {
  console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
  return this.setFromMatrixColumn(matrix, index);
};

Vector3.prototype.applyProjection = function (m) {
  console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
  return this.applyMatrix4(m);
};

Vector3.prototype.fromAttribute = function (attribute, index, offset) {
  console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
  return this.fromBufferAttribute(attribute, index, offset);
};

Vector3.prototype.distanceToManhattan = function (v) {
  console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
  return this.manhattanDistanceTo(v);
};

Vector3.prototype.lengthManhattan = function () {
  console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');
  return this.manhattanLength();
}; //


Vector4.prototype.fromAttribute = function (attribute, index, offset) {
  console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
  return this.fromBufferAttribute(attribute, index, offset);
};

Vector4.prototype.lengthManhattan = function () {
  console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');
  return this.manhattanLength();
}; //


Object3D.prototype.getChildByName = function (name) {
  console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
  return this.getObjectByName(name);
};

Object3D.prototype.renderDepth = function () {
  console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
};

Object3D.prototype.translate = function (distance, axis) {
  console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
  return this.translateOnAxis(axis, distance);
};

Object3D.prototype.getWorldRotation = function () {
  console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
};

Object3D.prototype.applyMatrix = function (matrix) {
  console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');
  return this.applyMatrix4(matrix);
};

Object.defineProperties(Object3D.prototype, {
  eulerOrder: {
    get: function get() {
      console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
      return this.rotation.order;
    },
    set: function set(value) {
      console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
      this.rotation.order = value;
    }
  },
  useQuaternion: {
    get: function get() {
      console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
    },
    set: function set() {
      console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
    }
  }
});

Mesh.prototype.setDrawMode = function () {
  console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
};

Object.defineProperties(Mesh.prototype, {
  drawMode: {
    get: function get() {
      console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');
      return TrianglesDrawMode;
    },
    set: function set() {
      console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
    }
  }
});

SkinnedMesh.prototype.initBones = function () {
  console.error('THREE.SkinnedMesh: initBones() has been removed.');
}; //


PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {
  console.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');
  if (filmGauge !== undefined) this.filmGauge = filmGauge;
  this.setFocalLength(focalLength);
}; //


Object.defineProperties(Light.prototype, {
  onlyShadow: {
    set: function set() {
      console.warn('THREE.Light: .onlyShadow has been removed.');
    }
  },
  shadowCameraFov: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
      this.shadow.camera.fov = value;
    }
  },
  shadowCameraLeft: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
      this.shadow.camera.left = value;
    }
  },
  shadowCameraRight: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
      this.shadow.camera.right = value;
    }
  },
  shadowCameraTop: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
      this.shadow.camera.top = value;
    }
  },
  shadowCameraBottom: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
      this.shadow.camera.bottom = value;
    }
  },
  shadowCameraNear: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
      this.shadow.camera.near = value;
    }
  },
  shadowCameraFar: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
      this.shadow.camera.far = value;
    }
  },
  shadowCameraVisible: {
    set: function set() {
      console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
    }
  },
  shadowBias: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
      this.shadow.bias = value;
    }
  },
  shadowDarkness: {
    set: function set() {
      console.warn('THREE.Light: .shadowDarkness has been removed.');
    }
  },
  shadowMapWidth: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
      this.shadow.mapSize.width = value;
    }
  },
  shadowMapHeight: {
    set: function set(value) {
      console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
      this.shadow.mapSize.height = value;
    }
  }
}); //

Object.defineProperties(BufferAttribute.prototype, {
  length: {
    get: function get() {
      console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
      return this.array.length;
    }
  },
  dynamic: {
    get: function get() {
      console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
      return this.usage === DynamicDrawUsage;
    },
    set: function
      /* value */
    set() {
      console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
      this.setUsage(DynamicDrawUsage);
    }
  }
});

BufferAttribute.prototype.setDynamic = function (value) {
  console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');
  this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
  return this;
};

BufferAttribute.prototype.copyIndicesArray = function
  /* indices */
() {
  console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
}, BufferAttribute.prototype.setArray = function
  /* array */
() {
  console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
}; //

BufferGeometry.prototype.addIndex = function (index) {
  console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
  this.setIndex(index);
};

BufferGeometry.prototype.addAttribute = function (name, attribute) {
  console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');

  if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
    console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');
    return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
  }

  if (name === 'index') {
    console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
    this.setIndex(attribute);
    return this;
  }

  return this.setAttribute(name, attribute);
};

BufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {
  if (indexOffset !== undefined) {
    console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');
  }

  console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
  this.addGroup(start, count);
};

BufferGeometry.prototype.clearDrawCalls = function () {
  console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
  this.clearGroups();
};

BufferGeometry.prototype.computeOffsets = function () {
  console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
};

BufferGeometry.prototype.removeAttribute = function (name) {
  console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');
  return this.deleteAttribute(name);
};

BufferGeometry.prototype.applyMatrix = function (matrix) {
  console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');
  return this.applyMatrix4(matrix);
};

Object.defineProperties(BufferGeometry.prototype, {
  drawcalls: {
    get: function get() {
      console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
      return this.groups;
    }
  },
  offsets: {
    get: function get() {
      console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
      return this.groups;
    }
  }
});

InterleavedBuffer.prototype.setDynamic = function (value) {
  console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');
  this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
  return this;
};

InterleavedBuffer.prototype.setArray = function
  /* array */
() {
  console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
}; //


ExtrudeGeometry.prototype.getArrays = function () {
  console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');
};

ExtrudeGeometry.prototype.addShapeList = function () {
  console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');
};

ExtrudeGeometry.prototype.addShape = function () {
  console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');
}; //


Scene.prototype.dispose = function () {
  console.error('THREE.Scene: .dispose() has been removed.');
}; //


Uniform.prototype.onUpdate = function () {
  console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
  return this;
}; //


Object.defineProperties(Material.prototype, {
  wrapAround: {
    get: function get() {
      console.warn('THREE.Material: .wrapAround has been removed.');
    },
    set: function set() {
      console.warn('THREE.Material: .wrapAround has been removed.');
    }
  },
  overdraw: {
    get: function get() {
      console.warn('THREE.Material: .overdraw has been removed.');
    },
    set: function set() {
      console.warn('THREE.Material: .overdraw has been removed.');
    }
  },
  wrapRGB: {
    get: function get() {
      console.warn('THREE.Material: .wrapRGB has been removed.');
      return new Color();
    }
  },
  shading: {
    get: function get() {
      console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
    },
    set: function set(value) {
      console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
      this.flatShading = value === FlatShading;
    }
  },
  stencilMask: {
    get: function get() {
      console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
      return this.stencilFuncMask;
    },
    set: function set(value) {
      console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
      this.stencilFuncMask = value;
    }
  },
  vertexTangents: {
    get: function get() {
      console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
    },
    set: function set() {
      console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
    }
  }
});
Object.defineProperties(ShaderMaterial.prototype, {
  derivatives: {
    get: function get() {
      console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
      return this.extensions.derivatives;
    },
    set: function set(value) {
      console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
      this.extensions.derivatives = value;
    }
  }
}); //

WebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {
  console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');
  this.setRenderTarget(renderTarget);
  this.clear(color, depth, stencil);
};

WebGLRenderer.prototype.animate = function (callback) {
  console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');
  this.setAnimationLoop(callback);
};

WebGLRenderer.prototype.getCurrentRenderTarget = function () {
  console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');
  return this.getRenderTarget();
};

WebGLRenderer.prototype.getMaxAnisotropy = function () {
  console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');
  return this.capabilities.getMaxAnisotropy();
};

WebGLRenderer.prototype.getPrecision = function () {
  console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');
  return this.capabilities.precision;
};

WebGLRenderer.prototype.resetGLState = function () {
  console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');
  return this.state.reset();
};

WebGLRenderer.prototype.supportsFloatTextures = function () {
  console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
  return this.extensions.get('OES_texture_float');
};

WebGLRenderer.prototype.supportsHalfFloatTextures = function () {
  console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
  return this.extensions.get('OES_texture_half_float');
};

WebGLRenderer.prototype.supportsStandardDerivatives = function () {
  console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
  return this.extensions.get('OES_standard_derivatives');
};

WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {
  console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
  return this.extensions.get('WEBGL_compressed_texture_s3tc');
};

WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {
  console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
  return this.extensions.get('WEBGL_compressed_texture_pvrtc');
};

WebGLRenderer.prototype.supportsBlendMinMax = function () {
  console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
  return this.extensions.get('EXT_blend_minmax');
};

WebGLRenderer.prototype.supportsVertexTextures = function () {
  console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
  return this.capabilities.vertexTextures;
};

WebGLRenderer.prototype.supportsInstancedArrays = function () {
  console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
  return this.extensions.get('ANGLE_instanced_arrays');
};

WebGLRenderer.prototype.enableScissorTest = function (boolean) {
  console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
  this.setScissorTest(boolean);
};

WebGLRenderer.prototype.initMaterial = function () {
  console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
};

WebGLRenderer.prototype.addPrePlugin = function () {
  console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
};

WebGLRenderer.prototype.addPostPlugin = function () {
  console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
};

WebGLRenderer.prototype.updateShadowMap = function () {
  console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
};

WebGLRenderer.prototype.setFaceCulling = function () {
  console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
};

WebGLRenderer.prototype.allocTextureUnit = function () {
  console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');
};

WebGLRenderer.prototype.setTexture = function () {
  console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');
};

WebGLRenderer.prototype.setTexture2D = function () {
  console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');
};

WebGLRenderer.prototype.setTextureCube = function () {
  console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');
};

WebGLRenderer.prototype.getActiveMipMapLevel = function () {
  console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');
  return this.getActiveMipmapLevel();
};

Object.defineProperties(WebGLRenderer.prototype, {
  shadowMapEnabled: {
    get: function get() {
      return this.shadowMap.enabled;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
      this.shadowMap.enabled = value;
    }
  },
  shadowMapType: {
    get: function get() {
      return this.shadowMap.type;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
      this.shadowMap.type = value;
    }
  },
  shadowMapCullFace: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function
      /* value */
    set() {
      console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
    }
  },
  context: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');
      return this.getContext();
    }
  },
  vr: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');
      return this.xr;
    }
  },
  gammaInput: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
      return false;
    },
    set: function set() {
      console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
    }
  },
  gammaOutput: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
      return false;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
      this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
    }
  },
  toneMappingWhitePoint: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
      return 1.0;
    },
    set: function set() {
      console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
    }
  },
  gammaFactor: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
      return 2;
    },
    set: function set() {
      console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
    }
  }
});
Object.defineProperties(WebGLShadowMap.prototype, {
  cullFace: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function
      /* cullFace */
    set() {
      console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
    }
  },
  renderReverseSided: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function set() {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
    }
  },
  renderSingleSided: {
    get: function get() {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function set() {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
    }
  }
});

var WebGLRenderTargetCube = /*#__PURE__*/function (_WebGLCubeRenderTarge) {
  _inherits(WebGLRenderTargetCube, _WebGLCubeRenderTarge);

  var _super177 = _createSuper(WebGLRenderTargetCube);

  function WebGLRenderTargetCube(width, height, options) {
    _classCallCheck(this, WebGLRenderTargetCube);

    console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');
    return _super177.call(this, width, options);
  }

  return _createClass(WebGLRenderTargetCube);
}(WebGLCubeRenderTarget); //


exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
Object.defineProperties(WebGLRenderTarget.prototype, {
  wrapS: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
      return this.texture.wrapS;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
      this.texture.wrapS = value;
    }
  },
  wrapT: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
      return this.texture.wrapT;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
      this.texture.wrapT = value;
    }
  },
  magFilter: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
      return this.texture.magFilter;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
      this.texture.magFilter = value;
    }
  },
  minFilter: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
      return this.texture.minFilter;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
      this.texture.minFilter = value;
    }
  },
  anisotropy: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
      return this.texture.anisotropy;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
      this.texture.anisotropy = value;
    }
  },
  offset: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
      return this.texture.offset;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
      this.texture.offset = value;
    }
  },
  repeat: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
      return this.texture.repeat;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
      this.texture.repeat = value;
    }
  },
  format: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
      return this.texture.format;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
      this.texture.format = value;
    }
  },
  type: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
      return this.texture.type;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
      this.texture.type = value;
    }
  },
  generateMipmaps: {
    get: function get() {
      console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
      return this.texture.generateMipmaps;
    },
    set: function set(value) {
      console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
      this.texture.generateMipmaps = value;
    }
  }
}); //

Audio.prototype.load = function (file) {
  console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
  var scope = this;
  var audioLoader = new AudioLoader();
  audioLoader.load(file, function (buffer) {
    scope.setBuffer(buffer);
  });
  return this;
};

AudioAnalyser.prototype.getData = function () {
  console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
  return this.getFrequencyData();
}; //


CubeCamera.prototype.updateCubeMap = function (renderer, scene) {
  console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');
  return this.update(renderer, scene);
};

CubeCamera.prototype.clear = function (renderer, color, depth, stencil) {
  console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');
  return this.renderTarget.clear(renderer, color, depth, stencil);
};

ImageUtils.crossOrigin = undefined;

ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {
  console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
  var loader = new TextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  var texture = loader.load(url, onLoad, undefined, onError);
  if (mapping) texture.mapping = mapping;
  return texture;
};

ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {
  console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
  var loader = new CubeTextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  var texture = loader.load(urls, onLoad, undefined, onError);
  if (mapping) texture.mapping = mapping;
  return texture;
};

ImageUtils.loadCompressedTexture = function () {
  console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
};

ImageUtils.loadCompressedTextureCube = function () {
  console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
}; //


function CanvasRenderer() {
  console.error('THREE.CanvasRenderer has been removed');
} //


function JSONLoader() {
  console.error('THREE.JSONLoader has been removed.');
} //


var SceneUtils = {
  createMultiMaterialObject: function
    /* geometry, materials */
  createMultiMaterialObject() {
    console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
  },
  detach: function
    /* child, parent, scene */
  detach() {
    console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
  },
  attach: function
    /* child, scene, parent */
  attach() {
    console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
  }
}; //

exports.SceneUtils = SceneUtils;

function LensFlare() {
  console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');
} //


var ParametricGeometry = /*#__PURE__*/function (_BufferGeometry17) {
  _inherits(ParametricGeometry, _BufferGeometry17);

  var _super178 = _createSuper(ParametricGeometry);

  function ParametricGeometry() {
    _classCallCheck(this, ParametricGeometry);

    console.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');
    return _super178.call(this);
  }

  return _createClass(ParametricGeometry);
}(BufferGeometry);

exports.ParametricGeometry = ParametricGeometry;

var TextGeometry = /*#__PURE__*/function (_BufferGeometry18) {
  _inherits(TextGeometry, _BufferGeometry18);

  var _super179 = _createSuper(TextGeometry);

  function TextGeometry() {
    _classCallCheck(this, TextGeometry);

    console.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');
    return _super179.call(this);
  }

  return _createClass(TextGeometry);
}(BufferGeometry);

exports.TextGeometry = TextGeometry;

function FontLoader() {
  console.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');
}

function Font() {
  console.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');
}

function ImmediateRenderObject() {
  console.error('THREE.ImmediateRenderObject has been removed.');
}

var WebGLMultisampleRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget5) {
  _inherits(WebGLMultisampleRenderTarget, _WebGLRenderTarget5);

  var _super180 = _createSuper(WebGLMultisampleRenderTarget);

  function WebGLMultisampleRenderTarget(width, height, options) {
    var _this126;

    _classCallCheck(this, WebGLMultisampleRenderTarget);

    console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');
    _this126 = _super180.call(this, width, height, options);
    _this126.samples = 4;
    return _this126;
  }

  return _createClass(WebGLMultisampleRenderTarget);
}(WebGLRenderTarget);

exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;

var DataTexture2DArray = /*#__PURE__*/function (_DataArrayTexture) {
  _inherits(DataTexture2DArray, _DataArrayTexture);

  var _super181 = _createSuper(DataTexture2DArray);

  function DataTexture2DArray(data, width, height, depth) {
    _classCallCheck(this, DataTexture2DArray);

    console.warn('THREE.DataTexture2DArray has been renamed to DataArrayTexture.');
    return _super181.call(this, data, width, height, depth);
  }

  return _createClass(DataTexture2DArray);
}(DataArrayTexture);

exports.DataTexture2DArray = DataTexture2DArray;

var DataTexture3D = /*#__PURE__*/function (_Data3DTexture) {
  _inherits(DataTexture3D, _Data3DTexture);

  var _super182 = _createSuper(DataTexture3D);

  function DataTexture3D(data, width, height, depth) {
    _classCallCheck(this, DataTexture3D);

    console.warn('THREE.DataTexture3D has been renamed to Data3DTexture.');
    return _super182.call(this, data, width, height, depth);
  }

  return _createClass(DataTexture3D);
}(Data3DTexture);

exports.DataTexture3D = DataTexture3D;

if (typeof __THREE_DEVTOOLS__ !== 'undefined') {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
    detail: {
      revision: REVISION
    }
  }));
}

if (typeof window !== 'undefined') {
  if (window.__THREE__) {
    console.warn('WARNING: Multiple instances of Three.js being imported.');
  } else {
    window.__THREE__ = REVISION;
  }
}
},{}],"../node_modules/yuka/build/yuka.module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vector3 = exports.TriggerRegion = exports.Trigger = exports.TriangularFuzzySet = exports.Time = exports.Think = exports.Telegram = exports.TaskQueue = exports.Task = exports.SteeringManager = exports.SteeringBehavior = exports.StateMachine = exports.State = exports.SphericalTriggerRegion = exports.Smoother = exports.SingletonFuzzySet = exports.SeparationBehavior = exports.SeekBehavior = exports.SAT = exports.RightShoulderFuzzySet = exports.RightSCurveFuzzySet = exports.Regulator = exports.RectangularTriggerRegion = exports.Ray = exports.Quaternion = exports.PursuitBehavior = exports.PriorityQueue = exports.Polyhedron = exports.Polygon = exports.Plane = exports.Path = exports.OnPathBehavior = exports.OffsetPursuitBehavior = exports.ObstacleAvoidanceBehavior = exports.OBB = exports.NormalDistFuzzySet = exports.Node = exports.NavNode = exports.NavMeshLoader = exports.NavMesh = exports.NavEdge = exports.MovingEntity = exports.MessageDispatcher = exports.MeshGeometry = exports.MemorySystem = exports.MemoryRecord = exports.Matrix4 = exports.Matrix3 = exports.MathUtils = exports.Logger = exports.LineSegment = exports.LeftShoulderFuzzySet = exports.LeftSCurveFuzzySet = exports.InterposeBehavior = exports.HeuristicPolicyManhattan = exports.HeuristicPolicyEuclidSquared = exports.HeuristicPolicyEuclid = exports.HeuristicPolicyDijkstra = exports.HalfEdge = exports.GraphUtils = exports.Graph = exports.GoalEvaluator = exports.Goal = exports.GameEntity = exports.FuzzyVariable = exports.FuzzyVERY = exports.FuzzyTerm = exports.FuzzySet = exports.FuzzyRule = exports.FuzzyOR = exports.FuzzyModule = exports.FuzzyFAIRLY = exports.FuzzyCompositeTerm = exports.FuzzyAND = exports.FollowPathBehavior = exports.FleeBehavior = exports.EventDispatcher = exports.EvadeBehavior = exports.EntityManager = exports.Edge = exports.Dijkstra = exports.DFS = exports.CostTable = exports.Corridor = exports.ConvexHull = exports.CompositeGoal = exports.CohesionBehavior = exports.CellSpacePartitioning = exports.Cell = exports.CHVertexList = exports.CHVertex = exports.CHFace = exports.BoundingSphere = exports.BVHNode = exports.BVH = exports.BFS = exports.ArriveBehavior = exports.AlignmentBehavior = exports.AStar = exports.AABB = void 0;
exports.WorldUp = exports.WanderBehavior = exports.Vision = exports.Vehicle = void 0;

/**
 * @license
 * The MIT License
 *
 * Copyright © 2021 Yuka authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

/**
* Class for representing a telegram, an envelope which contains a message
* and certain metadata like sender and receiver. Part of the messaging system
* for game entities.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/
class Telegram {
  /**
  * Constructs a new telegram object.
  *
  * @param {GameEntity} sender - The sender.
  * @param {GameEntity} receiver - The receiver.
  * @param {String} message - The actual message.
  * @param {Number} delay - A time value in millisecond used to delay the message dispatching.
  * @param {Object} data - An object for custom data.
  */
  constructor(sender, receiver, message, delay, data) {
    /**
    * The sender.
    * @type {GameEntity}
    */
    this.sender = sender;
    /**
    * The receiver.
    * @type {GameEntity}
    */

    this.receiver = receiver;
    /**
    * The actual message.
    * @type {String}
    */

    this.message = message;
    /**
    * A time value in millisecond used to delay the message dispatching.
    * @type {Number}
    */

    this.delay = delay;
    /**
    * An object for custom data.
    * @type {Object}
    */

    this.data = data;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      sender: this.sender.uuid,
      receiver: this.receiver.uuid,
      message: this.message,
      delay: this.delay,
      data: this.data
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Telegram} A reference to this telegram.
  */


  fromJSON(json) {
    this.sender = json.sender;
    this.receiver = json.receiver;
    this.message = json.message;
    this.delay = json.delay;
    this.data = json.data;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {Telegram} A reference to this telegram.
  */


  resolveReferences(entities) {
    this.sender = entities.get(this.sender);
    this.receiver = entities.get(this.receiver);
    return this;
  }

}
/* istanbul ignore next */

/**
* Class with a logger interface. Messages are only logged to console if
* their log level is smaller or equal than the current log level.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Telegram = Telegram;

class Logger {
  /**
  * Sets the log level for the logger. Allow values are: *LOG*,
  * *WARN*, *ERROR*, *SILENT*. The default level is *WARN*. The constants
  * are accessible over the *Logger.LEVEL* namespace.
  *
  * @param {Number} level - The log level.
  */
  static setLevel(level) {
    currentLevel = level;
  }
  /**
  * Logs a message with the level *LOG*.
  *
  * @param {...Any} args - The arguments to log.
  */


  static log(...args) {
    if (currentLevel <= Logger.LEVEL.LOG) console.log(...args);
  }
  /**
  * Logs a message with the level *WARN*.
  *
  * @param {...Any} args - The arguments to log.
  */


  static warn(...args) {
    if (currentLevel <= Logger.LEVEL.WARN) console.warn(...args);
  }
  /**
  * Logs a message with the level *ERROR*.
  *
  * @param {...Any} args - The arguments to log.
  */


  static error(...args) {
    if (currentLevel <= Logger.LEVEL.ERROR) console.error(...args);
  }

}

exports.Logger = Logger;
Logger.LEVEL = Object.freeze({
  LOG: 0,
  WARN: 1,
  ERROR: 2,
  SILENT: 3
});
let currentLevel = Logger.LEVEL.WARN;
/**
* This class is the core of the messaging system for game entities and used by the
* {@link EntityManager}. The implementation can directly dispatch messages or use a
* delayed delivery for deferred communication. This can be useful if a game entity
* wants to inform itself about a particular event in the future.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class MessageDispatcher {
  /**
  * Constructs a new message dispatcher.
  */
  constructor() {
    /**
    * A list of delayed telegrams.
    * @type {Array<Telegram>}
    * @readonly
    */
    this.delayedTelegrams = new Array();
  }
  /**
  * Delivers the message to the receiver.
  *
  * @param {Telegram} telegram - The telegram to deliver.
  * @return {MessageDispatcher} A reference to this message dispatcher.
  */


  deliver(telegram) {
    const receiver = telegram.receiver;

    if (receiver.handleMessage(telegram) === false) {
      Logger.warn('YUKA.MessageDispatcher: Message not handled by receiver: %o', receiver);
    }

    return this;
  }
  /**
  * Receives the raw telegram data and decides how to dispatch the telegram (with or without delay).
  *
  * @param {GameEntity} sender - The sender.
  * @param {GameEntity} receiver - The receiver.
  * @param {String} message - The actual message.
  * @param {Number} delay - A time value in millisecond used to delay the message dispatching.
  * @param {Object} data - An object for custom data.
  * @return {MessageDispatcher} A reference to this message dispatcher.
  */


  dispatch(sender, receiver, message, delay, data) {
    const telegram = new Telegram(sender, receiver, message, delay, data);

    if (delay <= 0) {
      this.deliver(telegram);
    } else {
      this.delayedTelegrams.push(telegram);
    }

    return this;
  }
  /**
  * Used to process delayed messages.
  *
  * @param {Number} delta - The time delta.
  * @return {MessageDispatcher} A reference to this message dispatcher.
  */


  dispatchDelayedMessages(delta) {
    let i = this.delayedTelegrams.length;

    while (i--) {
      const telegram = this.delayedTelegrams[i];
      telegram.delay -= delta;

      if (telegram.delay <= 0) {
        this.deliver(telegram);
        this.delayedTelegrams.pop();
      }
    }

    return this;
  }
  /**
  * Clears the internal state of this message dispatcher.
  *
  * @return {MessageDispatcher} A reference to this message dispatcher.
  */


  clear() {
    this.delayedTelegrams.length = 0;
    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const data = {
      type: this.constructor.name,
      delayedTelegrams: new Array()
    }; // delayed telegrams

    for (let i = 0, l = this.delayedTelegrams.length; i < l; i++) {
      const delayedTelegram = this.delayedTelegrams[i];
      data.delayedTelegrams.push(delayedTelegram.toJSON());
    }

    return data;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {MessageDispatcher} A reference to this message dispatcher.
  */


  fromJSON(json) {
    this.clear();
    const telegramsJSON = json.delayedTelegrams;

    for (let i = 0, l = telegramsJSON.length; i < l; i++) {
      const telegramJSON = telegramsJSON[i];
      const telegram = new Telegram().fromJSON(telegramJSON);
      this.delayedTelegrams.push(telegram);
    }

    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {MessageDispatcher} A reference to this message dispatcher.
  */


  resolveReferences(entities) {
    const delayedTelegrams = this.delayedTelegrams;

    for (let i = 0, l = delayedTelegrams.length; i < l; i++) {
      const delayedTelegram = delayedTelegrams[i];
      delayedTelegram.resolveReferences(entities);
    }

    return this;
  }

}

exports.MessageDispatcher = MessageDispatcher;
const lut = new Array();

for (let i = 0; i < 256; i++) {
  lut[i] = (i < 16 ? '0' : '') + i.toString(16);
}
/**
* Class with various math helpers.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


class MathUtils {
  /**
  * Computes the signed area of a rectangle defined by three points.
  * This method can also be used to calculate the area of a triangle.
  *
  * @param {Vector3} a - The first point in 3D space.
  * @param {Vector3} b - The second point in 3D space.
  * @param {Vector3} c - The third point in 3D space.
  * @return {Number} The signed area.
  */
  static area(a, b, c) {
    return (c.x - a.x) * (b.z - a.z) - (b.x - a.x) * (c.z - a.z);
  }
  /**
  * Returns the indices of the maximum values of the given array.
  *
  * @param {Array<Number>} array - The input array.
  * @return {Array<Number>} Array of indices into the array.
  */


  static argmax(array) {
    const max = Math.max(...array);
    const indices = [];

    for (let i = 0, l = array.length; i < l; i++) {
      if (array[i] === max) indices.push(i);
    }

    return indices;
  }
  /**
  * Returns a random sample from a given array.
  *
  * @param {Array<Any>} array - The array that is used to generate the random sample.
  * @param {Array<Number>} probabilities - The probabilities associated with each entry. If not given, the sample assumes a uniform distribution over all entries.
  * @return {Any} The random sample value.
  */


  static choice(array, probabilities = null) {
    const random = Math.random();

    if (probabilities === null) {
      return array[Math.floor(Math.random() * array.length)];
    } else {
      let probability = 0;
      const index = array.map((value, index) => {
        probability += probabilities[index];
        return probability;
      }).findIndex(probability => probability >= random);
      return array[index];
    }
  }
  /**
  * Ensures the given scalar value is within a given min/max range.
  *
  * @param {Number} value - The value to clamp.
  * @param {Number} min - The min value.
  * @param {Number} max - The max value.
  * @return {Number} The clamped value.
  */


  static clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  /**
  * Computes a RFC4122 Version 4 complied Universally Unique Identifier (UUID).
  *
  * @return {String} The UUID.
  */


  static generateUUID() {
    // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/21963136#21963136
    const d0 = Math.random() * 0xffffffff | 0;
    const d1 = Math.random() * 0xffffffff | 0;
    const d2 = Math.random() * 0xffffffff | 0;
    const d3 = Math.random() * 0xffffffff | 0;
    const uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];
    return uuid.toUpperCase();
  }
  /**
  * Computes a random float value within a given min/max range.
  *
  * @param {Number} min - The min value.
  * @param {Number} max - The max value.
  * @return {Number} The random float value.
  */


  static randFloat(min, max) {
    return min + Math.random() * (max - min);
  }
  /**
  * Computes a random integer value within a given min/max range.
  *
  * @param {Number} min - The min value.
  * @param {Number} max - The max value.
  * @return {Number} The random integer value.
  */


  static randInt(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
  }

}
/**
* Class representing a 3D vector.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.MathUtils = MathUtils;

class Vector3 {
  /**
  * Constructs a new 3D vector with the given values.
  *
  * @param {Number} x - The x component.
  * @param {Number} y - The y component.
  * @param {Number} z - The z component.
  */
  constructor(x = 0, y = 0, z = 0) {
    /**
    * The x component.
    * @type {Number}
    */
    this.x = x;
    /**
    * The y component.
    * @type {Number}
    */

    this.y = y;
    /**
    * The z component.
    * @type {Number}
    */

    this.z = z;
  }
  /**
  * Sets the given values to this 3D vector.
  *
  * @param {Number} x - The x component.
  * @param {Number} y - The y component.
  * @param {Number} z - The z component.
  * @return {Vector3} A reference to this vector.
  */


  set(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  /**
  * Copies all values from the given 3D vector to this 3D vector.
  *
  * @param {Vector3} v - The vector to copy.
  * @return {Vector3} A reference to this vector.
  */


  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  }
  /**
  * Creates a new 3D vector and copies all values from this 3D vector.
  *
  * @return {Vector3} A new 3D vector.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Adds the given 3D vector to this 3D vector.
  *
  * @param {Vector3} v - The vector to add.
  * @return {Vector3} A reference to this vector.
  */


  add(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  }
  /**
  * Adds the given scalar to this 3D vector.
  *
  * @param {Number} s - The scalar to add.
  * @return {Vector3} A reference to this vector.
  */


  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  }
  /**
  * Adds two given 3D vectors and stores the result in this 3D vector.
  *
  * @param {Vector3} a - The first vector of the operation.
  * @param {Vector3} b - The second vector of the operation.
  * @return {Vector3} A reference to this vector.
  */


  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  }
  /**
  * Subtracts the given 3D vector from this 3D vector.
  *
  * @param {Vector3} v - The vector to substract.
  * @return {Vector3} A reference to this vector.
  */


  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  }
  /**
  * Subtracts the given scalar from this 3D vector.
  *
  * @param {Number} s - The scalar to substract.
  * @return {Vector3} A reference to this vector.
  */


  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  }
  /**
  * Subtracts two given 3D vectors and stores the result in this 3D vector.
  *
  * @param {Vector3} a - The first vector of the operation.
  * @param {Vector3} b - The second vector of the operation.
  * @return {Vector3} A reference to this vector.
  */


  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  }
  /**
  * Multiplies the given 3D vector with this 3D vector.
  *
  * @param {Vector3} v - The vector to multiply.
  * @return {Vector3} A reference to this vector.
  */


  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  }
  /**
  * Multiplies the given scalar with this 3D vector.
  *
  * @param {Number} s - The scalar to multiply.
  * @return {Vector3} A reference to this vector.
  */


  multiplyScalar(s) {
    this.x *= s;
    this.y *= s;
    this.z *= s;
    return this;
  }
  /**
  * Multiplies two given 3D vectors and stores the result in this 3D vector.
  *
  * @param {Vector3} a - The first vector of the operation.
  * @param {Vector3} b - The second vector of the operation.
  * @return {Vector3} A reference to this vector.
  */


  multiplyVectors(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  }
  /**
  * Divides the given 3D vector through this 3D vector.
  *
  * @param {Vector3} v - The vector to divide.
  * @return {Vector3} A reference to this vector.
  */


  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  }
  /**
  * Divides the given scalar through this 3D vector.
  *
  * @param {Number} s - The scalar to multiply.
  * @return {Vector3} A reference to this vector.
  */


  divideScalar(s) {
    this.x /= s;
    this.y /= s;
    this.z /= s;
    return this;
  }
  /**
  * Divides two given 3D vectors and stores the result in this 3D vector.
  *
  * @param {Vector3} a - The first vector of the operation.
  * @param {Vector3} b - The second vector of the operation.
  * @return {Vector3} A reference to this vector.
  */


  divideVectors(a, b) {
    this.x = a.x / b.x;
    this.y = a.y / b.y;
    this.z = a.z / b.z;
    return this;
  }
  /**
  * Reflects this vector along the given normal.
  *
  * @param {Vector3} normal - The normal vector.
  * @return {Vector3} A reference to this vector.
  */


  reflect(normal) {
    // solve r = v - 2( v * n ) * n
    return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));
  }
  /**
  * Ensures this 3D vector lies in the given min/max range.
  *
  * @param {Vector3} min - The min range.
  * @param {Vector3} max - The max range.
  * @return {Vector3} A reference to this vector.
  */


  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  }
  /**
  * Compares each vector component of this 3D vector and the
  * given one and stores the minimum value in this instance.
  *
  * @param {Vector3} v - The 3D vector to check.
  * @return {Vector3} A reference to this vector.
  */


  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    return this;
  }
  /**
  * Compares each vector component of this 3D vector and the
  * given one and stores the maximum value in this instance.
  *
  * @param {Vector3} v - The 3D vector to check.
  * @return {Vector3} A reference to this vector.
  */


  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    return this;
  }
  /**
  * Computes the dot product of this and the given 3D vector.
  *
  * @param {Vector3} v - The given 3D vector.
  * @return {Number} The results of the dor product.
  */


  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  }
  /**
  * Computes the cross product of this and the given 3D vector and
  * stores the result in this 3D vector.
  *
  * @param {Vector3} v - A 3D vector.
  * @return {Vector3} A reference to this vector.
  */


  cross(v) {
    const x = this.x,
          y = this.y,
          z = this.z;
    this.x = y * v.z - z * v.y;
    this.y = z * v.x - x * v.z;
    this.z = x * v.y - y * v.x;
    return this;
  }
  /**
  * Computes the cross product of the two given 3D vectors and
  * stores the result in this 3D vector.
  *
  * @param {Vector3} a - The first 3D vector.
  * @param {Vector3} b - The second 3D vector.
  * @return {Vector3} A reference to this vector.
  */


  crossVectors(a, b) {
    const ax = a.x,
          ay = a.y,
          az = a.z;
    const bx = b.x,
          by = b.y,
          bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  /**
  * Computes the angle between this and the given vector.
  *
  * @param {Vector3} v - A 3D vector.
  * @return {Number} The angle in radians.
  */


  angleTo(v) {
    const denominator = Math.sqrt(this.squaredLength() * v.squaredLength());
    if (denominator === 0) return 0;
    const theta = this.dot(v) / denominator; // clamp, to handle numerical problems

    return Math.acos(MathUtils.clamp(theta, -1, 1));
  }
  /**
  * Computes the length of this 3D vector.
  *
  * @return {Number} The length of this 3D vector.
  */


  length() {
    return Math.sqrt(this.squaredLength());
  }
  /**
  * Computes the squared length of this 3D vector.
  * Calling this method is faster than calling {@link Vector3#length},
  * since it avoids computing a square root.
  *
  * @return {Number} The squared length of this 3D vector.
  */


  squaredLength() {
    return this.dot(this);
  }
  /**
  * Computes the manhattan length of this 3D vector.
  *
  * @return {Number} The manhattan length of this 3D vector.
  */


  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  /**
  * Computes the euclidean distance between this 3D vector and the given one.
  *
  * @param {Vector3} v - A 3D vector.
  * @return {Number} The euclidean distance between two 3D vectors.
  */


  distanceTo(v) {
    return Math.sqrt(this.squaredDistanceTo(v));
  }
  /**
  * Computes the squared euclidean distance between this 3D vector and the given one.
  * Calling this method is faster than calling {@link Vector3#distanceTo},
  * since it avoids computing a square root.
  *
  * @param {Vector3} v - A 3D vector.
  * @return {Number} The squared euclidean distance between two 3D vectors.
  */


  squaredDistanceTo(v) {
    const dx = this.x - v.x,
          dy = this.y - v.y,
          dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
  }
  /**
  * Computes the manhattan distance between this 3D vector and the given one.
  *
  * @param {Vector3} v - A 3D vector.
  * @return {Number} The manhattan distance between two 3D vectors.
  */


  manhattanDistanceTo(v) {
    const dx = this.x - v.x,
          dy = this.y - v.y,
          dz = this.z - v.z;
    return Math.abs(dx) + Math.abs(dy) + Math.abs(dz);
  }
  /**
  * Normalizes this 3D vector.
  *
  * @return {Vector3} A reference to this vector.
  */


  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
  * Multiplies the given 4x4 matrix with this 3D vector
  *
  * @param {Matrix4} m - A 4x4 matrix.
  * @return {Vector3} A reference to this vector.
  */


  applyMatrix4(m) {
    const x = this.x,
          y = this.y,
          z = this.z;
    const e = m.elements;
    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
    return this;
  }
  /**
  * Multiplies the given quaternion with this 3D vector.
  *
  * @param {Quaternion} q - A quaternion.
  * @return {Vector3} A reference to this vector.
  */


  applyRotation(q) {
    const x = this.x,
          y = this.y,
          z = this.z;
    const qx = q.x,
          qy = q.y,
          qz = q.z,
          qw = q.w; // calculate quat * vector

    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return this;
  }
  /**
  * Extracts the position portion of the given 4x4 matrix and stores it in this 3D vector.
  *
  * @param {Matrix4} m - A 4x4 matrix.
  * @return {Vector3} A reference to this vector.
  */


  extractPositionFromMatrix(m) {
    const e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    return this;
  }
  /**
  * Transform this direction vector by the given 4x4 matrix.
  *
  * @param {Matrix4} m - A 4x4 matrix.
  * @return {Vector3} A reference to this vector.
  */


  transformDirection(m) {
    const x = this.x,
          y = this.y,
          z = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z;
    this.y = e[1] * x + e[5] * y + e[9] * z;
    this.z = e[2] * x + e[6] * y + e[10] * z;
    return this.normalize();
  }
  /**
  * Sets the components of this 3D vector from a column of a 3x3 matrix.
  *
  * @param {Matrix3} m - A 3x3 matrix.
  * @param {Number} i - The index of the column.
  * @return {Vector3} A reference to this vector.
  */


  fromMatrix3Column(m, i) {
    return this.fromArray(m.elements, i * 3);
  }
  /**
  * Sets the components of this 3D vector from a column of a 4x4 matrix.
  *
  * @param {Matrix3} m - A 4x4 matrix.
  * @param {Number} i - The index of the column.
  * @return {Vector3} A reference to this vector.
  */


  fromMatrix4Column(m, i) {
    return this.fromArray(m.elements, i * 4);
  }
  /**
  * Sets the components of this 3D vector from a spherical coordinate.
  *
  * @param {Number} radius - The radius.
  * @param {Number} phi - The polar or inclination angle in radians. Should be in the range of (−π/2, +π/2].
  * @param {Number} theta - The azimuthal angle in radians. Should be in the range of (−π, +π].
  * @return {Vector3} A reference to this vector.
  */


  fromSpherical(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  /**
  * Sets the components of this 3D vector from an array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Vector3} A reference to this vector.
  */


  fromArray(array, offset = 0) {
    this.x = array[offset + 0];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  }
  /**
  * Copies all values of this 3D vector to the given array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Array<Number>} The array with the 3D vector components.
  */


  toArray(array, offset = 0) {
    array[offset + 0] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  }
  /**
  * Returns true if the given 3D vector is deep equal with this 3D vector.
  *
  * @param {Vector3} v - The 3D vector to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
  }

}

exports.Vector3 = Vector3;
const v1 = new Vector3();
const WorldUp = new Vector3(0, 1, 0);
exports.WorldUp = WorldUp;
const localRight = new Vector3();
const worldRight = new Vector3();
const perpWorldUp = new Vector3();
const temp = new Vector3();
const colVal = [2, 2, 1];
const rowVal = [1, 0, 0];
/**
* Class representing a 3x3 matrix. The elements of the matrix
* are stored in column-major order.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class Matrix3 {
  /**
  * Constructs a new 3x3 identity matrix.
  */
  constructor() {
    /**
    * The elements of the matrix in column-major order.
    * @type {Array<Number>}
    */
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];
  }
  /**
  * Sets the given values to this matrix. The arguments are in row-major order.
  *
  * @param {Number} n11 - An element of the matrix.
  * @param {Number} n12 - An element of the matrix.
  * @param {Number} n13 - An element of the matrix.
  * @param {Number} n21 - An element of the matrix.
  * @param {Number} n22 - An element of the matrix.
  * @param {Number} n23 - An element of the matrix.
  * @param {Number} n31 - An element of the matrix.
  * @param {Number} n32 - An element of the matrix.
  * @param {Number} n33 - An element of the matrix.
  * @return {Matrix3} A reference to this matrix.
  */


  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const e = this.elements;
    e[0] = n11;
    e[3] = n12;
    e[6] = n13;
    e[1] = n21;
    e[4] = n22;
    e[7] = n23;
    e[2] = n31;
    e[5] = n32;
    e[8] = n33;
    return this;
  }
  /**
  * Copies all values from the given matrix to this matrix.
  *
  * @param {Matrix3} m - The matrix to copy.
  * @return {Matrix3} A reference to this matrix.
  */


  copy(m) {
    const e = this.elements;
    const me = m.elements;
    e[0] = me[0];
    e[1] = me[1];
    e[2] = me[2];
    e[3] = me[3];
    e[4] = me[4];
    e[5] = me[5];
    e[6] = me[6];
    e[7] = me[7];
    e[8] = me[8];
    return this;
  }
  /**
  * Creates a new matrix and copies all values from this matrix.
  *
  * @return {Matrix3} A new matrix.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Transforms this matrix to an identity matrix.
  *
  * @return {Matrix3} A reference to this matrix.
  */


  identity() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }
  /**
  * Multiplies this matrix with the given matrix.
  *
  * @param {Matrix3} m - The matrix to multiply.
  * @return {Matrix3} A reference to this matrix.
  */


  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  /**
  * Multiplies this matrix with the given matrix.
  * So the order of the multiplication is switched compared to {@link Matrix3#multiply}.
  *
  * @param {Matrix3} m - The matrix to multiply.
  * @return {Matrix3} A reference to this matrix.
  */


  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  /**
  * Multiplies two given matrices and stores the result in this matrix.
  *
  * @param {Matrix3} a - The first matrix of the operation.
  * @param {Matrix3} b - The second matrix of the operation.
  * @return {Matrix3} A reference to this matrix.
  */


  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be = b.elements;
    const e = this.elements;
    const a11 = ae[0],
          a12 = ae[3],
          a13 = ae[6];
    const a21 = ae[1],
          a22 = ae[4],
          a23 = ae[7];
    const a31 = ae[2],
          a32 = ae[5],
          a33 = ae[8];
    const b11 = be[0],
          b12 = be[3],
          b13 = be[6];
    const b21 = be[1],
          b22 = be[4],
          b23 = be[7];
    const b31 = be[2],
          b32 = be[5],
          b33 = be[8];
    e[0] = a11 * b11 + a12 * b21 + a13 * b31;
    e[3] = a11 * b12 + a12 * b22 + a13 * b32;
    e[6] = a11 * b13 + a12 * b23 + a13 * b33;
    e[1] = a21 * b11 + a22 * b21 + a23 * b31;
    e[4] = a21 * b12 + a22 * b22 + a23 * b32;
    e[7] = a21 * b13 + a22 * b23 + a23 * b33;
    e[2] = a31 * b11 + a32 * b21 + a33 * b31;
    e[5] = a31 * b12 + a32 * b22 + a33 * b32;
    e[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  /**
  * Multiplies the given scalar with this matrix.
  *
  * @param {Number} s - The scalar to multiply.
  * @return {Matrix3} A reference to this matrix.
  */


  multiplyScalar(s) {
    const e = this.elements;
    e[0] *= s;
    e[3] *= s;
    e[6] *= s;
    e[1] *= s;
    e[4] *= s;
    e[7] *= s;
    e[2] *= s;
    e[5] *= s;
    e[8] *= s;
    return this;
  }
  /**
  * Extracts the basis vectors and stores them to the given vectors.
  *
  * @param {Vector3} xAxis - The first result vector for the x-axis.
  * @param {Vector3} yAxis - The second result vector for the y-axis.
  * @param {Vector3} zAxis - The third result vector for the z-axis.
  * @return {Matrix3} A reference to this matrix.
  */


  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.fromMatrix3Column(this, 0);
    yAxis.fromMatrix3Column(this, 1);
    zAxis.fromMatrix3Column(this, 2);
    return this;
  }
  /**
  * Makes a basis from the given vectors.
  *
  * @param {Vector3} xAxis - The first basis vector for the x-axis.
  * @param {Vector3} yAxis - The second basis vector for the y-axis.
  * @param {Vector3} zAxis - The third basis vector for the z-axis.
  * @return {Matrix3} A reference to this matrix.
  */


  makeBasis(xAxis, yAxis, zAxis) {
    this.set(xAxis.x, yAxis.x, zAxis.x, xAxis.y, yAxis.y, zAxis.y, xAxis.z, yAxis.z, zAxis.z);
    return this;
  }
  /**
  * Creates a rotation matrix that orients an object to face towards a specified target direction.
  *
  * @param {Vector3} localForward - Specifies the forward direction in the local space of the object.
  * @param {Vector3} targetDirection - Specifies the desired world space direction the object should look at.
  * @param {Vector3} localUp - Specifies the up direction in the local space of the object.
  * @return {Matrix3} A reference to this matrix.
  */


  lookAt(localForward, targetDirection, localUp) {
    localRight.crossVectors(localUp, localForward).normalize(); // orthonormal linear basis A { localRight, localUp, localForward } for the object local space

    worldRight.crossVectors(WorldUp, targetDirection).normalize();

    if (worldRight.squaredLength() === 0) {
      // handle case when it's not possible to build a basis from targetDirection and worldUp
      // slightly shift targetDirection in order to avoid collinearity
      temp.copy(targetDirection).addScalar(Number.EPSILON);
      worldRight.crossVectors(WorldUp, temp).normalize();
    }

    perpWorldUp.crossVectors(targetDirection, worldRight).normalize(); // orthonormal linear basis B { worldRight, perpWorldUp, targetDirection } for the desired target orientation

    m1.makeBasis(worldRight, perpWorldUp, targetDirection);
    m2.makeBasis(localRight, localUp, localForward); // construct a matrix that maps basis A to B

    this.multiplyMatrices(m1, m2.transpose());
    return this;
  }
  /**
  * Transposes this matrix.
  *
  * @return {Matrix3} A reference to this matrix.
  */


  transpose() {
    const e = this.elements;
    let t;
    t = e[1];
    e[1] = e[3];
    e[3] = t;
    t = e[2];
    e[2] = e[6];
    e[6] = t;
    t = e[5];
    e[5] = e[7];
    e[7] = t;
    return this;
  }
  /**
  * Computes the element index according to the given column and row.
  *
  * @param {Number} column - Index of the column.
  * @param {Number} row - Index of the row.
  * @return {Number} The index of the element at the provided row and column.
  */


  getElementIndex(column, row) {
    return column * 3 + row;
  }
  /**
  * Computes the frobenius norm. It's the squareroot of the sum of all
  * squared matrix elements.
  *
  * @return {Number} The frobenius norm.
  */


  frobeniusNorm() {
    const e = this.elements;
    let norm = 0;

    for (let i = 0; i < 9; i++) {
      norm += e[i] * e[i];
    }

    return Math.sqrt(norm);
  }
  /**
  * Computes the  "off-diagonal" frobenius norm. Assumes the matrix is symmetric.
  *
  * @return {Number} The "off-diagonal" frobenius norm.
  */


  offDiagonalFrobeniusNorm() {
    const e = this.elements;
    let norm = 0;

    for (let i = 0; i < 3; i++) {
      const t = e[this.getElementIndex(colVal[i], rowVal[i])];
      norm += 2 * t * t; // multiply the result by two since the matrix is symetric
    }

    return Math.sqrt(norm);
  }
  /**
  * Computes the eigenvectors and eigenvalues.
  *
  * Reference: https://github.com/AnalyticalGraphicsInc/cesium/blob/411a1afbd36b72df64d7362de6aa934730447234/Source/Core/Matrix3.js#L1141 (Apache License 2.0)
  *
  * The values along the diagonal of the diagonal matrix are the eigenvalues.
  * The columns of the unitary matrix are the corresponding eigenvectors.
  *
  * @param {Object} result - An object with unitary and diagonal properties which are matrices onto which to store the result.
  * @return {Object} An object with unitary and diagonal properties which are matrices onto which to store the result.
  */


  eigenDecomposition(result) {
    let count = 0;
    let sweep = 0;
    const maxSweeps = 10;
    result.unitary.identity();
    result.diagonal.copy(this);
    const unitaryMatrix = result.unitary;
    const diagonalMatrix = result.diagonal;
    const epsilon = Number.EPSILON * diagonalMatrix.frobeniusNorm();

    while (sweep < maxSweeps && diagonalMatrix.offDiagonalFrobeniusNorm() > epsilon) {
      diagonalMatrix.shurDecomposition(m1);
      m2.copy(m1).transpose();
      diagonalMatrix.multiply(m1);
      diagonalMatrix.premultiply(m2);
      unitaryMatrix.multiply(m1);

      if (++count > 2) {
        sweep++;
        count = 0;
      }
    }

    return result;
  }
  /**
  * Finds the largest off-diagonal term and then creates a matrix
  * which can be used to help reduce it.
  *
  * @param {Matrix3} result - The result matrix.
  * @return {Matrix3} The result matrix.
  */


  shurDecomposition(result) {
    let maxDiagonal = 0;
    let rotAxis = 1; // find pivot (rotAxis) based on largest off-diagonal term

    const e = this.elements;

    for (let i = 0; i < 3; i++) {
      const t = Math.abs(e[this.getElementIndex(colVal[i], rowVal[i])]);

      if (t > maxDiagonal) {
        maxDiagonal = t;
        rotAxis = i;
      }
    }

    let c = 1;
    let s = 0;
    const p = rowVal[rotAxis];
    const q = colVal[rotAxis];

    if (Math.abs(e[this.getElementIndex(q, p)]) > Number.EPSILON) {
      const qq = e[this.getElementIndex(q, q)];
      const pp = e[this.getElementIndex(p, p)];
      const qp = e[this.getElementIndex(q, p)];
      const tau = (qq - pp) / 2 / qp;
      let t;

      if (tau < 0) {
        t = -1 / (-tau + Math.sqrt(1 + tau * tau));
      } else {
        t = 1 / (tau + Math.sqrt(1.0 + tau * tau));
      }

      c = 1.0 / Math.sqrt(1.0 + t * t);
      s = t * c;
    }

    result.identity();
    result.elements[this.getElementIndex(p, p)] = c;
    result.elements[this.getElementIndex(q, q)] = c;
    result.elements[this.getElementIndex(q, p)] = s;
    result.elements[this.getElementIndex(p, q)] = -s;
    return result;
  }
  /**
  * Creates a rotation matrix from the given quaternion.
  *
  * @param {Quaternion} q - A quaternion representing a rotation.
  * @return {Matrix3} A reference to this matrix.
  */


  fromQuaternion(q) {
    const e = this.elements;
    const x = q.x,
          y = q.y,
          z = q.z,
          w = q.w;
    const x2 = x + x,
          y2 = y + y,
          z2 = z + z;
    const xx = x * x2,
          xy = x * y2,
          xz = x * z2;
    const yy = y * y2,
          yz = y * z2,
          zz = z * z2;
    const wx = w * x2,
          wy = w * y2,
          wz = w * z2;
    e[0] = 1 - (yy + zz);
    e[3] = xy - wz;
    e[6] = xz + wy;
    e[1] = xy + wz;
    e[4] = 1 - (xx + zz);
    e[7] = yz - wx;
    e[2] = xz - wy;
    e[5] = yz + wx;
    e[8] = 1 - (xx + yy);
    return this;
  }
  /**
  * Sets the elements of this matrix by extracting the upper-left 3x3 portion
  * from a 4x4 matrix.
  *
  * @param {Matrix4} m - A 4x4 matrix.
  * @return {Matrix3} A reference to this matrix.
  */


  fromMatrix4(m) {
    const e = this.elements;
    const me = m.elements;
    e[0] = me[0];
    e[1] = me[1];
    e[2] = me[2];
    e[3] = me[4];
    e[4] = me[5];
    e[5] = me[6];
    e[6] = me[8];
    e[7] = me[9];
    e[8] = me[10];
    return this;
  }
  /**
  * Sets the elements of this matrix from an array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Matrix3} A reference to this matrix.
  */


  fromArray(array, offset = 0) {
    const e = this.elements;

    for (let i = 0; i < 9; i++) {
      e[i] = array[i + offset];
    }

    return this;
  }
  /**
  * Copies all elements of this matrix to the given array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Array<Number>} The array with the elements of the matrix.
  */


  toArray(array, offset = 0) {
    const e = this.elements;
    array[offset + 0] = e[0];
    array[offset + 1] = e[1];
    array[offset + 2] = e[2];
    array[offset + 3] = e[3];
    array[offset + 4] = e[4];
    array[offset + 5] = e[5];
    array[offset + 6] = e[6];
    array[offset + 7] = e[7];
    array[offset + 8] = e[8];
    return array;
  }
  /**
  * Returns true if the given matrix is deep equal with this matrix.
  *
  * @param {Matrix3} m - The matrix to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(m) {
    const e = this.elements;
    const me = m.elements;

    for (let i = 0; i < 9; i++) {
      if (e[i] !== me[i]) return false;
    }

    return true;
  }

}

exports.Matrix3 = Matrix3;
const m1 = new Matrix3();
const m2 = new Matrix3();
const matrix = new Matrix3();
const vector = new Vector3();
/**
* Class representing a quaternion.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class Quaternion {
  /**
  * Constructs a new quaternion with the given values.
  *
  * @param {Number} x - The x component.
  * @param {Number} y - The y component.
  * @param {Number} z - The z component.
  * @param {Number} w - The w component.
  */
  constructor(x = 0, y = 0, z = 0, w = 1) {
    /**
    * The x component.
    * @type {Number}
    */
    this.x = x;
    /**
    * The y component.
    * @type {Number}
    */

    this.y = y;
    /**
    * The z component.
    * @type {Number}
    */

    this.z = z;
    /**
    * The w component.
    * @type {Number}
    */

    this.w = w;
  }
  /**
  * Sets the given values to this quaternion.
  *
  * @param {Number} x - The x component.
  * @param {Number} y - The y component.
  * @param {Number} z - The z component.
  * @param {Number} w - The w component.
  * @return {Quaternion} A reference to this quaternion.
  */


  set(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }
  /**
  * Copies all values from the given quaternion to this quaternion.
  *
  * @param {Quaternion} q - The quaternion to copy.
  * @return {Quaternion} A reference to this quaternion.
  */


  copy(q) {
    this.x = q.x;
    this.y = q.y;
    this.z = q.z;
    this.w = q.w;
    return this;
  }
  /**
  * Creates a new quaternion and copies all values from this quaternion.
  *
  * @return {Quaternion} A new quaternion.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Computes the inverse of this quaternion.
  *
  * @return {Quaternion} A reference to this quaternion.
  */


  inverse() {
    return this.conjugate().normalize();
  }
  /**
  * Computes the conjugate of this quaternion.
  *
  * @return {Quaternion} A reference to this quaternion.
  */


  conjugate() {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;
    return this;
  }
  /**
  * Computes the dot product of this and the given quaternion.
  *
  * @param {Quaternion} q - The given quaternion.
  * @return {Quaternion} A reference to this quaternion.
  */


  dot(q) {
    return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
  }
  /**
  * Computes the length of this quaternion.
  *
  * @return {Number} The length of this quaternion.
  */


  length() {
    return Math.sqrt(this.squaredLength());
  }
  /**
  * Computes the squared length of this quaternion.
  *
  * @return {Number} The squared length of this quaternion.
  */


  squaredLength() {
    return this.dot(this);
  }
  /**
  * Normalizes this quaternion.
  *
  * @return {Quaternion} A reference to this quaternion.
  */


  normalize() {
    let l = this.length();

    if (l === 0) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 1;
    } else {
      l = 1 / l;
      this.x = this.x * l;
      this.y = this.y * l;
      this.z = this.z * l;
      this.w = this.w * l;
    }

    return this;
  }
  /**
  * Multiplies this quaternion with the given quaternion.
  *
  * @param {Quaternion} q - The quaternion to multiply.
  * @return {Quaternion} A reference to this quaternion.
  */


  multiply(q) {
    return this.multiplyQuaternions(this, q);
  }
  /**
  * Multiplies the given quaternion with this quaternion.
  * So the order of the multiplication is switched compared to {@link Quaternion#multiply}.
  *
  * @param {Quaternion} q - The quaternion to multiply.
  * @return {Quaternion} A reference to this quaternion.
  */


  premultiply(q) {
    return this.multiplyQuaternions(q, this);
  }
  /**
  * Multiplies two given quaternions and stores the result in this quaternion.
  *
  * @param {Quaternion} a - The first quaternion of the operation.
  * @param {Quaternion} b - The second quaternion of the operation.
  * @return {Quaternion} A reference to this quaternion.
  */


  multiplyQuaternions(a, b) {
    const qax = a.x,
          qay = a.y,
          qaz = a.z,
          qaw = a.w;
    const qbx = b.x,
          qby = b.y,
          qbz = b.z,
          qbw = b.w;
    this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    return this;
  }
  /**
  * Computes the shortest angle between two rotation defined by this quaternion and the given one.
  *
  * @param {Quaternion} q - The given quaternion.
  * @return {Number} The angle in radians.
  */


  angleTo(q) {
    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));
  }
  /**
  * Transforms this rotation defined by this quaternion towards the target rotation
  * defined by the given quaternion by the given angular step. The rotation will not overshoot.
  *
  * @param {Quaternion} q - The target rotation.
  * @param {Number} step - The maximum step in radians.
  * @param {Number} tolerance - A tolerance value in radians to tweak the result
  * when both rotations are considered to be equal.
  * @return {Boolean} Whether the given quaternion already represents the target rotation.
  */


  rotateTo(q, step, tolerance = 0.0001) {
    const angle = this.angleTo(q);
    if (angle < tolerance) return true;
    const t = Math.min(1, step / angle);
    this.slerp(q, t);
    return false;
  }
  /**
  * Creates a quaternion that orients an object to face towards a specified target direction.
  *
  * @param {Vector3} localForward - Specifies the forward direction in the local space of the object.
  * @param {Vector3} targetDirection - Specifies the desired world space direction the object should look at.
  * @param {Vector3} localUp - Specifies the up direction in the local space of the object.
  * @return {Quaternion} A reference to this quaternion.
  */


  lookAt(localForward, targetDirection, localUp) {
    matrix.lookAt(localForward, targetDirection, localUp);
    this.fromMatrix3(matrix);
  }
  /**
  * Spherically interpolates between this quaternion and the given quaternion by t.
  * The parameter t is clamped to the range [0, 1].
  *
  * @param {Quaternion} q - The target rotation.
  * @param {Number} t - The interpolation parameter.
  * @return {Quaternion} A reference to this quaternion.
  */


  slerp(q, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(q);
    const x = this.x,
          y = this.y,
          z = this.z,
          w = this.w;
    let cosHalfTheta = w * q.w + x * q.x + y * q.y + z * q.z;

    if (cosHalfTheta < 0) {
      this.w = -q.w;
      this.x = -q.x;
      this.y = -q.y;
      this.z = -q.z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(q);
    }

    if (cosHalfTheta >= 1.0) {
      this.w = w;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }

    const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
      this.w = 0.5 * (w + this.w);
      this.x = 0.5 * (x + this.x);
      this.y = 0.5 * (y + this.y);
      this.z = 0.5 * (z + this.z);
      return this;
    }

    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
    const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
    this.w = w * ratioA + this.w * ratioB;
    this.x = x * ratioA + this.x * ratioB;
    this.y = y * ratioA + this.y * ratioB;
    this.z = z * ratioA + this.z * ratioB;
    return this;
  }
  /**
  * Extracts the rotation of the given 4x4 matrix and stores it in this quaternion.
  *
  * @param {Matrix4} m - A 4x4 matrix.
  * @return {Quaternion} A reference to this quaternion.
  */


  extractRotationFromMatrix(m) {
    const e = matrix.elements;
    const me = m.elements; // remove scaling from the 3x3 portion

    const sx = 1 / vector.fromMatrix4Column(m, 0).length();
    const sy = 1 / vector.fromMatrix4Column(m, 1).length();
    const sz = 1 / vector.fromMatrix4Column(m, 2).length();
    e[0] = me[0] * sx;
    e[1] = me[1] * sx;
    e[2] = me[2] * sx;
    e[3] = me[4] * sy;
    e[4] = me[5] * sy;
    e[5] = me[6] * sy;
    e[6] = me[8] * sz;
    e[7] = me[9] * sz;
    e[8] = me[10] * sz;
    this.fromMatrix3(matrix);
    return this;
  }
  /**
  * Sets the components of this quaternion from the given euler angle (YXZ order).
  *
  * @param {Number} x - Rotation around x axis in radians.
  * @param {Number} y - Rotation around y axis in radians.
  * @param {Number} z - Rotation around z axis in radians.
  * @return {Quaternion} A reference to this quaternion.
  */


  fromEuler(x, y, z) {
    // from 3D Math Primer for Graphics and Game Development
    // 8.7.5 Converting Euler Angles to a Quaternion
    // assuming YXZ (head/pitch/bank or yaw/pitch/roll) order
    const c1 = Math.cos(y / 2);
    const c2 = Math.cos(x / 2);
    const c3 = Math.cos(z / 2);
    const s1 = Math.sin(y / 2);
    const s2 = Math.sin(x / 2);
    const s3 = Math.sin(z / 2);
    this.w = c1 * c2 * c3 + s1 * s2 * s3;
    this.x = c1 * s2 * c3 + s1 * c2 * s3;
    this.y = s1 * c2 * c3 - c1 * s2 * s3;
    this.z = c1 * c2 * s3 - s1 * s2 * c3;
    return this;
  }
  /**
  * Returns an euler angel (YXZ order) representation of this quaternion.
  *
  * @param {Object} euler - The resulting euler angles.
  * @return {Object} The resulting euler angles.
  */


  toEuler(euler) {
    // from 3D Math Primer for Graphics and Game Development
    // 8.7.6 Converting a Quaternion to Euler Angles
    // extract pitch
    const sp = -2 * (this.y * this.z - this.x * this.w); // check for gimbal lock

    if (Math.abs(sp) > 0.9999) {
      // looking straight up or down
      euler.x = Math.PI * 0.5 * sp;
      euler.y = Math.atan2(this.x * this.z + this.w * this.y, 0.5 - this.x * this.x - this.y * this.y);
      euler.z = 0;
    } else {
      //todo test
      euler.x = Math.asin(sp);
      euler.y = Math.atan2(this.x * this.z + this.w * this.y, 0.5 - this.x * this.x - this.y * this.y);
      euler.z = Math.atan2(this.x * this.y + this.w * this.z, 0.5 - this.x * this.x - this.z * this.z);
    }

    return euler;
  }
  /**
  * Sets the components of this quaternion from the given 3x3 rotation matrix.
  *
  * @param {Matrix3} m - The rotation matrix.
  * @return {Quaternion} A reference to this quaternion.
  */


  fromMatrix3(m) {
    const e = m.elements;
    const m11 = e[0],
          m12 = e[3],
          m13 = e[6];
    const m21 = e[1],
          m22 = e[4],
          m23 = e[7];
    const m31 = e[2],
          m32 = e[5],
          m33 = e[8];
    const trace = m11 + m22 + m33;

    if (trace > 0) {
      let s = 0.5 / Math.sqrt(trace + 1.0);
      this.w = 0.25 / s;
      this.x = (m32 - m23) * s;
      this.y = (m13 - m31) * s;
      this.z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      let s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
      this.w = (m32 - m23) / s;
      this.x = 0.25 * s;
      this.y = (m12 + m21) / s;
      this.z = (m13 + m31) / s;
    } else if (m22 > m33) {
      let s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
      this.w = (m13 - m31) / s;
      this.x = (m12 + m21) / s;
      this.y = 0.25 * s;
      this.z = (m23 + m32) / s;
    } else {
      let s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
      this.w = (m21 - m12) / s;
      this.x = (m13 + m31) / s;
      this.y = (m23 + m32) / s;
      this.z = 0.25 * s;
    }

    return this;
  }
  /**
  * Sets the components of this quaternion from an array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Quaternion} A reference to this quaternion.
  */


  fromArray(array, offset = 0) {
    this.x = array[offset + 0];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    this.w = array[offset + 3];
    return this;
  }
  /**
  * Copies all values of this quaternion to the given array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Array<Number>} The array with the quaternion components.
  */


  toArray(array, offset = 0) {
    array[offset + 0] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    array[offset + 3] = this.w;
    return array;
  }
  /**
  * Returns true if the given quaternion is deep equal with this quaternion.
  *
  * @param {Quaternion} q - The quaternion to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(q) {
    return q.x === this.x && q.y === this.y && q.z === this.z && q.w === this.w;
  }

}
/**
* Class representing a 4x4 matrix. The elements of the matrix
* are stored in column-major order.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Quaternion = Quaternion;

class Matrix4 {
  /**
  * Constructs a new 4x4 identity matrix.
  */
  constructor() {
    /**
    * The elements of the matrix in column-major order.
    * @type {Array<Number>}
    */
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  /**
  * Sets the given values to this matrix. The arguments are in row-major order.
  *
  * @param {Number} n11 - An element of the matrix.
  * @param {Number} n12 - An element of the matrix.
  * @param {Number} n13 - An element of the matrix.
  * @param {Number} n14 - An element of the matrix.
  * @param {Number} n21 - An element of the matrix.
  * @param {Number} n22 - An element of the matrix.
  * @param {Number} n23 - An element of the matrix.
  * @param {Number} n24 - An element of the matrix.
  * @param {Number} n31 - An element of the matrix.
  * @param {Number} n32 - An element of the matrix.
  * @param {Number} n33 - An element of the matrix.
  * @param {Number} n34 - An element of the matrix.
  * @param {Number} n41 - An element of the matrix.
  * @param {Number} n42 - An element of the matrix.
  * @param {Number} n43 - An element of the matrix.
  * @param {Number} n44 - An element of the matrix.
  * @return {Matrix4} A reference to this matrix.
  */


  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const e = this.elements;
    e[0] = n11;
    e[4] = n12;
    e[8] = n13;
    e[12] = n14;
    e[1] = n21;
    e[5] = n22;
    e[9] = n23;
    e[13] = n24;
    e[2] = n31;
    e[6] = n32;
    e[10] = n33;
    e[14] = n34;
    e[3] = n41;
    e[7] = n42;
    e[11] = n43;
    e[15] = n44;
    return this;
  }
  /**
  * Copies all values from the given matrix to this matrix.
  *
  * @param {Matrix4} m - The matrix to copy.
  * @return {Matrix4} A reference to this matrix.
  */


  copy(m) {
    const e = this.elements;
    const me = m.elements;
    e[0] = me[0];
    e[1] = me[1];
    e[2] = me[2];
    e[3] = me[3];
    e[4] = me[4];
    e[5] = me[5];
    e[6] = me[6];
    e[7] = me[7];
    e[8] = me[8];
    e[9] = me[9];
    e[10] = me[10];
    e[11] = me[11];
    e[12] = me[12];
    e[13] = me[13];
    e[14] = me[14];
    e[15] = me[15];
    return this;
  }
  /**
  * Creates a new matrix and copies all values from this matrix.
  *
  * @return {Matrix4} A new matrix.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Transforms this matrix to an identity matrix.
  *
  * @return {Matrix4} A reference to this matrix.
  */


  identity() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }
  /**
  * Multiplies this matrix with the given matrix.
  *
  * @param {Matrix4} m - The matrix to multiply.
  * @return {Matrix4} A reference to this matrix.
  */


  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  /**
  * Multiplies this matrix with the given matrix.
  * So the order of the multiplication is switched compared to {@link Matrix4#multiply}.
  *
  * @param {Matrix4} m - The matrix to multiply.
  * @return {Matrix4} A reference to this matrix.
  */


  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  /**
  * Multiplies two given matrices and stores the result in this matrix.
  *
  * @param {Matrix4} a - The first matrix of the operation.
  * @param {Matrix4} b - The second matrix of the operation.
  * @return {Matrix4} A reference to this matrix.
  */


  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be = b.elements;
    const e = this.elements;
    const a11 = ae[0],
          a12 = ae[4],
          a13 = ae[8],
          a14 = ae[12];
    const a21 = ae[1],
          a22 = ae[5],
          a23 = ae[9],
          a24 = ae[13];
    const a31 = ae[2],
          a32 = ae[6],
          a33 = ae[10],
          a34 = ae[14];
    const a41 = ae[3],
          a42 = ae[7],
          a43 = ae[11],
          a44 = ae[15];
    const b11 = be[0],
          b12 = be[4],
          b13 = be[8],
          b14 = be[12];
    const b21 = be[1],
          b22 = be[5],
          b23 = be[9],
          b24 = be[13];
    const b31 = be[2],
          b32 = be[6],
          b33 = be[10],
          b34 = be[14];
    const b41 = be[3],
          b42 = be[7],
          b43 = be[11],
          b44 = be[15];
    e[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    e[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    e[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    e[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    e[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    e[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    e[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    e[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    e[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    e[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    e[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    e[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    e[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    e[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    e[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    e[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  /**
  * Multiplies the given scalar with this matrix.
  *
  * @param {Number} s - The scalar to multiply.
  * @return {Matrix4} A reference to this matrix.
  */


  multiplyScalar(s) {
    const e = this.elements;
    e[0] *= s;
    e[4] *= s;
    e[8] *= s;
    e[12] *= s;
    e[1] *= s;
    e[5] *= s;
    e[9] *= s;
    e[13] *= s;
    e[2] *= s;
    e[6] *= s;
    e[10] *= s;
    e[14] *= s;
    e[3] *= s;
    e[7] *= s;
    e[11] *= s;
    e[15] *= s;
    return this;
  }
  /**
  * Extracts the basis vectors and stores them to the given vectors.
  *
  * @param {Vector3} xAxis - The first result vector for the x-axis.
  * @param {Vector3} yAxis - The second result vector for the y-axis.
  * @param {Vector3} zAxis - The third result vector for the z-axis.
  * @return {Matrix4} A reference to this matrix.
  */


  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.fromMatrix4Column(this, 0);
    yAxis.fromMatrix4Column(this, 1);
    zAxis.fromMatrix4Column(this, 2);
    return this;
  }
  /**
  * Makes a basis from the given vectors.
  *
  * @param {Vector3} xAxis - The first basis vector for the x-axis.
  * @param {Vector3} yAxis - The second basis vector for the y-axis.
  * @param {Vector3} zAxis - The third basis vector for the z-axis.
  * @return {Matrix4} A reference to this matrix.
  */


  makeBasis(xAxis, yAxis, zAxis) {
    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
    return this;
  }
  /**
  * Composes a matrix from the given position, quaternion and scale.
  *
  * @param {Vector3} position - A vector representing a position in 3D space.
  * @param {Quaternion} rotation - A quaternion representing a rotation.
  * @param {Vector3} scale - A vector representing a 3D scaling.
  * @return {Matrix4} A reference to this matrix.
  */


  compose(position, rotation, scale) {
    this.fromQuaternion(rotation);
    this.scale(scale);
    this.setPosition(position);
    return this;
  }
  /**
  * Scales this matrix by the given 3D vector.
  *
  * @param {Vector3} v - A 3D vector representing a scaling.
  * @return {Matrix4} A reference to this matrix.
  */


  scale(v) {
    const e = this.elements;
    const x = v.x,
          y = v.y,
          z = v.z;
    e[0] *= x;
    e[4] *= y;
    e[8] *= z;
    e[1] *= x;
    e[5] *= y;
    e[9] *= z;
    e[2] *= x;
    e[6] *= y;
    e[10] *= z;
    e[3] *= x;
    e[7] *= y;
    e[11] *= z;
    return this;
  }
  /**
  * Sets the translation part of the 4x4 matrix to the given position vector.
  *
  * @param {Vector3} v - A 3D vector representing a position.
  * @return {Matrix4} A reference to this matrix.
  */


  setPosition(v) {
    const e = this.elements;
    e[12] = v.x;
    e[13] = v.y;
    e[14] = v.z;
    return this;
  }
  /**
  * Transposes this matrix.
  *
  * @return {Matrix4} A reference to this matrix.
  */


  transpose() {
    const e = this.elements;
    let t;
    t = e[1];
    e[1] = e[4];
    e[4] = t;
    t = e[2];
    e[2] = e[8];
    e[8] = t;
    t = e[6];
    e[6] = e[9];
    e[9] = t;
    t = e[3];
    e[3] = e[12];
    e[12] = t;
    t = e[7];
    e[7] = e[13];
    e[13] = t;
    t = e[11];
    e[11] = e[14];
    e[14] = t;
    return this;
  }
  /**
  * Computes the inverse of this matrix and stored the result in the given matrix.
  *
  * You can not invert a matrix with a determinant of zero. If you attempt this, the method returns a zero matrix instead.
  *
  * @param {Matrix4} m - The result matrix.
  * @return {Matrix4} The result matrix.
  */


  getInverse(m) {
    const e = this.elements;
    const me = m.elements;
    const n11 = e[0],
          n21 = e[1],
          n31 = e[2],
          n41 = e[3];
    const n12 = e[4],
          n22 = e[5],
          n32 = e[6],
          n42 = e[7];
    const n13 = e[8],
          n23 = e[9],
          n33 = e[10],
          n43 = e[11];
    const n14 = e[12],
          n24 = e[13],
          n34 = e[14],
          n44 = e[15];
    const t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    const t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    const t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    const t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    if (det === 0) return m.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    me[0] = t11 * detInv;
    me[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    me[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    me[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    me[4] = t12 * detInv;
    me[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    me[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    me[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    me[8] = t13 * detInv;
    me[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    me[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    me[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    me[12] = t14 * detInv;
    me[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    me[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    me[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return m;
  }
  /**
  * Computes the maximum scale value for all three axis.
  *
  * @return {Number} The maximum scale value.
  */


  getMaxScale() {
    const e = this.elements;
    const scaleXSq = e[0] * e[0] + e[1] * e[1] + e[2] * e[2];
    const scaleYSq = e[4] * e[4] + e[5] * e[5] + e[6] * e[6];
    const scaleZSq = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  /**
  * Uses the given quaternion to transform the upper left 3x3 part to a rotation matrix.
  * Other parts of the matrix are equal to the identiy matrix.
  *
  * @param {Quaternion} q - A quaternion representing a rotation.
  * @return {Matrix4} A reference to this matrix.
  */


  fromQuaternion(q) {
    const e = this.elements;
    const x = q.x,
          y = q.y,
          z = q.z,
          w = q.w;
    const x2 = x + x,
          y2 = y + y,
          z2 = z + z;
    const xx = x * x2,
          xy = x * y2,
          xz = x * z2;
    const yy = y * y2,
          yz = y * z2,
          zz = z * z2;
    const wx = w * x2,
          wy = w * y2,
          wz = w * z2;
    e[0] = 1 - (yy + zz);
    e[4] = xy - wz;
    e[8] = xz + wy;
    e[1] = xy + wz;
    e[5] = 1 - (xx + zz);
    e[9] = yz - wx;
    e[2] = xz - wy;
    e[6] = yz + wx;
    e[10] = 1 - (xx + yy);
    e[3] = 0;
    e[7] = 0;
    e[11] = 0;
    e[12] = 0;
    e[13] = 0;
    e[14] = 0;
    e[15] = 1;
    return this;
  }
  /**
  * Sets the upper-left 3x3 portion of this matrix by the given 3x3 matrix. Other
  * parts of the matrix are equal to the identiy matrix.
  *
  * @param {Matrix3} m - A 3x3 matrix.
  * @return {Matrix4} A reference to this matrix.
  */


  fromMatrix3(m) {
    const e = this.elements;
    const me = m.elements;
    e[0] = me[0];
    e[1] = me[1];
    e[2] = me[2];
    e[3] = 0;
    e[4] = me[3];
    e[5] = me[4];
    e[6] = me[5];
    e[7] = 0;
    e[8] = me[6];
    e[9] = me[7];
    e[10] = me[8];
    e[11] = 0;
    e[12] = 0;
    e[13] = 0;
    e[14] = 0;
    e[15] = 1;
    return this;
  }
  /**
  * Sets the elements of this matrix from an array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Matrix4} A reference to this matrix.
  */


  fromArray(array, offset = 0) {
    const e = this.elements;

    for (let i = 0; i < 16; i++) {
      e[i] = array[i + offset];
    }

    return this;
  }
  /**
  * Copies all elements of this matrix to the given array.
  *
  * @param {Array<Number>} array - An array.
  * @param {Number} offset - An optional offset.
  * @return {Array<Number>} The array with the elements of the matrix.
  */


  toArray(array, offset = 0) {
    const e = this.elements;
    array[offset + 0] = e[0];
    array[offset + 1] = e[1];
    array[offset + 2] = e[2];
    array[offset + 3] = e[3];
    array[offset + 4] = e[4];
    array[offset + 5] = e[5];
    array[offset + 6] = e[6];
    array[offset + 7] = e[7];
    array[offset + 8] = e[8];
    array[offset + 9] = e[9];
    array[offset + 10] = e[10];
    array[offset + 11] = e[11];
    array[offset + 12] = e[12];
    array[offset + 13] = e[13];
    array[offset + 14] = e[14];
    array[offset + 15] = e[15];
    return array;
  }
  /**
  * Returns true if the given matrix is deep equal with this matrix.
  *
  * @param {Matrix4} m - The matrix to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(m) {
    const e = this.elements;
    const me = m.elements;

    for (let i = 0; i < 16; i++) {
      if (e[i] !== me[i]) return false;
    }

    return true;
  }

}

exports.Matrix4 = Matrix4;
const targetRotation = new Quaternion();
const targetDirection = new Vector3();
const positionWorld = new Vector3();
const quaternionWorld = new Quaternion();
/**
* Base class for all game entities.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class GameEntity {
  /**
  * Constructs a new game entity.
  */
  constructor() {
    /**
    * The name of this game entity.
    * @type {String}
    */
    this.name = '';
    /**
    * Whether this game entity is active or not.
    * @type {Boolean}
    * @default true
    */

    this.active = true;
    /**
    * The child entities of this game entity.
    * @type {Array<GameEntity>}
    */

    this.children = new Array();
    /**
    * A reference to the parent entity of this game entity.
    * Automatically set when added to a {@link GameEntity}.
    * @type {?GameEntity}
    * @default null
    * @readonly
    */

    this.parent = null;
    /**
    * A list of neighbors of this game entity.
    * @type {Array<GameEntity>}
    * @readonly
    */

    this.neighbors = new Array();
    /**
    * Game entities within this radius are considered as neighbors of this entity.
    * @type {Number}
    * @default 1
    */

    this.neighborhoodRadius = 1;
    /**
    * Whether the neighborhood of this game entity is updated or not.
    * @type {Boolean}
    * @default false
    */

    this.updateNeighborhood = false;
    /**
    * The position of this game entity.
    * @type {Vector3}
    */

    this.position = new Vector3();
    /**
    * The rotation of this game entity.
    * @type {Quaternion}
    */

    this.rotation = new Quaternion();
    /**
    * The scaling of this game entity.
    * @type {Vector3}
    */

    this.scale = new Vector3(1, 1, 1);
    /**
    * The default forward vector of this game entity.
    * @type {Vector3}
    * @default (0,0,1)
    */

    this.forward = new Vector3(0, 0, 1);
    /**
    * The default up vector of this game entity.
    * @type {Vector3}
    * @default (0,1,0)
    */

    this.up = new Vector3(0, 1, 0);
    /**
    * The bounding radius of this game entity in world units.
    * @type {Number}
    * @default 0
    */

    this.boundingRadius = 0;
    /**
    * The maximum turn rate of this game entity in radians per seconds.
    * The only method that uses this property right now is {@link GameEntity#rotateTo}.
    * @type {Number}
    * @default π
    */

    this.maxTurnRate = Math.PI;
    /**
    * Whether the entity can activate a trigger or not.
    * @type {Boolean}
    * @default true
    */

    this.canActivateTrigger = true;
    /**
    * A reference to the entity manager of this game entity.
    * Automatically set when added to an {@link EntityManager}.
    * @type {EntityManager}
    * @default null
    * @readonly
    */

    this.manager = null; // private properties
    // local transformation matrix. no part of the public API due to caching

    this._localMatrix = new Matrix4(); // internal world matrix reference (only accessible via a getter)

    this._worldMatrix = new Matrix4(); // per-entity cache in order to avoid unnecessary matrix calculations

    this._cache = {
      position: new Vector3(),
      rotation: new Quaternion(),
      scale: new Vector3(1, 1, 1)
    }; // render component

    this._renderComponent = null;
    this._renderComponentCallback = null; // flag to indicate whether the entity was updated by its manager at least once or not

    this._started = false; //

    this._uuid = null; // if set to true, it means the world matrix requires a recomputation

    this._worldMatrixDirty = false;
  }
  /**
  * A transformation matrix representing the world space of this game entity.
  * @type {Matrix4}
  * @readonly
  */


  get worldMatrix() {
    this._updateWorldMatrix();

    return this._worldMatrix;
  }
  /**
  * Unique ID, primarily used in context of serialization/deserialization.
  * @type {String}
  * @readonly
  */


  get uuid() {
    if (this._uuid === null) {
      this._uuid = MathUtils.generateUUID();
    }

    return this._uuid;
  }
  /**
  * Executed when this game entity is updated for the first time by its {@link EntityManager}.
  *
  * @return {GameEntity} A reference to this game entity.
  */


  start() {
    return this;
  }
  /**
  * Updates the internal state of this game entity. Normally called by {@link EntityManager#update}
  * in each simulation step.
  *
  * @param {Number} delta - The time delta.
  * @return {GameEntity} A reference to this game entity.
  */


  update() {
    return this;
  }
  /**
  * Adds a game entity as a child to this game entity.
  *
  * @param {GameEntity} entity - The game entity to add.
  * @return {GameEntity} A reference to this game entity.
  */


  add(entity) {
    if (entity.parent !== null) {
      entity.parent.remove(entity);
    }

    this.children.push(entity);
    entity.parent = this;
    return this;
  }
  /**
  * Removes a game entity as a child from this game entity.
  *
  * @param {GameEntity} entity - The game entity to remove.
  * @return {GameEntity} A reference to this game entity.
  */


  remove(entity) {
    const index = this.children.indexOf(entity);
    this.children.splice(index, 1);
    entity.parent = null;
    return this;
  }
  /**
  * Computes the current direction (forward) vector of this game entity
  * and stores the result in the given vector.
  *
  * @param {Vector3} result - The direction vector of this game entity.
  * @return {Vector3} The direction vector of this game entity.
  */


  getDirection(result) {
    return result.copy(this.forward).applyRotation(this.rotation).normalize();
  }
  /**
  * Directly rotates the entity so it faces the given target position.
  *
  * @param {Vector3} target - The target position.
  * @return {GameEntity} A reference to this game entity.
  */


  lookAt(target) {
    const parent = this.parent;

    if (parent !== null) {
      this.getWorldPosition(positionWorld);
      targetDirection.subVectors(target, positionWorld).normalize();
      this.rotation.lookAt(this.forward, targetDirection, this.up);
      quaternionWorld.extractRotationFromMatrix(parent.worldMatrix).inverse();
      this.rotation.premultiply(quaternionWorld);
    } else {
      targetDirection.subVectors(target, this.position).normalize();
      this.rotation.lookAt(this.forward, targetDirection, this.up);
    }

    return this;
  }
  /**
  * Given a target position, this method rotates the entity by an amount not
  * greater than {@link GameEntity#maxTurnRate} until it directly faces the target.
  *
  * @param {Vector3} target - The target position.
  * @param {Number} delta - The time delta.
  * @param {Number} tolerance - A tolerance value in radians to tweak the result
  * when a game entity is considered to face a target.
  * @return {Boolean} Whether the entity is faced to the target or not.
  */


  rotateTo(target, delta, tolerance = 0.0001) {
    const parent = this.parent;

    if (parent !== null) {
      this.getWorldPosition(positionWorld);
      targetDirection.subVectors(target, positionWorld).normalize();
      targetRotation.lookAt(this.forward, targetDirection, this.up);
      quaternionWorld.extractRotationFromMatrix(parent.worldMatrix).inverse();
      targetRotation.premultiply(quaternionWorld);
    } else {
      targetDirection.subVectors(target, this.position).normalize();
      targetRotation.lookAt(this.forward, targetDirection, this.up);
    }

    return this.rotation.rotateTo(targetRotation, this.maxTurnRate * delta, tolerance);
  }
  /**
  * Computes the current direction (forward) vector of this game entity
  * in world space and stores the result in the given vector.
  *
  * @param {Vector3} result - The direction vector of this game entity in world space.
  * @return {Vector3} The direction vector of this game entity in world space.
  */


  getWorldDirection(result) {
    quaternionWorld.extractRotationFromMatrix(this.worldMatrix);
    return result.copy(this.forward).applyRotation(quaternionWorld).normalize();
  }
  /**
  * Computes the current position of this game entity in world space and
  * stores the result in the given vector.
  *
  * @param {Vector3} result - The position of this game entity in world space.
  * @return {Vector3} The position of this game entity in world space.
  */


  getWorldPosition(result) {
    return result.extractPositionFromMatrix(this.worldMatrix);
  }
  /**
  * Sets a renderable component of a 3D engine with a sync callback for this game entity.
  *
  * @param {Object} renderComponent - A renderable component of a 3D engine.
  * @param {Function} callback - A callback that can be used to sync this game entity with the renderable component.
  * @return {GameEntity} A reference to this game entity.
  */


  setRenderComponent(renderComponent, callback) {
    this._renderComponent = renderComponent;
    this._renderComponentCallback = callback;
    return this;
  }
  /**
  * Holds the implementation for the message handling of this game entity.
  *
  * @param {Telegram} telegram - The telegram with the message data.
  * @return {Boolean} Whether the message was processed or not.
  */


  handleMessage() {
    return false;
  }
  /**
  * Holds the implementation for the line of sight test of this game entity.
  * This method is used by {@link Vision#visible} in order to determine whether
  * this game entity blocks the given line of sight or not. Implement this method
  * when your game entity acts as an obstacle.
  *
  * @param {Ray} ray - The ray that represents the line of sight.
  * @param {Vector3} intersectionPoint - The intersection point.
  * @return {Vector3} The intersection point.
  */


  lineOfSightTest() {
    return null;
  }
  /**
  * Sends a message with the given data to the specified receiver.
  *
  * @param {GameEntity} receiver - The receiver.
  * @param {String} message - The actual message.
  * @param {Number} delay - A time value in millisecond used to delay the message dispatching.
  * @param {Object} data - An object for custom data.
  * @return {GameEntity} A reference to this game entity.
  */


  sendMessage(receiver, message, delay = 0, data = null) {
    if (this.manager !== null) {
      this.manager.sendMessage(this, receiver, message, delay, data);
    } else {
      Logger.error('YUKA.GameEntity: The game entity must be added to a manager in order to send a message.');
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      uuid: this.uuid,
      name: this.name,
      active: this.active,
      children: entitiesToIds(this.children),
      parent: this.parent !== null ? this.parent.uuid : null,
      neighbors: entitiesToIds(this.neighbors),
      neighborhoodRadius: this.neighborhoodRadius,
      updateNeighborhood: this.updateNeighborhood,
      position: this.position.toArray(new Array()),
      rotation: this.rotation.toArray(new Array()),
      scale: this.scale.toArray(new Array()),
      forward: this.forward.toArray(new Array()),
      up: this.up.toArray(new Array()),
      boundingRadius: this.boundingRadius,
      maxTurnRate: this.maxTurnRate,
      canActivateTrigger: this.canActivateTrigger,
      worldMatrix: this.worldMatrix.toArray(new Array()),
      _localMatrix: this._localMatrix.toArray(new Array()),
      _cache: {
        position: this._cache.position.toArray(new Array()),
        rotation: this._cache.rotation.toArray(new Array()),
        scale: this._cache.scale.toArray(new Array())
      },
      _started: this._started
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {GameEntity} A reference to this game entity.
  */


  fromJSON(json) {
    this.name = json.name;
    this.active = json.active;
    this.neighborhoodRadius = json.neighborhoodRadius;
    this.updateNeighborhood = json.updateNeighborhood;
    this.position.fromArray(json.position);
    this.rotation.fromArray(json.rotation);
    this.scale.fromArray(json.scale);
    this.forward.fromArray(json.forward);
    this.up.fromArray(json.up);
    this.boundingRadius = json.boundingRadius;
    this.maxTurnRate = json.maxTurnRate;
    this.canActivateTrigger = json.canActivateTrigger;
    this.children = json.children.slice();
    this.neighbors = json.neighbors.slice();
    this.parent = json.parent;

    this._localMatrix.fromArray(json._localMatrix);

    this._worldMatrix.fromArray(json.worldMatrix);

    this._cache.position.fromArray(json._cache.position);

    this._cache.rotation.fromArray(json._cache.rotation);

    this._cache.scale.fromArray(json._cache.scale);

    this._started = json._started;
    this._uuid = json.uuid;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {GameEntity} A reference to this game entity.
  */


  resolveReferences(entities) {
    //
    const neighbors = this.neighbors;

    for (let i = 0, l = neighbors.length; i < l; i++) {
      neighbors[i] = entities.get(neighbors[i]);
    } //


    const children = this.children;

    for (let i = 0, l = children.length; i < l; i++) {
      children[i] = entities.get(children[i]);
    } //


    this.parent = entities.get(this.parent) || null;
    return this;
  } // Updates the transformation matrix representing the local space.


  _updateMatrix() {
    const cache = this._cache;

    if (cache.position.equals(this.position) && cache.rotation.equals(this.rotation) && cache.scale.equals(this.scale)) {
      return;
    }

    this._localMatrix.compose(this.position, this.rotation, this.scale);

    cache.position.copy(this.position);
    cache.rotation.copy(this.rotation);
    cache.scale.copy(this.scale);
    this._worldMatrixDirty = true;
  }

  _updateWorldMatrix() {
    const parent = this.parent;

    if (parent !== null) {
      parent._updateWorldMatrix();
    }

    this._updateMatrix();

    if (this._worldMatrixDirty === true) {
      if (parent === null) {
        this._worldMatrix.copy(this._localMatrix);
      } else {
        this._worldMatrix.multiplyMatrices(this.parent._worldMatrix, this._localMatrix);
      }

      this._worldMatrixDirty = false; // invalidate world matrices of children

      const children = this.children;

      for (let i = 0, l = children.length; i < l; i++) {
        const child = children[i];
        child._worldMatrixDirty = true;
      }
    }
  } // deprecated


  updateWorldMatrix() {
    // this warning will be removed with v1.0.0
    console.warn('GameEntity: .updateWorldMatrix() has been removed. World matrices are automatically updated on access.');
    return this;
  }

}

exports.GameEntity = GameEntity;

function entitiesToIds(array) {
  const ids = new Array();

  for (let i = 0, l = array.length; i < l; i++) {
    ids.push(array[i].uuid);
  }

  return ids;
}

const displacement = new Vector3();
const target = new Vector3();
/**
* Class representing moving game entities.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments GameEntity
*/

class MovingEntity extends GameEntity {
  /**
  * Constructs a new moving entity.
  */
  constructor() {
    super();
    /**
    * The velocity of this game entity.
    * @type {Vector3}
    */

    this.velocity = new Vector3();
    /**
    * The maximum speed at which this game entity may travel.
    * @type {Number}
    * @default 1
    */

    this.maxSpeed = 1;
    /**
    * Whether the orientation of this game entity will be updated based on the velocity or not.
    * @type {Boolean}
    * @default true
    */

    this.updateOrientation = true;
  }
  /**
  * Updates the internal state of this game entity.
  *
  * @param {Number} delta - The time delta.
  * @return {MovingEntity} A reference to this moving entity.
  */


  update(delta) {
    // make sure vehicle does not exceed maximum speed
    if (this.getSpeedSquared() > this.maxSpeed * this.maxSpeed) {
      this.velocity.normalize();
      this.velocity.multiplyScalar(this.maxSpeed);
    } // calculate displacement


    displacement.copy(this.velocity).multiplyScalar(delta); // calculate target position

    target.copy(this.position).add(displacement); // update the orientation if the vehicle has a non zero velocity

    if (this.updateOrientation && this.getSpeedSquared() > 0.00000001) {
      this.lookAt(target);
    } // update position


    this.position.copy(target);
    return this;
  }
  /**
  * Returns the current speed of this game entity.
  *
  * @return {Number} The current speed.
  */


  getSpeed() {
    return this.velocity.length();
  }
  /**
  * Returns the current speed in squared space of this game entity.
  *
  * @return {Number} The current speed in squared space.
  */


  getSpeedSquared() {
    return this.velocity.squaredLength();
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.velocity = this.velocity.toArray(new Array());
    json.maxSpeed = this.maxSpeed;
    json.updateOrientation = this.updateOrientation;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {MovingEntity} A reference to this moving entity.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.velocity.fromArray(json.velocity);
    this.maxSpeed = json.maxSpeed;
    this.updateOrientation = json.updateOrientation;
    return this;
  }

}
/**
* Base class for all concrete steering behaviors. They produce a force that describes
* where an agent should move and how fast it should travel to get there.
*
* Note: All built-in steering behaviors assume a {@link Vehicle#mass} of one. Different values can lead to an unexpected results.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.MovingEntity = MovingEntity;

class SteeringBehavior {
  /**
  * Constructs a new steering behavior.
  */
  constructor() {
    /**
    * Whether this steering behavior is active or not.
    * @type {Boolean}
    * @default true
    */
    this.active = true;
    /**
    * Can be used to tweak the amount that a steering force contributes to the total steering force.
    * @type {Number}
    * @default 1
    */

    this.weight = 1;
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate() {}
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      active: this.active,
      weight: this.weight
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {SteeringBehavior} A reference to this steering behavior.
  */


  fromJSON(json) {
    this.active = json.active;
    this.weight = json.weight;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {SteeringBehavior} A reference to this steering behavior.
  */


  resolveReferences() {}

}

exports.SteeringBehavior = SteeringBehavior;
const averageDirection = new Vector3();
const direction = new Vector3();
/**
* This steering behavior produces a force that keeps a vehicle’s heading aligned with its neighbors.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class AlignmentBehavior extends SteeringBehavior {
  /**
  * Constructs a new alignment behavior.
  */
  constructor() {
    super();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    averageDirection.set(0, 0, 0);
    const neighbors = vehicle.neighbors; // iterate over all neighbors to calculate the average direction vector

    for (let i = 0, l = neighbors.length; i < l; i++) {
      const neighbor = neighbors[i];
      neighbor.getDirection(direction);
      averageDirection.add(direction);
    }

    if (neighbors.length > 0) {
      averageDirection.divideScalar(neighbors.length); // produce a force to align the vehicle's heading

      vehicle.getDirection(direction);
      force.subVectors(averageDirection, direction);
    }

    return force;
  }

}

exports.AlignmentBehavior = AlignmentBehavior;
const desiredVelocity = new Vector3();
const displacement$1 = new Vector3();
/**
* This steering behavior produces a force that directs an agent toward a target position.
* Unlike {@link SeekBehavior}, it decelerates so the agent comes to a gentle halt at the target position.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class ArriveBehavior extends SteeringBehavior {
  /**
  * Constructs a new arrive behavior.
  *
  * @param {Vector3} target - The target vector.
  * @param {Number} deceleration - The amount of deceleration.
  * @param {Number} tolerance - A tolerance value in world units to prevent the vehicle from overshooting its target.
  */
  constructor(target = new Vector3(), deceleration = 3, tolerance = 0) {
    super();
    /**
    * The target vector.
    * @type {Vector3}
    */

    this.target = target;
    /**
    * The amount of deceleration.
    * @type {Number}
    * @default 3
    */

    this.deceleration = deceleration;
    /**
    * A tolerance value in world units to prevent the vehicle from overshooting its target.
    * @type {Number}
    * @default 0
    */

    this.tolerance = tolerance;
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const target = this.target;
    const deceleration = this.deceleration;
    displacement$1.subVectors(target, vehicle.position);
    const distance = displacement$1.length();

    if (distance > this.tolerance) {
      // calculate the speed required to reach the target given the desired deceleration
      let speed = distance / deceleration; // make sure the speed does not exceed the max

      speed = Math.min(speed, vehicle.maxSpeed); // from here proceed just like "seek" except we don't need to normalize
      // the "displacement" vector because we have already gone to the trouble
      // of calculating its length.

      desiredVelocity.copy(displacement$1).multiplyScalar(speed / distance);
    } else {
      desiredVelocity.set(0, 0, 0);
    }

    return force.subVectors(desiredVelocity, vehicle.velocity);
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.target = this.target.toArray(new Array());
    json.deceleration = this.deceleration;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {ArriveBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.target.fromArray(json.target);
    this.deceleration = json.deceleration;
    return this;
  }

}

exports.ArriveBehavior = ArriveBehavior;
const desiredVelocity$1 = new Vector3();
/**
* This steering behavior produces a force that directs an agent toward a target position.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class SeekBehavior extends SteeringBehavior {
  /**
  * Constructs a new seek behavior.
  *
  * @param {Vector3} target - The target vector.
  */
  constructor(target = new Vector3()) {
    super();
    /**
    * The target vector.
    * @type {Vector3}
    */

    this.target = target;
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const target = this.target; // First the desired velocity is calculated.
    // This is the velocity the agent would need to reach the target position in an ideal world.
    // It represents the vector from the agent to the target,
    // scaled to be the length of the maximum possible speed of the agent.

    desiredVelocity$1.subVectors(target, vehicle.position).normalize();
    desiredVelocity$1.multiplyScalar(vehicle.maxSpeed); // The steering force returned by this method is the force required,
    // which when added to the agent’s current velocity vector gives the desired velocity.
    // To achieve this you simply subtract the agent’s current velocity from the desired velocity.

    return force.subVectors(desiredVelocity$1, vehicle.velocity);
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.target = this.target.toArray(new Array());
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {SeekBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.target.fromArray(json.target);
    return this;
  }

}

exports.SeekBehavior = SeekBehavior;
const centerOfMass = new Vector3();
/**
* This steering produces a steering force that moves a vehicle toward the center of mass of its neighbors.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class CohesionBehavior extends SteeringBehavior {
  /**
  * Constructs a new cohesion behavior.
  */
  constructor() {
    super(); // internal behaviors

    this._seek = new SeekBehavior();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    centerOfMass.set(0, 0, 0);
    const neighbors = vehicle.neighbors; // iterate over all neighbors to calculate the center of mass

    for (let i = 0, l = neighbors.length; i < l; i++) {
      const neighbor = neighbors[i];
      centerOfMass.add(neighbor.position);
    }

    if (neighbors.length > 0) {
      centerOfMass.divideScalar(neighbors.length); // seek to it

      this._seek.target = centerOfMass;

      this._seek.calculate(vehicle, force); // the magnitude of cohesion is usually much larger than separation
      // or alignment so it usually helps to normalize it


      force.normalize();
    }

    return force;
  }

}

exports.CohesionBehavior = CohesionBehavior;
const desiredVelocity$2 = new Vector3();
/**
* This steering behavior produces a force that steers an agent away from a target position.
* It's the opposite of {@link SeekBehavior}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class FleeBehavior extends SteeringBehavior {
  /**
  * Constructs a new flee behavior.
  *
  * @param {Vector3} target - The target vector.
  * @param {Number} panicDistance - The agent only flees from the target if it is inside this radius.
  */
  constructor(target = new Vector3(), panicDistance = 10) {
    super();
    /**
    * The target vector.
    * @type {Vector3}
    */

    this.target = target;
    /**
    * The agent only flees from the target if it is inside this radius.
    * @type {Number}
    * @default 10
    */

    this.panicDistance = panicDistance;
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const target = this.target; // only flee if the target is within panic distance

    const distanceToTargetSq = vehicle.position.squaredDistanceTo(target);

    if (distanceToTargetSq <= this.panicDistance * this.panicDistance) {
      // from here, the only difference compared to seek is that the desired
      // velocity is calculated using a vector pointing in the opposite direction
      desiredVelocity$2.subVectors(vehicle.position, target).normalize(); // if target and vehicle position are identical, choose default velocity

      if (desiredVelocity$2.squaredLength() === 0) {
        desiredVelocity$2.set(0, 0, 1);
      }

      desiredVelocity$2.multiplyScalar(vehicle.maxSpeed);
      force.subVectors(desiredVelocity$2, vehicle.velocity);
    }

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.target = this.target.toArray(new Array());
    json.panicDistance = this.panicDistance;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {FleeBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.target.fromArray(json.target);
    this.panicDistance = json.panicDistance;
    return this;
  }

}

exports.FleeBehavior = FleeBehavior;
const displacement$2 = new Vector3();
const newPursuerVelocity = new Vector3();
const predictedPosition = new Vector3();
/**
* This steering behavior is is almost the same as {@link PursuitBehavior} except that
* the agent flees from the estimated future position of the pursuer.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class EvadeBehavior extends SteeringBehavior {
  /**
  * Constructs a new evade behavior.
  *
  * @param {MovingEntity} pursuer - The agent to evade from.
  * @param {Number} panicDistance - The agent only flees from the pursuer if it is inside this radius.
  * @param {Number} predictionFactor - This factor determines how far the vehicle predicts the movement of the pursuer.
  */
  constructor(pursuer = null, panicDistance = 10, predictionFactor = 1) {
    super();
    /**
    * The agent to evade from.
    * @type {?MovingEntity}
    * @default null
    */

    this.pursuer = pursuer;
    /**
    * The agent only flees from the pursuer if it is inside this radius.
    * @type {Number}
    * @default 10
    */

    this.panicDistance = panicDistance;
    /**
    * This factor determines how far the vehicle predicts the movement of the pursuer.
    * @type {Number}
    * @default 1
    */

    this.predictionFactor = predictionFactor; // internal behaviors

    this._flee = new FleeBehavior();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const pursuer = this.pursuer;
    displacement$2.subVectors(pursuer.position, vehicle.position);
    let lookAheadTime = displacement$2.length() / (vehicle.maxSpeed + pursuer.getSpeed());
    lookAheadTime *= this.predictionFactor; // tweak the magnitude of the prediction
    // calculate new velocity and predicted future position

    newPursuerVelocity.copy(pursuer.velocity).multiplyScalar(lookAheadTime);
    predictedPosition.addVectors(pursuer.position, newPursuerVelocity); // now flee away from predicted future position of the pursuer

    this._flee.target = predictedPosition;
    this._flee.panicDistance = this.panicDistance;

    this._flee.calculate(vehicle, force);

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.pursuer = this.pursuer ? this.pursuer.uuid : null;
    json.panicDistance = this.panicDistance;
    json.predictionFactor = this.predictionFactor;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {EvadeBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.pursuer = json.pursuer;
    this.panicDistance = json.panicDistance;
    this.predictionFactor = json.predictionFactor;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {EvadeBehavior} A reference to this behavior.
  */


  resolveReferences(entities) {
    this.pursuer = entities.get(this.pursuer) || null;
  }

}
/**
* Class for representing a walkable path.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.EvadeBehavior = EvadeBehavior;

class Path {
  /**
  * Constructs a new path.
  */
  constructor() {
    /**
    * Whether this path is looped or not.
    * @type {Boolean}
    */
    this.loop = false;
    this._waypoints = new Array();
    this._index = 0;
  }
  /**
  * Adds the given waypoint to this path.
  *
  * @param {Vector3} waypoint - The waypoint to add.
  * @return {Path} A reference to this path.
  */


  add(waypoint) {
    this._waypoints.push(waypoint);

    return this;
  }
  /**
  * Clears the internal state of this path.
  *
  * @return {Path} A reference to this path.
  */


  clear() {
    this._waypoints.length = 0;
    this._index = 0;
    return this;
  }
  /**
  * Returns the current active waypoint of this path.
  *
  * @return {Vector3} The current active waypoint.
  */


  current() {
    return this._waypoints[this._index];
  }
  /**
  * Returns true if this path is not looped and the last waypoint is active.
  *
  * @return {Boolean} Whether this path is finished or not.
  */


  finished() {
    const lastIndex = this._waypoints.length - 1;
    return this.loop === true ? false : this._index === lastIndex;
  }
  /**
  * Makes the next waypoint of this path active. If the path is looped and
  * {@link Path#finished} returns true, the path starts from the beginning.
  *
  * @return {Path} A reference to this path.
  */


  advance() {
    this._index++;

    if (this._index === this._waypoints.length) {
      if (this.loop === true) {
        this._index = 0;
      } else {
        this._index--;
      }
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const data = {
      type: this.constructor.name,
      loop: this.loop,
      _waypoints: new Array(),
      _index: this._index
    }; // waypoints

    const waypoints = this._waypoints;

    for (let i = 0, l = waypoints.length; i < l; i++) {
      const waypoint = waypoints[i];

      data._waypoints.push(waypoint.toArray(new Array()));
    }

    return data;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Path} A reference to this path.
  */


  fromJSON(json) {
    this.loop = json.loop;
    this._index = json._index; // waypoints

    const waypointsJSON = json._waypoints;

    for (let i = 0, l = waypointsJSON.length; i < l; i++) {
      const waypointJSON = waypointsJSON[i];

      this._waypoints.push(new Vector3().fromArray(waypointJSON));
    }

    return this;
  }

}
/**
* This steering behavior produces a force that moves a vehicle along a series of waypoints forming a path.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/


exports.Path = Path;

class FollowPathBehavior extends SteeringBehavior {
  /**
  * Constructs a new follow path behavior.
  *
  * @param {Path} path - The path to follow.
  * @param {Number} nextWaypointDistance - The distance the agent seeks for the next waypoint.
  */
  constructor(path = new Path(), nextWaypointDistance = 1) {
    super();
    /**
    * The path to follow.
    * @type {Path}
    */

    this.path = path;
    /**
    * The distance the agent seeks for the next waypoint.
    * @type {Number}
    * @default 1
    */

    this.nextWaypointDistance = nextWaypointDistance; // internal behaviors

    this._arrive = new ArriveBehavior();
    this._seek = new SeekBehavior();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const path = this.path; // calculate distance in square space from current waypoint to vehicle

    const distanceSq = path.current().squaredDistanceTo(vehicle.position); // move to next waypoint if close enough to current target

    if (distanceSq < this.nextWaypointDistance * this.nextWaypointDistance) {
      path.advance();
    }

    const target = path.current();

    if (path.finished() === true) {
      this._arrive.target = target;

      this._arrive.calculate(vehicle, force);
    } else {
      this._seek.target = target;

      this._seek.calculate(vehicle, force);
    }

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.path = this.path.toJSON();
    json.nextWaypointDistance = this.nextWaypointDistance;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {FollowPathBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.path.fromJSON(json.path);
    this.nextWaypointDistance = json.nextWaypointDistance;
    return this;
  }

}

exports.FollowPathBehavior = FollowPathBehavior;
const midPoint = new Vector3();
const translation = new Vector3();
const predictedPosition1 = new Vector3();
const predictedPosition2 = new Vector3();
/**
* This steering behavior produces a force that moves a vehicle to the midpoint
* of the imaginary line connecting two other agents.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class InterposeBehavior extends SteeringBehavior {
  /**
  * Constructs a new interpose behavior.
  *
  * @param {MovingEntity} entity1 - The first agent.
  * @param {MovingEntity} entity2 - The second agent.
  * @param {Number} deceleration - The amount of deceleration.
  */
  constructor(entity1 = null, entity2 = null, deceleration = 3) {
    super();
    /**
    * The first agent.
    * @type {?MovingEntity}
    * @default null
    */

    this.entity1 = entity1;
    /**
    * The second agent.
    * @type {?MovingEntity}
    * @default null
    */

    this.entity2 = entity2;
    /**
    * The amount of deceleration.
    * @type {Number}
    * @default 3
    */

    this.deceleration = deceleration; // internal behaviors

    this._arrive = new ArriveBehavior();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const entity1 = this.entity1;
    const entity2 = this.entity2; // first we need to figure out where the two entities are going to be
    // in the future. This is approximated by determining the time
    // taken to reach the mid way point at the current time at max speed

    midPoint.addVectors(entity1.position, entity2.position).multiplyScalar(0.5);
    const time = vehicle.position.distanceTo(midPoint) / vehicle.maxSpeed; // now we have the time, we assume that entity 1 and entity 2 will
    // continue on a straight trajectory and extrapolate to get their future positions

    translation.copy(entity1.velocity).multiplyScalar(time);
    predictedPosition1.addVectors(entity1.position, translation);
    translation.copy(entity2.velocity).multiplyScalar(time);
    predictedPosition2.addVectors(entity2.position, translation); // calculate the mid point of these predicted positions

    midPoint.addVectors(predictedPosition1, predictedPosition2).multiplyScalar(0.5); // then steer to arrive at it

    this._arrive.deceleration = this.deceleration;
    this._arrive.target = midPoint;

    this._arrive.calculate(vehicle, force);

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.entity1 = this.entity1 ? this.entity1.uuid : null;
    json.entity2 = this.entity2 ? this.entity2.uuid : null;
    json.deceleration = this.deceleration;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {InterposeBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.entity1 = json.entity1;
    this.entity2 = json.entity2;
    this.deceleration = json.deceleration;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {InterposeBehavior} A reference to this behavior.
  */


  resolveReferences(entities) {
    this.entity1 = entities.get(this.entity1) || null;
    this.entity2 = entities.get(this.entity2) || null;
  }

}

exports.InterposeBehavior = InterposeBehavior;
const vector$1 = new Vector3();
const center = new Vector3();
const size = new Vector3();
const points = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];
/**
* Class representing an axis-aligned bounding box (AABB).
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class AABB {
  /**
  * Constructs a new AABB with the given values.
  *
  * @param {Vector3} min - The minimum bounds of the AABB.
  * @param {Vector3} max - The maximum bounds of the AABB.
  */
  constructor(min = new Vector3(), max = new Vector3()) {
    /**
    * The minimum bounds of the AABB.
    * @type {Vector3}
    */
    this.min = min;
    /**
    * The maximum bounds of the AABB.
    * @type {Vector3}
    */

    this.max = max;
  }
  /**
  * Sets the given values to this AABB.
  *
  * @param {Vector3} min - The minimum bounds of the AABB.
  * @param {Vector3} max - The maximum bounds of the AABB.
  * @return {AABB} A reference to this AABB.
  */


  set(min, max) {
    this.min = min;
    this.max = max;
    return this;
  }
  /**
  * Copies all values from the given AABB to this AABB.
  *
  * @param {AABB} aabb - The AABB to copy.
  * @return {AABB} A reference to this AABB.
  */


  copy(aabb) {
    this.min.copy(aabb.min);
    this.max.copy(aabb.max);
    return this;
  }
  /**
  * Creates a new AABB and copies all values from this AABB.
  *
  * @return {AABB} A new AABB.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Ensures the given point is inside this AABB and stores
  * the result in the given vector.
  *
  * @param {Vector3} point - A point in 3D space.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  clampPoint(point, result) {
    result.copy(point).clamp(this.min, this.max);
    return result;
  }
  /**
  * Returns true if the given point is inside this AABB.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Boolean} The result of the containments test.
  */


  containsPoint(point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
  }
  /**
  * Expands this AABB by the given point. So after this method call,
  * the given point lies inside the AABB.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {AABB} A reference to this AABB.
  */


  expand(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  /**
  * Computes the center point of this AABB and stores it into the given vector.
  *
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  getCenter(result) {
    return result.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
  * Computes the size (width, height, depth) of this AABB and stores it into the given vector.
  *
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  getSize(result) {
    return result.subVectors(this.max, this.min);
  }
  /**
  * Returns true if the given AABB intersects this AABB.
  *
  * @param {AABB} aabb - The AABB to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsAABB(aabb) {
    return aabb.max.x < this.min.x || aabb.min.x > this.max.x || aabb.max.y < this.min.y || aabb.min.y > this.max.y || aabb.max.z < this.min.z || aabb.min.z > this.max.z ? false : true;
  }
  /**
  * Returns true if the given bounding sphere intersects this AABB.
  *
  * @param {BoundingSphere} sphere - The bounding sphere to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsBoundingSphere(sphere) {
    // find the point on the AABB closest to the sphere center
    this.clampPoint(sphere.center, vector$1); // if that point is inside the sphere, the AABB and sphere intersect.

    return vector$1.squaredDistanceTo(sphere.center) <= sphere.radius * sphere.radius;
  }
  /**
  * Returns true if the given plane intersects this AABB.
  *
  * Reference: Testing Box Against Plane in Real-Time Collision Detection
  * by Christer Ericson (chapter 5.2.3)
  *
  * @param {Plane} plane - The plane to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsPlane(plane) {
    const normal = plane.normal;
    this.getCenter(center);
    size.subVectors(this.max, center); // positive extends
    // compute the projection interval radius of b onto L(t) = c + t * plane.normal

    const r = size.x * Math.abs(normal.x) + size.y * Math.abs(normal.y) + size.z * Math.abs(normal.z); // compute distance of box center from plane

    const s = plane.distanceToPoint(center);
    return Math.abs(s) <= r;
  }
  /**
  * Returns the normal for a given point on this AABB's surface.
  *
  * @param {Vector3} point - The point on the surface
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  getNormalFromSurfacePoint(point, result) {
    // from https://www.gamedev.net/forums/topic/551816-finding-the-aabb-surface-normal-from-an-intersection-point-on-aabb/
    result.set(0, 0, 0);
    let distance;
    let minDistance = Infinity;
    this.getCenter(center);
    this.getSize(size); // transform point into local space of AABB

    vector$1.copy(point).sub(center); // x-axis

    distance = Math.abs(size.x - Math.abs(vector$1.x));

    if (distance < minDistance) {
      minDistance = distance;
      result.set(1 * Math.sign(vector$1.x), 0, 0);
    } // y-axis


    distance = Math.abs(size.y - Math.abs(vector$1.y));

    if (distance < minDistance) {
      minDistance = distance;
      result.set(0, 1 * Math.sign(vector$1.y), 0);
    } // z-axis


    distance = Math.abs(size.z - Math.abs(vector$1.z));

    if (distance < minDistance) {
      result.set(0, 0, 1 * Math.sign(vector$1.z));
    }

    return result;
  }
  /**
  * Sets the values of the AABB from the given center and size vector.
  *
  * @param {Vector3} center - The center point of the AABB.
  * @param {Vector3} size - The size of the AABB per axis.
  * @return {AABB} A reference to this AABB.
  */


  fromCenterAndSize(center, size) {
    vector$1.copy(size).multiplyScalar(0.5); // compute half size

    this.min.copy(center).sub(vector$1);
    this.max.copy(center).add(vector$1);
    return this;
  }
  /**
  * Computes an AABB that encloses the given set of points.
  *
  * @param {Array<Vector3>} points - An array of 3D vectors representing points in 3D space.
  * @return {AABB} A reference to this AABB.
  */


  fromPoints(points) {
    this.min.set(Infinity, Infinity, Infinity);
    this.max.set(-Infinity, -Infinity, -Infinity);

    for (let i = 0, l = points.length; i < l; i++) {
      this.expand(points[i]);
    }

    return this;
  }
  /**
  * Transforms this AABB with the given 4x4 transformation matrix.
  *
  * @param {Matrix4} matrix - The 4x4 transformation matrix.
  * @return {AABB} A reference to this AABB.
  */


  applyMatrix4(matrix) {
    const min = this.min;
    const max = this.max;
    points[0].set(min.x, min.y, min.z).applyMatrix4(matrix);
    points[1].set(min.x, min.y, max.z).applyMatrix4(matrix);
    points[2].set(min.x, max.y, min.z).applyMatrix4(matrix);
    points[3].set(min.x, max.y, max.z).applyMatrix4(matrix);
    points[4].set(max.x, min.y, min.z).applyMatrix4(matrix);
    points[5].set(max.x, min.y, max.z).applyMatrix4(matrix);
    points[6].set(max.x, max.y, min.z).applyMatrix4(matrix);
    points[7].set(max.x, max.y, max.z).applyMatrix4(matrix);
    return this.fromPoints(points);
  }
  /**
  * Returns true if the given AABB is deep equal with this AABB.
  *
  * @param {AABB} aabb - The AABB to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(aabb) {
    return aabb.min.equals(this.min) && aabb.max.equals(this.max);
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      min: this.min.toArray(new Array()),
      max: this.max.toArray(new Array())
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {AABB} A reference to this AABB.
  */


  fromJSON(json) {
    this.min.fromArray(json.min);
    this.max.fromArray(json.max);
    return this;
  }

}

exports.AABB = AABB;
const aabb = new AABB();
/**
* Class representing a bounding sphere.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class BoundingSphere {
  /**
  * Constructs a new bounding sphere with the given values.
  *
  * @param {Vector3} center - The center position of the bounding sphere.
  * @param {Number} radius - The radius of the bounding sphere.
  */
  constructor(center = new Vector3(), radius = 0) {
    /**
    * The center position of the bounding sphere.
    * @type {Vector3}
    */
    this.center = center;
    /**
    * The radius of the bounding sphere.
    * @type {Number}
    */

    this.radius = radius;
  }
  /**
  * Sets the given values to this bounding sphere.
  *
  * @param {Vector3} center - The center position of the bounding sphere.
  * @param {Number} radius - The radius of the bounding sphere.
  * @return {BoundingSphere} A reference to this bounding sphere.
  */


  set(center, radius) {
    this.center = center;
    this.radius = radius;
    return this;
  }
  /**
  * Copies all values from the given bounding sphere to this bounding sphere.
  *
  * @param {BoundingSphere} sphere - The bounding sphere to copy.
  * @return {BoundingSphere} A reference to this bounding sphere.
  */


  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  /**
  * Creates a new bounding sphere and copies all values from this bounding sphere.
  *
  * @return {BoundingSphere} A new bounding sphere.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Ensures the given point is inside this bounding sphere and stores
  * the result in the given vector.
  *
  * @param {Vector3} point - A point in 3D space.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  clampPoint(point, result) {
    result.copy(point);
    const squaredDistance = this.center.squaredDistanceTo(point);

    if (squaredDistance > this.radius * this.radius) {
      result.sub(this.center).normalize();
      result.multiplyScalar(this.radius).add(this.center);
    }

    return result;
  }
  /**
  * Returns true if the given point is inside this bounding sphere.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Boolean} The result of the containments test.
  */


  containsPoint(point) {
    return point.squaredDistanceTo(this.center) <= this.radius * this.radius;
  }
  /**
  * Returns true if the given bounding sphere intersects this bounding sphere.
  *
  * @param {BoundingSphere} sphere - The bounding sphere to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsBoundingSphere(sphere) {
    const radius = this.radius + sphere.radius;
    return sphere.center.squaredDistanceTo(this.center) <= radius * radius;
  }
  /**
  * Returns true if the given plane intersects this bounding sphere.
  *
  * Reference: Testing Sphere Against Plane in Real-Time Collision Detection
  * by Christer Ericson (chapter 5.2.2)
  *
  * @param {Plane} plane - The plane to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  /**
  * Returns the normal for a given point on this bounding sphere's surface.
  *
  * @param {Vector3} point - The point on the surface
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  getNormalFromSurfacePoint(point, result) {
    return result.subVectors(point, this.center).normalize();
  }
  /**
  * Computes a bounding sphere that encloses the given set of points.
  *
  * @param {Array<Vector3>} points - An array of 3D vectors representing points in 3D space.
  * @return {BoundingSphere} A reference to this bounding sphere.
  */


  fromPoints(points) {
    // Using an AABB is a simple way to compute a bounding sphere for a given set
    // of points. However, there are other more complex algorithms that produce a
    // more tight bounding sphere. For now, this approach is a good start.
    aabb.fromPoints(points);
    aabb.getCenter(this.center);
    this.radius = this.center.distanceTo(aabb.max);
    return this;
  }
  /**
  * Transforms this bounding sphere with the given 4x4 transformation matrix.
  *
  * @param {Matrix4} matrix - The 4x4 transformation matrix.
  * @return {BoundingSphere} A reference to this bounding sphere.
  */


  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScale();
    return this;
  }
  /**
  * Returns true if the given bounding sphere is deep equal with this bounding sphere.
  *
  * @param {BoundingSphere} sphere - The bounding sphere to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      center: this.center.toArray(new Array()),
      radius: this.radius
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {BoundingSphere} A reference to this bounding sphere.
  */


  fromJSON(json) {
    this.center.fromArray(json.center);
    this.radius = json.radius;
    return this;
  }

}

exports.BoundingSphere = BoundingSphere;
const v1$1 = new Vector3();
const edge1 = new Vector3();
const edge2 = new Vector3();
const normal = new Vector3();
const size$1 = new Vector3();
const matrix$1 = new Matrix4();
const inverse = new Matrix4();
const aabb$1 = new AABB();
/**
* Class representing a ray in 3D space.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class Ray {
  /**
  * Constructs a new ray with the given values.
  *
  * @param {Vector3} origin - The origin of the ray.
  * @param {Vector3} direction - The direction of the ray.
  */
  constructor(origin = new Vector3(), direction = new Vector3()) {
    /**
    * The origin of the ray.
    * @type {Vector3}
    */
    this.origin = origin;
    /**
    * The direction of the ray.
    * @type {Vector3}
    */

    this.direction = direction;
  }
  /**
  * Sets the given values to this ray.
  *
  * @param {Vector3} origin - The origin of the ray.
  * @param {Vector3} direction - The direction of the ray.
  * @return {Ray} A reference to this ray.
  */


  set(origin, direction) {
    this.origin = origin;
    this.direction = direction;
    return this;
  }
  /**
  * Copies all values from the given ray to this ray.
  *
  * @param {Ray} ray - The ray to copy.
  * @return {Ray} A reference to this ray.
  */


  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  /**
  * Creates a new ray and copies all values from this ray.
  *
  * @return {Ray} A new ray.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Computes a position on the ray according to the given t value
  * and stores the result in the given 3D vector. The t value has a range of
  * [0, Infinity] where 0 means the position is equal with the origin of the ray.
  *
  * @param {Number} t - A scalar value representing a position on the ray.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  at(t, result) {
    // t has to be zero or positive
    return result.copy(this.direction).multiplyScalar(t).add(this.origin);
  }
  /**
  * Performs a ray/sphere intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {BoundingSphere} sphere - A bounding sphere.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectBoundingSphere(sphere, result) {
    v1$1.subVectors(sphere.center, this.origin);
    const tca = v1$1.dot(this.direction);
    const d2 = v1$1.dot(v1$1) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2) return null;
    const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere

    const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere

    const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null

    if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
    // in order to always return an intersect point that is in front of the ray.

    if (t0 < 0) return this.at(t1, result); // else t0 is in front of the ray, so return the first collision point scaled by t0

    return this.at(t0, result);
  }
  /**
  * Performs a ray/sphere intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {BoundingSphere} sphere - A bounding sphere.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsBoundingSphere(sphere) {
    const v1 = new Vector3();
    let squaredDistanceToPoint;
    const directionDistance = v1.subVectors(sphere.center, this.origin).dot(this.direction);

    if (directionDistance < 0) {
      // sphere's center behind the ray
      squaredDistanceToPoint = this.origin.squaredDistanceTo(sphere.center);
    } else {
      v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
      squaredDistanceToPoint = v1.squaredDistanceTo(sphere.center);
    }

    return squaredDistanceToPoint <= sphere.radius * sphere.radius;
  }
  /**
  * Performs a ray/AABB intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {AABB} aabb - An AABB.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectAABB(aabb, result) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x,
          invdiry = 1 / this.direction.y,
          invdirz = 1 / this.direction.z;
    const origin = this.origin;

    if (invdirx >= 0) {
      tmin = (aabb.min.x - origin.x) * invdirx;
      tmax = (aabb.max.x - origin.x) * invdirx;
    } else {
      tmin = (aabb.max.x - origin.x) * invdirx;
      tmax = (aabb.min.x - origin.x) * invdirx;
    }

    if (invdiry >= 0) {
      tymin = (aabb.min.y - origin.y) * invdiry;
      tymax = (aabb.max.y - origin.y) * invdiry;
    } else {
      tymin = (aabb.max.y - origin.y) * invdiry;
      tymax = (aabb.min.y - origin.y) * invdiry;
    }

    if (tmin > tymax || tymin > tmax) return null; // these lines also handle the case where tmin or tmax is NaN
    // (result of 0 * Infinity). x !== x returns true if x is NaN

    if (tymin > tmin || tmin !== tmin) tmin = tymin;
    if (tymax < tmax || tmax !== tmax) tmax = tymax;

    if (invdirz >= 0) {
      tzmin = (aabb.min.z - origin.z) * invdirz;
      tzmax = (aabb.max.z - origin.z) * invdirz;
    } else {
      tzmin = (aabb.max.z - origin.z) * invdirz;
      tzmax = (aabb.min.z - origin.z) * invdirz;
    }

    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax) tmax = tzmax; // return point closest to the ray (positive side)

    if (tmax < 0) return null;
    return this.at(tmin >= 0 ? tmin : tmax, result);
  }
  /**
  * Performs a ray/AABB intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {AABB} aabb - An axis-aligned bounding box.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsAABB(aabb) {
    return this.intersectAABB(aabb, v1$1) !== null;
  }
  /**
  * Performs a ray/plane intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {Plane} plane - A plane.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectPlane(plane, result) {
    let t;
    const denominator = plane.normal.dot(this.direction);

    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        // ray is coplanar
        t = 0;
      } else {
        // ray is parallel, no intersection
        return null;
      }
    } else {
      t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    } // there is no intersection if t is negative


    return t >= 0 ? this.at(t, result) : null;
  }
  /**
  * Performs a ray/plane intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {Plane} plane - A plane.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsPlane(plane) {
    // check if the ray lies on the plane first
    const distToPoint = plane.distanceToPoint(this.origin);

    if (distToPoint === 0) {
      return true;
    }

    const denominator = plane.normal.dot(this.direction);

    if (denominator * distToPoint < 0) {
      return true;
    } // ray origin is behind the plane (and is pointing behind it)


    return false;
  }
  /**
  * Performs a ray/OBB intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {OBB} obb - An orientend bounding box.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectOBB(obb, result) {
    // the idea is to perform the intersection test in the local space
    // of the OBB.
    obb.getSize(size$1);
    aabb$1.fromCenterAndSize(v1$1.set(0, 0, 0), size$1);
    matrix$1.fromMatrix3(obb.rotation);
    matrix$1.setPosition(obb.center); // transform ray to the local space of the OBB

    localRay.copy(this).applyMatrix4(matrix$1.getInverse(inverse)); // perform ray <-> AABB intersection test

    if (localRay.intersectAABB(aabb$1, result)) {
      // transform the intersection point back to world space
      return result.applyMatrix4(matrix$1);
    } else {
      return null;
    }
  }
  /**
  * Performs a ray/OBB intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {OBB} obb - An orientend bounding box.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsOBB(obb) {
    return this.intersectOBB(obb, v1$1) !== null;
  }
  /**
  * Performs a ray/convex hull intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  * The implementation is based on "Fast Ray-Convex Polyhedron Intersection"
  * by Eric Haines, GRAPHICS GEMS II
  *
  * @param {ConvexHull} convexHull - A convex hull.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectConvexHull(convexHull, result) {
    const faces = convexHull.faces;
    let tNear = -Infinity;
    let tFar = Infinity;

    for (let i = 0, l = faces.length; i < l; i++) {
      const face = faces[i];
      const plane = face.plane;
      const vN = plane.distanceToPoint(this.origin);
      const vD = plane.normal.dot(this.direction); // if the origin is on the positive side of a plane (so the plane can "see" the origin) and
      // the ray is turned away or parallel to the plane, there is no intersection

      if (vN > 0 && vD >= 0) return null; // compute the distance from the ray’s origin to the intersection with the plane

      const t = vD !== 0 ? -vN / vD : 0; // only proceed if the distance is positive. since the ray has a direction, the intersection point
      // would lie "behind" the origin with a negative distance

      if (t <= 0) continue; // now categorized plane as front-facing or back-facing

      if (vD > 0) {
        //  plane faces away from the ray, so this plane is a back-face
        tFar = Math.min(t, tFar);
      } else {
        // front-face
        tNear = Math.max(t, tNear);
      }

      if (tNear > tFar) {
        // if tNear ever is greater than tFar, the ray must miss the convex hull
        return null;
      }
    } // evaluate intersection point
    // always try tNear first since its the closer intersection point


    if (tNear !== -Infinity) {
      this.at(tNear, result);
    } else {
      this.at(tFar, result);
    }

    return result;
  }
  /**
  * Performs a ray/convex hull intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {ConvexHull} convexHull - A convex hull.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsConvexHull(convexHull) {
    return this.intersectConvexHull(convexHull, v1$1) !== null;
  }
  /**
  * Performs a ray/triangle intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {Triangle} triangle - A triangle.
  * @param {Boolean} backfaceCulling - Whether back face culling is active or not.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectTriangle(triangle, backfaceCulling, result) {
    // reference: https://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
    const a = triangle.a;
    const b = triangle.b;
    const c = triangle.c;
    edge1.subVectors(b, a);
    edge2.subVectors(c, a);
    normal.crossVectors(edge1, edge2);
    let DdN = this.direction.dot(normal);
    let sign;

    if (DdN > 0) {
      if (backfaceCulling) return null;
      sign = 1;
    } else if (DdN < 0) {
      sign = -1;
      DdN = -DdN;
    } else {
      return null;
    }

    v1$1.subVectors(this.origin, a);
    const DdQxE2 = sign * this.direction.dot(edge2.crossVectors(v1$1, edge2)); // b1 < 0, no intersection

    if (DdQxE2 < 0) {
      return null;
    }

    const DdE1xQ = sign * this.direction.dot(edge1.cross(v1$1)); // b2 < 0, no intersection

    if (DdE1xQ < 0) {
      return null;
    } // b1 + b2 > 1, no intersection


    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    } // line intersects triangle, check if ray does


    const QdN = -sign * v1$1.dot(normal); // t < 0, no intersection

    if (QdN < 0) {
      return null;
    } // ray intersects triangle


    return this.at(QdN / DdN, result);
  }
  /**
  * Performs a ray/BVH intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {BVH} bvh - A BVH.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectBVH(bvh, result) {
    return bvh.root.intersectRay(this, result);
  }
  /**
  * Performs a ray/BVH intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {BVH} bvh - A BVH.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsBVH(bvh) {
    return bvh.root.intersectsRay(this);
  }
  /**
  * Transforms this ray by the given 4x4 matrix.
  *
  * @param {Matrix4} m - The 4x4 matrix.
  * @return {Ray} A reference to this ray.
  */


  applyMatrix4(m) {
    this.origin.applyMatrix4(m);
    this.direction.transformDirection(m);
    return this;
  }
  /**
  * Returns true if the given ray is deep equal with this ray.
  *
  * @param {Ray} ray - The ray to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }

}

exports.Ray = Ray;
const localRay = new Ray();
const inverse$1 = new Matrix4();
const localPositionOfObstacle = new Vector3();
const localPositionOfClosestObstacle = new Vector3();
const intersectionPoint = new Vector3();
const boundingSphere = new BoundingSphere();
const ray = new Ray(new Vector3(0, 0, 0), new Vector3(0, 0, 1));
/**
* This steering behavior produces a force so a vehicle avoids obstacles lying in its path.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @author {@link https://github.com/robp94|robp94}
* @augments SteeringBehavior
*/

class ObstacleAvoidanceBehavior extends SteeringBehavior {
  /**
  * Constructs a new obstacle avoidance behavior.
  *
  * @param {Array<GameEntity>} obstacles - An Array with obstacle of type {@link GameEntity}.
  */
  constructor(obstacles = new Array()) {
    super();
    /**
    * An Array with obstacle of type {@link GameEntity}.
    * @type {Array<GameEntity>}
    */

    this.obstacles = obstacles;
    /**
    * This factor determines how much the vehicle decelerates if an intersection occurs.
    * @type {Number}
    * @default 0.2
    */

    this.brakingWeight = 0.2;
    /**
    * Minimum length of the detection box used for intersection tests.
    * @type {Number}
    * @default 4
    */

    this.dBoxMinLength = 4; //
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const obstacles = this.obstacles; // this will keep track of the closest intersecting obstacle

    let closestObstacle = null; // this will be used to track the distance to the closest obstacle

    let distanceToClosestObstacle = Infinity; // the detection box length is proportional to the agent's velocity

    const dBoxLength = this.dBoxMinLength + vehicle.getSpeed() / vehicle.maxSpeed * this.dBoxMinLength;
    vehicle.worldMatrix.getInverse(inverse$1);

    for (let i = 0, l = obstacles.length; i < l; i++) {
      const obstacle = obstacles[i];
      if (obstacle === vehicle) continue; // calculate this obstacle's position in local space of the vehicle

      localPositionOfObstacle.copy(obstacle.position).applyMatrix4(inverse$1); // if the local position has a positive z value then it must lay behind the agent.
      // besides the absolute z value must be smaller than the length of the detection box

      if (localPositionOfObstacle.z > 0 && Math.abs(localPositionOfObstacle.z) < dBoxLength) {
        // if the distance from the x axis to the object's position is less
        // than its radius + half the width of the detection box then there is a potential intersection
        const expandedRadius = obstacle.boundingRadius + vehicle.boundingRadius;

        if (Math.abs(localPositionOfObstacle.x) < expandedRadius) {
          // do intersection test in local space of the vehicle
          boundingSphere.center.copy(localPositionOfObstacle);
          boundingSphere.radius = expandedRadius;
          ray.intersectBoundingSphere(boundingSphere, intersectionPoint); // compare distances

          if (intersectionPoint.z < distanceToClosestObstacle) {
            // save new minimum distance
            distanceToClosestObstacle = intersectionPoint.z; // save closest obstacle

            closestObstacle = obstacle; // save local position for force calculation

            localPositionOfClosestObstacle.copy(localPositionOfObstacle);
          }
        }
      }
    } // if we have found an intersecting obstacle, calculate a steering force away from it


    if (closestObstacle !== null) {
      // the closer the agent is to an object, the stronger the steering force should be
      const multiplier = 1 + (dBoxLength - localPositionOfClosestObstacle.z) / dBoxLength; // calculate the lateral force

      force.x = (closestObstacle.boundingRadius - localPositionOfClosestObstacle.x) * multiplier; // apply a braking force proportional to the obstacles distance from the vehicle

      force.z = (closestObstacle.boundingRadius - localPositionOfClosestObstacle.z) * this.brakingWeight; // finally, convert the steering vector from local to world space (just apply the rotation)

      force.applyRotation(vehicle.rotation);
    }

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.obstacles = new Array();
    json.brakingWeight = this.brakingWeight;
    json.dBoxMinLength = this.dBoxMinLength; // obstacles

    for (let i = 0, l = this.obstacles.length; i < l; i++) {
      json.obstacles.push(this.obstacles[i].uuid);
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {ObstacleAvoidanceBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.obstacles = json.obstacles;
    this.brakingWeight = json.brakingWeight;
    this.dBoxMinLength = json.dBoxMinLength;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {ObstacleAvoidanceBehavior} A reference to this behavior.
  */


  resolveReferences(entities) {
    const obstacles = this.obstacles;

    for (let i = 0, l = obstacles.length; i < l; i++) {
      obstacles[i] = entities.get(obstacles[i]);
    }
  }

}

exports.ObstacleAvoidanceBehavior = ObstacleAvoidanceBehavior;
const offsetWorld = new Vector3();
const toOffset = new Vector3();
const newLeaderVelocity = new Vector3();
const predictedPosition$1 = new Vector3();
/**
* This steering behavior produces a force that keeps a vehicle at a specified offset from a leader vehicle.
* Useful for creating formations.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class OffsetPursuitBehavior extends SteeringBehavior {
  /**
  * Constructs a new offset pursuit behavior.
  *
  * @param {Vehicle} leader - The leader vehicle.
  * @param {Vector3} offset - The offset from the leader.
  */
  constructor(leader = null, offset = new Vector3()) {
    super();
    /**
    * The leader vehicle.
    * @type {?Vehicle}
    * @default null
    */

    this.leader = leader;
    /**
    * The offset from the leader.
    * @type {Vector3}
    */

    this.offset = offset; // internal behaviors

    this._arrive = new ArriveBehavior();
    this._arrive.deceleration = 1.5;
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const leader = this.leader;
    const offset = this.offset; // calculate the offset's position in world space

    offsetWorld.copy(offset).applyMatrix4(leader.worldMatrix); // calculate the vector that points from the vehicle to the offset position

    toOffset.subVectors(offsetWorld, vehicle.position); // the lookahead time is proportional to the distance between the leader
    // and the pursuer and is inversely proportional to the sum of both
    // agent's velocities

    const lookAheadTime = toOffset.length() / (vehicle.maxSpeed + leader.getSpeed()); // calculate new velocity and predicted future position

    newLeaderVelocity.copy(leader.velocity).multiplyScalar(lookAheadTime);
    predictedPosition$1.addVectors(offsetWorld, newLeaderVelocity); // now arrive at the predicted future position of the offset

    this._arrive.target = predictedPosition$1;

    this._arrive.calculate(vehicle, force);

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.leader = this.leader ? this.leader.uuid : null;
    json.offset = this.offset;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {OffsetPursuitBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.leader = json.leader;
    this.offset = json.offset;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {OffsetPursuitBehavior} A reference to this behavior.
  */


  resolveReferences(entities) {
    this.leader = entities.get(this.leader) || null;
  }

}

exports.OffsetPursuitBehavior = OffsetPursuitBehavior;
const displacement$3 = new Vector3();
const vehicleDirection = new Vector3();
const evaderDirection = new Vector3();
const newEvaderVelocity = new Vector3();
const predictedPosition$2 = new Vector3();
/**
* This steering behavior is useful when an agent is required to intercept a moving agent.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class PursuitBehavior extends SteeringBehavior {
  /**
  * Constructs a new pursuit behavior.
  *
  * @param {MovingEntity} evader - The agent to pursue.
  * @param {Number} predictionFactor - This factor determines how far the vehicle predicts the movement of the evader.
  */
  constructor(evader = null, predictionFactor = 1) {
    super();
    /**
    * The agent to pursue.
    * @type {?MovingEntity}
    * @default null
    */

    this.evader = evader;
    /**
    * This factor determines how far the vehicle predicts the movement of the evader.
    * @type {Number}
    * @default 1
    */

    this.predictionFactor = predictionFactor; // internal behaviors

    this._seek = new SeekBehavior();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const evader = this.evader;
    displacement$3.subVectors(evader.position, vehicle.position); // 1. if the evader is ahead and facing the agent then we can just seek for the evader's current position

    vehicle.getDirection(vehicleDirection);
    evader.getDirection(evaderDirection); // first condition: evader must be in front of the pursuer

    const evaderAhead = displacement$3.dot(vehicleDirection) > 0; // second condition: evader must almost directly facing the agent

    const facing = vehicleDirection.dot(evaderDirection) < -0.95;

    if (evaderAhead === true && facing === true) {
      this._seek.target = evader.position;

      this._seek.calculate(vehicle, force);

      return force;
    } // 2. evader not considered ahead so we predict where the evader will be
    // the lookahead time is proportional to the distance between the evader
    // and the pursuer. and is inversely proportional to the sum of the
    // agent's velocities


    let lookAheadTime = displacement$3.length() / (vehicle.maxSpeed + evader.getSpeed());
    lookAheadTime *= this.predictionFactor; // tweak the magnitude of the prediction
    // calculate new velocity and predicted future position

    newEvaderVelocity.copy(evader.velocity).multiplyScalar(lookAheadTime);
    predictedPosition$2.addVectors(evader.position, newEvaderVelocity); // now seek to the predicted future position of the evader

    this._seek.target = predictedPosition$2;

    this._seek.calculate(vehicle, force);

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.evader = this.evader ? this.evader.uuid : null;
    json.predictionFactor = this.predictionFactor;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {PursuitBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.evader = json.evader;
    this.predictionFactor = json.predictionFactor;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {PursuitBehavior} A reference to this behavior.
  */


  resolveReferences(entities) {
    this.evader = entities.get(this.evader) || null;
  }

}

exports.PursuitBehavior = PursuitBehavior;
const toAgent = new Vector3();
/**
* This steering produces a force that steers a vehicle away from those in its neighborhood region.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class SeparationBehavior extends SteeringBehavior {
  /**
  * Constructs a new separation behavior.
  */
  constructor() {
    super();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const neighbors = vehicle.neighbors;

    for (let i = 0, l = neighbors.length; i < l; i++) {
      const neighbor = neighbors[i];
      toAgent.subVectors(vehicle.position, neighbor.position);
      let length = toAgent.length(); // handle zero length if both vehicles have the same position

      if (length === 0) length = 0.0001; // scale the force inversely proportional to the agents distance from its neighbor

      toAgent.normalize().divideScalar(length);
      force.add(toAgent);
    }

    return force;
  }

}

exports.SeparationBehavior = SeparationBehavior;
const targetWorld = new Vector3();
const randomDisplacement = new Vector3();
/**
* This steering behavior produces a steering force that will give the
* impression of a random walk through the agent’s environment. The behavior only
* produces a 2D force (XZ).
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class WanderBehavior extends SteeringBehavior {
  /**
  * Constructs a new wander behavior.
  *
  * @param {Number} radius - The radius of the wander circle for the wander behavior.
  * @param {Number} distance - The distance the wander circle is projected in front of the agent.
  * @param {Number} jitter - The maximum amount of displacement along the sphere each frame.
  */
  constructor(radius = 1, distance = 5, jitter = 5) {
    super();
    /**
    * The radius of the constraining circle for the wander behavior.
    * @type {Number}
    * @default 1
    */

    this.radius = radius;
    /**
    * The distance the wander sphere is projected in front of the agent.
    * @type {Number}
    * @default 5
    */

    this.distance = distance;
    /**
    * The maximum amount of displacement along the sphere each frame.
    * @type {Number}
    * @default 5
    */

    this.jitter = jitter;
    this._targetLocal = new Vector3();
    generateRandomPointOnCircle(this.radius, this._targetLocal);
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force, delta) {
    // this behavior is dependent on the update rate, so this line must be
    // included when using time independent frame rate
    const jitterThisTimeSlice = this.jitter * delta; // prepare random vector

    randomDisplacement.x = MathUtils.randFloat(-1, 1) * jitterThisTimeSlice;
    randomDisplacement.z = MathUtils.randFloat(-1, 1) * jitterThisTimeSlice; // add random vector to the target's position

    this._targetLocal.add(randomDisplacement); // re-project this new vector back onto a unit sphere


    this._targetLocal.normalize(); // increase the length of the vector to the same as the radius of the wander sphere


    this._targetLocal.multiplyScalar(this.radius); // move the target into a position wanderDist in front of the agent


    targetWorld.copy(this._targetLocal);
    targetWorld.z += this.distance; // project the target into world space

    targetWorld.applyMatrix4(vehicle.worldMatrix); // and steer towards it

    force.subVectors(targetWorld, vehicle.position);
    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.radius = this.radius;
    json.distance = this.distance;
    json.jitter = this.jitter;
    json._targetLocal = this._targetLocal.toArray(new Array());
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {WanderBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.radius = json.radius;
    this.distance = json.distance;
    this.jitter = json.jitter;

    this._targetLocal.fromArray(json._targetLocal);

    return this;
  }

} //


exports.WanderBehavior = WanderBehavior;

function generateRandomPointOnCircle(radius, target) {
  const theta = Math.random() * Math.PI * 2;
  target.x = radius * Math.cos(theta);
  target.z = radius * Math.sin(theta);
}

const force = new Vector3();
/**
* This class is responsible for managing the steering of a single vehicle. The steering manager
* can manage multiple steering behaviors and combine their produced force into a single one used
* by the vehicle.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class SteeringManager {
  /**
  * Constructs a new steering manager.
  *
  * @param {Vehicle} vehicle - The vehicle that owns this steering manager.
  */
  constructor(vehicle) {
    /**
    * The vehicle that owns this steering manager.
    * @type {Vehicle}
    */
    this.vehicle = vehicle;
    /**
    * A list of all steering behaviors.
    * @type {Array<SteeringBehavior>}
    * @readonly
    */

    this.behaviors = new Array();
    this._steeringForce = new Vector3(); // the calculated steering force per simulation step

    this._typesMap = new Map(); // used for deserialization of custom behaviors
  }
  /**
  * Adds the given steering behavior to this steering manager.
  *
  * @param {SteeringBehavior} behavior - The steering behavior to add.
  * @return {SteeringManager} A reference to this steering manager.
  */


  add(behavior) {
    this.behaviors.push(behavior);
    return this;
  }
  /**
  * Removes the given steering behavior from this steering manager.
  *
  * @param {SteeringBehavior} behavior - The steering behavior to remove.
  * @return {SteeringManager} A reference to this steering manager.
  */


  remove(behavior) {
    const index = this.behaviors.indexOf(behavior);
    this.behaviors.splice(index, 1);
    return this;
  }
  /**
  * Clears the internal state of this steering manager.
  *
  * @return {SteeringManager} A reference to this steering manager.
  */


  clear() {
    this.behaviors.length = 0;
    return this;
  }
  /**
  * Calculates the steering forces for all active steering behaviors and
  * combines it into a single result force. This method is called in
  * {@link Vehicle#update}.
  *
  * @param {Number} delta - The time delta.
  * @param {Vector3} result - The force/result vector.
  * @return {Vector3} The force/result vector.
  */


  calculate(delta, result) {
    this._calculateByOrder(delta);

    return result.copy(this._steeringForce);
  } // this method calculates how much of its max steering force the vehicle has
  // left to apply and then applies that amount of the force to add


  _accumulate(forceToAdd) {
    // calculate how much steering force the vehicle has used so far
    const magnitudeSoFar = this._steeringForce.length(); // calculate how much steering force remains to be used by this vehicle


    const magnitudeRemaining = this.vehicle.maxForce - magnitudeSoFar; // return false if there is no more force left to use

    if (magnitudeRemaining <= 0) return false; // calculate the magnitude of the force we want to add

    const magnitudeToAdd = forceToAdd.length(); // restrict the magnitude of forceToAdd, so we don't exceed the max force of the vehicle

    if (magnitudeToAdd > magnitudeRemaining) {
      forceToAdd.normalize().multiplyScalar(magnitudeRemaining);
    } // add force


    this._steeringForce.add(forceToAdd);

    return true;
  }

  _calculateByOrder(delta) {
    const behaviors = this.behaviors; // reset steering force

    this._steeringForce.set(0, 0, 0); // calculate for each behavior the respective force


    for (let i = 0, l = behaviors.length; i < l; i++) {
      const behavior = behaviors[i];

      if (behavior.active === true) {
        force.set(0, 0, 0);
        behavior.calculate(this.vehicle, force, delta);
        force.multiplyScalar(behavior.weight);
        if (this._accumulate(force) === false) return;
      }
    }
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const data = {
      type: 'SteeringManager',
      behaviors: new Array()
    };
    const behaviors = this.behaviors;

    for (let i = 0, l = behaviors.length; i < l; i++) {
      const behavior = behaviors[i];
      data.behaviors.push(behavior.toJSON());
    }

    return data;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {SteeringManager} A reference to this steering manager.
  */


  fromJSON(json) {
    this.clear();
    const behaviorsJSON = json.behaviors;

    for (let i = 0, l = behaviorsJSON.length; i < l; i++) {
      const behaviorJSON = behaviorsJSON[i];
      const type = behaviorJSON.type;
      let behavior;

      switch (type) {
        case 'SteeringBehavior':
          behavior = new SteeringBehavior().fromJSON(behaviorJSON);
          break;

        case 'AlignmentBehavior':
          behavior = new AlignmentBehavior().fromJSON(behaviorJSON);
          break;

        case 'ArriveBehavior':
          behavior = new ArriveBehavior().fromJSON(behaviorJSON);
          break;

        case 'CohesionBehavior':
          behavior = new CohesionBehavior().fromJSON(behaviorJSON);
          break;

        case 'EvadeBehavior':
          behavior = new EvadeBehavior().fromJSON(behaviorJSON);
          break;

        case 'FleeBehavior':
          behavior = new FleeBehavior().fromJSON(behaviorJSON);
          break;

        case 'FollowPathBehavior':
          behavior = new FollowPathBehavior().fromJSON(behaviorJSON);
          break;

        case 'InterposeBehavior':
          behavior = new InterposeBehavior().fromJSON(behaviorJSON);
          break;

        case 'ObstacleAvoidanceBehavior':
          behavior = new ObstacleAvoidanceBehavior().fromJSON(behaviorJSON);
          break;

        case 'OffsetPursuitBehavior':
          behavior = new OffsetPursuitBehavior().fromJSON(behaviorJSON);
          break;

        case 'PursuitBehavior':
          behavior = new PursuitBehavior().fromJSON(behaviorJSON);
          break;

        case 'SeekBehavior':
          behavior = new SeekBehavior().fromJSON(behaviorJSON);
          break;

        case 'SeparationBehavior':
          behavior = new SeparationBehavior().fromJSON(behaviorJSON);
          break;

        case 'WanderBehavior':
          behavior = new WanderBehavior().fromJSON(behaviorJSON);
          break;

        default:
          // handle custom type
          const ctor = this._typesMap.get(type);

          if (ctor !== undefined) {
            behavior = new ctor().fromJSON(behaviorJSON);
          } else {
            Logger.warn('YUKA.SteeringManager: Unsupported steering behavior type:', type);
            continue;
          }

      }

      this.add(behavior);
    }

    return this;
  }
  /**
   * Registers a custom type for deserialization. When calling {@link SteeringManager#fromJSON}
   * the steering manager is able to pick the correct constructor in order to create custom
   * steering behavior.
   *
   * @param {String} type - The name of the behavior type.
   * @param {Function} constructor - The constructor function.
   * @return {SteeringManager} A reference to this steering manager.
   */


  registerType(type, constructor) {
    this._typesMap.set(type, constructor);

    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {SteeringManager} A reference to this steering manager.
  */


  resolveReferences(entities) {
    const behaviors = this.behaviors;

    for (let i = 0, l = behaviors.length; i < l; i++) {
      const behavior = behaviors[i];
      behavior.resolveReferences(entities);
    }

    return this;
  }

}
/**
* This class can be used to smooth the result of a vector calculation. One use case
* is the smoothing of the velocity vector of game entities in order to avoid a shaky
* movements due to conflicting forces.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @author {@link https://github.com/robp94|robp94}
*/


exports.SteeringManager = SteeringManager;

class Smoother {
  /**
  * Constructs a new smoother.
  *
  * @param {Number} count - The amount of samples the smoother will use to average a vector.
  */
  constructor(count = 10) {
    /**
    * The amount of samples the smoother will use to average a vector.
    * @type {Number}
    * @default 10
    */
    this.count = count;
    this._history = new Array(); // this holds the history

    this._slot = 0; // the current sample slot
    // initialize history with Vector3s

    for (let i = 0; i < this.count; i++) {
      this._history[i] = new Vector3();
    }
  }
  /**
  * Calculates for the given value a smooth average.
  *
  * @param {Vector3} value - The value to smooth.
  * @param {Vector3} average - The calculated average.
  * @return {Vector3} The calculated average.
  */


  calculate(value, average) {
    // ensure, average is a zero vector
    average.set(0, 0, 0); // make sure the slot index wraps around

    if (this._slot === this.count) {
      this._slot = 0;
    } // overwrite the oldest value with the newest


    this._history[this._slot].copy(value); // increase slot index


    this._slot++; // now calculate the average of the history array

    for (let i = 0; i < this.count; i++) {
      average.add(this._history[i]);
    }

    average.divideScalar(this.count);
    return average;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const data = {
      type: this.constructor.name,
      count: this.count,
      _history: new Array(),
      _slot: this._slot
    }; // history

    const history = this._history;

    for (let i = 0, l = history.length; i < l; i++) {
      const value = history[i];

      data._history.push(value.toArray(new Array()));
    }

    return data;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Smoother} A reference to this smoother.
  */


  fromJSON(json) {
    this.count = json.count;
    this._slot = json._slot; // history

    const historyJSON = json._history;
    this._history.length = 0;

    for (let i = 0, l = historyJSON.length; i < l; i++) {
      const valueJSON = historyJSON[i];

      this._history.push(new Vector3().fromArray(valueJSON));
    }

    return this;
  }

}

exports.Smoother = Smoother;
const steeringForce = new Vector3();
const displacement$4 = new Vector3();
const acceleration = new Vector3();
const target$1 = new Vector3();
const velocitySmooth = new Vector3();
/**
* This type of game entity implements a special type of locomotion, the so called
* *Vehicle Model*. The class uses basic physical metrics in order to implement a
* realistic movement.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @author {@link https://github.com/robp94|robp94}
* @augments MovingEntity
*/

class Vehicle extends MovingEntity {
  /**
  * Constructs a new vehicle.
  */
  constructor() {
    super();
    /**
    * The mass of the vehicle in kilogram.
    * @type {Number}
    * @default 1
    */

    this.mass = 1;
    /**
    * The maximum force this entity can produce to power itself.
    * @type {Number}
    * @default 100
    */

    this.maxForce = 100;
    /**
    * The steering manager of this vehicle.
    * @type {SteeringManager}
    */

    this.steering = new SteeringManager(this);
    /**
    * An optional smoother to avoid shakiness due to conflicting steering behaviors.
    * @type {?Smoother}
    * @default null
    */

    this.smoother = null;
  }
  /**
  * This method is responsible for updating the position based on the force produced
  * by the internal steering manager.
  *
  * @param {Number} delta - The time delta.
  * @return {Vehicle} A reference to this vehicle.
  */


  update(delta) {
    // calculate steering force
    this.steering.calculate(delta, steeringForce); // acceleration = force / mass

    acceleration.copy(steeringForce).divideScalar(this.mass); // update velocity

    this.velocity.add(acceleration.multiplyScalar(delta)); // make sure vehicle does not exceed maximum speed

    if (this.getSpeedSquared() > this.maxSpeed * this.maxSpeed) {
      this.velocity.normalize();
      this.velocity.multiplyScalar(this.maxSpeed);
    } // calculate displacement


    displacement$4.copy(this.velocity).multiplyScalar(delta); // calculate target position

    target$1.copy(this.position).add(displacement$4); // update the orientation if the vehicle has a non zero velocity

    if (this.updateOrientation === true && this.smoother === null && this.getSpeedSquared() > 0.00000001) {
      this.lookAt(target$1);
    } // update position


    this.position.copy(target$1); // if smoothing is enabled, the orientation (not the position!) of the vehicle is
    // changed based on a post-processed velocity vector

    if (this.updateOrientation === true && this.smoother !== null) {
      this.smoother.calculate(this.velocity, velocitySmooth);
      displacement$4.copy(velocitySmooth).multiplyScalar(delta);
      target$1.copy(this.position).add(displacement$4);
      this.lookAt(target$1);
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.mass = this.mass;
    json.maxForce = this.maxForce;
    json.steering = this.steering.toJSON();
    json.smoother = this.smoother ? this.smoother.toJSON() : null;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Vehicle} A reference to this vehicle.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.mass = json.mass;
    this.maxForce = json.maxForce;
    this.steering = new SteeringManager(this).fromJSON(json.steering);
    this.smoother = json.smoother ? new Smoother().fromJSON(json.smoother) : null;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {Vehicle} A reference to this vehicle.
  */


  resolveReferences(entities) {
    super.resolveReferences(entities);
    this.steering.resolveReferences(entities);
  }

}
/**
* Base class for representing trigger regions. It's a predefine region in 3D space,
* owned by one or more triggers. The shape of the trigger can be arbitrary.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Vehicle = Vehicle;

class TriggerRegion {
  /**
  * Returns true if the bounding volume of the given game entity touches/intersects
  * the trigger region. Must be implemented by all concrete trigger regions.
  *
  * @param {GameEntity} entity - The entity to test.
  * @return {Boolean} Whether this trigger touches the given game entity or not.
  */
  touching() {
    return false;
  }
  /**
  * Updates this trigger region. Must be implemented by all concrete trigger regions.
  *
  * @param {Trigger} trigger - The trigger that owns this region.
  * @return {TriggerRegion} A reference to this trigger region.
  */


  update() {
    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {TriggerRegion} A reference to this trigger region.
  */


  fromJSON() {
    return this;
  }

}

exports.TriggerRegion = TriggerRegion;
const boundingSphereEntity = new BoundingSphere();
const center$1 = new Vector3();
/**
* Class for representing a rectangular trigger region as an AABB.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments TriggerRegion
*/

class RectangularTriggerRegion extends TriggerRegion {
  /**
  * Constructs a new rectangular trigger region with the given values.
  *
  * @param {Vector3} size - The size of the region.
  */
  constructor(size = new Vector3()) {
    super();
    /**
    * The size of the region.
    * @type {Vector3}
    */

    this.size = size;
    this._aabb = new AABB();
  }
  /**
  * Returns true if the bounding volume of the given game entity touches/intersects
  * the trigger region.
  *
  * @param {GameEntity} entity - The entity to test.
  * @return {Boolean} Whether this trigger touches the given game entity or not.
  */


  touching(entity) {
    boundingSphereEntity.set(entity.position, entity.boundingRadius);
    return this._aabb.intersectsBoundingSphere(boundingSphereEntity);
  }
  /**
  * Updates this trigger region.
  *
  * @param {Trigger} trigger - The trigger that owns this region.
  * @return {RectangularTriggerRegion} A reference to this trigger region.
  */


  update(trigger) {
    trigger.getWorldPosition(center$1);

    this._aabb.fromCenterAndSize(center$1, this.size);

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.size = this.size.toArray(new Array());
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {RectangularTriggerRegion} A reference to this trigger region.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.size.fromArray(json.size);
    return this;
  }

}

exports.RectangularTriggerRegion = RectangularTriggerRegion;
const boundingSphereEntity$1 = new BoundingSphere();
/**
* Class for representing a spherical trigger region as a bounding sphere.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments TriggerRegion
*/

class SphericalTriggerRegion extends TriggerRegion {
  /**
  * Constructs a new spherical trigger region.
  *
  * @param {Number} radius - The radius of the region.
  */
  constructor(radius = 0) {
    super();
    /**
    * The radius of the region.
    * @type {Number}
    * @default 0
    */

    this.radius = radius; //

    this._boundingSphere = new BoundingSphere();
  }
  /**
  * Returns true if the bounding volume of the given game entity touches/intersects
  * the trigger region.
  *
  * @param {GameEntity} entity - The entity to test.
  * @return {Boolean} Whether this trigger touches the given game entity or not.
  */


  touching(entity) {
    entity.getWorldPosition(boundingSphereEntity$1.center);
    boundingSphereEntity$1.radius = entity.boundingRadius;
    return this._boundingSphere.intersectsBoundingSphere(boundingSphereEntity$1);
  }
  /**
  * Updates this trigger region.
  *
  * @param {Trigger} trigger - The trigger that owns this region.
  * @return {SphericalTriggerRegion} A reference to this trigger region.
  */


  update(trigger) {
    trigger.getWorldPosition(this._boundingSphere.center);
    this._boundingSphere.radius = this.radius;
    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.radius = this.radius;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {SphericalTriggerRegion} A reference to this trigger region.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.radius = json.radius;
    return this;
  }

}
/**
* Base class for representing triggers. A trigger generates an action if a game entity
* touches its trigger region, a predefine area in 3D space.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments GameEntity
*/


exports.SphericalTriggerRegion = SphericalTriggerRegion;

class Trigger extends GameEntity {
  /**
  * Constructs a new trigger with the given values.
  *
  * @param {TriggerRegion} region - The region of the trigger.
  */
  constructor(region = new TriggerRegion()) {
    super();
    /**
    * The region of the trigger.
    * @type {TriggerRegion}
    */

    this.region = region; //

    this.canActivateTrigger = false; // triggers can't activate other triggers by default

    this._typesMap = new Map(); // used for deserialization of custom trigger regions
  }
  /**
  * This method is called per simulation step for all game entities. If the game
  * entity touches the region of the trigger, the respective action is executed.
  *
  * @param {GameEntity} entity - The entity to test
  * @return {Trigger} A reference to this trigger.
  */


  check(entity) {
    if (this.region.touching(entity) === true) {
      this.execute(entity);
    }

    return this;
  }
  /**
  * This method is called when the trigger should execute its action.
  * Must be implemented by all concrete triggers.
  *
  * @param {GameEntity} entity - The entity that touched the trigger region.
  * @return {Trigger} A reference to this trigger.
  */


  execute() {}
  /**
  * Updates the region of this trigger. Called by the {@link EntityManager} per
  * simulation step.
  *
  * @return {Trigger} A reference to this trigger.
  */


  updateRegion() {
    this.region.update(this);
    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.region = this.region.toJSON();
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Trigger} A reference to this trigger.
  */


  fromJSON(json) {
    super.fromJSON(json);
    const regionJSON = json.region;
    let type = regionJSON.type;

    switch (type) {
      case 'TriggerRegion':
        this.region = new TriggerRegion().fromJSON(regionJSON);
        break;

      case 'RectangularTriggerRegion':
        this.region = new RectangularTriggerRegion().fromJSON(regionJSON);
        break;

      case 'SphericalTriggerRegion':
        this.region = new SphericalTriggerRegion().fromJSON(regionJSON);
        break;

      default:
        // handle custom type
        const ctor = this._typesMap.get(type);

        if (ctor !== undefined) {
          this.region = new ctor().fromJSON(regionJSON);
        } else {
          Logger.warn('YUKA.Trigger: Unsupported trigger region type:', regionJSON.type);
        }

    }

    return this;
  }
  /**
   * Registers a custom type for deserialization. When calling {@link Trigger#fromJSON}
   * the trigger is able to pick the correct constructor in order to create custom
   * trigger regions.
   *
   * @param {String} type - The name of the trigger region.
   * @param {Function} constructor - The constructor function.
   * @return {Trigger} A reference to this trigger.
   */


  registerType(type, constructor) {
    this._typesMap.set(type, constructor);

    return this;
  }

}

exports.Trigger = Trigger;
const candidates = new Array();
/**
* This class is used for managing all central objects of a game like
* game entities.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class EntityManager {
  /**
  * Constructs a new entity manager.
  */
  constructor() {
    /**
    * A list of {@link GameEntity game entities}.
    * @type {Array<GameEntity>}
    * @readonly
    */
    this.entities = new Array();
    /**
    * A reference to a spatial index.
    * @type {?CellSpacePartitioning}
    * @default null
    */

    this.spatialIndex = null;
    this._triggers = new Array(); // used to manage triggers

    this._indexMap = new Map(); // used by spatial indices

    this._typesMap = new Map(); // used for deserialization of custom entities

    this._messageDispatcher = new MessageDispatcher();
  }
  /**
  * Adds a game entity to this entity manager.
  *
  * @param {GameEntity} entity - The game entity to add.
  * @return {EntityManager} A reference to this entity manager.
  */


  add(entity) {
    this.entities.push(entity);
    entity.manager = this;
    return this;
  }
  /**
  * Removes a game entity from this entity manager.
  *
  * @param {GameEntity} entity - The game entity to remove.
  * @return {EntityManager} A reference to this entity manager.
  */


  remove(entity) {
    const index = this.entities.indexOf(entity);
    this.entities.splice(index, 1);
    entity.manager = null;
    return this;
  }
  /**
  * Clears the internal state of this entity manager.
  *
  * @return {EntityManager} A reference to this entity manager.
  */


  clear() {
    this.entities.length = 0;

    this._messageDispatcher.clear();

    return this;
  }
  /**
  * Returns an entity by the given name. If no game entity is found, *null*
  * is returned. This method should be used once (e.g. at {@link GameEntity#start})
  * and the result should be cached for later use.
  *
  * @param {String} name - The name of the game entity.
  * @return {GameEntity} The found game entity.
  */


  getEntityByName(name) {
    const entities = this.entities;

    for (let i = 0, l = entities.length; i < l; i++) {
      const entity = entities[i];
      if (entity.name === name) return entity;
    }

    return null;
  }
  /**
  * The central update method of this entity manager. Updates all
  * game entities and delayed messages.
  *
  * @param {Number} delta - The time delta.
  * @return {EntityManager} A reference to this entity manager.
  */


  update(delta) {
    const entities = this.entities;
    const triggers = this._triggers; // update entities

    for (let i = entities.length - 1; i >= 0; i--) {
      const entity = entities[i];
      this.updateEntity(entity, delta);
    } // process triggers (this is done after the entity update to ensure
    // up-to-date world matries)


    for (let i = triggers.length - 1; i >= 0; i--) {
      const trigger = triggers[i];
      this.processTrigger(trigger);
    }

    this._triggers.length = 0; // reset
    // handle messaging

    this._messageDispatcher.dispatchDelayedMessages(delta);

    return this;
  }
  /**
  * Updates a single entity.
  *
  * @param {GameEntity} entity - The game entity to update.
  * @param {Number} delta - The time delta.
  * @return {EntityManager} A reference to this entity manager.
  */


  updateEntity(entity, delta) {
    if (entity.active === true) {
      this.updateNeighborhood(entity); // check if start() should be executed

      if (entity._started === false) {
        entity.start();
        entity._started = true;
      } // update entity


      entity.update(delta); // update children

      const children = entity.children;

      for (let i = children.length - 1; i >= 0; i--) {
        const child = children[i];
        this.updateEntity(child, delta);
      } // if the entity is a trigger, save the reference for further processing


      if (entity instanceof Trigger) {
        this._triggers.push(entity);
      } // update spatial index


      if (this.spatialIndex !== null) {
        let currentIndex = this._indexMap.get(entity) || -1;
        currentIndex = this.spatialIndex.updateEntity(entity, currentIndex);

        this._indexMap.set(entity, currentIndex);
      } // update render component


      const renderComponent = entity._renderComponent;
      const renderComponentCallback = entity._renderComponentCallback;

      if (renderComponent !== null && renderComponentCallback !== null) {
        renderComponentCallback(entity, renderComponent);
      }
    }

    return this;
  }
  /**
  * Updates the neighborhood of a single game entity.
  *
  * @param {GameEntity} entity - The game entity to update.
  * @return {EntityManager} A reference to this entity manager.
  */


  updateNeighborhood(entity) {
    if (entity.updateNeighborhood === true) {
      entity.neighbors.length = 0; // determine candidates

      if (this.spatialIndex !== null) {
        this.spatialIndex.query(entity.position, entity.neighborhoodRadius, candidates);
      } else {
        // worst case runtime complexity with O(n²)
        candidates.length = 0;
        candidates.push(...this.entities);
      } // verify if candidates are within the predefined range


      const neighborhoodRadiusSq = entity.neighborhoodRadius * entity.neighborhoodRadius;

      for (let i = 0, l = candidates.length; i < l; i++) {
        const candidate = candidates[i];

        if (entity !== candidate && candidate.active === true) {
          const distanceSq = entity.position.squaredDistanceTo(candidate.position);

          if (distanceSq <= neighborhoodRadiusSq) {
            entity.neighbors.push(candidate);
          }
        }
      }
    }

    return this;
  }
  /**
  * Processes a single trigger.
  *
  * @param {Trigger} trigger - The trigger to process.
  * @return {EntityManager} A reference to this entity manager.
  */


  processTrigger(trigger) {
    trigger.updateRegion(); // ensure its region is up-to-date

    const entities = this.entities;

    for (let i = entities.length - 1; i >= 0; i--) {
      const entity = entities[i];

      if (trigger !== entity && entity.active === true && entity.canActivateTrigger === true) {
        trigger.check(entity);
      }
    }

    return this;
  }
  /**
  * Interface for game entities so they can send messages to other game entities.
  *
  * @param {GameEntity} sender - The sender.
  * @param {GameEntity} receiver - The receiver.
  * @param {String} message - The actual message.
  * @param {Number} delay - A time value in millisecond used to delay the message dispatching.
  * @param {Object} data - An object for custom data.
  * @return {EntityManager} A reference to this entity manager.
  */


  sendMessage(sender, receiver, message, delay, data) {
    this._messageDispatcher.dispatch(sender, receiver, message, delay, data);

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const data = {
      type: this.constructor.name,
      entities: new Array(),
      _messageDispatcher: this._messageDispatcher.toJSON()
    }; // entities

    function processEntity(entity) {
      data.entities.push(entity.toJSON());

      for (let i = 0, l = entity.children.length; i < l; i++) {
        processEntity(entity.children[i]);
      }
    }

    for (let i = 0, l = this.entities.length; i < l; i++) {
      // recursively process all entities
      processEntity(this.entities[i]);
    }

    return data;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {EntityManager} A reference to this entity manager.
  */


  fromJSON(json) {
    this.clear();
    const entitiesJSON = json.entities;
    const _messageDispatcherJSON = json._messageDispatcher; // entities

    const entitiesMap = new Map();

    for (let i = 0, l = entitiesJSON.length; i < l; i++) {
      const entityJSON = entitiesJSON[i];
      const type = entityJSON.type;
      let entity;

      switch (type) {
        case 'GameEntity':
          entity = new GameEntity().fromJSON(entityJSON);
          break;

        case 'MovingEntity':
          entity = new MovingEntity().fromJSON(entityJSON);
          break;

        case 'Vehicle':
          entity = new Vehicle().fromJSON(entityJSON);
          break;

        case 'Trigger':
          entity = new Trigger().fromJSON(entityJSON);
          break;

        default:
          // handle custom type
          const ctor = this._typesMap.get(type);

          if (ctor !== undefined) {
            entity = new ctor().fromJSON(entityJSON);
          } else {
            Logger.warn('YUKA.EntityManager: Unsupported entity type:', type);
            continue;
          }

      }

      entitiesMap.set(entity.uuid, entity);
      if (entity.parent === null) this.add(entity);
    } // resolve UUIDs to game entity objects


    for (let entity of entitiesMap.values()) {
      entity.resolveReferences(entitiesMap);
    } // restore delayed messages


    this._messageDispatcher.fromJSON(_messageDispatcherJSON);

    return this;
  }
  /**
  * Registers a custom type for deserialization. When calling {@link EntityManager#fromJSON}
  * the entity manager is able to pick the correct constructor in order to create custom
  * game entities.
  *
  * @param {String} type - The name of the entity type.
  * @param {Function} constructor - The constructor function.
  * @return {EntityManager} A reference to this entity manager.
  */


  registerType(type, constructor) {
    this._typesMap.set(type, constructor);

    return this;
  }

}
/**
* Other classes can inherit from this class in order to provide an
* event based API. Useful for controls development.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.EntityManager = EntityManager;

class EventDispatcher {
  /**
  * Constructs a new event dispatcher.
  */
  constructor() {
    this._events = new Map();
  }
  /**
  * Adds an event listener for the given event type.
  *
  * @param {String} type - The event type.
  * @param {Function} listener - The event listener to add.
  */


  addEventListener(type, listener) {
    const events = this._events;

    if (events.has(type) === false) {
      events.set(type, new Array());
    }

    const listeners = events.get(type);

    if (listeners.indexOf(listener) === -1) {
      listeners.push(listener);
    }
  }
  /**
  * Removes the given event listener for the given event type.
  *
  * @param {String} type - The event type.
  * @param {Function} listener - The event listener to remove.
  */


  removeEventListener(type, listener) {
    const events = this._events;
    const listeners = events.get(type);

    if (listeners !== undefined) {
      const index = listeners.indexOf(listener);
      if (index !== -1) listeners.splice(index, 1);
    }
  }
  /**
  * Returns true if the given event listener is set for the given event type.
  *
  * @param {String} type - The event type.
  * @param {Function} listener - The event listener to test.
  * @return {Boolean} Whether the given event listener is set for the given event type or not.
  */


  hasEventListener(type, listener) {
    const events = this._events;
    const listeners = events.get(type);
    return listeners !== undefined && listeners.indexOf(listener) !== -1;
  }
  /**
  * Dispatches an event to all respective event listeners.
  *
  * @param {Object} event - The event object.
  */


  dispatchEvent(event) {
    const events = this._events;
    const listeners = events.get(event.type);

    if (listeners !== undefined) {
      event.target = this;

      for (let i = 0, l = listeners.length; i < l; i++) {
        listeners[i].call(this, event);
      }
    }
  }

}

exports.EventDispatcher = EventDispatcher;
const v1$2 = new Vector3();
const v2 = new Vector3();
const d = new Vector3();
/**
* Class representing a plane in 3D space. The plane is specified in Hessian normal form.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class Plane {
  /**
  * Constructs a new plane with the given values.
  *
  * @param {Vector3} normal - The normal vector of the plane.
  * @param {Number} constant - The distance of the plane from the origin.
  */
  constructor(normal = new Vector3(0, 0, 1), constant = 0) {
    /**
    * The normal vector of the plane.
    * @type {Vector3}
    */
    this.normal = normal;
    /**
    * The distance of the plane from the origin.
    * @type {Number}
    */

    this.constant = constant;
  }
  /**
  * Sets the given values to this plane.
  *
  * @param {Vector3} normal - The normal vector of the plane.
  * @param {Number} constant - The distance of the plane from the origin.
  * @return {Plane} A reference to this plane.
  */


  set(normal, constant) {
    this.normal = normal;
    this.constant = constant;
    return this;
  }
  /**
  * Copies all values from the given plane to this plane.
  *
  * @param {Plane} plane - The plane to copy.
  * @return {Plane} A reference to this plane.
  */


  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  /**
  * Creates a new plane and copies all values from this plane.
  *
  * @return {Plane} A new plane.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Computes the signed distance from the given 3D vector to this plane.
  * The sign of the distance indicates the half-space in which the points lies.
  * Zero means the point lies on the plane.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Number} The signed distance.
  */


  distanceToPoint(point) {
    return this.normal.dot(point) + this.constant;
  }
  /**
  * Sets the values of the plane from the given normal vector and a coplanar point.
  *
  * @param {Vector3} normal - A normalized vector.
  * @param {Vector3} point - A coplanar point.
  * @return {Plane} A reference to this plane.
  */


  fromNormalAndCoplanarPoint(normal, point) {
    this.normal.copy(normal);
    this.constant = -point.dot(this.normal);
    return this;
  }
  /**
  * Sets the values of the plane from three given coplanar points.
  *
  * @param {Vector3} a - A coplanar point.
  * @param {Vector3} b - A coplanar point.
  * @param {Vector3} c - A coplanar point.
  * @return {Plane} A reference to this plane.
  */


  fromCoplanarPoints(a, b, c) {
    v1$2.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();
    this.fromNormalAndCoplanarPoint(v1$2, a);
    return this;
  }
  /**
  * Performs a plane/plane intersection test and stores the intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * Reference: Intersection of Two Planes in Real-Time Collision Detection
  * by Christer Ericson (chapter 5.4.4)
  *
  * @param {Plane} plane - The plane to test.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectPlane(plane, result) {
    // compute direction of intersection line
    d.crossVectors(this.normal, plane.normal); // if d is zero, the planes are parallel (and separated)
    // or coincident, so they’re not considered intersecting

    const denom = d.dot(d);
    if (denom === 0) return null; // compute point on intersection line

    v1$2.copy(plane.normal).multiplyScalar(this.constant);
    v2.copy(this.normal).multiplyScalar(plane.constant);
    result.crossVectors(v1$2.sub(v2), d).divideScalar(denom);
    return result;
  }
  /**
  * Returns true if the given plane intersects this plane.
  *
  * @param {Plane} plane - The plane to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsPlane(plane) {
    const d = this.normal.dot(plane.normal);
    return Math.abs(d) !== 1;
  }
  /**
  * Projects the given point onto the plane. The result is written
  * to the given vector.
  *
  * @param {Vector3} point - The point to project onto the plane.
  * @param {Vector3} result - The projected point.
  * @return {Vector3} The projected point.
  */


  projectPoint(point, result) {
    v1$2.copy(this.normal).multiplyScalar(this.distanceToPoint(point));
    result.subVectors(point, v1$2);
    return result;
  }
  /**
  * Returns true if the given plane is deep equal with this plane.
  *
  * @param {Plane} plane - The plane to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }

}

exports.Plane = Plane;
const boundingSphere$1 = new BoundingSphere();
const triangle = {
  a: new Vector3(),
  b: new Vector3(),
  c: new Vector3()
};
const rayLocal = new Ray();
const plane = new Plane();
const inverseMatrix = new Matrix4();
const closestIntersectionPoint = new Vector3();
const closestTriangle = {
  a: new Vector3(),
  b: new Vector3(),
  c: new Vector3()
};
/**
* Class for representing a polygon mesh. The faces consist of triangles.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class MeshGeometry {
  /**
  * Constructs a new mesh geometry.
  *
  * @param {TypedArray} vertices - The vertex buffer (Float32Array).
  * @param {TypedArray} indices - The index buffer (Uint16Array/Uint32Array).
  */
  constructor(vertices = new Float32Array(), indices = null) {
    /**
    * The vertex buffer.
    * @type {Float32Array}
    */
    this.vertices = vertices;
    /**
    * The index buffer.
    * @type {?(Uint16Array|?Uint32Array)}
    * @default null
    */

    this.indices = indices;
    /**
    *  Whether back face culling is active or not. Only relevant for raycasting.
    * @type {Boolean}
    */

    this.backfaceCulling = true;
    /**
    * An AABB enclosing the geometry.
    * @type {AABB}
    */

    this.aabb = new AABB();
    /**
    * A bounding sphere enclosing the geometry.
    * @type {BoundingSphere}
    */

    this.boundingSphere = new BoundingSphere();
    this.computeBoundingVolume();
  }
  /**
  * Computes the internal bounding volumes of this mesh geometry.
  *
  * @return {MeshGeometry} A reference to this mesh geometry.
  */


  computeBoundingVolume() {
    const vertices = this.vertices;
    const vertex = new Vector3();
    const aabb = this.aabb;
    const boundingSphere = this.boundingSphere; // compute AABB

    aabb.min.set(Infinity, Infinity, Infinity);
    aabb.max.set(-Infinity, -Infinity, -Infinity);

    for (let i = 0, l = vertices.length; i < l; i += 3) {
      vertex.x = vertices[i];
      vertex.y = vertices[i + 1];
      vertex.z = vertices[i + 2];
      aabb.expand(vertex);
    } // compute bounding sphere


    aabb.getCenter(boundingSphere.center);
    boundingSphere.radius = boundingSphere.center.distanceTo(aabb.max);
    return this;
  }
  /**
   * Performs a ray intersection test with the geometry of the obstacle and stores
   * the intersection point in the given result vector. If no intersection is detected,
   * *null* is returned.
   *
   * @param {Ray} ray - The ray to test.
   * @param {Matrix4} worldMatrix - The matrix that transforms the geometry to world space.
   * @param {Boolean} closest - Whether the closest intersection point should be computed or not.
   * @param {Vector3} intersectionPoint - The intersection point.
   * @param {Vector3} normal - The normal vector of the respective triangle.
   * @return {Vector3} The result vector.
   */


  intersectRay(ray, worldMatrix, closest, intersectionPoint, normal = null) {
    // check bounding sphere first in world space
    boundingSphere$1.copy(this.boundingSphere).applyMatrix4(worldMatrix);

    if (ray.intersectsBoundingSphere(boundingSphere$1)) {
      // transform the ray into the local space of the obstacle
      worldMatrix.getInverse(inverseMatrix);
      rayLocal.copy(ray).applyMatrix4(inverseMatrix); // check AABB in local space since its more expensive to convert an AABB to world space than a bounding sphere

      if (rayLocal.intersectsAABB(this.aabb)) {
        // now perform more expensive test with all triangles of the geometry
        const vertices = this.vertices;
        const indices = this.indices;
        let minDistance = Infinity;
        let found = false;

        if (indices === null) {
          // non-indexed geometry
          for (let i = 0, l = vertices.length; i < l; i += 9) {
            triangle.a.set(vertices[i], vertices[i + 1], vertices[i + 2]);
            triangle.b.set(vertices[i + 3], vertices[i + 4], vertices[i + 5]);
            triangle.c.set(vertices[i + 6], vertices[i + 7], vertices[i + 8]);

            if (rayLocal.intersectTriangle(triangle, this.backfaceCulling, intersectionPoint) !== null) {
              if (closest) {
                const distance = intersectionPoint.squaredDistanceTo(rayLocal.origin);

                if (distance < minDistance) {
                  minDistance = distance;
                  closestIntersectionPoint.copy(intersectionPoint);
                  closestTriangle.a.copy(triangle.a);
                  closestTriangle.b.copy(triangle.b);
                  closestTriangle.c.copy(triangle.c);
                  found = true;
                }
              } else {
                found = true;
                break;
              }
            }
          }
        } else {
          // indexed geometry
          for (let i = 0, l = indices.length; i < l; i += 3) {
            const a = indices[i];
            const b = indices[i + 1];
            const c = indices[i + 2];
            const stride = 3;
            triangle.a.set(vertices[a * stride], vertices[a * stride + 1], vertices[a * stride + 2]);
            triangle.b.set(vertices[b * stride], vertices[b * stride + 1], vertices[b * stride + 2]);
            triangle.c.set(vertices[c * stride], vertices[c * stride + 1], vertices[c * stride + 2]);

            if (rayLocal.intersectTriangle(triangle, this.backfaceCulling, intersectionPoint) !== null) {
              if (closest) {
                const distance = intersectionPoint.squaredDistanceTo(rayLocal.origin);

                if (distance < minDistance) {
                  minDistance = distance;
                  closestIntersectionPoint.copy(intersectionPoint);
                  closestTriangle.a.copy(triangle.a);
                  closestTriangle.b.copy(triangle.b);
                  closestTriangle.c.copy(triangle.c);
                  found = true;
                }
              } else {
                found = true;
                break;
              }
            }
          }
        } // intersection was found


        if (found) {
          if (closest) {
            // restore closest intersection point and triangle
            intersectionPoint.copy(closestIntersectionPoint);
            triangle.a.copy(closestTriangle.a);
            triangle.b.copy(closestTriangle.b);
            triangle.c.copy(closestTriangle.c);
          } // transform intersection point back to world space


          intersectionPoint.applyMatrix4(worldMatrix); // compute normal of triangle in world space if necessary

          if (normal !== null) {
            plane.fromCoplanarPoints(triangle.a, triangle.b, triangle.c);
            normal.copy(plane.normal);
            normal.transformDirection(worldMatrix);
          }

          return intersectionPoint;
        }
      }
    }

    return null;
  }
  /**
   * Returns a new geometry without containing indices. If the geometry is already
   * non-indexed, the method performs no changes.
   *
   * @return {MeshGeometry} The new non-indexed geometry.
   */


  toTriangleSoup() {
    const indices = this.indices;

    if (indices) {
      const vertices = this.vertices;
      const newVertices = new Float32Array(indices.length * 3);

      for (let i = 0, l = indices.length; i < l; i++) {
        const a = indices[i];
        const stride = 3;
        newVertices[i * stride] = vertices[a * stride];
        newVertices[i * stride + 1] = vertices[a * stride + 1];
        newVertices[i * stride + 2] = vertices[a * stride + 2];
      }

      return new MeshGeometry(newVertices);
    } else {
      return this;
    }
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      type: this.constructor.name
    };
    json.indices = {
      type: this.indices ? this.indices.constructor.name : 'null',
      data: this.indices ? Array.from(this.indices) : null
    };
    json.vertices = Array.from(this.vertices);
    json.backfaceCulling = this.backfaceCulling;
    json.aabb = this.aabb.toJSON();
    json.boundingSphere = this.boundingSphere.toJSON();
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {MeshGeometry} A reference to this mesh geometry.
  */


  fromJSON(json) {
    this.aabb = new AABB().fromJSON(json.aabb);
    this.boundingSphere = new BoundingSphere().fromJSON(json.boundingSphere);
    this.backfaceCulling = json.backfaceCulling;
    this.vertices = new Float32Array(json.vertices);

    switch (json.indices.type) {
      case 'Uint16Array':
        this.indices = new Uint16Array(json.indices.data);
        break;

      case 'Uint32Array':
        this.indices = new Uint32Array(json.indices.data);
        break;

      case 'null':
        this.indices = null;
        break;
    }

    return this;
  }

}
/**
* Class for representing a timer.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.MeshGeometry = MeshGeometry;

class Time {
  /**
  * Constructs a new time object.
  */
  constructor() {
    this._previousTime = 0;
    this._currentTime = 0;
    this._delta = 0;
    this._elapsed = 0;
    this._timescale = 1;
    this._useFixedDelta = false;
    this._fixedDelta = 16.67; // ms, corresponds to approx. 60 FPS
    // use Page Visibility API to avoid large time delta values

    this._usePageVisibilityAPI = typeof document !== 'undefined' && document.hidden !== undefined;

    if (this._usePageVisibilityAPI === true) {
      this._pageVisibilityHandler = handleVisibilityChange.bind(this);
      document.addEventListener('visibilitychange', this._pageVisibilityHandler, false);
    }
  }
  /**
  * Disables the usage of a fixed delta value.
  *
  * @return {Time} A reference to this time object.
  */


  disableFixedDelta() {
    this._useFixedDelta = false;
    return this;
  }
  /**
  * Frees all internal resources.
  *
  * @return {Time} A reference to this time object.
  */


  dispose() {
    if (this._usePageVisibilityAPI === true) {
      document.removeEventListener('visibilitychange', this._pageVisibilityHandler);
    }

    return this;
  }
  /**
  * Enables the usage of a fixed delta value. Can be useful for debugging and testing.
  *
  * @return {Time} A reference to this time object.
  */


  enableFixedDelta() {
    this._useFixedDelta = true;
    return this;
  }
  /**
  * Returns the delta time in seconds. Represents the completion time in seconds since
  * the last simulation step.
  *
  * @return {Number} The delta time in seconds.
  */


  getDelta() {
    return this._delta / 1000;
  }
  /**
  * Returns the elapsed time in seconds. It's the accumulated
  * value of all previous time deltas.
  *
  * @return {Number} The elapsed time in seconds.
  */


  getElapsed() {
    return this._elapsed / 1000;
  }
  /**
  * Returns the fixed delta time in seconds.
  *
  * @return {Number} The fixed delta time in seconds.
  */


  getFixedDelta() {
    return this._fixedDelta / 1000;
  }
  /**
  * Returns the timescale value.
  *
  * @return {Number} The timescale value.
  */


  getTimescale() {
    return this._timescale;
  }
  /**
  * Resets this time object.
  *
  * @return {Time} A reference to this time object.
  */


  reset() {
    this._currentTime = this._now();
    return this;
  }
  /**
  * Sets a fixed time delta value.
  *
  * @param {Number} fixedDelta - Fixed time delta in seconds.
  * @return {Time} A reference to this time object.
  */


  setFixedDelta(fixedDelta) {
    this._fixedDelta = fixedDelta * 1000;
    return this;
  }
  /**
  * Sets a timescale value. This value represents the scale at which time passes.
  * Can be used for slow down or  accelerate the simulation.
  *
  * @param {Number} timescale - The timescale value.
  * @return {Time} A reference to this time object.
  */


  setTimescale(timescale) {
    this._timescale = timescale;
    return this;
  }
  /**
  * Updates the internal state of this time object.
  *
  * @return {Time} A reference to this time object.
  */


  update() {
    if (this._useFixedDelta === true) {
      this._delta = this._fixedDelta;
    } else {
      this._previousTime = this._currentTime;
      this._currentTime = this._now();
      this._delta = this._currentTime - this._previousTime;
    }

    this._delta *= this._timescale;
    this._elapsed += this._delta; // _elapsed is the accumulation of all previous deltas

    return this;
  } // private


  _now() {
    return (typeof performance === 'undefined' ? Date : performance).now();
  }

} //


exports.Time = Time;

function handleVisibilityChange() {
  if (document.hidden === false) this.reset();
}
/**
* Not all components of an AI system need to be updated in each simulation step.
* This class can be used to control the update process by defining how many updates
* should be executed per second.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


class Regulator {
  /**
  * Constructs a new regulator.
  *
  * @param {Number} updateFrequency - The amount of updates per second.
  */
  constructor(updateFrequency = 0) {
    /**
    * The amount of updates per second.
    * @type {Number}
    * @default 0
    */
    this.updateFrequency = updateFrequency;
    this._time = new Time();
    this._nextUpdateTime = 0;
  }
  /**
  * Returns true if it is time to allow the next update.
  *
  * @return {Boolean} Whether an update is allowed or not.
  */


  ready() {
    this._time.update();

    const elapsedTime = this._time.getElapsed();

    if (elapsedTime >= this._nextUpdateTime) {
      this._nextUpdateTime = elapsedTime + 1 / this.updateFrequency;
      return true;
    }

    return false;
  }

}
/**
* Base class for representing a state in context of State-driven agent design.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Regulator = Regulator;

class State {
  /**
  * This method is called once during a state transition when the {@link StateMachine} makes
  * this state active.
  *
  * @param {GameEntity} owner - The game entity that represents the execution context of this state.
  */
  enter() {}
  /**
  * This method is called per simulation step if this state is active.
  *
  * @param {GameEntity} owner - The game entity that represents the execution context of this state.
  */


  execute() {}
  /**
  * This method is called once during a state transition when the {@link StateMachine} makes
  * this state inactive.
  *
  * @param {GameEntity} owner - The game entity that represents the execution context of this state.
  */


  exit() {}
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {}
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {State} A reference to this state.
  */


  fromJSON() {}
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {State} A reference to this state.
  */


  resolveReferences() {}
  /**
  * This method is called when messaging between game entities occurs.
  *
  * @param {GameEntity} owner - The game entity that represents the execution context of this state.
  * @param {Telegram} telegram - A data structure containing the actual message.
  * @return {Boolean} Whether the message was processed or not.
  */


  onMessage() {
    return false;
  }

}
/**
* Finite state machine (FSM) for implementing State-driven agent design.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.State = State;

class StateMachine {
  /**
  * Constructs a new state machine with the given values.
  *
  * @param {GameEntity} owner - The owner of this state machine.
  */
  constructor(owner = null) {
    /**
    * The game entity that owns this state machine.
    * @type {?GameEntity}
    * @default null
    */
    this.owner = owner;
    /**
    * The current state of the game entity.
    * @type {?State}
    * @default null
    */

    this.currentState = null;
    /**
    * The previous state of the game entity.
    * @type {?State}
    * @default null
    */

    this.previousState = null; // a reference to the last state the agent was in

    /**
    * This state logic is called every time the state machine is updated.
    * @type {?State}
    * @default null
    */

    this.globalState = null;
    /**
    * A map with all states of the state machine.
    * @type {Map<String,State>}
    */

    this.states = new Map(); //

    this._typesMap = new Map();
  }
  /**
  * Updates the internal state of the FSM. Usually called by {@link GameEntity#update}.
  *
  * @return {StateMachine} A reference to this state machine.
  */


  update() {
    if (this.globalState !== null) {
      this.globalState.execute(this.owner);
    }

    if (this.currentState !== null) {
      this.currentState.execute(this.owner);
    }

    return this;
  }
  /**
  * Adds a new state with the given ID to the state machine.
  *
  * @param {String} id - The ID of the state.
  * @param {State} state - The state.
  * @return {StateMachine} A reference to this state machine.
  */


  add(id, state) {
    if (state instanceof State) {
      this.states.set(id, state);
    } else {
      Logger.warn('YUKA.StateMachine: .add() needs a parameter of type "YUKA.State".');
    }

    return this;
  }
  /**
  * Removes a state via its ID from the state machine.
  *
  * @param {String} id - The ID of the state.
  * @return {StateMachine} A reference to this state machine.
  */


  remove(id) {
    this.states.delete(id);
    return this;
  }
  /**
  * Returns the state for the given ID.
  *
  * @param {String} id - The ID of the state.
  * @return {State} The state for the given ID.
  */


  get(id) {
    return this.states.get(id);
  }
  /**
  * Performs a state change to the state defined by its ID.
  *
  * @param {String} id - The ID of the state.
  * @return {StateMachine} A reference to this state machine.
  */


  changeTo(id) {
    const state = this.get(id);

    this._change(state);

    return this;
  }
  /**
  * Returns to the previous state.
  *
  * @return {StateMachine} A reference to this state machine.
  */


  revert() {
    this._change(this.previousState);

    return this;
  }
  /**
  * Returns true if this FSM is in the given state.
  *
  * @return {Boolean} Whether this FSM is in the given state or not.
  */


  in(id) {
    const state = this.get(id);
    return state === this.currentState;
  }
  /**
  * Tries to dispatch the massage to the current or global state and returns true
  * if the message was processed successfully.
  *
  * @param {Telegram} telegram - The telegram with the message data.
  * @return {Boolean} Whether the message was processed or not.
  */


  handleMessage(telegram) {
    // first see, if the current state is valid and that it can handle the message
    if (this.currentState !== null && this.currentState.onMessage(this.owner, telegram) === true) {
      return true;
    } // if not, and if a global state has been implemented, send the message to the global state


    if (this.globalState !== null && this.globalState.onMessage(this.owner, telegram) === true) {
      return true;
    }

    return false;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      owner: this.owner.uuid,
      currentState: null,
      previousState: null,
      globalState: null,
      states: new Array()
    };
    const statesMap = new Map(); // states

    for (let [id, state] of this.states) {
      json.states.push({
        type: state.constructor.name,
        id: id,
        state: state.toJSON()
      });
      statesMap.set(state, id);
    }

    json.currentState = statesMap.get(this.currentState) || null;
    json.previousState = statesMap.get(this.previousState) || null;
    json.globalState = statesMap.get(this.globalState) || null;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {StateMachine} A reference to this state machine.
  */


  fromJSON(json) {
    this.owner = json.owner; //

    const statesJSON = json.states;

    for (let i = 0, l = statesJSON.length; i < l; i++) {
      const stateJSON = statesJSON[i];
      const type = stateJSON.type;

      const ctor = this._typesMap.get(type);

      if (ctor !== undefined) {
        const id = stateJSON.id;
        const state = new ctor().fromJSON(stateJSON.state);
        this.add(id, state);
      } else {
        Logger.warn('YUKA.StateMachine: Unsupported state type:', type);
        continue;
      }
    } //


    this.currentState = json.currentState !== null ? this.get(json.currentState) || null : null;
    this.previousState = json.previousState !== null ? this.get(json.previousState) || null : null;
    this.globalState = json.globalState !== null ? this.get(json.globalState) || null : null;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {StateMachine} A reference to this state machine.
  */


  resolveReferences(entities) {
    this.owner = entities.get(this.owner) || null;

    for (let state of this.states.values()) {
      state.resolveReferences(entities);
    }

    return this;
  }
  /**
  * Registers a custom type for deserialization. When calling {@link StateMachine#fromJSON}
  * the state machine is able to pick the correct constructor in order to create custom states.
  *
  * @param {String} type - The name of the state type.
  * @param {Function} constructor - The constructor function.
  * @return {StateMachine} A reference to this state machine.
  */


  registerType(type, constructor) {
    this._typesMap.set(type, constructor);

    return this;
  } //


  _change(state) {
    this.previousState = this.currentState;

    if (this.currentState !== null) {
      this.currentState.exit(this.owner);
    }

    this.currentState = state;
    this.currentState.enter(this.owner);
  }

}
/**
* Base class for representing a term in a {@link FuzzyRule}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.StateMachine = StateMachine;

class FuzzyTerm {
  /**
  * Clears the degree of membership value.
  *
  * @return {FuzzyTerm} A reference to this term.
  */
  clearDegreeOfMembership() {}
  /**
  * Returns the degree of membership.
  *
  * @return {Number} Degree of membership.
  */


  getDegreeOfMembership() {}
  /**
  * Updates the degree of membership by the given value. This method is used when
  * the term is part of a fuzzy rule's consequent.
  *
  * @param {Number} value - The value used to update the degree of membership.
  * @return {FuzzyTerm} A reference to this term.
  */


  updateDegreeOfMembership() {}
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name
    };
  }

}
/**
* Base class for representing more complex fuzzy terms based on the
* composite design pattern.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzyTerm
*/


exports.FuzzyTerm = FuzzyTerm;

class FuzzyCompositeTerm extends FuzzyTerm {
  /**
  * Constructs a new fuzzy composite term with the given values.
  *
  * @param {Array<FuzzyTerm>} terms - An arbitrary amount of fuzzy terms.
  */
  constructor(terms = new Array()) {
    super();
    /**
    * List of fuzzy terms.
    * @type {Array<FuzzyTerm>}
    */

    this.terms = terms;
  }
  /**
  * Clears the degree of membership value.
  *
  * @return {FuzzyCompositeTerm} A reference to this term.
  */


  clearDegreeOfMembership() {
    const terms = this.terms;

    for (let i = 0, l = terms.length; i < l; i++) {
      terms[i].clearDegreeOfMembership();
    }

    return this;
  }
  /**
  * Updates the degree of membership by the given value. This method is used when
  * the term is part of a fuzzy rule's consequent.
  *
  * @param {Number} value - The value used to update the degree of membership.
  * @return {FuzzyCompositeTerm} A reference to this term.
  */


  updateDegreeOfMembership(value) {
    const terms = this.terms;

    for (let i = 0, l = terms.length; i < l; i++) {
      terms[i].updateDegreeOfMembership(value);
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.terms = new Array();

    for (let i = 0, l = this.terms.length; i < l; i++) {
      const term = this.terms[i];

      if (term instanceof FuzzyCompositeTerm) {
        json.terms.push(term.toJSON());
      } else {
        json.terms.push(term.uuid);
      }
    }

    return json;
  }

}
/**
* Class for representing an AND operator. Can be used to construct
* fuzzy rules.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzyCompositeTerm
*/


exports.FuzzyCompositeTerm = FuzzyCompositeTerm;

class FuzzyAND extends FuzzyCompositeTerm {
  /**
  * Constructs a new fuzzy AND operator with the given values. The constructor
  * accepts and arbitrary amount of fuzzy terms.
  */
  constructor() {
    const terms = Array.from(arguments);
    super(terms);
  }
  /**
  * Returns the degree of membership. The AND operator returns the minimum
  * degree of membership of the sets it is operating on.
  *
  * @return {Number} Degree of membership.
  */


  getDegreeOfMembership() {
    const terms = this.terms;
    let minDOM = Infinity;

    for (let i = 0, l = terms.length; i < l; i++) {
      const term = terms[i];
      const currentDOM = term.getDegreeOfMembership();
      if (currentDOM < minDOM) minDOM = currentDOM;
    }

    return minDOM;
  }

}
/**
* Hedges are special unary operators that can be employed to modify the meaning
* of a fuzzy set. The FAIRLY fuzzy hedge widens the membership function.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzyCompositeTerm
*/


exports.FuzzyAND = FuzzyAND;

class FuzzyFAIRLY extends FuzzyCompositeTerm {
  /**
  * Constructs a new fuzzy FAIRLY hedge with the given values.
  *
  * @param {FuzzyTerm} fuzzyTerm - The fuzzy term this hedge is working on.
  */
  constructor(fuzzyTerm = null) {
    const terms = fuzzyTerm !== null ? [fuzzyTerm] : new Array();
    super(terms);
  } // FuzzyTerm API

  /**
  * Clears the degree of membership value.
  *
  * @return {FuzzyFAIRLY} A reference to this fuzzy hedge.
  */


  clearDegreeOfMembership() {
    const fuzzyTerm = this.terms[0];
    fuzzyTerm.clearDegreeOfMembership();
    return this;
  }
  /**
  * Returns the degree of membership.
  *
  * @return {Number} Degree of membership.
  */


  getDegreeOfMembership() {
    const fuzzyTerm = this.terms[0];
    const dom = fuzzyTerm.getDegreeOfMembership();
    return Math.sqrt(dom);
  }
  /**
  * Updates the degree of membership by the given value.
  *
  * @return {FuzzyFAIRLY} A reference to this fuzzy hedge.
  */


  updateDegreeOfMembership(value) {
    const fuzzyTerm = this.terms[0];
    fuzzyTerm.updateDegreeOfMembership(Math.sqrt(value));
    return this;
  }

}
/**
* Class for representing an OR operator. Can be used to construct
* fuzzy rules.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzyCompositeTerm
*/


exports.FuzzyFAIRLY = FuzzyFAIRLY;

class FuzzyOR extends FuzzyCompositeTerm {
  /**
  * Constructs a new fuzzy AND operator with the given values. The constructor
  * accepts and arbitrary amount of fuzzy terms.
  */
  constructor() {
    const terms = Array.from(arguments);
    super(terms);
  }
  /**
  * Returns the degree of membership. The AND operator returns the maximum
  * degree of membership of the sets it is operating on.
  *
  * @return {Number} Degree of membership.
  */


  getDegreeOfMembership() {
    const terms = this.terms;
    let maxDOM = -Infinity;

    for (let i = 0, l = terms.length; i < l; i++) {
      const term = terms[i];
      const currentDOM = term.getDegreeOfMembership();
      if (currentDOM > maxDOM) maxDOM = currentDOM;
    }

    return maxDOM;
  }

}
/**
* Hedges are special unary operators that can be employed to modify the meaning
* of a fuzzy set. The FAIRLY fuzzy hedge widens the membership function.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzyCompositeTerm
*/


exports.FuzzyOR = FuzzyOR;

class FuzzyVERY extends FuzzyCompositeTerm {
  /**
  * Constructs a new fuzzy VERY hedge with the given values.
  *
  * @param {FuzzyTerm} fuzzyTerm - The fuzzy term this hedge is working on.
  */
  constructor(fuzzyTerm = null) {
    const terms = fuzzyTerm !== null ? [fuzzyTerm] : new Array();
    super(terms);
  } // FuzzyTerm API

  /**
  * Clears the degree of membership value.
  *
  * @return {FuzzyVERY} A reference to this fuzzy hedge.
  */


  clearDegreeOfMembership() {
    const fuzzyTerm = this.terms[0];
    fuzzyTerm.clearDegreeOfMembership();
    return this;
  }
  /**
  * Returns the degree of membership.
  *
  * @return {Number} Degree of membership.
  */


  getDegreeOfMembership() {
    const fuzzyTerm = this.terms[0];
    const dom = fuzzyTerm.getDegreeOfMembership();
    return dom * dom;
  }
  /**
  * Updates the degree of membership by the given value.
  *
  * @return {FuzzyVERY} A reference to this fuzzy hedge.
  */


  updateDegreeOfMembership(value) {
    const fuzzyTerm = this.terms[0];
    fuzzyTerm.updateDegreeOfMembership(value * value);
    return this;
  }

}
/**
* Base class for fuzzy sets. This type of sets are defined by a membership function
* which can be any arbitrary shape but are typically triangular or trapezoidal. They define
* a gradual transition from regions completely outside the set to regions completely
* within the set, thereby enabling a value to have partial membership to a set.
*
* This class is derived from {@link FuzzyTerm} so it can be directly used in fuzzy rules.
* According to the composite design pattern, a fuzzy set can be considered as an atomic fuzzy term.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzyTerm
*/


exports.FuzzyVERY = FuzzyVERY;

class FuzzySet extends FuzzyTerm {
  /**
  * Constructs a new fuzzy set with the given values.
  *
  * @param {Number} representativeValue - The maximum of the set's membership function.
  */
  constructor(representativeValue = 0) {
    super();
    /**
    * Represents the degree of membership to this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.degreeOfMembership = 0;
    /**
    * The maximum of the set's membership function. For instance, if
    * the set is triangular then this will be the peak point of the triangular.
    * If the set has a plateau then this value will be the mid point of the
    * plateau. Used to avoid runtime calculations.
    * @type {Number}
    * @default 0
    */

    this.representativeValue = representativeValue;
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = 0;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = 0; //

    this._uuid = null;
  }
  /**
  * Unique ID, primarily used in context of serialization/deserialization.
  * @type {String}
  * @readonly
  */


  get uuid() {
    if (this._uuid === null) {
      this._uuid = MathUtils.generateUUID();
    }

    return this._uuid;
  }
  /**
  * Computes the degree of membership for the given value. Notice that this method
  * does not set {@link FuzzySet#degreeOfMembership} since other classes use it in
  * order to calculate intermediate degree of membership values. This method be
  * implemented by all concrete fuzzy set classes.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership() {} // FuzzyTerm API

  /**
  * Clears the degree of membership value.
  *
  * @return {FuzzySet} A reference to this fuzzy set.
  */


  clearDegreeOfMembership() {
    this.degreeOfMembership = 0;
    return this;
  }
  /**
  * Returns the degree of membership.
  *
  * @return {Number} Degree of membership.
  */


  getDegreeOfMembership() {
    return this.degreeOfMembership;
  }
  /**
  * Updates the degree of membership by the given value. This method is used when
  * the set is part of a fuzzy rule's consequent.
  *
  * @return {FuzzySet} A reference to this fuzzy set.
  */


  updateDegreeOfMembership(value) {
    // update the degree of membership if the given value is greater than the
    // existing one
    if (value > this.degreeOfMembership) this.degreeOfMembership = value;
    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.degreeOfMembership = this.degreeOfMembership;
    json.representativeValue = this.representativeValue;
    json.left = this.left;
    json.right = this.right;
    json.uuid = this.uuid;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {FuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    this.degreeOfMembership = json.degreeOfMembership;
    this.representativeValue = json.representativeValue;
    this.left = json.left;
    this.right = json.right;
    this._uuid = json.uuid;
    return this;
  }

}
/**
* Class for representing a fuzzy set that has a s-shape membership function with
* values from highest to lowest.
*
* @author {@link https://github.com/robp94|robp94}
* @augments FuzzySet
*/


exports.FuzzySet = FuzzySet;

class LeftSCurveFuzzySet extends FuzzySet {
  /**
  * Constructs a new S-curve fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Represents the peak value of this fuzzy set.
  * @param {Number} right - Represents the right border of this fuzzy set.
  */
  constructor(left = 0, midpoint = 0, right = 0) {
    // the representative value is the midpoint of the plateau of the shoulder
    const representativeValue = (midpoint + left) / 2;
    super(representativeValue);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    const midpoint = this.midpoint;
    const left = this.left;
    const right = this.right; // find DOM if the given value is left of the center or equal to the center

    if (value >= left && value <= midpoint) {
      return 1;
    } // find DOM if the given value is right of the midpoint


    if (value > midpoint && value <= right) {
      if (value >= (midpoint + right) / 2) {
        return 2 * Math.pow((value - right) / (midpoint - right), 2);
      } else {
        //todo test
        return 1 - 2 * Math.pow((value - midpoint) / (midpoint - right), 2);
      }
    } // out of range


    return 0;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {LeftSCurveFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    return this;
  }

}
/**
* Class for representing a fuzzy set that has a left shoulder shape. The range between
* the midpoint and left border point represents the same DOM.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzySet
*/


exports.LeftSCurveFuzzySet = LeftSCurveFuzzySet;

class LeftShoulderFuzzySet extends FuzzySet {
  /**
  * Constructs a new left shoulder fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Represents the peak value of this fuzzy set.
  * @param {Number} right - Represents the right border of this fuzzy set.
  */
  constructor(left = 0, midpoint = 0, right = 0) {
    // the representative value is the midpoint of the plateau of the shoulder
    const representativeValue = (midpoint + left) / 2;
    super(representativeValue);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    const midpoint = this.midpoint;
    const left = this.left;
    const right = this.right; // find DOM if the given value is left of the center or equal to the center

    if (value >= left && value <= midpoint) {
      return 1;
    } // find DOM if the given value is right of the midpoint


    if (value > midpoint && value <= right) {
      const grad = 1 / (right - midpoint);
      return grad * (right - value);
    } // out of range


    return 0;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {LeftShoulderFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    return this;
  }

}
/**
* Class for representing a fuzzy set that has a normal distribution shape. It can be defined
* by the mean and standard deviation.
*
* @author {@link https://github.com/robp94|robp94}
* @augments FuzzySet
*/


exports.LeftShoulderFuzzySet = LeftShoulderFuzzySet;

class NormalDistFuzzySet extends FuzzySet {
  /**
  * Constructs a new triangular fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Mean or expectation of the normal distribution.
  * @param {Number} right - Represents the right border of this fuzzy set.
  * @param {Number} standardDeviation - Standard deviation of the normal distribution.
  */
  constructor(left = 0, midpoint = 0, right = 0, standardDeviation = 0) {
    super(midpoint);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
    /**
    * Represents the standard deviation of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.standardDeviation = standardDeviation; //

    this._cache = {};
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    this._updateCache();

    if (value >= this.right || value <= this.left) return 0;
    return probabilityDensity(value, this.midpoint, this._cache.variance) / this._cache.normalizationFactor;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    json.standardDeviation = this.standardDeviation;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {NormalDistFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    this.standardDeviation = json.standardDeviation;
    return this;
  } //


  _updateCache() {
    const cache = this._cache;
    const midpoint = this.midpoint;
    const standardDeviation = this.standardDeviation;

    if (midpoint !== cache.midpoint || standardDeviation !== cache.standardDeviation) {
      const variance = standardDeviation * standardDeviation;
      cache.midpoint = midpoint;
      cache.standardDeviation = standardDeviation;
      cache.variance = variance; // this value is used to ensure the DOM lies in the range of [0,1]

      cache.normalizationFactor = probabilityDensity(midpoint, midpoint, variance);
    }

    return this;
  }

} //


exports.NormalDistFuzzySet = NormalDistFuzzySet;

function probabilityDensity(x, mean, variance) {
  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-Math.pow(x - mean, 2) / (2 * variance));
}
/**
* Class for representing a fuzzy set that has a s-shape membership function with
* values from lowest to highest.
*
* @author {@link https://github.com/robp94|robp94}
* @augments FuzzySet
*/


class RightSCurveFuzzySet extends FuzzySet {
  /**
  * Constructs a new S-curve fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Represents the peak value of this fuzzy set.
  * @param {Number} right - Represents the right border of this fuzzy set.
  */
  constructor(left = 0, midpoint = 0, right = 0) {
    // the representative value is the midpoint of the plateau of the shoulder
    const representativeValue = (midpoint + right) / 2;
    super(representativeValue);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    const midpoint = this.midpoint;
    const left = this.left;
    const right = this.right; // find DOM if the given value is left of the center or equal to the center

    if (value >= left && value <= midpoint) {
      if (value <= (left + midpoint) / 2) {
        return 2 * Math.pow((value - left) / (midpoint - left), 2);
      } else {
        return 1 - 2 * Math.pow((value - midpoint) / (midpoint - left), 2);
      }
    } // find DOM if the given value is right of the midpoint


    if (value > midpoint && value <= right) {
      return 1;
    } // out of range


    return 0;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {RightSCurveFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    return this;
  }

}
/**
* Class for representing a fuzzy set that has a right shoulder shape. The range between
* the midpoint and right border point represents the same DOM.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzySet
*/


exports.RightSCurveFuzzySet = RightSCurveFuzzySet;

class RightShoulderFuzzySet extends FuzzySet {
  /**
  * Constructs a new right shoulder fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Represents the peak value of this fuzzy set.
  * @param {Number} right - Represents the right border of this fuzzy set.
  */
  constructor(left = 0, midpoint = 0, right = 0) {
    // the representative value is the midpoint of the plateau of the shoulder
    const representativeValue = (midpoint + right) / 2;
    super(representativeValue);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    const midpoint = this.midpoint;
    const left = this.left;
    const right = this.right; // find DOM if the given value is left of the center or equal to the center

    if (value >= left && value <= midpoint) {
      const grad = 1 / (midpoint - left);
      return grad * (value - left);
    } // find DOM if the given value is right of the midpoint


    if (value > midpoint && value <= right) {
      return 1;
    } // out of range


    return 0;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {RightShoulderFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    return this;
  }

}
/**
* Class for representing a fuzzy set that is a singleton. In its range, the degree of
* membership is always one.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzySet
*/


exports.RightShoulderFuzzySet = RightShoulderFuzzySet;

class SingletonFuzzySet extends FuzzySet {
  /**
  * Constructs a new singleton fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Represents the peak value of this fuzzy set.
  * @param {Number} right - Represents the right border of this fuzzy set.
  */
  constructor(left = 0, midpoint = 0, right = 0) {
    super(midpoint);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    const left = this.left;
    const right = this.right;
    return value >= left && value <= right ? 1 : 0;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {SingletonFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    return this;
  }

}
/**
* Class for representing a fuzzy set that has a triangular shape. It can be defined
* by a left point, a midpoint (peak) and a right point.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments FuzzySet
*/


exports.SingletonFuzzySet = SingletonFuzzySet;

class TriangularFuzzySet extends FuzzySet {
  /**
  * Constructs a new triangular fuzzy set with the given values.
  *
  * @param {Number} left - Represents the left border of this fuzzy set.
  * @param {Number} midpoint - Represents the peak value of this fuzzy set.
  * @param {Number} right - Represents the right border of this fuzzy set.
  */
  constructor(left = 0, midpoint = 0, right = 0) {
    super(midpoint);
    /**
    * Represents the left border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.left = left;
    /**
    * Represents the peak value of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.midpoint = midpoint;
    /**
    * Represents the right border of this fuzzy set.
    * @type {Number}
    * @default 0
    */

    this.right = right;
  }
  /**
  * Computes the degree of membership for the given value.
  *
  * @param {Number} value - The value used to calculate the degree of membership.
  * @return {Number} The degree of membership.
  */


  computeDegreeOfMembership(value) {
    const midpoint = this.midpoint;
    const left = this.left;
    const right = this.right; // find DOM if the given value is left of the center or equal to the center

    if (value >= left && value <= midpoint) {
      const grad = 1 / (midpoint - left);
      return grad * (value - left);
    } // find DOM if the given value is right of the center


    if (value > midpoint && value <= right) {
      const grad = 1 / (right - midpoint);
      return grad * (right - value);
    } // out of range


    return 0;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.midpoint = this.midpoint;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {TriangularFuzzySet} A reference to this fuzzy set.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.midpoint = json.midpoint;
    return this;
  }

}
/**
* Class for representing a fuzzy rule. Fuzzy rules are comprised of an antecedent and
* a consequent in the form: IF antecedent THEN consequent.
*
* Compared to ordinary if/else statements with discrete values, the consequent term
* of a fuzzy rule can fire to a matter of degree.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.TriangularFuzzySet = TriangularFuzzySet;

class FuzzyRule {
  /**
  * Constructs a new fuzzy rule with the given values.
  *
  * @param {FuzzyTerm} antecedent - Represents the condition of the rule.
  * @param {FuzzyTerm} consequence - Describes the consequence if the condition is satisfied.
  */
  constructor(antecedent = null, consequence = null) {
    /**
    * Represents the condition of the rule.
    * @type {?FuzzyTerm}
    * @default null
    */
    this.antecedent = antecedent;
    /**
    * Describes the consequence if the condition is satisfied.
    * @type {?FuzzyTerm}
    * @default null
    */

    this.consequence = consequence;
  }
  /**
  * Initializes the consequent term of this fuzzy rule.
  *
  * @return {FuzzyRule} A reference to this fuzzy rule.
  */


  initConsequence() {
    this.consequence.clearDegreeOfMembership();
    return this;
  }
  /**
  * Evaluates the rule and updates the degree of membership of the consequent term with
  * the degree of membership of the antecedent term.
  *
  * @return {FuzzyRule} A reference to this fuzzy rule.
  */


  evaluate() {
    this.consequence.updateDegreeOfMembership(this.antecedent.getDegreeOfMembership());
    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {};
    const antecedent = this.antecedent;
    const consequence = this.consequence;
    json.type = this.constructor.name;
    json.antecedent = antecedent instanceof FuzzyCompositeTerm ? antecedent.toJSON() : antecedent.uuid;
    json.consequence = consequence instanceof FuzzyCompositeTerm ? consequence.toJSON() : consequence.uuid;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @param {Map<String,FuzzySet>} fuzzySets - Maps fuzzy sets to UUIDs.
  * @return {FuzzyRule} A reference to this fuzzy rule.
  */


  fromJSON(json, fuzzySets) {
    function parseTerm(termJSON) {
      if (typeof termJSON === 'string') {
        // atomic term -> FuzzySet
        const uuid = termJSON;
        return fuzzySets.get(uuid) || null;
      } else {
        // composite term
        const type = termJSON.type;
        let term;

        switch (type) {
          case 'FuzzyAND':
            term = new FuzzyAND();
            break;

          case 'FuzzyOR':
            term = new FuzzyOR();
            break;

          case 'FuzzyVERY':
            term = new FuzzyVERY();
            break;

          case 'FuzzyFAIRLY':
            term = new FuzzyFAIRLY();
            break;

          default:
            Logger.error('YUKA.FuzzyRule: Unsupported operator type:', type);
            return;
        }

        const termsJSON = termJSON.terms;

        for (let i = 0, l = termsJSON.length; i < l; i++) {
          // recursively parse all subordinate terms
          term.terms.push(parseTerm(termsJSON[i]));
        }

        return term;
      }
    }

    this.antecedent = parseTerm(json.antecedent);
    this.consequence = parseTerm(json.consequence);
    return this;
  }

}
/**
* Class for representing a fuzzy linguistic variable (FLV). A FLV is the
* composition of one or more fuzzy sets to represent a concept or domain
* qualitatively. For example fuzzs sets "Dumb", "Average", and "Clever"
* are members of the fuzzy linguistic variable "IQ".
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.FuzzyRule = FuzzyRule;

class FuzzyVariable {
  /**
  * Constructs a new fuzzy linguistic variable.
  */
  constructor() {
    /**
    * An array of the fuzzy sets that comprise this FLV.
    * @type {Array<FuzzySet>}
    * @readonly
    */
    this.fuzzySets = new Array();
    /**
    * The minimum value range of this FLV. This value is
    * automatically updated when adding/removing fuzzy sets.
    * @type {Number}
    * @default Infinity
    * @readonly
    */

    this.minRange = Infinity;
    /**
    * The maximum value range of this FLV. This value is
    * automatically updated when adding/removing fuzzy sets.
    * @type {Number}
    * @default - Infinity
    * @readonly
    */

    this.maxRange = -Infinity;
  }
  /**
  * Adds the given fuzzy set to this FLV.
  *
  * @param {FuzzySet} fuzzySet - The fuzzy set to add.
  * @return {FuzzyVariable} A reference to this FLV.
  */


  add(fuzzySet) {
    this.fuzzySets.push(fuzzySet); // adjust range

    if (fuzzySet.left < this.minRange) this.minRange = fuzzySet.left;
    if (fuzzySet.right > this.maxRange) this.maxRange = fuzzySet.right;
    return this;
  }
  /**
  * Removes the given fuzzy set from this FLV.
  *
  * @param {FuzzySet} fuzzySet - The fuzzy set to remove.
  * @return {FuzzyVariable} A reference to this FLV.
  */


  remove(fuzzySet) {
    const fuzzySets = this.fuzzySets;
    const index = fuzzySets.indexOf(fuzzySet);
    fuzzySets.splice(index, 1); // iterate over all fuzzy sets to recalculate the min/max range

    this.minRange = Infinity;
    this.maxRange = -Infinity;

    for (let i = 0, l = fuzzySets.length; i < l; i++) {
      const fuzzySet = fuzzySets[i];
      if (fuzzySet.left < this.minRange) this.minRange = fuzzySet.left;
      if (fuzzySet.right > this.maxRange) this.maxRange = fuzzySet.right;
    }

    return this;
  }
  /**
  * Fuzzifies a value by calculating its degree of membership in each of
  * this variable's fuzzy sets.
  *
  * @param {Number} value - The crips value to fuzzify.
  * @return {FuzzyVariable} A reference to this FLV.
  */


  fuzzify(value) {
    if (value < this.minRange || value > this.maxRange) {
      Logger.warn('YUKA.FuzzyVariable: Value for fuzzification out of range.');
      return;
    }

    const fuzzySets = this.fuzzySets;

    for (let i = 0, l = fuzzySets.length; i < l; i++) {
      const fuzzySet = fuzzySets[i];
      fuzzySet.degreeOfMembership = fuzzySet.computeDegreeOfMembership(value);
    }

    return this;
  }
  /**
  * Defuzzifies the FLV using the "Average of Maxima" (MaxAv) method.
  *
  * @return {Number} The defuzzified, crips value.
  */


  defuzzifyMaxAv() {
    // the average of maxima (MaxAv for short) defuzzification method scales the
    // representative value of each fuzzy set by its DOM and takes the average
    const fuzzySets = this.fuzzySets;
    let bottom = 0;
    let top = 0;

    for (let i = 0, l = fuzzySets.length; i < l; i++) {
      const fuzzySet = fuzzySets[i];
      bottom += fuzzySet.degreeOfMembership;
      top += fuzzySet.representativeValue * fuzzySet.degreeOfMembership;
    }

    return bottom === 0 ? 0 : top / bottom;
  }
  /**
  * Defuzzifies the FLV using the "Centroid" method.
  *
  * @param {Number} samples - The amount of samples used for defuzzification.
  * @return {Number} The defuzzified, crips value.
  */


  defuzzifyCentroid(samples = 10) {
    const fuzzySets = this.fuzzySets;
    const stepSize = (this.maxRange - this.minRange) / samples;
    let totalArea = 0;
    let sumOfMoments = 0;

    for (let s = 1; s <= samples; s++) {
      const sample = this.minRange + s * stepSize;

      for (let i = 0, l = fuzzySets.length; i < l; i++) {
        const fuzzySet = fuzzySets[i];
        const contribution = Math.min(fuzzySet.degreeOfMembership, fuzzySet.computeDegreeOfMembership(sample));
        totalArea += contribution;
        sumOfMoments += sample * contribution;
      }
    }

    return totalArea === 0 ? 0 : sumOfMoments / totalArea;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      type: this.constructor.name,
      fuzzySets: new Array(),
      minRange: this.minRange.toString(),
      maxRange: this.maxRange.toString()
    };

    for (let i = 0, l = this.fuzzySets.length; i < l; i++) {
      const fuzzySet = this.fuzzySets[i];
      json.fuzzySets.push(fuzzySet.toJSON());
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {FuzzyVariable} A reference to this fuzzy variable.
  */


  fromJSON(json) {
    this.minRange = parseFloat(json.minRange);
    this.maxRange = parseFloat(json.maxRange);

    for (let i = 0, l = json.fuzzySets.length; i < l; i++) {
      const fuzzySetJson = json.fuzzySets[i];
      let type = fuzzySetJson.type;

      switch (type) {
        case 'LeftShoulderFuzzySet':
          this.fuzzySets.push(new LeftShoulderFuzzySet().fromJSON(fuzzySetJson));
          break;

        case 'RightShoulderFuzzySet':
          this.fuzzySets.push(new RightShoulderFuzzySet().fromJSON(fuzzySetJson));
          break;

        case 'SingletonFuzzySet':
          this.fuzzySets.push(new SingletonFuzzySet().fromJSON(fuzzySetJson));
          break;

        case 'TriangularFuzzySet':
          this.fuzzySets.push(new TriangularFuzzySet().fromJSON(fuzzySetJson));
          break;

        default:
          Logger.error('YUKA.FuzzyVariable: Unsupported fuzzy set type:', fuzzySetJson.type);
      }
    }

    return this;
  }

}
/**
* Class for representing a fuzzy module. Instances of this class are used by
* game entities for fuzzy inference. A fuzzy module is a collection of fuzzy variables
* and the rules that operate on them.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.FuzzyVariable = FuzzyVariable;

class FuzzyModule {
  /**
  * Constructs a new fuzzy module.
  */
  constructor() {
    /**
    * An array of the fuzzy rules.
    * @type {Array<FuzzyRule>}
    * @readonly
    */
    this.rules = new Array();
    /**
    * A map of FLVs.
    * @type {Map<String,FuzzyVariable>}
    * @readonly
    */

    this.flvs = new Map();
  }
  /**
  * Adds the given FLV under the given name to this fuzzy module.
  *
  * @param {String} name - The name of the FLV.
  * @param {FuzzyVariable} flv - The FLV to add.
  * @return {FuzzyModule} A reference to this fuzzy module.
  */


  addFLV(name, flv) {
    this.flvs.set(name, flv);
    return this;
  }
  /**
  * Remove the FLV under the given name from this fuzzy module.
  *
  * @param {String} name - The name of the FLV to remove.
  * @return {FuzzyModule} A reference to this fuzzy module.
  */


  removeFLV(name) {
    this.flvs.delete(name);
    return this;
  }
  /**
  * Adds the given fuzzy rule to this fuzzy module.
  *
  * @param {FuzzyRule} rule - The fuzzy rule to add.
  * @return {FuzzyModule} A reference to this fuzzy module.
  */


  addRule(rule) {
    this.rules.push(rule);
    return this;
  }
  /**
  * Removes the given fuzzy rule from this fuzzy module.
  *
  * @param {FuzzyRule} rule - The fuzzy rule to remove.
  * @return {FuzzyModule} A reference to this fuzzy module.
  */


  removeRule(rule) {
    const rules = this.rules;
    const index = rules.indexOf(rule);
    rules.splice(index, 1);
    return this;
  }
  /**
  * Calls the fuzzify method of the defined FLV with the given value.
  *
  * @param {String} name - The name of the FLV
  * @param {Number} value - The crips value to fuzzify.
  * @return {FuzzyModule} A reference to this fuzzy module.
  */


  fuzzify(name, value) {
    const flv = this.flvs.get(name);
    flv.fuzzify(value);
    return this;
  }
  /**
  * Given a fuzzy variable and a defuzzification method this returns a crisp value.
  *
  * @param {String} name - The name of the FLV
  * @param {String} type - The type of defuzzification.
  * @return {Number} The defuzzified, crips value.
  */


  defuzzify(name, type = FuzzyModule.DEFUZ_TYPE.MAXAV) {
    const flvs = this.flvs;
    const rules = this.rules;

    this._initConsequences();

    for (let i = 0, l = rules.length; i < l; i++) {
      const rule = rules[i];
      rule.evaluate();
    }

    const flv = flvs.get(name);
    let value;

    switch (type) {
      case FuzzyModule.DEFUZ_TYPE.MAXAV:
        value = flv.defuzzifyMaxAv();
        break;

      case FuzzyModule.DEFUZ_TYPE.CENTROID:
        value = flv.defuzzifyCentroid();
        break;

      default:
        Logger.warn('YUKA.FuzzyModule: Unknown defuzzification method:', type);
        value = flv.defuzzifyMaxAv();
      // use MaxAv as fallback
    }

    return value;
  }

  _initConsequences() {
    const rules = this.rules; // initializes the consequences of all rules.

    for (let i = 0, l = rules.length; i < l; i++) {
      const rule = rules[i];
      rule.initConsequence();
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      rules: new Array(),
      flvs: new Array()
    }; // rules

    const rules = this.rules;

    for (let i = 0, l = rules.length; i < l; i++) {
      json.rules.push(rules[i].toJSON());
    } // flvs


    const flvs = this.flvs;

    for (let [name, flv] of flvs) {
      json.flvs.push({
        name: name,
        flv: flv.toJSON()
      });
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {FuzzyModule} A reference to this fuzzy module.
  */


  fromJSON(json) {
    const fuzzySets = new Map(); // used for rules
    // flvs

    const flvsJSON = json.flvs;

    for (let i = 0, l = flvsJSON.length; i < l; i++) {
      const flvJSON = flvsJSON[i];
      const name = flvJSON.name;
      const flv = new FuzzyVariable().fromJSON(flvJSON.flv);
      this.addFLV(name, flv);

      for (let fuzzySet of flv.fuzzySets) {
        fuzzySets.set(fuzzySet.uuid, fuzzySet);
      }
    } // rules


    const rulesJSON = json.rules;

    for (let i = 0, l = rulesJSON.length; i < l; i++) {
      const ruleJSON = rulesJSON[i];
      const rule = new FuzzyRule().fromJSON(ruleJSON, fuzzySets);
      this.addRule(rule);
    }

    return this;
  }

}

exports.FuzzyModule = FuzzyModule;
FuzzyModule.DEFUZ_TYPE = Object.freeze({
  MAXAV: 0,
  CENTROID: 1
});
/**
* Base class for representing a goal in context of Goal-driven agent design.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class Goal {
  /**
  * Constructs a new goal.
  *
  * @param {GameEntity} owner - The owner of this goal.
  */
  constructor(owner = null) {
    /**
    * The owner of this goal.
    * @type {?GameEntity}
    * @default null
    */
    this.owner = owner;
    /**
    * The status of this goal.
    * @type {Status}
    * @default INACTIVE
    */

    this.status = Goal.STATUS.INACTIVE;
  }
  /**
  * Executed when this goal is activated.
  */


  activate() {}
  /**
  * Executed in each simulation step.
  */


  execute() {}
  /**
  * Executed when this goal is satisfied.
  */


  terminate() {}
  /**
  * Goals can handle messages. Many don't though, so this defines a default behavior
  *
  * @param {Telegram} telegram - The telegram with the message data.
  * @return {Boolean} Whether the message was processed or not.
  */


  handleMessage() {
    return false;
  }
  /**
  * Returns true if the status of this goal is *ACTIVE*.
  *
  * @return {Boolean} Whether the goal is active or not.
  */


  active() {
    return this.status === Goal.STATUS.ACTIVE;
  }
  /**
  * Returns true if the status of this goal is *INACTIVE*.
  *
  * @return {Boolean} Whether the goal is inactive or not.
  */


  inactive() {
    return this.status === Goal.STATUS.INACTIVE;
  }
  /**
  * Returns true if the status of this goal is *COMPLETED*.
  *
  * @return {Boolean} Whether the goal is completed or not.
  */


  completed() {
    return this.status === Goal.STATUS.COMPLETED;
  }
  /**
  * Returns true if the status of this goal is *FAILED*.
  *
  * @return {Boolean} Whether the goal is failed or not.
  */


  failed() {
    return this.status === Goal.STATUS.FAILED;
  }
  /**
  * Ensures the goal is replanned if it has failed.
  *
  * @return {Goal} A reference to this goal.
  */


  replanIfFailed() {
    if (this.failed() === true) {
      this.status = Goal.STATUS.INACTIVE;
    }

    return this;
  }
  /**
  * Ensures the goal is activated if it is inactive.
  *
  * @return {Goal} A reference to this goal.
  */


  activateIfInactive() {
    if (this.inactive() === true) {
      this.status = Goal.STATUS.ACTIVE;
      this.activate();
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      owner: this.owner.uuid,
      status: this.status
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Goal} A reference to this goal.
  */


  fromJSON(json) {
    this.owner = json.owner; // uuid

    this.status = json.status;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {Goal} A reference to this goal.
  */


  resolveReferences(entities) {
    this.owner = entities.get(this.owner) || null;
    return this;
  }

}

exports.Goal = Goal;
Goal.STATUS = Object.freeze({
  ACTIVE: 'active',
  // the goal has been activated and will be processed each update step
  INACTIVE: 'inactive',
  // the goal is waiting to be activated
  COMPLETED: 'completed',
  // the goal has completed and will be removed on the next update
  FAILED: 'failed' // the goal has failed and will either replan or be removed on the next update

});
/**
* Class representing a composite goal. Essentially it's a goal which consists of subgoals.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments Goal
*/

class CompositeGoal extends Goal {
  /**
  * Constructs a new composite goal.
  *
  * @param {GameEntity} owner - The owner of this composite goal.
  */
  constructor(owner = null) {
    super(owner);
    /**
    * A list of subgoals.
    * @type {Array<Goal>}
    */

    this.subgoals = new Array();
  }
  /**
  * Adds a goal as a subgoal to this instance.
  *
  * @param {Goal} goal - The subgoal to add.
  * @return {Goal} A reference to this goal.
  */


  addSubgoal(goal) {
    this.subgoals.unshift(goal);
    return this;
  }
  /**
  * Removes a subgoal from this instance.
  *
  * @param {Goal} goal - The subgoal to remove.
  * @return {Goal} A reference to this goal.
  */


  removeSubgoal(goal) {
    const index = this.subgoals.indexOf(goal);
    this.subgoals.splice(index, 1);
    return this;
  }
  /**
  * Removes all subgoals and ensures {@link Goal#terminate} is called
  * for each subgoal.
  *
  * @return {Goal} A reference to this goal.
  */


  clearSubgoals() {
    const subgoals = this.subgoals;

    for (let i = 0, l = subgoals.length; i < l; i++) {
      const subgoal = subgoals[i];
      subgoal.terminate();
    }

    subgoals.length = 0;
    return this;
  }
  /**
  * Returns the current subgoal. If no subgoals are defined, *null* is returned.
  *
  * @return {Goal} The current subgoal.
  */


  currentSubgoal() {
    const length = this.subgoals.length;

    if (length > 0) {
      return this.subgoals[length - 1];
    } else {
      return null;
    }
  }
  /**
  * Executes the current subgoal of this composite goal.
  *
  * @return {Status} The status of this composite subgoal.
  */


  executeSubgoals() {
    const subgoals = this.subgoals; // remove all completed and failed goals from the back of the subgoal list

    for (let i = subgoals.length - 1; i >= 0; i--) {
      const subgoal = subgoals[i];

      if (subgoal.completed() === true || subgoal.failed() === true) {
        // if the current subgoal is a composite goal, terminate its subgoals too
        if (subgoal instanceof CompositeGoal) {
          subgoal.clearSubgoals();
        } // terminate the subgoal itself


        subgoal.terminate();
        subgoals.pop();
      } else {
        break;
      }
    } // if any subgoals remain, process the one at the back of the list


    const subgoal = this.currentSubgoal();

    if (subgoal !== null) {
      subgoal.activateIfInactive();
      subgoal.execute(); // if subgoal is completed but more subgoals are in the list, return 'ACTIVE'
      // status in order to keep processing the list of subgoals

      if (subgoal.completed() === true && subgoals.length > 1) {
        return Goal.STATUS.ACTIVE;
      } else {
        return subgoal.status;
      }
    } else {
      return Goal.STATUS.COMPLETED;
    }
  }
  /**
  * Returns true if this composite goal has subgoals.
  *
  * @return {Boolean} Whether the composite goal has subgoals or not.
  */


  hasSubgoals() {
    return this.subgoals.length > 0;
  }
  /**
  * Returns true if the given message was processed by the current subgoal.
  *
  * @return {Boolean} Whether the message was processed or not.
  */


  handleMessage(telegram) {
    const subgoal = this.currentSubgoal();

    if (subgoal !== null) {
      return subgoal.handleMessage(telegram);
    }

    return false;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.subgoals = new Array();

    for (let i = 0, l = this.subgoals.length; i < l; i++) {
      const subgoal = this.subgoals[i];
      json.subgoals.push(subgoal.toJSON());
    }

    return json;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {CompositeGoal} A reference to this composite goal.
  */


  resolveReferences(entities) {
    super.resolveReferences(entities);

    for (let i = 0, l = this.subgoals.length; i < l; i++) {
      const subgoal = this.subgoals[i];
      subgoal.resolveReferences(entities);
    }

    return this;
  }

}
/**
* Base class for representing a goal evaluator in context of Goal-driven agent design.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.CompositeGoal = CompositeGoal;

class GoalEvaluator {
  /**
  * Constructs a new goal evaluator.
  *
  * @param {Number} characterBias - Can be used to adjust the preferences of agents.
  */
  constructor(characterBias = 1) {
    /**
    * Can be used to adjust the preferences of agents. When the desirability score
    * for a goal has been evaluated, it is multiplied by this value.
    * @type {Number}
    * @default 1
    */
    this.characterBias = characterBias;
  }
  /**
  * Calculates the desirability. It's a score between 0 and 1 representing the desirability
  * of a goal. This goal is considered as a top level strategy of the agent like *Explore* or
  * *AttackTarget*. Must be implemented by all concrete goal evaluators.
  *
  * @param {GameEntity} owner - The owner of this goal evaluator.
  * @return {Number} The desirability.
  */


  calculateDesirability() {
    return 0;
  }
  /**
  * Executed if this goal evaluator produces the highest desirability. Must be implemented
  * by all concrete goal evaluators.
  *
  * @param {GameEntity} owner - The owner of this goal evaluator.
  */


  setGoal() {}
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      characterBias: this.characterBias
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {GoalEvaluator} A reference to this goal evaluator.
  */


  fromJSON(json) {
    this.characterBias = json.characterBias;
    return this;
  }

}
/**
* Class for representing the brain of a game entity.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments CompositeGoal
*/


exports.GoalEvaluator = GoalEvaluator;

class Think extends CompositeGoal {
  /**
  * Constructs a new *Think* object.
  *
  * @param {GameEntity} owner - The owner of this instance.
  */
  constructor(owner = null) {
    super(owner);
    /**
    * A list of goal evaluators.
    * @type {Array<GoalEvaluator>}
    */

    this.evaluators = new Array(); //

    this._typesMap = new Map();
  }
  /**
  * Executed when this goal is activated.
  */


  activate() {
    this.arbitrate();
  }
  /**
  * Executed in each simulation step.
  */


  execute() {
    this.activateIfInactive();
    const subgoalStatus = this.executeSubgoals();

    if (subgoalStatus === Goal.STATUS.COMPLETED || subgoalStatus === Goal.STATUS.FAILED) {
      this.status = Goal.STATUS.INACTIVE;
    }
  }
  /**
  * Executed when this goal is satisfied.
  */


  terminate() {
    this.clearSubgoals();
  }
  /**
  * Adds the given goal evaluator to this instance.
  *
  * @param {GoalEvaluator} evaluator - The goal evaluator to add.
  * @return {Think} A reference to this instance.
  */


  addEvaluator(evaluator) {
    this.evaluators.push(evaluator);
    return this;
  }
  /**
  * Removes the given goal evaluator from this instance.
  *
  * @param {GoalEvaluator} evaluator - The goal evaluator to remove.
  * @return {Think} A reference to this instance.
  */


  removeEvaluator(evaluator) {
    const index = this.evaluators.indexOf(evaluator);
    this.evaluators.splice(index, 1);
    return this;
  }
  /**
  * This method represents the top level decision process of an agent.
  * It iterates through each goal evaluator and selects the one that
  * has the highest score as the current goal.
  *
  * @return {Think} A reference to this instance.
  */


  arbitrate() {
    const evaluators = this.evaluators;
    let bestDesirability = -1;
    let bestEvaluator = null; // try to find the best top-level goal/strategy for the entity

    for (let i = 0, l = evaluators.length; i < l; i++) {
      const evaluator = evaluators[i];
      let desirability = evaluator.calculateDesirability(this.owner);
      desirability *= evaluator.characterBias;

      if (desirability >= bestDesirability) {
        bestDesirability = desirability;
        bestEvaluator = evaluator;
      }
    } // use the evaluator to set the respective goal


    if (bestEvaluator !== null) {
      bestEvaluator.setGoal(this.owner);
    } else {
      Logger.error('YUKA.Think: Unable to determine goal evaluator for game entity:', this.owner);
    }

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.evaluators = new Array();

    for (let i = 0, l = this.evaluators.length; i < l; i++) {
      const evaluator = this.evaluators[i];
      json.evaluators.push(evaluator.toJSON());
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Think} A reference to this instance.
  */


  fromJSON(json) {
    super.fromJSON(json);
    const typesMap = this._typesMap;
    this.evaluators.length = 0;
    this.terminate(); // evaluators

    for (let i = 0, l = json.evaluators.length; i < l; i++) {
      const evaluatorJSON = json.evaluators[i];
      const type = evaluatorJSON.type;
      const ctor = typesMap.get(type);

      if (ctor !== undefined) {
        const evaluator = new ctor().fromJSON(evaluatorJSON);
        this.evaluators.push(evaluator);
      } else {
        Logger.warn('YUKA.Think: Unsupported goal evaluator type:', type);
        continue;
      }
    } // goals


    function parseGoal(goalJSON) {
      const type = goalJSON.type;
      const ctor = typesMap.get(type);

      if (ctor !== undefined) {
        const goal = new ctor().fromJSON(goalJSON);
        const subgoalsJSON = goalJSON.subgoals;

        if (subgoalsJSON !== undefined) {
          // composite goal
          for (let i = 0, l = subgoalsJSON.length; i < l; i++) {
            const subgoal = parseGoal(subgoalsJSON[i]);
            if (subgoal) goal.subgoals.push(subgoal);
          }
        }

        return goal;
      } else {
        Logger.warn('YUKA.Think: Unsupported goal evaluator type:', type);
        return;
      }
    }

    for (let i = 0, l = json.subgoals.length; i < l; i++) {
      const subgoal = parseGoal(json.subgoals[i]);
      if (subgoal) this.subgoals.push(subgoal);
    }

    return this;
  }
  /**
  * Registers a custom type for deserialization. When calling {@link Think#fromJSON}
  * this instance is able to pick the correct constructor in order to create custom
  * goals or goal evaluators.
  *
  * @param {String} type - The name of the goal or goal evaluator.
  * @param {Function} constructor - The constructor function.
  * @return {Think} A reference to this instance.
  */


  registerType(type, constructor) {
    this._typesMap.set(type, constructor);

    return this;
  }

}
/**
* Base class for graph edges.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Think = Think;

class Edge {
  /**
  * Constructs a new edge.
  *
  * @param {Number} from - The index of the from node.
  * @param {Number} to - The index of the to node.
  * @param {Number} cost - The cost of this edge.
  */
  constructor(from = -1, to = -1, cost = 0) {
    /**
    * The index of the *from* node.
    * @type {Number}
    * @default -1
    */
    this.from = from;
    /**
    * The index of the *to* node.
    * @type {Number}
    * @default -1
    */

    this.to = to;
    /**
    * The cost of this edge. This could be for example a distance or time value.
    * @type {Number}
    * @default 0
    */

    this.cost = cost;
  }
  /**
  * Copies all values from the given edge to this edge.
  *
  * @param {Edge} edge - The edge to copy.
  * @return {Edge} A reference to this edge.
  */


  copy(edge) {
    this.from = edge.from;
    this.to = edge.to;
    this.cost = edge.cost;
    return this;
  }
  /**
  * Creates a new edge and copies all values from this edge.
  *
  * @return {Edge} A new edge.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      from: this.from,
      to: this.to,
      cost: this.cost
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Edge} A reference to this edge.
  */


  fromJSON(json) {
    this.from = json.from;
    this.to = json.to;
    this.cost = json.cost;
    return this;
  }

}
/**
* Base class for graph nodes.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Edge = Edge;

class Node {
  /**
  * Constructs a new node.
  *
  * @param {Number} index - The unique index of this node.
  */
  constructor(index = -1) {
    /**
    * The unique index of this node. The default value *-1* means invalid index.
    * @type {Number}
    * @default -1
    */
    this.index = index;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      index: this.index
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Node} A reference to this node.
  */


  fromJSON(json) {
    this.index = json.index;
    return this;
  }

}
/**
* Class representing a sparse graph implementation based on adjacency lists.
* A sparse graph can be used to model many different types of graphs like navigation
* graphs (pathfinding), dependency graphs (e.g. technology trees) or state graphs
* (a representation of every possible state in a game).
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Node = Node;

class Graph {
  /**
  * Constructs a new graph.
  */
  constructor() {
    /**
    * Whether this graph is directed or not.
    * @type {Boolean}
    * @default false
    */
    this.digraph = false;
    this._nodes = new Map(); // contains all nodes in a map: (nodeIndex => node)

    this._edges = new Map(); // adjacency list for each node: (nodeIndex => edges)
  }
  /**
  * Adds a node to the graph.
  *
  * @param {Node} node - The node to add.
  * @return {Graph} A reference to this graph.
  */


  addNode(node) {
    const index = node.index;

    this._nodes.set(index, node);

    this._edges.set(index, new Array());

    return this;
  }
  /**
  * Adds an edge to the graph. If the graph is undirected, the method
  * automatically creates the opponent edge.
  *
  * @param {Edge} edge - The edge to add.
  * @return {Graph} A reference to this graph.
  */


  addEdge(edge) {
    let edges;
    edges = this._edges.get(edge.from);
    edges.push(edge);

    if (this.digraph === false) {
      const oppositeEdge = edge.clone();
      oppositeEdge.from = edge.to;
      oppositeEdge.to = edge.from;
      edges = this._edges.get(edge.to);
      edges.push(oppositeEdge);
    }

    return this;
  }
  /**
  * Returns a node for the given node index. If no node is found,
  * *null* is returned.
  *
  * @param {Number} index - The index of the node.
  * @return {Node} The requested node.
  */


  getNode(index) {
    return this._nodes.get(index) || null;
  }
  /**
  * Returns an edge for the given *from* and *to* node indices.
  * If no node is found, *null* is returned.
  *
  * @param {Number} from - The index of the from node.
  * @param {Number} to - The index of the to node.
  * @return {Edge} The requested edge.
  */


  getEdge(from, to) {
    if (this.hasNode(from) && this.hasNode(to)) {
      const edges = this._edges.get(from);

      for (let i = 0, l = edges.length; i < l; i++) {
        const edge = edges[i];

        if (edge.to === to) {
          return edge;
        }
      }
    }

    return null;
  }
  /**
  * Gathers all nodes of the graph and stores them into the given array.
  *
  * @param {Array<Node>} result - The result array.
  * @return {Array<Node>} The result array.
  */


  getNodes(result) {
    result.length = 0;
    result.push(...this._nodes.values());
    return result;
  }
  /**
  * Gathers all edges leading from the given node index and stores them
  * into the given array.
  *
  * @param {Number} index - The node index.
  * @param {Array<Edge>} result - The result array.
  * @return {Array<Edge>} The result array.
  */


  getEdgesOfNode(index, result) {
    const edges = this._edges.get(index);

    if (edges !== undefined) {
      result.length = 0;
      result.push(...edges);
    }

    return result;
  }
  /**
  * Returns the node count of the graph.
  *
  * @return {number} The amount of nodes.
  */


  getNodeCount() {
    return this._nodes.size;
  }
  /**
  * Returns the edge count of the graph.
  *
  * @return {number} The amount of edges.
  */


  getEdgeCount() {
    let count = 0;

    for (const edges of this._edges.values()) {
      count += edges.length;
    }

    return count;
  }
  /**
  * Removes the given node from the graph and all edges which are connected
  * with this node.
  *
  * @param {Node} node - The node to remove.
  * @return {Graph} A reference to this graph.
  */


  removeNode(node) {
    this._nodes.delete(node.index);

    if (this.digraph === false) {
      // if the graph is not directed, remove all edges leading to this node
      const edges = this._edges.get(node.index);

      for (const edge of edges) {
        const edgesOfNeighbor = this._edges.get(edge.to);

        for (let i = edgesOfNeighbor.length - 1; i >= 0; i--) {
          const edgeNeighbor = edgesOfNeighbor[i];

          if (edgeNeighbor.to === node.index) {
            const index = edgesOfNeighbor.indexOf(edgeNeighbor);
            edgesOfNeighbor.splice(index, 1);
            break;
          }
        }
      }
    } else {
      // if the graph is directed, remove the edges the slow way
      for (const edges of this._edges.values()) {
        for (let i = edges.length - 1; i >= 0; i--) {
          const edge = edges[i];

          if (!this.hasNode(edge.to) || !this.hasNode(edge.from)) {
            const index = edges.indexOf(edge);
            edges.splice(index, 1);
          }
        }
      }
    } // delete edge list of node (edges leading from this node)


    this._edges.delete(node.index);

    return this;
  }
  /**
  * Removes the given edge from the graph. If the graph is undirected, the
  * method also removes the opponent edge.
  *
  * @param {Edge} edge - The edge to remove.
  * @return {Graph} A reference to this graph.
  */


  removeEdge(edge) {
    // delete the edge from the node's edge list
    const edges = this._edges.get(edge.from);

    if (edges !== undefined) {
      const index = edges.indexOf(edge);
      edges.splice(index, 1); // if the graph is not directed, delete the edge connecting the node in the opposite direction

      if (this.digraph === false) {
        const edges = this._edges.get(edge.to);

        for (let i = 0, l = edges.length; i < l; i++) {
          const e = edges[i];

          if (e.to === edge.from) {
            const index = edges.indexOf(e);
            edges.splice(index, 1);
            break;
          }
        }
      }
    }

    return this;
  }
  /**
  * Return true if the graph has the given node index.
  *
  * @param {Number} index - The node index to test.
  * @return {Boolean} Whether this graph has the node or not.
  */


  hasNode(index) {
    return this._nodes.has(index);
  }
  /**
  * Return true if the graph has an edge connecting the given
  * *from* and *to* node indices.
  *
  * @param {Number} from - The index of the from node.
  * @param {Number} to - The index of the to node.
  * @return {Boolean} Whether this graph has the edge or not.
  */


  hasEdge(from, to) {
    if (this.hasNode(from) && this.hasNode(to)) {
      const edges = this._edges.get(from);

      for (let i = 0, l = edges.length; i < l; i++) {
        const edge = edges[i];

        if (edge.to === to) {
          return true;
        }
      }

      return false;
    } else {
      return false;
    }
  }
  /**
  * Removes all nodes and edges from this graph.
  *
  * @return {Graph} A reference to this graph.
  */


  clear() {
    this._nodes.clear();

    this._edges.clear();

    return this;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      type: this.constructor.name,
      digraph: this.digraph
    };
    const edges = new Array();
    const nodes = new Array();

    for (let [key, value] of this._nodes.entries()) {
      const adjacencyList = new Array();
      this.getEdgesOfNode(key, adjacencyList);

      for (let i = 0, l = adjacencyList.length; i < l; i++) {
        edges.push(adjacencyList[i].toJSON());
      }

      nodes.push(value.toJSON());
    }

    json._edges = edges;
    json._nodes = nodes;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Graph} A reference to this graph.
  */


  fromJSON(json) {
    this.digraph = json.digraph;

    for (let i = 0, l = json._nodes.length; i < l; i++) {
      this.addNode(new Node().fromJSON(json._nodes[i]));
    }

    for (let i = 0, l = json._edges.length; i < l; i++) {
      this.addEdge(new Edge().fromJSON(json._edges[i]));
    }

    return this;
  }

}
/**
* Class for representing a heuristic for graph search algorithms based
* on the euclidean distance. The heuristic assumes that the node have
* a *position* property of type {@link Vector3}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Graph = Graph;

class HeuristicPolicyEuclid {
  /**
  * Calculates the euclidean distance between two nodes.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The index of the source node.
  * @param {Number} target - The index of the target node.
  * @return {Number} The euclidean distance between both nodes.
  */
  static calculate(graph, source, target) {
    const sourceNode = graph.getNode(source);
    const targetNode = graph.getNode(target);
    return sourceNode.position.distanceTo(targetNode.position);
  }

}
/**
* Class for representing a heuristic for graph search algorithms based
* on the squared euclidean distance. The heuristic assumes that the node
* have a *position* property of type {@link Vector3}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.HeuristicPolicyEuclid = HeuristicPolicyEuclid;

class HeuristicPolicyEuclidSquared {
  /**
  * Calculates the squared euclidean distance between two nodes.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The index of the source node.
  * @param {Number} target - The index of the target node.
  * @return {Number} The squared euclidean distance between both nodes.
  */
  static calculate(graph, source, target) {
    const sourceNode = graph.getNode(source);
    const targetNode = graph.getNode(target);
    return sourceNode.position.squaredDistanceTo(targetNode.position);
  }

}
/**
* Class for representing a heuristic for graph search algorithms based
* on the manhattan distance. The heuristic assumes that the node
* have a *position* property of type {@link Vector3}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.HeuristicPolicyEuclidSquared = HeuristicPolicyEuclidSquared;

class HeuristicPolicyManhattan {
  /**
  * Calculates the manhattan distance between two nodes.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The index of the source node.
  * @param {Number} target - The index of the target node.
  * @return {Number} The manhattan distance between both nodes.
  */
  static calculate(graph, source, target) {
    const sourceNode = graph.getNode(source);
    const targetNode = graph.getNode(target);
    return sourceNode.position.manhattanDistanceTo(targetNode.position);
  }

}
/**
* Class for representing a heuristic for graph search algorithms based
* on Dijkstra's algorithm.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.HeuristicPolicyManhattan = HeuristicPolicyManhattan;

class HeuristicPolicyDijkstra {
  /**
  * This heuristic always returns *0*. The {@link AStar} algorithm
  * behaves with this heuristic exactly like {@link Dijkstra}
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The index of the source node.
  * @param {Number} target - The index of the target node.
  * @return {Number} The value 0.
  */
  static calculate() {
    return 0;
  }

}
/**
 * Class for representing a binary heap priority queue that enables
 * more efficient sorting of arrays. The implementation is based on
 * {@link https://github.com/mourner/tinyqueue tinyqueue}.
 *
 * @author {@link https://github.com/Mugen87|Mugen87}
 */


exports.HeuristicPolicyDijkstra = HeuristicPolicyDijkstra;

class PriorityQueue {
  /**
  * Constructs a new priority queue.
  *
  * @param {Function} compare - The compare function used for sorting.
  */
  constructor(compare = defaultCompare) {
    /**
    * The data items of the priority queue.
    * @type {Array<Object>}
    */
    this.data = new Array();
    /**
    * The length of the priority queue.
    * @type {Number}
    * @default 0
    */

    this.length = 0;
    /**
    * The compare function used for sorting.
    * @type {Function}
    * @default defaultCompare
    */

    this.compare = compare;
  }
  /**
  * Pushes an item to the priority queue.
  *
  * @param {Object} item - The item to add.
  */


  push(item) {
    this.data.push(item);
    this.length++;

    this._up(this.length - 1);
  }
  /**
  * Returns the item with the highest priority and removes
  * it from the priority queue.
  *
  * @return {Object} The item with the highest priority.
  */


  pop() {
    if (this.length === 0) return null;
    const top = this.data[0];
    this.length--;

    if (this.length > 0) {
      this.data[0] = this.data[this.length];

      this._down(0);
    }

    this.data.pop();
    return top;
  }
  /**
  * Returns the item with the highest priority without removal.
  *
  * @return {Object} The item with the highest priority.
  */


  peek() {
    return this.data[0] || null;
  }

  _up(index) {
    const data = this.data;
    const compare = this.compare;
    const item = data[index];

    while (index > 0) {
      const parent = index - 1 >> 1;
      const current = data[parent];
      if (compare(item, current) >= 0) break;
      data[index] = current;
      index = parent;
    }

    data[index] = item;
  }

  _down(index) {
    const data = this.data;
    const compare = this.compare;
    const item = data[index];
    const halfLength = this.length >> 1;

    while (index < halfLength) {
      let left = (index << 1) + 1;
      let right = left + 1;
      let best = data[left];

      if (right < this.length && compare(data[right], best) < 0) {
        left = right;
        best = data[right];
      }

      if (compare(best, item) >= 0) break;
      data[index] = best;
      index = left;
    }

    data[index] = item;
  }

}
/* istanbul ignore next */


exports.PriorityQueue = PriorityQueue;

function defaultCompare(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
/**
* Implementation of the AStar algorithm.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


class AStar {
  /**
  * Constructs an AStar algorithm object.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The node index of the source node.
  * @param {Number} target - The node index of the target node.
  */
  constructor(graph = null, source = -1, target = -1) {
    /**
    * The graph.
    * @type {?Graph}
    * @default null
    */
    this.graph = graph;
    /**
    * The node index of the source node.
    * @type {Number}
    * @default - 1
    */

    this.source = source;
    /**
    * The node index of the target node.
    * @type {Number}
    * @default - 1
    */

    this.target = target;
    /**
    * Whether the search was successful or not.
    * @type {Boolean}
    * @default false
    */

    this.found = false;
    /**
    * The heuristic of the search.
    * @type {Object}
    * @default HeuristicPolicyEuclid
    */

    this.heuristic = HeuristicPolicyEuclid;
    this._cost = new Map(); // contains the "real" accumulative cost to a node

    this._shortestPathTree = new Map();
    this._searchFrontier = new Map();
  }
  /**
  * Executes the graph search. If the search was successful, {@link AStar#found}
  * is set to true.
  *
  * @return {AStar} A reference to this AStar object.
  */


  search() {
    const outgoingEdges = new Array();
    const pQueue = new PriorityQueue(compare);
    pQueue.push({
      cost: 0,
      index: this.source
    }); // while the queue is not empty

    while (pQueue.length > 0) {
      const nextNode = pQueue.pop();
      const nextNodeIndex = nextNode.index; // if the shortest path tree has the given node, we already found the shortest
      // path to this particular one

      if (this._shortestPathTree.has(nextNodeIndex)) continue; // move this edge from the frontier to the shortest path tree

      if (this._searchFrontier.has(nextNodeIndex) === true) {
        this._shortestPathTree.set(nextNodeIndex, this._searchFrontier.get(nextNodeIndex));
      } // if the target has been found exit


      if (nextNodeIndex === this.target) {
        this.found = true;
        return this;
      } // now relax the edges


      this.graph.getEdgesOfNode(nextNodeIndex, outgoingEdges);

      for (let i = 0, l = outgoingEdges.length; i < l; i++) {
        const edge = outgoingEdges[i]; // A* cost formula : F = G + H
        // G is the cumulative cost to reach a node

        const G = (this._cost.get(nextNodeIndex) || 0) + edge.cost; // H is the heuristic estimate of the distance to the target

        const H = this.heuristic.calculate(this.graph, edge.to, this.target); // F is the sum of G and H

        const F = G + H; // We enhance our search frontier in two cases:
        // 1. If the node was never on the search frontier
        // 2. If the cost to this node is better than before

        if (this._searchFrontier.has(edge.to) === false || G < this._cost.get(edge.to)) {
          this._cost.set(edge.to, G);

          this._searchFrontier.set(edge.to, edge);

          pQueue.push({
            cost: F,
            index: edge.to
          });
        }
      }
    }

    this.found = false;
    return this;
  }
  /**
  * Returns the shortest path from the source to the target node as an array of node indices.
  *
  * @return {Array<Number>} The shortest path.
  */


  getPath() {
    // array of node indices that comprise the shortest path from the source to the target
    const path = new Array(); // just return an empty path if no path to target found or if no target has been specified

    if (this.found === false || this.target === -1) return path; // start with the target of the path

    let currentNode = this.target;
    path.push(currentNode); // while the current node is not the source node keep processing

    while (currentNode !== this.source) {
      // determine the parent of the current node
      currentNode = this._shortestPathTree.get(currentNode).from; // push the new current node at the beginning of the array

      path.unshift(currentNode);
    }

    return path;
  }
  /**
  * Returns the search tree of the algorithm as an array of edges.
  *
  * @return {Array<Edge>} The search tree.
  */


  getSearchTree() {
    return [...this._shortestPathTree.values()];
  }
  /**
  * Clears the internal state of the object. A new search is now possible.
  *
  * @return {AStar} A reference to this AStar object.
  */


  clear() {
    this.found = false;

    this._cost.clear();

    this._shortestPathTree.clear();

    this._searchFrontier.clear();

    return this;
  }

}

exports.AStar = AStar;

function compare(a, b) {
  return a.cost < b.cost ? -1 : a.cost > b.cost ? 1 : 0;
}
/**
* Implementation of Breadth-first Search.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


class BFS {
  /**
  * Constructs a BFS algorithm object.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The node index of the source node.
  * @param {Number} target - The node index of the target node.
  */
  constructor(graph = null, source = -1, target = -1) {
    /**
    * The graph.
    * @type {?Graph}
    * @default null
    */
    this.graph = graph;
    /**
    * The node index of the source node.
    * @type {Number}
    * @default - 1
    */

    this.source = source;
    /**
    * The node index of the target node.
    * @type {Number}
    * @default - 1
    */

    this.target = target;
    /**
    * Whether the search was successful or not.
    * @type {Boolean}
    * @default false
    */

    this.found = false;
    this._route = new Map(); // this holds the route taken to the target

    this._visited = new Set(); // holds the visited nodes

    this._spanningTree = new Set(); // for debugging purposes
  }
  /**
  * Executes the graph search. If the search was successful, {@link BFS#found}
  * is set to true.
  *
  * @return {BFS} A reference to this BFS object.
  */


  search() {
    // create a queue(FIFO) of edges, done via an array
    const queue = new Array();
    const outgoingEdges = new Array(); // create a dummy edge and put on the queue to begin the search

    const startEdge = new Edge(this.source, this.source);
    queue.push(startEdge); // mark the source node as visited

    this._visited.add(this.source); // while there are edges in the queue keep searching


    while (queue.length > 0) {
      // grab the first edge and remove it from the queue
      const nextEdge = queue.shift(); // make a note of the parent of the node this edge points to

      this._route.set(nextEdge.to, nextEdge.from); // expand spanning tree


      if (nextEdge !== startEdge) {
        this._spanningTree.add(nextEdge);
      } // if the target has been found the method can return success


      if (nextEdge.to === this.target) {
        this.found = true;
        return this;
      } // determine outgoing edges


      this.graph.getEdgesOfNode(nextEdge.to, outgoingEdges); // push the edges leading from the node this edge points to onto the
      // queue (provided the edge does not point to a previously visited node)

      for (let i = 0, l = outgoingEdges.length; i < l; i++) {
        const edge = outgoingEdges[i];

        if (this._visited.has(edge.to) === false) {
          queue.push(edge); // the node is marked as visited here, BEFORE it is examined,
          // because it ensures a maximum of N edges are ever placed in the queue rather than E edges.
          // (N = number of nodes, E = number of edges)

          this._visited.add(edge.to);
        }
      }
    }

    this.found = false;
    return this;
  }
  /**
  * Returns the shortest path from the source to the target node as an array of node indices.
  *
  * @return {Array<Number>} The shortest path.
  */


  getPath() {
    // array of node indices that comprise the shortest path from the source to the target
    const path = new Array(); // just return an empty path if no path to target found or if no target has been specified

    if (this.found === false || this.target === -1) return path; // start with the target of the path

    let currentNode = this.target;
    path.push(currentNode); // while the current node is not the source node keep processing

    while (currentNode !== this.source) {
      // determine the parent of the current node
      currentNode = this._route.get(currentNode); // push the new current node at the beginning of the array

      path.unshift(currentNode);
    }

    return path;
  }
  /**
  * Returns the search tree of the algorithm as an array of edges.
  *
  * @return {Array<Edge>} The search tree.
  */


  getSearchTree() {
    return [...this._spanningTree];
  }
  /**
  * Clears the internal state of the object. A new search is now possible.
  *
  * @return {BFS} A reference to this BFS object.
  */


  clear() {
    this.found = false;

    this._route.clear();

    this._visited.clear();

    this._spanningTree.clear();

    return this;
  }

}
/**
* Implementation of Depth-first Search.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.BFS = BFS;

class DFS {
  /**
  * Constructs a DFS algorithm object.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The node index of the source node.
  * @param {Number} target - The node index of the target node.
  */
  constructor(graph = null, source = -1, target = -1) {
    /**
    * The graph.
    * @type {?Graph}
    * @default null
    */
    this.graph = graph;
    /**
    * The node index of the source node.
    * @type {Number}
    * @default - 1
    */

    this.source = source;
    /**
    * The node index of the target node.
    * @type {Number}
    * @default - 1
    */

    this.target = target;
    /**
    * Whether the search was successful or not.
    * @type {Boolean}
    * @default false
    */

    this.found = false;
    this._route = new Map(); // this holds the route taken to the target

    this._visited = new Set(); // holds the visited nodes

    this._spanningTree = new Set(); // for debugging purposes
  }
  /**
  * Executes the graph search. If the search was successful, {@link DFS#found}
  * is set to true.
  *
  * @return {DFS} A reference to this DFS object.
  */


  search() {
    // create a stack(LIFO) of edges, done via an array
    const stack = new Array();
    const outgoingEdges = new Array(); // create a dummy edge and put on the stack to begin the search

    const startEdge = new Edge(this.source, this.source);
    stack.push(startEdge); // while there are edges in the stack keep searching

    while (stack.length > 0) {
      // grab the next edge and remove it from the stack
      const nextEdge = stack.pop(); // make a note of the parent of the node this edge points to

      this._route.set(nextEdge.to, nextEdge.from); // and mark it visited


      this._visited.add(nextEdge.to); // expand spanning tree


      if (nextEdge !== startEdge) {
        this._spanningTree.add(nextEdge);
      } // if the target has been found the method can return success


      if (nextEdge.to === this.target) {
        this.found = true;
        return this;
      } // determine outgoing edges


      this.graph.getEdgesOfNode(nextEdge.to, outgoingEdges); // push the edges leading from the node this edge points to onto the
      // stack (provided the edge does not point to a previously visited node)

      for (let i = 0, l = outgoingEdges.length; i < l; i++) {
        const edge = outgoingEdges[i];

        if (this._visited.has(edge.to) === false) {
          stack.push(edge);
        }
      }
    }

    this.found = false;
    return this;
  }
  /**
  * Returns the shortest path from the source to the target node as an array of node indices.
  *
  * @return {Array<Number>} The shortest path.
  */


  getPath() {
    // array of node indices that comprise the shortest path from the source to the target
    const path = new Array(); // just return an empty path if no path to target found or if no target has been specified

    if (this.found === false || this.target === -1) return path; // start with the target of the path

    let currentNode = this.target;
    path.push(currentNode); // while the current node is not the source node keep processing

    while (currentNode !== this.source) {
      // determine the parent of the current node
      currentNode = this._route.get(currentNode); // push the new current node at the beginning of the array

      path.unshift(currentNode);
    }

    return path;
  }
  /**
  * Returns the search tree of the algorithm as an array of edges.
  *
  * @return {Array<Edge>} The search tree.
  */


  getSearchTree() {
    return [...this._spanningTree];
  }
  /**
  * Clears the internal state of the object. A new search is now possible.
  *
  * @return {DFS} A reference to this DFS object.
  */


  clear() {
    this.found = false;

    this._route.clear();

    this._visited.clear();

    this._spanningTree.clear();

    return this;
  }

}
/**
* Implementation of Dijkstra's algorithm.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.DFS = DFS;

class Dijkstra {
  /**
  * Constructs a Dijkstra algorithm object.
  *
  * @param {Graph} graph - The graph.
  * @param {Number} source - The node index of the source node.
  * @param {Number} target - The node index of the target node.
  */
  constructor(graph = null, source = -1, target = -1) {
    /**
    * The graph.
    * @type {?Graph}
    * @default null
    */
    this.graph = graph;
    /**
    * The node index of the source node.
    * @type {Number}
    * @default - 1
    */

    this.source = source;
    /**
    * The node index of the target node.
    * @type {Number}
    * @default - 1
    */

    this.target = target;
    /**
    * Whether the search was successful or not.
    * @type {Boolean}
    * @default false
    */

    this.found = false;
    this._cost = new Map(); // total cost of the bast path so far for a given node

    this._shortestPathTree = new Map();
    this._searchFrontier = new Map();
  }
  /**
  * Executes the graph search. If the search was successful, {@link Dijkstra#found}
  * is set to true.
  *
  * @return {Dijkstra} A reference to this Dijkstra object.
  */


  search() {
    const outgoingEdges = new Array();
    const pQueue = new PriorityQueue(compare$1);
    pQueue.push({
      cost: 0,
      index: this.source
    }); // while the queue is not empty

    while (pQueue.length > 0) {
      const nextNode = pQueue.pop();
      const nextNodeIndex = nextNode.index; // if the shortest path tree has the given node, we already found the shortest
      // path to this particular one

      if (this._shortestPathTree.has(nextNodeIndex)) continue; // move this edge from the frontier to the shortest path tree

      if (this._searchFrontier.has(nextNodeIndex) === true) {
        this._shortestPathTree.set(nextNodeIndex, this._searchFrontier.get(nextNodeIndex));
      } // if the target has been found exit


      if (nextNodeIndex === this.target) {
        this.found = true;
        return this;
      } // now relax the edges


      this.graph.getEdgesOfNode(nextNodeIndex, outgoingEdges);

      for (let i = 0, l = outgoingEdges.length; i < l; i++) {
        const edge = outgoingEdges[i]; // the total cost to the node this edge points to is the cost to the
        // current node plus the cost of the edge connecting them.

        const newCost = (this._cost.get(nextNodeIndex) || 0) + edge.cost; // We enhance our search frontier in two cases:
        // 1. If the node was never on the search frontier
        // 2. If the cost to this node is better than before

        if (this._searchFrontier.has(edge.to) === false || newCost < this._cost.get(edge.to)) {
          this._cost.set(edge.to, newCost);

          this._searchFrontier.set(edge.to, edge);

          pQueue.push({
            cost: newCost,
            index: edge.to
          });
        }
      }
    }

    this.found = false;
    return this;
  }
  /**
  * Returns the shortest path from the source to the target node as an array of node indices.
  *
  * @return {Array<Number>} The shortest path.
  */


  getPath() {
    // array of node indices that comprise the shortest path from the source to the target
    const path = new Array(); // just return an empty path if no path to target found or if no target has been specified

    if (this.found === false || this.target === -1) return path; // start with the target of the path

    let currentNode = this.target;
    path.push(currentNode); // while the current node is not the source node keep processing

    while (currentNode !== this.source) {
      // determine the parent of the current node
      currentNode = this._shortestPathTree.get(currentNode).from; // push the new current node at the beginning of the array

      path.unshift(currentNode);
    }

    return path;
  }
  /**
  * Returns the search tree of the algorithm as an array of edges.
  *
  * @return {Array<Edge>} The search tree.
  */


  getSearchTree() {
    return [...this._shortestPathTree.values()];
  }
  /**
  * Clears the internal state of the object. A new search is now possible.
  *
  * @return {Dijkstra} A reference to this Dijkstra object.
  */


  clear() {
    this.found = false;

    this._cost.clear();

    this._shortestPathTree.clear();

    this._searchFrontier.clear();

    return this;
  }

}

exports.Dijkstra = Dijkstra;

function compare$1(a, b) {
  return a.cost < b.cost ? -1 : a.cost > b.cost ? 1 : 0;
}

const v1$3 = new Vector3();
const v2$1 = new Vector3();
const v3 = new Vector3();
const xAxis = new Vector3(1, 0, 0);
const yAxis = new Vector3(0, 1, 0);
const zAxis = new Vector3(0, 0, 1);
const triangle$1 = {
  a: new Vector3(),
  b: new Vector3(),
  c: new Vector3()
};
const intersection = new Vector3();
const intersections = new Array();
/**
* Class representing a bounding volume hierarchy. The current implementation
* represents single BVH nodes as AABBs. It accepts arbitrary branching factors
* and can subdivide the given geometry until a defined hierarchy depth has been reached.
* Besides, the hierarchy construction is performed top-down and the algorithm only
* performs splits along the cardinal axes.
*
* Reference: Bounding Volume Hierarchies in Real-Time Collision Detection
* by Christer Ericson (chapter 6).
*
* @author {@link https://github.com/robp94|robp94}
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class BVH {
  /**
  * Constructs a new BVH.
  *
  * @param {Number} branchingFactor - The branching factor.
  * @param {Number} primitivesPerNode - The minimum amount of primitives per BVH node.
  * @param {Number} depth - The maximum hierarchical depth.
  */
  constructor(branchingFactor = 2, primitivesPerNode = 1, depth = 10) {
    /**
    * The branching factor (how many nodes per level).
    * @type {Number}
    * @default 2
    */
    this.branchingFactor = branchingFactor;
    /**
    * The minimum amount of primitives per BVH node.
    * @type {Number}
    * @default 10
    */

    this.primitivesPerNode = primitivesPerNode;
    /**
    * The maximum hierarchical depth.
    * @type {Number}
    * @default 10
    */

    this.depth = depth;
    /**
    * The root BVH node.
    * @type {BVHNode}
    * @default null
    */

    this.root = null;
  }
  /**
  * Computes a BVH for the given mesh geometry.
  *
  * @param {MeshGeometry} geometry - The mesh geometry.
  * @return {BVH} A reference to this BVH.
  */


  fromMeshGeometry(geometry) {
    this.root = new BVHNode(); // primitives

    if (geometry.indices !== null) geometry = geometry.toTriangleSoup();
    const vertices = geometry.vertices;

    for (let i = 0, l = vertices.length; i < l; i++) {
      this.root.primitives.push(vertices[i]);
    } // centroids


    const primitives = this.root.primitives;

    for (let i = 0, l = primitives.length; i < l; i += 9) {
      v1$3.fromArray(primitives, i);
      v2$1.fromArray(primitives, i + 3);
      v3.fromArray(primitives, i + 6);
      v1$3.add(v2$1).add(v3).divideScalar(3);
      this.root.centroids.push(v1$3.x, v1$3.y, v1$3.z);
    } // build


    this.root.build(this.branchingFactor, this.primitivesPerNode, this.depth, 1);
    return this;
  }
  /**
  * Executes the given callback for each node of the BVH.
  *
  * @param {Function} callback - The callback to execute.
  * @return {BVH} A reference to this BVH.
  */


  traverse(callback) {
    this.root.traverse(callback);
    return this;
  }

}
/**
* A single node in a bounding volume hierarchy (BVH).
*
* @author {@link https://github.com/robp94|robp94}
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.BVH = BVH;

class BVHNode {
  /**
  * Constructs a BVH node.
  */
  constructor() {
    /**
    * The parent BVH node.
    * @type {BVHNode}
    * @default null
    */
    this.parent = null;
    /**
    * The child BVH nodes.
    * @type {Array<BVHNode>}
    */

    this.children = new Array();
    /**
    * The bounding volume of this BVH node.
    * @type {AABB}
    */

    this.boundingVolume = new AABB();
    /**
    * The primitives (triangles) of this BVH node.
    * Only filled for leaf nodes.
    * @type {Array<Number>}
    */

    this.primitives = new Array();
    /**
    * The centroids of the node's triangles.
    * Only filled for leaf nodes.
    * @type {Array<Number>}
    */

    this.centroids = new Array();
  }
  /**
  * Returns true if this BVH node is a root node.
  *
  * @return {Boolean} Whether this BVH node is a root node or not.
  */


  root() {
    return this.parent === null;
  }
  /**
  * Returns true if this BVH node is a leaf node.
  *
  * @return {Boolean} Whether this BVH node is a leaf node or not.
  */


  leaf() {
    return this.children.length === 0;
  }
  /**
  * Returns the depth of this BVH node in its hierarchy.
  *
  * @return {Number} The hierarchical depth of this BVH node.
  */


  getDepth() {
    let depth = 0;
    let parent = this.parent;

    while (parent !== null) {
      parent = parent.parent;
      depth++;
    }

    return depth;
  }
  /**
  * Executes the given callback for this BVH node and its ancestors.
  *
  * @param {Function} callback - The callback to execute.
  * @return {BVHNode} A reference to this BVH node.
  */


  traverse(callback) {
    callback(this);

    for (let i = 0, l = this.children.length; i < l; i++) {
      this.children[i].traverse(callback);
    }

    return this;
  }
  /**
  * Builds this BVH node. That means the respective bounding volume
  * is computed and the node's primitives are distributed under new child nodes.
  * This only happens if the maximum hierarchical depth is not yet reached and
  * the node does contain enough primitives required for a split.
  *
  * @param {Number} branchingFactor - The branching factor.
  * @param {Number} primitivesPerNode - The minimum amount of primitives per BVH node.
  * @param {Number} maxDepth - The maximum  hierarchical depth.
  * @param {Number} currentDepth - The current hierarchical depth.
  * @return {BVHNode} A reference to this BVH node.
  */


  build(branchingFactor, primitivesPerNode, maxDepth, currentDepth) {
    this.computeBoundingVolume(); // check depth and primitive count

    const primitiveCount = this.primitives.length / 9;
    const newPrimitiveCount = Math.floor(primitiveCount / branchingFactor);

    if (currentDepth <= maxDepth && newPrimitiveCount >= primitivesPerNode) {
      // split (distribute primitives on new child BVH nodes)
      this.split(branchingFactor); // proceed with build on the next hierarchy level

      for (let i = 0; i < branchingFactor; i++) {
        this.children[i].build(branchingFactor, primitivesPerNode, maxDepth, currentDepth + 1);
      }
    }

    return this;
  }
  /**
  * Computes the AABB for this BVH node.
  *
  * @return {BVHNode} A reference to this BVH node.
  */


  computeBoundingVolume() {
    const primitives = this.primitives;
    const aabb = this.boundingVolume; // compute AABB

    aabb.min.set(Infinity, Infinity, Infinity);
    aabb.max.set(-Infinity, -Infinity, -Infinity);

    for (let i = 0, l = primitives.length; i < l; i += 3) {
      v1$3.x = primitives[i];
      v1$3.y = primitives[i + 1];
      v1$3.z = primitives[i + 2];
      aabb.expand(v1$3);
    }

    return this;
  }
  /**
  * Computes the split axis. Right now, only the cardinal axes
  * are potential split axes.
  *
  * @return {Vector3} The split axis.
  */


  computeSplitAxis() {
    let maxX,
        maxY,
        maxZ = maxY = maxX = -Infinity;
    let minX,
        minY,
        minZ = minY = minX = Infinity;
    const centroids = this.centroids;

    for (let i = 0, l = centroids.length; i < l; i += 3) {
      const x = centroids[i];
      const y = centroids[i + 1];
      const z = centroids[i + 2];

      if (x > maxX) {
        maxX = x;
      }

      if (y > maxY) {
        maxY = y;
      }

      if (z > maxZ) {
        maxZ = z;
      }

      if (x < minX) {
        minX = x;
      }

      if (y < minY) {
        minY = y;
      }

      if (z < minZ) {
        minZ = z;
      }
    }

    const rangeX = maxX - minX;
    const rangeY = maxY - minY;
    const rangeZ = maxZ - minZ;

    if (rangeX > rangeY && rangeX > rangeZ) {
      return xAxis;
    } else if (rangeY > rangeZ) {
      return yAxis;
    } else {
      return zAxis;
    }
  }
  /**
  * Splits the node and distributes node's primitives over new child nodes.
  *
  * @param {Number} branchingFactor - The branching factor.
  * @return {BVHNode} A reference to this BVH node.
  */


  split(branchingFactor) {
    const centroids = this.centroids;
    const primitives = this.primitives; // create (empty) child BVH nodes

    for (let i = 0; i < branchingFactor; i++) {
      this.children[i] = new BVHNode();
      this.children[i].parent = this;
    } // sort primitives along split axis


    const axis = this.computeSplitAxis();
    const sortedPrimitiveIndices = new Array();

    for (let i = 0, l = centroids.length; i < l; i += 3) {
      v1$3.fromArray(centroids, i); // the result from the dot product is our sort criterion.
      // it represents the projection of the centroid on the split axis

      const p = v1$3.dot(axis);
      const primitiveIndex = i / 3;
      sortedPrimitiveIndices.push({
        index: primitiveIndex,
        p: p
      });
    }

    sortedPrimitiveIndices.sort(sortPrimitives); // distribute data

    const primitveCount = sortedPrimitiveIndices.length;
    const primitivesPerChild = Math.floor(primitveCount / branchingFactor);
    var childIndex = 0;
    var primitivesIndex = 0;

    for (let i = 0; i < primitveCount; i++) {
      // selected child
      primitivesIndex++; // check if we try to add more primitives to a child than "primitivesPerChild" defines.
      // move primitives to the next child

      if (primitivesIndex > primitivesPerChild) {
        // ensure "childIndex" does not overflow (meaning the last child takes all remaining primitives)
        if (childIndex < branchingFactor - 1) {
          primitivesIndex = 1; // reset primitive index

          childIndex++; // raise child index
        }
      }

      const child = this.children[childIndex]; // move data to the next level
      // 1. primitives

      const primitiveIndex = sortedPrimitiveIndices[i].index;
      const stride = primitiveIndex * 9; // remember the "primitives" array holds raw vertex data defining triangles

      v1$3.fromArray(primitives, stride);
      v2$1.fromArray(primitives, stride + 3);
      v3.fromArray(primitives, stride + 6);
      child.primitives.push(v1$3.x, v1$3.y, v1$3.z);
      child.primitives.push(v2$1.x, v2$1.y, v2$1.z);
      child.primitives.push(v3.x, v3.y, v3.z); // 2. centroid

      v1$3.fromArray(centroids, primitiveIndex * 3);
      child.centroids.push(v1$3.x, v1$3.y, v1$3.z);
    } // remove centroids/primitives after split from this node


    this.centroids.length = 0;
    this.primitives.length = 0;
    return this;
  }
  /**
  * Performs a ray/BVH node intersection test and stores the closest intersection point
  * to the given 3D vector. If no intersection is detected, *null* is returned.
  *
  * @param {Ray} ray - The ray.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  intersectRay(ray, result) {
    // gather all intersection points along the hierarchy
    if (ray.intersectAABB(this.boundingVolume, result) !== null) {
      if (this.leaf() === true) {
        const vertices = this.primitives;

        for (let i = 0, l = vertices.length; i < l; i += 9) {
          // remember: we assume primitives are triangles
          triangle$1.a.fromArray(vertices, i);
          triangle$1.b.fromArray(vertices, i + 3);
          triangle$1.c.fromArray(vertices, i + 6);

          if (ray.intersectTriangle(triangle$1, true, result) !== null) {
            intersections.push(result.clone());
          }
        }
      } else {
        // process childs
        for (let i = 0, l = this.children.length; i < l; i++) {
          this.children[i].intersectRay(ray, result);
        }
      }
    } // determine the closest intersection point in the root node (so after
    // the hierarchy was processed)


    if (this.root() === true) {
      if (intersections.length > 0) {
        let minDistance = Infinity;

        for (let i = 0, l = intersections.length; i < l; i++) {
          const squaredDistance = ray.origin.squaredDistanceTo(intersections[i]);

          if (squaredDistance < minDistance) {
            minDistance = squaredDistance;
            result.copy(intersections[i]);
          }
        } // reset array


        intersections.length = 0; // return closest intersection point

        return result;
      } else {
        // no intersection detected
        return null;
      }
    } else {
      // always return null for non-root nodes
      return null;
    }
  }
  /**
  * Performs a ray/BVH node intersection test. Returns either true or false if
  * there is a intersection or not.
  *
  * @param {Ray} ray - The ray.
  * @return {boolean} Whether there is an intersection or not.
  */


  intersectsRay(ray) {
    if (ray.intersectAABB(this.boundingVolume, intersection) !== null) {
      if (this.leaf() === true) {
        const vertices = this.primitives;

        for (let i = 0, l = vertices.length; i < l; i += 9) {
          // remember: we assume primitives are triangles
          triangle$1.a.fromArray(vertices, i);
          triangle$1.b.fromArray(vertices, i + 3);
          triangle$1.c.fromArray(vertices, i + 6);

          if (ray.intersectTriangle(triangle$1, true, intersection) !== null) {
            return true;
          }
        }

        return false;
      } else {
        // process child BVH nodes
        for (let i = 0, l = this.children.length; i < l; i++) {
          if (this.children[i].intersectsRay(ray) === true) {
            return true;
          }
        }

        return false;
      }
    } else {
      return false;
    }
  }

} //


exports.BVHNode = BVHNode;

function sortPrimitives(a, b) {
  return a.p - b.p;
}

const p1 = new Vector3();
const p2 = new Vector3();
/**
* Class representing a 3D line segment.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class LineSegment {
  /**
  * Constructs a new line segment with the given values.
  *
  * @param {Vector3} from - The start point of the line segment.
  * @param {Vector3} to - The end point of the line segment.
  */
  constructor(from = new Vector3(), to = new Vector3()) {
    /**
    * The start point of the line segment.
    * @type {Vector3}
    */
    this.from = from;
    /**
    * The end point of the line segment.
    * @type {Vector3}
    */

    this.to = to;
  }
  /**
  * Sets the given values to this line segment.
  *
  * @param {Vector3} from - The start point of the line segment.
  * @param {Vector3} to - The end point of the line segment.
  * @return {LineSegment} A reference to this line segment.
  */


  set(from, to) {
    this.from = from;
    this.to = to;
    return this;
  }
  /**
  * Copies all values from the given line segment to this line segment.
  *
  * @param {LineSegment} lineSegment - The line segment to copy.
  * @return {LineSegment} A reference to this line segment.
  */


  copy(lineSegment) {
    this.from.copy(lineSegment.from);
    this.to.copy(lineSegment.to);
    return this;
  }
  /**
  * Creates a new line segment and copies all values from this line segment.
  *
  * @return {LineSegment} A new line segment.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Computes the difference vector between the end and start point of this
  * line segment and stores the result in the given vector.
  *
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  delta(result) {
    return result.subVectors(this.to, this.from);
  }
  /**
  * Computes a position on the line segment according to the given t value
  * and stores the result in the given 3D vector. The t value has usually a range of
  * [0, 1] where 0 means start position and 1 the end position.
  *
  * @param {Number} t - A scalar value representing a position on the line segment.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  at(t, result) {
    return this.delta(result).multiplyScalar(t).add(this.from);
  }
  /**
  * Computes the closest point on an infinite line defined by the line segment.
  * It's possible to clamp the closest point so it does not exceed the start and
  * end position of the line segment.
  *
  * @param {Vector3} point - A point in 3D space.
  * @param {Boolean} clampToLine - Indicates if the results should be clamped.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The closest point.
  */


  closestPointToPoint(point, clampToLine, result) {
    const t = this.closestPointToPointParameter(point, clampToLine);
    return this.at(t, result);
  }
  /**
  * Computes a scalar value which represents the closest point on an infinite line
  * defined by the line segment. It's possible to clamp this value so it does not
  * exceed the start and end position of the line segment.
  *
  * @param {Vector3} point - A point in 3D space.
  * @param {Boolean} clampToLine - Indicates if the results should be clamped.
  * @return {Number} A scalar representing the closest point.
  */


  closestPointToPointParameter(point, clampToLine = true) {
    p1.subVectors(point, this.from);
    p2.subVectors(this.to, this.from);
    const dotP2P2 = p2.dot(p2);
    const dotP2P1 = p2.dot(p1);
    let t = dotP2P1 / dotP2P2;
    if (clampToLine) t = MathUtils.clamp(t, 0, 1);
    return t;
  }
  /**
  * Returns true if the given line segment is deep equal with this line segment.
  *
  * @param {LineSegment} lineSegment - The line segment to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(lineSegment) {
    return lineSegment.from.equals(this.from) && lineSegment.to.equals(this.to);
  }

}

exports.LineSegment = LineSegment;
const normal$1 = new Vector3();
const oppositeNormal = new Vector3();
const directionA = new Vector3();
const directionB = new Vector3();
const c = new Vector3();
const d$1 = new Vector3();
const v = new Vector3();
/**
* Implementation of the separating axis theorem (SAT). Used to detect intersections
* between convex polyhedra. The code is based on the presentation {@link http://twvideo01.ubm-us.net/o1/vault/gdc2013/slides/822403Gregorius_Dirk_TheSeparatingAxisTest.pdf The Separating Axis Test between convex polyhedra}
* by Dirk Gregorius (Valve Software) from GDC 2013.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class SAT {
  /**
  * Returns true if the given convex polyhedra intersect. A polyhedron is just
  * an array of {@link Polygon} objects.
  *
  * @param {Polyhedron} polyhedronA - The first convex polyhedron.
  * @param {Polyhedron} polyhedronB - The second convex polyhedron.
  * @return {Boolean} Whether there is an intersection or not.
  */
  intersects(polyhedronA, polyhedronB) {
    const resultAB = this._checkFaceDirections(polyhedronA, polyhedronB);

    if (resultAB) return false;

    const resultBA = this._checkFaceDirections(polyhedronB, polyhedronA);

    if (resultBA) return false;

    const resultEdges = this._checkEdgeDirections(polyhedronA, polyhedronB);

    if (resultEdges) return false; // no separating axis found, the polyhedra must intersect

    return true;
  } // check possible separating axes from the first given polyhedron. the axes
  // are derived from the respective face normals


  _checkFaceDirections(polyhedronA, polyhedronB) {
    const faces = polyhedronA.faces;

    for (let i = 0, l = faces.length; i < l; i++) {
      const face = faces[i];
      const plane = face.plane;
      oppositeNormal.copy(plane.normal).multiplyScalar(-1);

      const supportVertex = this._getSupportVertex(polyhedronB, oppositeNormal);

      const distance = plane.distanceToPoint(supportVertex);
      if (distance > 0) return true; // separating axis found
    }

    return false;
  } // check with possible separating axes computed via the cross product between
  // all edge combinations of both polyhedra


  _checkEdgeDirections(polyhedronA, polyhedronB) {
    const edgesA = polyhedronA.edges;
    const edgesB = polyhedronB.edges;

    for (let i = 0, il = edgesA.length; i < il; i++) {
      const edgeA = edgesA[i];

      for (let j = 0, jl = edgesB.length; j < jl; j++) {
        const edgeB = edgesB[j];
        edgeA.getDirection(directionA);
        edgeB.getDirection(directionB); // edge pruning: only consider edges if they build a face on the minkowski difference

        if (this._minkowskiFace(edgeA, directionA, edgeB, directionB)) {
          // compute axis
          const distance = this._distanceBetweenEdges(edgeA, directionA, edgeB, directionB, polyhedronA);

          if (distance > 0) return true; // separating axis found
        }
      }
    }

    return false;
  } // return the most extreme vertex into a given direction


  _getSupportVertex(polyhedron, direction) {
    let maxProjection = -Infinity;
    let supportVertex = null; // iterate over all polygons

    const vertices = polyhedron.vertices;

    for (let i = 0, l = vertices.length; i < l; i++) {
      const vertex = vertices[i];
      const projection = vertex.dot(direction); // check vertex to find the best support point

      if (projection > maxProjection) {
        maxProjection = projection;
        supportVertex = vertex;
      }
    }

    return supportVertex;
  } // returns true if the given edges build a face on the minkowski difference


  _minkowskiFace(edgeA, directionA, edgeB, directionB) {
    // get face normals which define the vertices of the arcs on the gauss map
    const a = edgeA.polygon.plane.normal;
    const b = edgeA.twin.polygon.plane.normal;
    c.copy(edgeB.polygon.plane.normal);
    d$1.copy(edgeB.twin.polygon.plane.normal); // negate normals c and d to account for minkowski difference

    c.multiplyScalar(-1);
    d$1.multiplyScalar(-1); // compute triple products
    // it's not necessary to compute the cross product since edges of convex polyhedron
    // have same direction as the cross product between their adjacent face normals

    const cba = c.dot(directionA);
    const dba = d$1.dot(directionA);
    const adc = a.dot(directionB);
    const bdc = b.dot(directionB); // check signs of plane test

    return cba * dba < 0 && adc * bdc < 0 && cba * bdc > 0;
  } // use gauss map to compute the distance between two edges


  _distanceBetweenEdges(edgeA, directionA, edgeB, directionB, polyhedronA) {
    // skip parallel edges
    if (Math.abs(directionA.dot(directionB)) === 1) return -Infinity; // build plane through one edge

    normal$1.crossVectors(directionA, directionB).normalize(); // ensure normal points from polyhedron A to B

    if (normal$1.dot(v.subVectors(edgeA.vertex, polyhedronA.centroid)) < 0) {
      normal$1.multiplyScalar(-1);
    } // compute the distance of any vertex on the other edge to that plane
    // no need to compute support points => O(1)


    return normal$1.dot(v.subVectors(edgeB.vertex, edgeA.vertex));
  }

}
/**
* Implementation of a half-edge data structure, also known as
* {@link https://en.wikipedia.org/wiki/Doubly_connected_edge_list Doubly connected edge list}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.SAT = SAT;

class HalfEdge {
  /**
  * Constructs a new half-edge.
  *
  * @param {Vector3} vertex - The vertex of this half-edge. It represents the head/destination of the respective full edge.
  */
  constructor(vertex = new Vector3()) {
    /**
    * The vertex of this half-edge. It represents the head/destination of the respective full edge.
    * @type {Vector3}
    */
    this.vertex = vertex;
    /**
    * A reference to the next half-edge.
    * @type {?HalfEdge}
    * @default null
    */

    this.next = null;
    /**
    * A reference to the previous half-edge.
    * @type {?HalfEdge}
    * @default null
    */

    this.prev = null;
    /**
    * A reference to the opponent half-edge.
    * @type {?HalfEdge}
    * @default null
    */

    this.twin = null;
    /**
    * A reference to its polygon/face.
    * @type {?Polygon}
    * @default null
    */

    this.polygon = null;
  }
  /**
  * Returns the tail of this half-edge. That's a reference to the previous
  * half-edge vertex.
  *
  * @return {Vector3} The tail vertex.
  */


  tail() {
    return this.prev ? this.prev.vertex : null;
  }
  /**
  * Returns the head of this half-edge. That's a reference to the own vertex.
  *
  * @return {Vector3} The head vertex.
  */


  head() {
    return this.vertex;
  }
  /**
  * Computes the length of this half-edge.
  *
  * @return {Number} The length of this half-edge.
  */


  length() {
    const tail = this.tail();
    const head = this.head();

    if (tail !== null) {
      return tail.distanceTo(head);
    }

    return -1;
  }
  /**
  * Computes the squared length of this half-edge.
  *
  * @return {Number} The squared length of this half-edge.
  */


  squaredLength() {
    const tail = this.tail();
    const head = this.head();

    if (tail !== null) {
      return tail.squaredDistanceTo(head);
    }

    return -1;
  }
  /**
  * Links the given opponent half edge with this one.
  *
  * @param {HalfEdge} edge - The opponent edge to link.
  * @return {HalfEdge} A reference to this half edge.
  */


  linkOpponent(edge) {
    this.twin = edge;
    edge.twin = this;
    return this;
  }
  /**
  * Computes the direction of this half edge. The method assumes the half edge
  * has a valid reference to a previous half edge.
  *
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  getDirection(result) {
    return result.subVectors(this.vertex, this.prev.vertex).normalize();
  }

}
/**
* Class for representing a planar polygon with an arbitrary amount of edges.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @author {@link https://github.com/robp94|robp94}
*/


exports.HalfEdge = HalfEdge;

class Polygon {
  /**
  * Constructs a new polygon.
  */
  constructor() {
    /**
    * The centroid of this polygon.
    * @type {Vector3}
    */
    this.centroid = new Vector3();
    /**
    * A reference to the first half-edge of this polygon.
    * @type {?HalfEdge}
    * @default null
    */

    this.edge = null;
    /**
    * A plane abstraction of this polygon.
    * @type {Plane}
    */

    this.plane = new Plane();
  }
  /**
  * Creates the polygon based on the given array of points in 3D space.
  * The method assumes the contour (the sequence of points) is defined
  * in CCW order.
  *
  * @param {Array<Vector3>} points - The array of points.
  * @return {Polygon} A reference to this polygon.
  */


  fromContour(points) {
    const edges = new Array();

    if (points.length < 3) {
      Logger.error('YUKA.Polygon: Unable to create polygon from contour. It needs at least three points.');
      return this;
    }

    for (let i = 0, l = points.length; i < l; i++) {
      const edge = new HalfEdge(points[i]);
      edges.push(edge);
    } // link edges


    for (let i = 0, l = edges.length; i < l; i++) {
      let current, prev, next;

      if (i === 0) {
        current = edges[i];
        prev = edges[l - 1];
        next = edges[i + 1];
      } else if (i === l - 1) {
        current = edges[i];
        prev = edges[i - 1];
        next = edges[0];
      } else {
        current = edges[i];
        prev = edges[i - 1];
        next = edges[i + 1];
      }

      current.prev = prev;
      current.next = next;
      current.polygon = this;
    } //


    this.edge = edges[0]; //

    this.plane.fromCoplanarPoints(points[0], points[1], points[2]);
    return this;
  }
  /**
  * Computes the centroid for this polygon.
  *
  * @return {Polygon} A reference to this polygon.
  */


  computeCentroid() {
    const centroid = this.centroid;
    let edge = this.edge;
    let count = 0;
    centroid.set(0, 0, 0);

    do {
      centroid.add(edge.vertex);
      count++;
      edge = edge.next;
    } while (edge !== this.edge);

    centroid.divideScalar(count);
    return this;
  }
  /**
  * Returns true if the polygon contains the given point.
  *
  * @param {Vector3} point - The point to test.
  * @param {Number} epsilon - A tolerance value.
  * @return {Boolean} Whether this polygon contain the given point or not.
  */


  contains(point, epsilon = 1e-3) {
    const plane = this.plane;
    let edge = this.edge; // convex test

    do {
      const v1 = edge.tail();
      const v2 = edge.head();

      if (leftOn(v1, v2, point) === false) {
        return false;
      }

      edge = edge.next;
    } while (edge !== this.edge); // ensure the given point lies within a defined tolerance range


    const distance = plane.distanceToPoint(point);

    if (Math.abs(distance) > epsilon) {
      return false;
    }

    return true;
  }
  /**
  * Returns true if the polygon is convex.
  *
  * @param {Boolean} ccw - Whether the winding order is CCW or not.
  * @return {Boolean} Whether this polygon is convex or not.
  */


  convex(ccw = true) {
    let edge = this.edge;

    do {
      const v1 = edge.tail();
      const v2 = edge.head();
      const v3 = edge.next.head();

      if (ccw) {
        if (leftOn(v1, v2, v3) === false) return false;
      } else {
        if (leftOn(v3, v2, v1) === false) return false;
      }

      edge = edge.next;
    } while (edge !== this.edge);

    return true;
  }
  /**
  * Returns true if the polygon is coplanar.
  *
  * @param {Number} epsilon - A tolerance value.
  * @return {Boolean} Whether this polygon is coplanar or not.
  */


  coplanar(epsilon = 1e-3) {
    const plane = this.plane;
    let edge = this.edge;

    do {
      const distance = plane.distanceToPoint(edge.vertex);

      if (Math.abs(distance) > epsilon) {
        return false;
      }

      edge = edge.next;
    } while (edge !== this.edge);

    return true;
  }
  /**
  * Computes the signed distance from the given 3D vector to this polygon. The method
  * uses the polygon's plane abstraction in order to compute this value.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Number} The signed distance from the given point to this polygon.
  */


  distanceToPoint(point) {
    return this.plane.distanceToPoint(point);
  }
  /**
  * Determines the contour (sequence of points) of this polygon and
  * stores the result in the given array.
  *
  * @param {Array<Vector3>} result - The result array.
  * @return {Array<Vector3>} The result array.
  */


  getContour(result) {
    let edge = this.edge;
    result.length = 0;

    do {
      result.push(edge.vertex);
      edge = edge.next;
    } while (edge !== this.edge);

    return result;
  }

} // from the book "Computational Geometry in C, Joseph O'Rourke"


exports.Polygon = Polygon;

function leftOn(a, b, c) {
  return MathUtils.area(a, b, c) >= 0;
}
/**
* Base class for polyhedra. It is primarily designed for the internal usage in Yuka.
* Objects of this class are always build up from faces. The edges, vertices and
* the polyhedron's centroid have to be derived from a valid face definition with the
* respective methods.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


class Polyhedron {
  /**
  * Constructs a new polyhedron.
  */
  constructor() {
    /**
    * The faces of this polyhedron.
    * @type {Array<Polygon>}
    */
    this.faces = new Array();
    /**
    * A list of unique edges (no opponent half edges).
    * @type {Array<HalfEdge>}
    */

    this.edges = new Array();
    /**
    * A list of unique vertices.
    * @type {Array<Vector3>}
    */

    this.vertices = new Array();
    /**
    * The centroid of this polyhedron.
    * @type {Vector3}
    */

    this.centroid = new Vector3();
  }
  /**
  * Computes the centroid of this polyhedron. Assumes its faces
  * have valid centroids.
  *
  * @return {Polyhedron} A reference to this polyhedron.
  */


  computeCentroid() {
    const centroid = this.centroid;
    let faces = this.faces;
    centroid.set(0, 0, 0);

    for (let i = 0, l = faces.length; i < l; i++) {
      const face = faces[i];
      centroid.add(face.centroid);
    }

    centroid.divideScalar(faces.length);
    return this;
  }
  /**
  * Computes unique vertices of this polyhedron. Assumes {@link Polyhedron#faces}
  * is properly set.
  *
  * @return {Polyhedron} A reference to this polyhedron.
  */


  computeUniqueVertices() {
    const faces = this.faces;
    const vertices = this.vertices;
    vertices.length = 0;
    const uniqueVertices = new Set(); // iterate over all faces

    for (let i = 0, l = faces.length; i < l; i++) {
      const face = faces[i];
      let edge = face.edge; // process all edges of a faces

      do {
        // add vertex to set (assuming half edges share unique vertices)
        uniqueVertices.add(edge.vertex);
        edge = edge.next;
      } while (edge !== face.edge);
    }

    vertices.push(...uniqueVertices);
    return this;
  }
  /**
  * Computes unique edges of this polyhedron. Assumes {@link Polyhedron#faces}
  * is properly set.
  *
  * @return {Polyhedron} A reference to this polyhedron.
  */


  computeUniqueEdges() {
    const faces = this.faces;
    const edges = this.edges;
    edges.length = 0; // iterate over all faces

    for (let i = 0, l = faces.length; i < l; i++) {
      const face = faces[i];
      let edge = face.edge; // process all edges of a faces

      do {
        // only add the edge if the twin was not added before
        if (edges.includes(edge.twin) === false) {
          edges.push(edge);
        }

        edge = edge.next;
      } while (edge !== face.edge);
    }

    return this;
  }
  /**
  * Configures this polyhedron so it does represent the given AABB.
  *
  * @return {Polyhedron} A reference to this polyhedron.
  */


  fromAABB(aabb) {
    this.faces.length = 0;
    this.vertices.length = 0;
    const min = aabb.min;
    const max = aabb.max;
    const vertices = [new Vector3(max.x, max.y, max.z), new Vector3(max.x, max.y, min.z), new Vector3(max.x, min.y, max.z), new Vector3(max.x, min.y, min.z), new Vector3(min.x, max.y, max.z), new Vector3(min.x, max.y, min.z), new Vector3(min.x, min.y, max.z), new Vector3(min.x, min.y, min.z)];
    this.vertices.push(...vertices);
    const sideTop = new Polygon().fromContour([vertices[4], vertices[0], vertices[1], vertices[5]]);
    const sideRight = new Polygon().fromContour([vertices[2], vertices[3], vertices[1], vertices[0]]);
    const sideFront = new Polygon().fromContour([vertices[6], vertices[2], vertices[0], vertices[4]]);
    const sideBack = new Polygon().fromContour([vertices[3], vertices[7], vertices[5], vertices[1]]);
    const sideBottom = new Polygon().fromContour([vertices[3], vertices[2], vertices[6], vertices[7]]);
    const sideLeft = new Polygon().fromContour([vertices[7], vertices[6], vertices[4], vertices[5]]); // link edges

    sideTop.edge.linkOpponent(sideLeft.edge.prev);
    sideTop.edge.next.linkOpponent(sideFront.edge.prev);
    sideTop.edge.next.next.linkOpponent(sideRight.edge.prev);
    sideTop.edge.prev.linkOpponent(sideBack.edge.prev);
    sideBottom.edge.linkOpponent(sideBack.edge.next);
    sideBottom.edge.next.linkOpponent(sideRight.edge.next);
    sideBottom.edge.next.next.linkOpponent(sideFront.edge.next);
    sideBottom.edge.prev.linkOpponent(sideLeft.edge.next);
    sideLeft.edge.linkOpponent(sideBack.edge.next.next);
    sideBack.edge.linkOpponent(sideRight.edge.next.next);
    sideRight.edge.linkOpponent(sideFront.edge.next.next);
    sideFront.edge.linkOpponent(sideLeft.edge.next.next); //

    this.faces.push(sideTop, sideRight, sideFront, sideBack, sideBottom, sideLeft); // compute centroids

    sideTop.computeCentroid();
    sideRight.computeCentroid();
    sideFront.computeCentroid();
    sideBack.computeCentroid();
    sideBottom.computeCentroid();
    sideLeft.computeCentroid();
    aabb.getCenter(this.centroid); //

    this.computeUniqueEdges();
    return this;
  }

}

exports.Polyhedron = Polyhedron;
const line = new LineSegment();
const plane$1 = new Plane();
const closestPoint = new Vector3();
const up = new Vector3(0, 1, 0);
const sat = new SAT();
let polyhedronAABB;
/**
* Class representing a convex hull. This is an implementation of the Quickhull algorithm
* based on the presentation {@link http://media.steampowered.com/apps/valve/2014/DirkGregorius_ImplementingQuickHull.pdf Implementing QuickHull}
* by Dirk Gregorius (Valve Software) from GDC 2014. The algorithm has an average runtime
* complexity of O(nlog(n)), whereas in the worst case it takes O(n²).
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments Polyhedron
*/

class ConvexHull extends Polyhedron {
  /**
  * Constructs a new convex hull.
  */
  constructor() {
    super();
    /**
    * Whether faces of the convex hull should be merged or not.
    * @type {Boolean}
    * @default true
    */

    this.mergeFaces = true; // tolerance value for various (float) compare operations

    this._tolerance = -1; // this array represents the vertices which will be enclosed by the convex hull

    this._vertices = new Array(); // two doubly linked lists for easier vertex processing

    this._assigned = new VertexList();
    this._unassigned = new VertexList();
  }
  /**
  * Returns true if the given point is inside this convex hull.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Boolean} Whether the given point is inside this convex hull or not.
  */


  containsPoint(point) {
    const faces = this.faces; // use the internal plane abstraction of each face in order to test
    // on what half space the point lies

    for (let i = 0, l = faces.length; i < l; i++) {
      // if the signed distance is greater than the tolerance value, the point
      // is outside and we can stop processing
      if (faces[i].distanceToPoint(point) > this._tolerance) return false;
    }

    return true;
  }
  /**
  * Returns true if this convex hull intersects with the given AABB.
  *
  * @param {AABB} aabb - The AABB to test.
  * @return {Boolean} Whether this convex hull intersects with the given AABB or not.
  */


  intersectsAABB(aabb) {
    if (polyhedronAABB === undefined) {
      // lazily create the (proxy) polyhedron if necessary
      polyhedronAABB = new Polyhedron().fromAABB(aabb);
    } else {
      // otherwise just ensure up-to-date vertex data.
      // the topology of the polyhedron is equal for all AABBs
      const min = aabb.min;
      const max = aabb.max;
      const vertices = polyhedronAABB.vertices;
      vertices[0].set(max.x, max.y, max.z);
      vertices[1].set(max.x, max.y, min.z);
      vertices[2].set(max.x, min.y, max.z);
      vertices[3].set(max.x, min.y, min.z);
      vertices[4].set(min.x, max.y, max.z);
      vertices[5].set(min.x, max.y, min.z);
      vertices[6].set(min.x, min.y, max.z);
      vertices[7].set(min.x, min.y, min.z);
      aabb.getCenter(polyhedronAABB.centroid);
    }

    return sat.intersects(this, polyhedronAABB);
  }
  /**
  * Returns true if this convex hull intersects with the given one.
  *
  * @param {ConvexHull} convexHull - The convex hull to test.
  * @return {Boolean} Whether this convex hull intersects with the given one or not.
  */


  intersectsConvexHull(convexHull) {
    return sat.intersects(this, convexHull);
  }
  /**
  * Computes a convex hull that encloses the given set of points. The computation requires
  * at least four points.
  *
  * @param {Array<Vector3>} points - An array of 3D vectors representing points in 3D space.
  * @return {ConvexHull} A reference to this convex hull.
  */


  fromPoints(points) {
    if (points.length < 4) {
      Logger.error('YUKA.ConvexHull: The given points array needs at least four points.');
      return this;
    } // wrap all points into the internal vertex data structure


    for (let i = 0, l = points.length; i < l; i++) {
      this._vertices.push(new Vertex(points[i]));
    } // generate the convex hull


    this._generate();

    return this;
  } // private API
  // adds a single face to the convex hull by connecting it with the respective horizon edge


  _addAdjoiningFace(vertex, horizonEdge) {
    // all the half edges are created in ccw order thus the face is always pointing outside the hull
    const face = new Face(vertex.point, horizonEdge.prev.vertex, horizonEdge.vertex);
    this.faces.push(face); // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )

    face.getEdge(-1).linkOpponent(horizonEdge.twin);
    return face.getEdge(0); // the half edge whose vertex is the given one
  } // adds new faces by connecting the horizon with the new point of the convex hull


  _addNewFaces(vertex, horizon) {
    const newFaces = [];
    let firstSideEdge = null;
    let previousSideEdge = null;

    for (let i = 0, l = horizon.length; i < l; i++) {
      // returns the right side edge
      let sideEdge = this._addAdjoiningFace(vertex, horizon[i]);

      if (firstSideEdge === null) {
        firstSideEdge = sideEdge;
      } else {
        // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )
        sideEdge.next.linkOpponent(previousSideEdge);
      }

      newFaces.push(sideEdge.polygon);
      previousSideEdge = sideEdge;
    } // perform final join of new faces


    firstSideEdge.next.linkOpponent(previousSideEdge);
    return newFaces;
  } // assigns a single vertex to the given face. that means this face can "see"
  // the vertex and its distance to the vertex is greater than all other faces


  _addVertexToFace(vertex, face) {
    vertex.face = face;

    if (face.outside === null) {
      this._assigned.append(vertex);

      face.outside = vertex;
    } else {
      this._assigned.insertAfter(face.outside, vertex);
    }

    return this;
  } // the base iteration of the algorithm. adds a new vertex to the convex hull by
  // connecting faces from the horizon with it.


  _addVertexToHull(vertex) {
    const horizon = [];

    this._unassigned.clear();

    this._computeHorizon(vertex.point, null, vertex.face, horizon);

    const newFaces = this._addNewFaces(vertex, horizon); // reassign 'unassigned' vertices to the new faces


    this._resolveUnassignedPoints(newFaces);

    return this;
  } // frees memory by resetting internal data structures


  _reset() {
    this._vertices.length = 0;

    this._assigned.clear();

    this._unassigned.clear();

    return this;
  } // computes the initial hull of the algorithm. it's a tetrahedron created
  // with the extreme vertices of the given set of points


  _computeInitialHull() {
    let v0, v1, v2, v3;
    const vertices = this._vertices;

    const extremes = this._computeExtremes();

    const min = extremes.min;
    const max = extremes.max; // 1. Find the two points 'p0' and 'p1' with the greatest 1d separation
    // (max.x - min.x)
    // (max.y - min.y)
    // (max.z - min.z)
    // check x

    let distance, maxDistance;
    maxDistance = max.x.point.x - min.x.point.x;
    v0 = min.x;
    v1 = max.x; // check y

    distance = max.y.point.y - min.y.point.y;

    if (distance > maxDistance) {
      v0 = min.y;
      v1 = max.y;
      maxDistance = distance;
    } // check z


    distance = max.z.point.z - min.z.point.z;

    if (distance > maxDistance) {
      v0 = min.z;
      v1 = max.z;
    } // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'


    maxDistance = -Infinity;
    line.set(v0.point, v1.point);

    for (let i = 0, l = vertices.length; i < l; i++) {
      const vertex = vertices[i];

      if (vertex !== v0 && vertex !== v1) {
        line.closestPointToPoint(vertex.point, true, closestPoint);
        distance = closestPoint.squaredDistanceTo(vertex.point);

        if (distance > maxDistance) {
          maxDistance = distance;
          v2 = vertex;
        }
      }
    } // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'


    maxDistance = -Infinity;
    plane$1.fromCoplanarPoints(v0.point, v1.point, v2.point);

    for (let i = 0, l = vertices.length; i < l; i++) {
      const vertex = vertices[i];

      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {
        distance = Math.abs(plane$1.distanceToPoint(vertex.point));

        if (distance > maxDistance) {
          maxDistance = distance;
          v3 = vertex;
        }
      }
    } // handle case where all points lie in one plane


    if (plane$1.distanceToPoint(v3.point) === 0) {
      throw 'ERROR: YUKA.ConvexHull: All extreme points lie in a single plane. Unable to compute convex hull.';
    } // build initial tetrahedron


    const faces = this.faces;

    if (plane$1.distanceToPoint(v3.point) < 0) {
      // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron
      faces.push(new Face(v0.point, v1.point, v2.point), new Face(v3.point, v1.point, v0.point), new Face(v3.point, v2.point, v1.point), new Face(v3.point, v0.point, v2.point)); // set the twin edge
      // join face[ i ] i > 0, with the first face

      faces[1].getEdge(2).linkOpponent(faces[0].getEdge(1));
      faces[2].getEdge(2).linkOpponent(faces[0].getEdge(2));
      faces[3].getEdge(2).linkOpponent(faces[0].getEdge(0)); // join face[ i ] with face[ i + 1 ], 1 <= i <= 3

      faces[1].getEdge(1).linkOpponent(faces[2].getEdge(0));
      faces[2].getEdge(1).linkOpponent(faces[3].getEdge(0));
      faces[3].getEdge(1).linkOpponent(faces[1].getEdge(0));
    } else {
      // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron
      faces.push(new Face(v0.point, v2.point, v1.point), new Face(v3.point, v0.point, v1.point), new Face(v3.point, v1.point, v2.point), new Face(v3.point, v2.point, v0.point)); // set the twin edge
      // join face[ i ] i > 0, with the first face

      faces[1].getEdge(2).linkOpponent(faces[0].getEdge(0));
      faces[2].getEdge(2).linkOpponent(faces[0].getEdge(2));
      faces[3].getEdge(2).linkOpponent(faces[0].getEdge(1)); // join face[ i ] with face[ i + 1 ], 1 <= i <= 3

      faces[1].getEdge(0).linkOpponent(faces[2].getEdge(1));
      faces[2].getEdge(0).linkOpponent(faces[3].getEdge(1));
      faces[3].getEdge(0).linkOpponent(faces[1].getEdge(1));
    } // initial assignment of vertices to the faces of the tetrahedron


    for (let i = 0, l = vertices.length; i < l; i++) {
      const vertex = vertices[i];

      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {
        maxDistance = this._tolerance;
        let maxFace = null;

        for (let j = 0; j < 4; j++) {
          distance = faces[j].distanceToPoint(vertex.point);

          if (distance > maxDistance) {
            maxDistance = distance;
            maxFace = faces[j];
          }
        }

        if (maxFace !== null) {
          this._addVertexToFace(vertex, maxFace);
        }
      }
    }

    return this;
  } // computes the extreme vertices of used to compute the initial convex hull


  _computeExtremes() {
    const min = new Vector3(Infinity, Infinity, Infinity);
    const max = new Vector3(-Infinity, -Infinity, -Infinity);
    const minVertices = {
      x: null,
      y: null,
      z: null
    };
    const maxVertices = {
      x: null,
      y: null,
      z: null
    }; // compute the min/max points on all six directions

    for (let i = 0, l = this._vertices.length; i < l; i++) {
      const vertex = this._vertices[i];
      const point = vertex.point; // update the min coordinates

      if (point.x < min.x) {
        min.x = point.x;
        minVertices.x = vertex;
      }

      if (point.y < min.y) {
        min.y = point.y;
        minVertices.y = vertex;
      }

      if (point.z < min.z) {
        min.z = point.z;
        minVertices.z = vertex;
      } // update the max coordinates


      if (point.x > max.x) {
        max.x = point.x;
        maxVertices.x = vertex;
      }

      if (point.y > max.y) {
        max.y = point.y;
        maxVertices.y = vertex;
      }

      if (point.z > max.z) {
        max.z = point.z;
        maxVertices.z = vertex;
      }
    } // use min/max vectors to compute an optimal epsilon


    this._tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));
    return {
      min: minVertices,
      max: maxVertices
    };
  } // computes the horizon, an array of edges enclosing the faces that are able
  // to see the new vertex


  _computeHorizon(eyePoint, crossEdge, face, horizon) {
    if (face.outside) {
      const startVertex = face.outside; // remove all vertices from the given face

      this._removeAllVerticesFromFace(face); // mark the face vertices to be reassigned to other faces


      this._unassigned.appendChain(startVertex);
    }

    face.active = false;
    let edge;

    if (crossEdge === null) {
      edge = crossEdge = face.getEdge(0);
    } else {
      // start from the next edge since 'crossEdge' was already analyzed
      // (actually 'crossEdge.twin' was the edge who called this method recursively)
      edge = crossEdge.next;
    }

    do {
      let twinEdge = edge.twin;
      let oppositeFace = twinEdge.polygon;

      if (oppositeFace.active) {
        if (oppositeFace.distanceToPoint(eyePoint) > this._tolerance) {
          // the opposite face can see the vertex, so proceed with next edge
          this._computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);
        } else {
          // the opposite face can't see the vertex, so this edge is part of the horizon
          horizon.push(edge);
        }
      }

      edge = edge.next;
    } while (edge !== crossEdge);

    return this;
  } // this method controls the basic flow of the algorithm


  _generate() {
    this.faces.length = 0;

    this._computeInitialHull();

    let vertex;

    while (vertex = this._nextVertexToAdd()) {
      this._addVertexToHull(vertex);
    }

    this._updateFaces();

    this._postprocessHull();

    this._reset();

    return this;
  } // final tasks after computing the hull


  _postprocessHull() {
    const faces = this.faces;
    const edges = this.edges;

    if (this.mergeFaces === true) {
      // merges faces if the result is still convex and coplanar
      const cache = {
        leftPrev: null,
        leftNext: null,
        rightPrev: null,
        rightNext: null
      }; // gather unique edges and temporarily sort them

      this.computeUniqueEdges();
      edges.sort((a, b) => b.length() - a.length()); // process edges from longest to shortest

      for (let i = 0, l = edges.length; i < l; i++) {
        const entry = edges[i];
        if (this._mergePossible(entry) === false) continue;
        let candidate = entry; // cache current references for possible restore

        cache.prev = candidate.prev;
        cache.next = candidate.next;
        cache.prevTwin = candidate.twin.prev;
        cache.nextTwin = candidate.twin.next; // temporarily change the first polygon in order to represent both polygons

        candidate.prev.next = candidate.twin.next;
        candidate.next.prev = candidate.twin.prev;
        candidate.twin.prev.next = candidate.next;
        candidate.twin.next.prev = candidate.prev;
        const polygon = candidate.polygon;
        polygon.edge = candidate.prev;
        const ccw = polygon.plane.normal.dot(up) >= 0;

        if (polygon.convex(ccw) === true && polygon.coplanar(this._tolerance) === true) {
          // correct polygon reference of all edges
          let edge = polygon.edge;

          do {
            edge.polygon = polygon;
            edge = edge.next;
          } while (edge !== polygon.edge); // delete obsolete polygon


          const index = faces.indexOf(entry.twin.polygon);
          faces.splice(index, 1);
        } else {
          // restore
          cache.prev.next = candidate;
          cache.next.prev = candidate;
          cache.prevTwin.next = candidate.twin;
          cache.nextTwin.prev = candidate.twin;
          polygon.edge = candidate;
        }
      } // recompute centroid of faces


      for (let i = 0, l = faces.length; i < l; i++) {
        faces[i].computeCentroid();
      }
    } // compute centroid of convex hull and the final edge and vertex list


    this.computeCentroid();
    this.computeUniqueEdges();
    this.computeUniqueVertices();
    return this;
  } // checks if the given edge can be used to merge convex regions


  _mergePossible(edge) {
    const polygon = edge.polygon;
    let currentEdge = edge.twin;

    do {
      // we can only use an edge to merge two regions if the adjacent region does not have any edges
      // apart from edge.twin already connected to the region.
      if (currentEdge !== edge.twin && currentEdge.twin.polygon === polygon) return false;
      currentEdge = currentEdge.next;
    } while (edge.twin !== currentEdge);

    return true;
  } // determines the next vertex that should added to the convex hull


  _nextVertexToAdd() {
    let nextVertex = null; // if the 'assigned' list of vertices is empty, no vertices are left

    if (this._assigned.empty() === false) {
      let maxDistance = 0; // grap the first available vertex and save the respective face

      let vertex = this._assigned.first();

      const face = vertex.face; // now calculate the farthest vertex that face can see

      do {
        const distance = face.distanceToPoint(vertex.point);

        if (distance > maxDistance) {
          maxDistance = distance;
          nextVertex = vertex;
        }

        vertex = vertex.next;
      } while (vertex !== null && vertex.face === face);
    }

    return nextVertex;
  } // updates the faces array after the computation of the convex hull
  // it ensures only visible faces are in the result set


  _updateFaces() {
    const faces = this.faces;
    const activeFaces = new Array();

    for (let i = 0, l = faces.length; i < l; i++) {
      const face = faces[i]; // only respect visible but not deleted or merged faces

      if (face.active) {
        activeFaces.push(face);
      }
    }

    this.faces.length = 0;
    this.faces.push(...activeFaces);
    return this;
  } // removes all vertices from the given face. necessary when deleting a face
  // which is necessary when the hull is going to be expanded


  _removeAllVerticesFromFace(face) {
    if (face.outside !== null) {
      // reference to the first and last vertex of this face
      const firstVertex = face.outside;
      firstVertex.face = null;
      let lastVertex = face.outside;

      while (lastVertex.next !== null && lastVertex.next.face === face) {
        lastVertex = lastVertex.next;
        lastVertex.face = null;
      }

      face.outside = null;

      this._assigned.removeChain(firstVertex, lastVertex);
    }

    return this;
  } // removes a single vertex from the given face


  _removeVertexFromFace(vertex, face) {
    vertex.face = null;

    if (vertex === face.outside) {
      // fix face.outside link
      if (vertex.next !== null && vertex.next.face === face) {
        // face has at least 2 outside vertices, move the 'outside' reference
        face.outside = vertex.next;
      } else {
        // vertex was the only outside vertex that face had
        face.outside = null;
      }
    }

    this._assigned.remove(vertex);

    return this;
  } // ensure that all unassigned points are reassigned to other faces of the
  // current convex hull. this method is always executed after the hull was
  // expanded


  _resolveUnassignedPoints(newFaces) {
    if (this._unassigned.empty() === false) {
      let vertex = this._unassigned.first();

      do {
        // buffer 'next' reference since addVertexToFace() can change it
        let nextVertex = vertex.next;
        let maxDistance = this._tolerance;
        let maxFace = null;

        for (let i = 0, l = newFaces.length; i < l; i++) {
          const face = newFaces[i];

          if (face.active) {
            const distance = face.distanceToPoint(vertex.point);

            if (distance > maxDistance) {
              maxDistance = distance;
              maxFace = face;
            }
          }
        }

        if (maxFace !== null) {
          this._addVertexToFace(vertex, maxFace);
        }

        vertex = nextVertex;
      } while (vertex !== null);
    }

    return this;
  }

}

exports.ConvexHull = ConvexHull;

class Face extends Polygon {
  constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
    super();
    this.outside = null; // reference to a vertex in a vertex list this face can see

    this.active = true;
    this.fromContour([a, b, c]);
    this.computeCentroid();
  }

  getEdge(i) {
    let edge = this.edge;

    while (i > 0) {
      edge = edge.next;
      i--;
    }

    while (i < 0) {
      edge = edge.prev;
      i++;
    }

    return edge;
  }

} // special data structures for the quick hull implementation


exports.CHFace = Face;

class Vertex {
  constructor(point = new Vector3()) {
    this.point = point;
    this.prev = null;
    this.next = null;
    this.face = null; // the face that is able to see this vertex
  }

}

exports.CHVertex = Vertex;

class VertexList {
  constructor() {
    this.head = null;
    this.tail = null;
  }

  first() {
    return this.head;
  }

  last() {
    return this.tail;
  }

  clear() {
    this.head = this.tail = null;
    return this;
  }

  insertAfter(target, vertex) {
    vertex.prev = target;
    vertex.next = target.next;

    if (!vertex.next) {
      this.tail = vertex;
    } else {
      vertex.next.prev = vertex;
    }

    target.next = vertex;
    return this;
  }

  append(vertex) {
    if (this.head === null) {
      this.head = vertex;
    } else {
      this.tail.next = vertex;
    }

    vertex.prev = this.tail;
    vertex.next = null; // the tail has no subsequent vertex

    this.tail = vertex;
    return this;
  }

  appendChain(vertex) {
    if (this.head === null) {
      this.head = vertex;
    } else {
      this.tail.next = vertex;
    }

    vertex.prev = this.tail;

    while (vertex.next !== null) {
      vertex = vertex.next;
    }

    this.tail = vertex;
    return this;
  }

  remove(vertex) {
    if (vertex.prev === null) {
      this.head = vertex.next;
    } else {
      vertex.prev.next = vertex.next;
    }

    if (vertex.next === null) {
      this.tail = vertex.prev;
    } else {
      vertex.next.prev = vertex.prev;
    }

    vertex.prev = null;
    vertex.next = null;
    return this;
  }

  removeChain(a, b) {
    if (a.prev === null) {
      this.head = b.next;
    } else {
      a.prev.next = b.next;
    }

    if (b.next === null) {
      this.tail = a.prev;
    } else {
      b.next.prev = a.prev;
    }

    a.prev = null;
    b.next = null;
    return this;
  }

  empty() {
    return this.head === null;
  }

}

exports.CHVertexList = VertexList;
const eigenDecomposition = {
  unitary: new Matrix3(),
  diagonal: new Matrix3()
};
const a = {
  c: null,
  // center
  u: [new Vector3(), new Vector3(), new Vector3()],
  // basis vectors
  e: [] // half width

};
const b = {
  c: null,
  // center
  u: [new Vector3(), new Vector3(), new Vector3()],
  // basis vectors
  e: [] // half width

};
const R = [[], [], []];
const AbsR = [[], [], []];
const t = [];
const xAxis$1 = new Vector3();
const yAxis$1 = new Vector3();
const zAxis$1 = new Vector3();
const v1$4 = new Vector3();
const closestPoint$1 = new Vector3();
/**
* Class representing an oriented bounding box (OBB). Similar to an AABB, it's a
* rectangular block but with an arbitrary orientation. When using {@link OBB#fromPoints},
* the implementation tries to provide a tight-fitting oriented bounding box. In
* many cases, the result is better than an AABB or bounding sphere but worse than a
* convex hull. However, it's more efficient to work with OBBs compared to convex hulls.
* In general, OBB's are a good compromise between performance and tightness.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class OBB {
  /**
  * Constructs a new OBB with the given values.
  *
  * @param {Vector3} center - The center of this OBB.
  * @param {Vector3} halfSizes - The half sizes of the OBB (defines its width, height and depth).
  * @param {Matrix3} rotation - The rotation of this OBB.
  */
  constructor(center = new Vector3(), halfSizes = new Vector3(), rotation = new Matrix3()) {
    /**
    * The center of this OBB.
    * @type {Vector3}
    */
    this.center = center;
    /**
    * The half sizes of the OBB (defines its width, height and depth).
    * @type {Vector3}
    */

    this.halfSizes = halfSizes;
    /**
    * The rotation of this OBB.
    * @type {Matrix3}
    */

    this.rotation = rotation;
  }
  /**
  * Sets the given values to this OBB.
  *
  * @param {Vector3} center - The center of this OBB
  * @param {Vector3} halfSizes - The half sizes of the OBB (defines its width, height and depth).
  * @param {Matrix3} rotation - The rotation of this OBB.
  * @return {OBB} A reference to this OBB.
  */


  set(center, halfSizes, rotation) {
    this.center = center;
    this.halfSizes = halfSizes;
    this.rotation = rotation;
    return this;
  }
  /**
  * Copies all values from the given OBB to this OBB.
  *
  * @param {OBB} obb - The OBB to copy.
  * @return {OBB} A reference to this OBB.
  */


  copy(obb) {
    this.center.copy(obb.center);
    this.halfSizes.copy(obb.halfSizes);
    this.rotation.copy(obb.rotation);
    return this;
  }
  /**
  * Creates a new OBB and copies all values from this OBB.
  *
  * @return {OBB} A new OBB.
  */


  clone() {
    return new this.constructor().copy(this);
  }
  /**
  * Computes the size (width, height, depth) of this OBB and stores it into the given vector.
  *
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  getSize(result) {
    return result.copy(this.halfSizes).multiplyScalar(2);
  }
  /**
  * Ensures the given point is inside this OBB and stores
  * the result in the given vector.
  *
  * Reference: Closest Point on OBB to Point in Real-Time Collision Detection
  * by Christer Ericson (chapter 5.1.4)
  *
  * @param {Vector3} point - A point in 3D space.
  * @param {Vector3} result - The result vector.
  * @return {Vector3} The result vector.
  */


  clampPoint(point, result) {
    const halfSizes = this.halfSizes;
    v1$4.subVectors(point, this.center);
    this.rotation.extractBasis(xAxis$1, yAxis$1, zAxis$1); // start at the center position of the OBB

    result.copy(this.center); // project the target onto the OBB axes and walk towards that point

    const x = MathUtils.clamp(v1$4.dot(xAxis$1), -halfSizes.x, halfSizes.x);
    result.add(xAxis$1.multiplyScalar(x));
    const y = MathUtils.clamp(v1$4.dot(yAxis$1), -halfSizes.y, halfSizes.y);
    result.add(yAxis$1.multiplyScalar(y));
    const z = MathUtils.clamp(v1$4.dot(zAxis$1), -halfSizes.z, halfSizes.z);
    result.add(zAxis$1.multiplyScalar(z));
    return result;
  }
  /**
  * Returns true if the given point is inside this OBB.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Boolean} Whether the given point is inside this OBB or not.
  */


  containsPoint(point) {
    v1$4.subVectors(point, this.center);
    this.rotation.extractBasis(xAxis$1, yAxis$1, zAxis$1); // project v1 onto each axis and check if these points lie inside the OBB

    return Math.abs(v1$4.dot(xAxis$1)) <= this.halfSizes.x && Math.abs(v1$4.dot(yAxis$1)) <= this.halfSizes.y && Math.abs(v1$4.dot(zAxis$1)) <= this.halfSizes.z;
  }
  /**
  * Returns true if the given AABB intersects this OBB.
  *
  * @param {AABB} aabb - The AABB to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsAABB(aabb) {
    return this.intersectsOBB(obb.fromAABB(aabb));
  }
  /**
  * Returns true if the given bounding sphere intersects this OBB.
  *
  * @param {BoundingSphere} sphere - The bounding sphere to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsBoundingSphere(sphere) {
    // find the point on the OBB closest to the sphere center
    this.clampPoint(sphere.center, closestPoint$1); // if that point is inside the sphere, the OBB and sphere intersect

    return closestPoint$1.squaredDistanceTo(sphere.center) <= sphere.radius * sphere.radius;
  }
  /**
  * Returns true if the given OBB intersects this OBB.
  *
  * Reference: OBB-OBB Intersection in Real-Time Collision Detection
  * by Christer Ericson (chapter 4.4.1)
  *
  * @param {OBB} obb - The OBB to test.
  * @param {Number} epsilon - The epsilon (tolerance) value.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsOBB(obb, epsilon = Number.EPSILON) {
    // prepare data structures (the code uses the same nomenclature like the reference)
    a.c = this.center;
    a.e[0] = this.halfSizes.x;
    a.e[1] = this.halfSizes.y;
    a.e[2] = this.halfSizes.z;
    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);
    b.c = obb.center;
    b.e[0] = obb.halfSizes.x;
    b.e[1] = obb.halfSizes.y;
    b.e[2] = obb.halfSizes.z;
    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a’s coordinate frame

    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        R[i][j] = a.u[i].dot(b.u[j]);
      }
    } // compute translation vector


    v1$4.subVectors(b.c, a.c); // bring translation into a’s coordinate frame

    t[0] = v1$4.dot(a.u[0]);
    t[1] = v1$4.dot(a.u[1]);
    t[2] = v1$4.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to
    // counteract arithmetic errors when two edges are parallel and
    // their cross product is (near) null

    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;
      }
    }

    let ra, rb; // test axes L = A0, L = A1, L = A2

    for (let i = 0; i < 3; i++) {
      ra = a.e[i];
      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];
      if (Math.abs(t[i]) > ra + rb) return false;
    } // test axes L = B0, L = B1, L = B2


    for (let i = 0; i < 3; i++) {
      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];
      rb = b.e[i];
      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false;
    } // test axis L = A0 x B0


    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];
    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];
    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1

    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];
    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];
    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2

    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];
    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];
    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0

    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];
    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];
    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1

    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];
    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];
    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2

    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];
    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];
    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0

    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];
    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];
    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1

    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];
    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];
    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2

    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];
    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];
    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting

    return true;
  }
  /**
  * Returns true if the given plane intersects this OBB.
  *
  * Reference: Testing Box Against Plane in Real-Time Collision Detection
  * by Christer Ericson (chapter 5.2.3)
  *
  * @param {Plane} plane - The plane to test.
  * @return {Boolean} The result of the intersection test.
  */


  intersectsPlane(plane) {
    this.rotation.extractBasis(xAxis$1, yAxis$1, zAxis$1); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;

    const r = this.halfSizes.x * Math.abs(plane.normal.dot(xAxis$1)) + this.halfSizes.y * Math.abs(plane.normal.dot(yAxis$1)) + this.halfSizes.z * Math.abs(plane.normal.dot(zAxis$1)); // compute distance of the OBB's center from the plane

    const d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval

    return Math.abs(d) <= r;
  }
  /**
  * Computes the OBB from an AABB.
  *
  * @param {AABB} aabb - The AABB.
  * @return {OBB} A reference to this OBB.
  */


  fromAABB(aabb) {
    aabb.getCenter(this.center);
    aabb.getSize(this.halfSizes).multiplyScalar(0.5);
    this.rotation.identity();
    return this;
  }
  /**
  * Computes the minimum enclosing OBB for the given set of points. The method is an
  * implementation of {@link http://gamma.cs.unc.edu/users/gottschalk/main.pdf Collision Queries using Oriented Bounding Boxes}
  * by Stefan Gottschalk.
  * According to the dissertation, the quality of the fitting process varies from
  * the respective input. This method uses the best approach by computing the
  * covariance matrix based on the triangles of the convex hull (chapter 3.4.3).
  *
  * However, the implementation is susceptible to {@link https://en.wikipedia.org/wiki/Regular_polygon regular polygons}
  * like cubes or spheres. For such shapes, it's recommended to verify the quality
  * of the produced OBB. Consider to use an AABB or bounding sphere if the result
  * is not satisfying.
  *
  * @param {Array<Vector3>} points - An array of 3D vectors representing points in 3D space.
  * @return {OBB} A reference to this OBB.
  */


  fromPoints(points) {
    const convexHull = new ConvexHull().fromPoints(points); // 1. iterate over all faces of the convex hull and triangulate

    const faces = convexHull.faces;
    const edges = new Array();
    const triangles = new Array();

    for (let i = 0, il = faces.length; i < il; i++) {
      const face = faces[i];
      let edge = face.edge;
      edges.length = 0; // gather edges

      do {
        edges.push(edge);
        edge = edge.next;
      } while (edge !== face.edge); // triangulate


      const triangleCount = edges.length - 2;

      for (let j = 1, jl = triangleCount; j <= jl; j++) {
        const v1 = edges[0].vertex;
        const v2 = edges[j + 0].vertex;
        const v3 = edges[j + 1].vertex;
        triangles.push(v1.x, v1.y, v1.z);
        triangles.push(v2.x, v2.y, v2.z);
        triangles.push(v3.x, v3.y, v3.z);
      }
    } // 2. build covariance matrix


    const p = new Vector3();
    const q = new Vector3();
    const r = new Vector3();
    const qp = new Vector3();
    const rp = new Vector3();
    const v = new Vector3();
    const mean = new Vector3();
    const weightedMean = new Vector3();
    let areaSum = 0;
    let cxx, cxy, cxz, cyy, cyz, czz;
    cxx = cxy = cxz = cyy = cyz = czz = 0;

    for (let i = 0, l = triangles.length; i < l; i += 9) {
      p.fromArray(triangles, i);
      q.fromArray(triangles, i + 3);
      r.fromArray(triangles, i + 6);
      mean.set(0, 0, 0);
      mean.add(p).add(q).add(r).divideScalar(3);
      qp.subVectors(q, p);
      rp.subVectors(r, p);
      const area = v.crossVectors(qp, rp).length() / 2; // .length() represents the frobenius norm here

      weightedMean.add(v.copy(mean).multiplyScalar(area));
      areaSum += area;
      cxx += (9.0 * mean.x * mean.x + p.x * p.x + q.x * q.x + r.x * r.x) * (area / 12);
      cxy += (9.0 * mean.x * mean.y + p.x * p.y + q.x * q.y + r.x * r.y) * (area / 12);
      cxz += (9.0 * mean.x * mean.z + p.x * p.z + q.x * q.z + r.x * r.z) * (area / 12);
      cyy += (9.0 * mean.y * mean.y + p.y * p.y + q.y * q.y + r.y * r.y) * (area / 12);
      cyz += (9.0 * mean.y * mean.z + p.y * p.z + q.y * q.z + r.y * r.z) * (area / 12);
      czz += (9.0 * mean.z * mean.z + p.z * p.z + q.z * q.z + r.z * r.z) * (area / 12);
    }

    weightedMean.divideScalar(areaSum);
    cxx /= areaSum;
    cxy /= areaSum;
    cxz /= areaSum;
    cyy /= areaSum;
    cyz /= areaSum;
    czz /= areaSum;
    cxx -= weightedMean.x * weightedMean.x;
    cxy -= weightedMean.x * weightedMean.y;
    cxz -= weightedMean.x * weightedMean.z;
    cyy -= weightedMean.y * weightedMean.y;
    cyz -= weightedMean.y * weightedMean.z;
    czz -= weightedMean.z * weightedMean.z;
    const covarianceMatrix = new Matrix3();
    covarianceMatrix.elements[0] = cxx;
    covarianceMatrix.elements[1] = cxy;
    covarianceMatrix.elements[2] = cxz;
    covarianceMatrix.elements[3] = cxy;
    covarianceMatrix.elements[4] = cyy;
    covarianceMatrix.elements[5] = cyz;
    covarianceMatrix.elements[6] = cxz;
    covarianceMatrix.elements[7] = cyz;
    covarianceMatrix.elements[8] = czz; // 3. compute rotation, center and half sizes

    covarianceMatrix.eigenDecomposition(eigenDecomposition);
    const unitary = eigenDecomposition.unitary;
    const v1 = new Vector3();
    const v2 = new Vector3();
    const v3 = new Vector3();
    unitary.extractBasis(v1, v2, v3);
    let u1 = -Infinity;
    let u2 = -Infinity;
    let u3 = -Infinity;
    let l1 = Infinity;
    let l2 = Infinity;
    let l3 = Infinity;

    for (let i = 0, l = points.length; i < l; i++) {
      const p = points[i];
      u1 = Math.max(v1.dot(p), u1);
      u2 = Math.max(v2.dot(p), u2);
      u3 = Math.max(v3.dot(p), u3);
      l1 = Math.min(v1.dot(p), l1);
      l2 = Math.min(v2.dot(p), l2);
      l3 = Math.min(v3.dot(p), l3);
    }

    v1.multiplyScalar(0.5 * (l1 + u1));
    v2.multiplyScalar(0.5 * (l2 + u2));
    v3.multiplyScalar(0.5 * (l3 + u3)); // center

    this.center.add(v1).add(v2).add(v3);
    this.halfSizes.x = u1 - l1;
    this.halfSizes.y = u2 - l2;
    this.halfSizes.z = u3 - l3; // halfSizes

    this.halfSizes.multiplyScalar(0.5); // rotation

    this.rotation.copy(unitary);
    return this;
  }
  /**
  * Returns true if the given OBB is deep equal with this OBB.
  *
  * @param {OBB} obb - The OBB to test.
  * @return {Boolean} The result of the equality test.
  */


  equals(obb) {
    return obb.center.equals(this.center) && obb.halfSizes.equals(this.halfSizes) && obb.rotation.equals(this.rotation);
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      center: this.center.toArray(new Array()),
      halfSizes: this.halfSizes.toArray(new Array()),
      rotation: this.rotation.toArray(new Array())
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {OBB} A reference to this OBB.
  */


  fromJSON(json) {
    this.center.fromArray(json.center);
    this.halfSizes.fromArray(json.halfSizes);
    this.rotation.fromArray(json.rotation);
    return this;
  }

}

exports.OBB = OBB;
const obb = new OBB();
/**
* Class for representing navigation edges.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments Edge
*/

class NavEdge extends Edge {
  /**
  * Constructs a navigation edge.
  *
  * @param {Number} from - The index of the from node.
  * @param {Number} to - The index of the to node.
  * @param {Number} cost - The cost of this edge.
  */
  constructor(from = -1, to = -1, cost = 0) {
    super(from, to, cost);
  }

}
/**
* Class for representing navigation nodes.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments Node
*/


exports.NavEdge = NavEdge;

class NavNode extends Node {
  /**
  * Constructs a new navigation node.
  *
  * @param {Number} index - The unique index of this node.
  * @param {Vector3} position - The position of the node in 3D space.
  * @param {Object} userData - Custom user data connected to this node.
  */
  constructor(index = -1, position = new Vector3(), userData = {}) {
    super(index);
    /**
    * The position of the node in 3D space.
    * @type {Vector3}
    */

    this.position = position;
    /**
    * Custom user data connected to this node.
    * @type {Object}
    */

    this.userData = userData;
  }

}
/**
* Class with graph helpers.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.NavNode = NavNode;

class GraphUtils {
  /**
  * Generates a navigation graph with a planar grid layout based on the given parameters.
  *
  * @param {Number} size - The size (width and depth) in x and z direction
  * @param {Number} segments - The amount of segments in x and z direction.
  * @return {Graph} The new graph.
  */
  static createGridLayout(size, segments) {
    const graph = new Graph();
    graph.digraph = true;
    const halfSize = size / 2;
    const segmentSize = size / segments; // nodes

    let index = 0;

    for (let i = 0; i <= segments; i++) {
      const z = i * segmentSize - halfSize;

      for (let j = 0; j <= segments; j++) {
        const x = j * segmentSize - halfSize;
        const position = new Vector3(x, 0, z);
        const node = new NavNode(index, position);
        graph.addNode(node);
        index++;
      }
    } // edges


    const count = graph.getNodeCount();
    const range = Math.pow(segmentSize + segmentSize / 2, 2);

    for (let i = 0; i < count; i++) {
      const node = graph.getNode(i); // check distance to all other nodes

      for (let j = 0; j < count; j++) {
        if (i !== j) {
          const neighbor = graph.getNode(j);
          const distanceSquared = neighbor.position.squaredDistanceTo(node.position);

          if (distanceSquared <= range) {
            const distance = Math.sqrt(distanceSquared);
            const edge = new NavEdge(i, j, distance);
            graph.addEdge(edge);
          }
        }
      }
    }

    return graph;
  }

}
/**
* A corridor is a sequence of portal edges representing a walkable way within a navigation mesh. The class is able
* to find the shortest path through this corridor as a sequence of waypoints. It's an implementation of the so called
* {@link http://digestingduck.blogspot.com/2010/03/simple-stupid-funnel-algorithm.html Funnel Algorithm}. Read
* the paper {@link https://aaai.org/Papers/AAAI/2006/AAAI06-148.pdf Efficient Triangulation-Based Pathfinding} for
* more detailed information.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @author {@link https://github.com/robp94|robp94}
*/


exports.GraphUtils = GraphUtils;

class Corridor {
  /**
  * Creates a new corridor.
  */
  constructor() {
    /**
    * The portal edges of the corridor.
    * @type {Array<Object>}
    */
    this.portalEdges = new Array();
  }
  /**
  * Adds a portal edge defined by its left and right vertex to this corridor.
  *
  * @param {Vector3} left - The left point (origin) of the portal edge.
  * @param {Vector3} right - The right point (destination) of the portal edge.
  * @return {Corridor} A reference to this corridor.
  */


  push(left, right) {
    this.portalEdges.push({
      left: left,
      right: right
    });
    return this;
  }
  /**
  * Generates the shortest path through the corridor as an array of 3D vectors.
  *
  * @return {Array<Vector3>} An array of 3D waypoints.
  */


  generate() {
    const portalEdges = this.portalEdges;
    const path = new Array(); // init scan state

    let portalApex, portalLeft, portalRight;
    let apexIndex = 0,
        leftIndex = 0,
        rightIndex = 0;
    portalApex = portalEdges[0].left;
    portalLeft = portalEdges[0].left;
    portalRight = portalEdges[0].right; // add start point

    path.push(portalApex);

    for (let i = 1, l = portalEdges.length; i < l; i++) {
      const left = portalEdges[i].left;
      const right = portalEdges[i].right; // update right vertex

      if (MathUtils.area(portalApex, portalRight, right) <= 0) {
        if (portalApex === portalRight || MathUtils.area(portalApex, portalLeft, right) > 0) {
          // tighten the funnel
          portalRight = right;
          rightIndex = i;
        } else {
          // right over left, insert left to path and restart scan from portal left point
          path.push(portalLeft); // make current left the new apex

          portalApex = portalLeft;
          apexIndex = leftIndex; // review eset portal

          portalLeft = portalApex;
          portalRight = portalApex;
          leftIndex = apexIndex;
          rightIndex = apexIndex; // restart scan

          i = apexIndex;
          continue;
        }
      } // update left vertex


      if (MathUtils.area(portalApex, portalLeft, left) >= 0) {
        if (portalApex === portalLeft || MathUtils.area(portalApex, portalRight, left) < 0) {
          // tighten the funnel
          portalLeft = left;
          leftIndex = i;
        } else {
          // left over right, insert right to path and restart scan from portal right point
          path.push(portalRight); // make current right the new apex

          portalApex = portalRight;
          apexIndex = rightIndex; // reset portal

          portalLeft = portalApex;
          portalRight = portalApex;
          leftIndex = apexIndex;
          rightIndex = apexIndex; // restart scan

          i = apexIndex;
          continue;
        }
      }
    }

    if (path.length === 0 || path[path.length - 1] !== portalEdges[portalEdges.length - 1].left) {
      // append last point to path
      path.push(portalEdges[portalEdges.length - 1].left);
    }

    return path;
  }

}
/**
* A lookup table representing the cost associated from traveling from one
* node to every other node in the navgiation mesh's graph.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.Corridor = Corridor;

class CostTable {
  /**
  * Creates a new cost table.
  */
  constructor() {
    this._nodeMap = new Map();
  }
  /**
  * Inits the cost table for the given navigation mesh.
  *
  * @param {NavMesh} navMesh - The navigation mesh.
  * @return {CostTable} A reference to this cost table.
  */


  init(navMesh) {
    const graph = navMesh.graph;
    const nodes = new Array();
    this.clear(); // iterate over all nodes

    graph.getNodes(nodes);

    for (let i = 0, il = nodes.length; i < il; i++) {
      const from = nodes[i]; // compute the distance to all other nodes

      for (let j = 0, jl = nodes.length; j < jl; j++) {
        const to = nodes[j];
        const path = navMesh.findPath(from.position, to.position);
        const cost = computeDistanceOfPath(path);
        this.set(from.index, to.index, cost);
      }
    }

    return this;
  }
  /**
  * Clears the cost table.
  *
  * @return {CostTable} A reference to this cost table.
  */


  clear() {
    this._nodeMap.clear();

    return this;
  }
  /**
  * Sets the cost for the given pair of navigation nodes.
  *
  * @param {Number} from - The start node index.
  * @param {Number} to - The destintation node index.
  * @param {Number} cost - The cost.
  * @return {CostTable} A reference to this cost table.
  */


  set(from, to, cost) {
    const nodeMap = this._nodeMap;
    if (nodeMap.has(from) === false) nodeMap.set(from, new Map());
    const nodeCostMap = nodeMap.get(from);
    nodeCostMap.set(to, cost);
    return this;
  }
  /**
  * Returns the cost for the given pair of navigation nodes.
  *
  * @param {Number} from - The start node index.
  * @param {Number} to - The destintation node index.
  * @return {Number} The cost.
  */


  get(from, to) {
    const nodeCostMap = this._nodeMap.get(from);

    return nodeCostMap.get(to);
  }
  /**
  * Returns the size of the cost table (amount of entries).
  *
  * @return {Number} The size of the cost table.
  */


  size() {
    return this._nodeMap.size;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      nodes: new Array()
    };

    for (let [key, value] of this._nodeMap.entries()) {
      json.nodes.push({
        index: key,
        costs: Array.from(value)
      });
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {CostTable} A reference to this cost table.
  */


  fromJSON(json) {
    const nodes = json.nodes;

    for (let i = 0, l = nodes.length; i < l; i++) {
      const node = nodes[i];
      const index = node.index;
      const costs = new Map(node.costs);

      this._nodeMap.set(index, costs);
    }

    return this;
  }

} //


exports.CostTable = CostTable;

function computeDistanceOfPath(path) {
  let distance = 0;

  for (let i = 0, l = path.length - 1; i < l; i++) {
    const from = path[i];
    const to = path[i + 1];
    distance += from.distanceTo(to);
  }

  return distance;
}

const pointOnLineSegment = new Vector3();
const edgeDirection = new Vector3();
const movementDirection = new Vector3();
const newPosition = new Vector3();
const lineSegment = new LineSegment();
const edges = new Array();
const closestBorderEdge = {
  edge: null,
  closestPoint: new Vector3()
};
/**
* Implementation of a navigation mesh. A navigation mesh is a network of convex polygons
* which define the walkable areas of a game environment. A convex polygon allows unobstructed travel
* from any point in the polygon to any other. This is useful because it enables the navigation mesh
* to be represented using a graph where each node represents a convex polygon and their respective edges
* represent the neighborly relations to other polygons. More compact navigation graphs lead
* to faster graph search execution.
*
* This particular implementation is able to merge convex polygons into bigger ones as long
* as they keep their convexity and coplanarity. The performance of the path finding process and convex region tests
* for complex navigation meshes can be improved by using a spatial index like {@link CellSpacePartitioning}.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @author {@link https://github.com/robp94|robp94}
*/

class NavMesh {
  /**
  * Constructs a new navigation mesh.
  */
  constructor() {
    /**
    * The internal navigation graph of this navigation mesh representing neighboring polygons.
    * @type {Graph}
    */
    this.graph = new Graph();
    this.graph.digraph = true;
    /**
    * The list of convex regions.
    * @type {Array<Polygon>}
    */

    this.regions = new Array();
    /**
    * A reference to a spatial index.
    * @type {?CellSpacePartitioning}
    * @default null
    */

    this.spatialIndex = null;
    /**
    * The tolerance value for the coplanar test.
    * @type {Number}
    * @default 1e-3
    */

    this.epsilonCoplanarTest = 1e-3;
    /**
    * The tolerance value for the containment test.
    * @type {Number}
    * @default 1
    */

    this.epsilonContainsTest = 1;
    /**
    * Whether convex regions should be merged or not.
    * @type {Boolean}
    * @default true
    */

    this.mergeConvexRegions = true; //

    this._borderEdges = new Array();
  }
  /**
  * Creates the navigation mesh from an array of convex polygons.
  *
  * @param {Array<Polygon>} polygons - An array of convex polygons.
  * @return {NavMesh} A reference to this navigation mesh.
  */


  fromPolygons(polygons) {
    this.clear(); //

    const initialEdgeList = new Array();
    const sortedEdgeList = new Array(); // setup list with all edges

    for (let i = 0, l = polygons.length; i < l; i++) {
      const polygon = polygons[i];
      let edge = polygon.edge;

      do {
        initialEdgeList.push(edge);
        edge = edge.next;
      } while (edge !== polygon.edge); //


      this.regions.push(polygon);
    } // setup twin references and sorted list of edges


    for (let i = 0, il = initialEdgeList.length; i < il; i++) {
      let edge0 = initialEdgeList[i];
      if (edge0.twin !== null) continue;

      for (let j = i + 1, jl = initialEdgeList.length; j < jl; j++) {
        let edge1 = initialEdgeList[j];

        if (edge0.tail().equals(edge1.head()) && edge0.head().equals(edge1.tail())) {
          // opponent edge found, set twin references
          edge0.linkOpponent(edge1); // add edge to list

          const cost = edge0.squaredLength();
          sortedEdgeList.push({
            cost: cost,
            edge: edge0
          }); // there can only be a single twin

          break;
        }
      }
    }

    sortedEdgeList.sort(descending); // half-edge data structure is now complete, begin build of convex regions

    this._buildRegions(sortedEdgeList); // now build the navigation graph


    this._buildGraph();

    return this;
  }
  /**
  * Clears the internal state of this navigation mesh.
  *
  * @return {NavMesh} A reference to this navigation mesh.
  */


  clear() {
    this.graph.clear();
    this.regions.length = 0;
    this.spatialIndex = null;
    return this;
  }
  /**
  * Returns the closest convex region for the given point in 3D space.
  *
  * @param {Vector3} point - A point in 3D space.
  * @return {Polygon} The closest convex region.
  */


  getClosestRegion(point) {
    const regions = this.regions;
    let closesRegion = null;
    let minDistance = Infinity;

    for (let i = 0, l = regions.length; i < l; i++) {
      const region = regions[i];
      const distance = point.squaredDistanceTo(region.centroid);

      if (distance < minDistance) {
        minDistance = distance;
        closesRegion = region;
      }
    }

    return closesRegion;
  }
  /**
  * Returns at random a convex region from the navigation mesh.
  *
  * @return {Polygon} The convex region.
  */


  getRandomRegion() {
    const regions = this.regions;
    let index = Math.floor(Math.random() * regions.length);
    if (index === regions.length) index = regions.length - 1;
    return regions[index];
  }
  /**
  * Returns the region that contains the given point. The computational overhead
  * of this method for complex navigation meshes can be reduced by using a spatial index.
  * If no convex region contains the point, *null* is returned.
  *
  * @param {Vector3} point - A point in 3D space.
  * @param {Number} epsilon - Tolerance value for the containment test.
  * @return {Polygon} The convex region that contains the point.
  */


  getRegionForPoint(point, epsilon = 1e-3) {
    let regions;

    if (this.spatialIndex !== null) {
      const index = this.spatialIndex.getIndexForPosition(point);
      regions = this.spatialIndex.cells[index].entries;
    } else {
      regions = this.regions;
    } //


    for (let i = 0, l = regions.length; i < l; i++) {
      const region = regions[i];

      if (region.contains(point, epsilon) === true) {
        return region;
      }
    }

    return null;
  }
  /**
  * Returns the node index for the given region. The index represents
  * the navigation node of a region in the navigation graph.
  *
  * @param {Polygon} region - The convex region.
  * @return {Number} The respective node index.
  */


  getNodeIndex(region) {
    return this.regions.indexOf(region);
  }
  /**
  * Returns the shortest path that leads from the given start position to the end position.
  * The computational overhead of this method for complex navigation meshes can greatly
  * reduced by using a spatial index.
  *
  * @param {Vector3} from - The start/source position.
  * @param {Vector3} to - The end/destination position.
  * @return {Array<Vector3>} The shortest path as an array of points.
  */


  findPath(from, to) {
    const graph = this.graph;
    const path = new Array();
    let fromRegion = this.getRegionForPoint(from, this.epsilonContainsTest);
    let toRegion = this.getRegionForPoint(to, this.epsilonContainsTest);

    if (fromRegion === null || toRegion === null) {
      // if source or target are outside the navmesh, choose the nearest convex region
      if (fromRegion === null) fromRegion = this.getClosestRegion(from);
      if (toRegion === null) toRegion = this.getClosestRegion(to);
    } // check if both convex region are identical


    if (fromRegion === toRegion) {
      // no search necessary, directly create the path
      path.push(new Vector3().copy(from));
      path.push(new Vector3().copy(to));
      return path;
    } else {
      // source and target are not in same region, perform search
      const source = this.getNodeIndex(fromRegion);
      const target = this.getNodeIndex(toRegion);
      const astar = new AStar(graph, source, target);
      astar.search();

      if (astar.found === true) {
        const polygonPath = astar.getPath();
        const corridor = new Corridor();
        corridor.push(from, from); // push sequence of portal edges to corridor

        const portalEdge = {
          left: null,
          right: null
        };

        for (let i = 0, l = polygonPath.length - 1; i < l; i++) {
          const region = this.regions[polygonPath[i]];
          const nextRegion = this.regions[polygonPath[i + 1]];

          this._getPortalEdge(region, nextRegion, portalEdge);

          corridor.push(portalEdge.left, portalEdge.right);
        }

        corridor.push(to, to);
        path.push(...corridor.generate());
      }

      return path;
    }
  }
  /**
  * This method can be used to restrict the movement of a game entity on the navigation mesh.
  * Instead of preventing any form of translation when a game entity hits a border edge, the
  * movement is clamped along the contour of the navigation mesh. The computational overhead
  * of this method for complex navigation meshes can be reduced by using a spatial index.
  *
  * @param {Polygon} currentRegion - The current convex region of the game entity.
  * @param {Vector3} startPosition - The original start position of the entity for the current simulation step.
  * @param {Vector3} endPosition - The original end position of the entity for the current simulation step.
  * @param {Vector3} clampPosition - The clamped position of the entity for the current simulation step.
  * @return {Polygon} The new convex region the game entity is in.
  */


  clampMovement(currentRegion, startPosition, endPosition, clampPosition) {
    let newRegion = this.getRegionForPoint(endPosition, this.epsilonContainsTest); // if newRegion is null, "endPosition" lies outside of the navMesh

    if (newRegion === null) {
      if (currentRegion === null) throw new Error('YUKA.NavMesh.clampMovement(): No current region available.'); // determine closest border edge

      this._getClosestBorderEdge(startPosition, closestBorderEdge);

      const closestEdge = closestBorderEdge.edge;
      const closestPoint = closestBorderEdge.closestPoint; // calculate movement and edge direction

      closestEdge.getDirection(edgeDirection);
      const length = movementDirection.subVectors(endPosition, startPosition).length(); // this value influences the speed at which the entity moves along the edge

      let f = 0; // if startPosition and endPosition are equal, length becomes zero.
      // it's important to test this edge case in order to avoid NaN values.

      if (length !== 0) {
        movementDirection.divideScalar(length);
        f = edgeDirection.dot(movementDirection);
      } // calculate new position on the edge


      newPosition.copy(closestPoint).add(edgeDirection.multiplyScalar(f * length)); // the following value "t" tells us if the point exceeds the line segment

      lineSegment.set(closestEdge.prev.vertex, closestEdge.vertex);
      const t = lineSegment.closestPointToPointParameter(newPosition, false); //

      if (t >= 0 && t <= 1) {
        // point is within line segment, we can safely use the new position
        clampPosition.copy(newPosition);
      } else {
        // check, if the new point lies outside the navMesh
        newRegion = this.getRegionForPoint(newPosition, this.epsilonContainsTest);

        if (newRegion !== null) {
          // if not, everything is fine
          clampPosition.copy(newPosition);
          return newRegion;
        } // otherwise prevent movement


        clampPosition.copy(startPosition);
      }

      return currentRegion;
    } else {
      // return the new region
      return newRegion;
    }
  }
  /**
  * Updates the spatial index by assigning all convex regions to the
  * partitions of the spatial index.
  *
  * @return {NavMesh} A reference to this navigation mesh.
  */


  updateSpatialIndex() {
    if (this.spatialIndex !== null) {
      this.spatialIndex.makeEmpty();
      const regions = this.regions;

      for (let i = 0, l = regions.length; i < l; i++) {
        const region = regions[i];
        this.spatialIndex.addPolygon(region);
      }
    }

    return this;
  }

  _buildRegions(edgeList) {
    const regions = this.regions;
    const cache = {
      leftPrev: null,
      leftNext: null,
      rightPrev: null,
      rightNext: null
    };

    if (this.mergeConvexRegions === true) {
      // process edges from longest to shortest
      for (let i = 0, l = edgeList.length; i < l; i++) {
        const entry = edgeList[i];
        let candidate = entry.edge; // cache current references for possible restore

        cache.prev = candidate.prev;
        cache.next = candidate.next;
        cache.prevTwin = candidate.twin.prev;
        cache.nextTwin = candidate.twin.next; // temporarily change the first polygon in order to represent both polygons

        candidate.prev.next = candidate.twin.next;
        candidate.next.prev = candidate.twin.prev;
        candidate.twin.prev.next = candidate.next;
        candidate.twin.next.prev = candidate.prev;
        const polygon = candidate.polygon;
        polygon.edge = candidate.prev;

        if (polygon.convex() === true && polygon.coplanar(this.epsilonCoplanarTest) === true) {
          // correct polygon reference of all edges
          let edge = polygon.edge;

          do {
            edge.polygon = polygon;
            edge = edge.next;
          } while (edge !== polygon.edge); // delete obsolete polygon


          const index = regions.indexOf(entry.edge.twin.polygon);
          regions.splice(index, 1);
        } else {
          // restore
          cache.prev.next = candidate;
          cache.next.prev = candidate;
          cache.prevTwin.next = candidate.twin;
          cache.nextTwin.prev = candidate.twin;
          polygon.edge = candidate;
        }
      }
    } // after the merging of convex regions, do some post-processing


    for (let i = 0, l = regions.length; i < l; i++) {
      const region = regions[i]; // compute the centroid of the region which can be used as
      // a destination point in context of path finding

      region.computeCentroid(); // gather all border edges used by clampMovement()

      let edge = region.edge;

      do {
        if (edge.twin === null) this._borderEdges.push(edge);
        edge = edge.next;
      } while (edge !== region.edge);
    }
  }

  _buildGraph() {
    const graph = this.graph;
    const regions = this.regions; // for each region, the code creates an array of directly accessible regions

    const regionNeighbourhood = new Array();

    for (let i = 0, l = regions.length; i < l; i++) {
      const region = regions[i];
      const nodeIndices = new Array();
      regionNeighbourhood.push(nodeIndices);
      let edge = region.edge; // iterate through all egdes of the region (in other words: along its contour)

      do {
        // check for a portal edge
        if (edge.twin !== null) {
          const nodeIndex = this.getNodeIndex(edge.twin.polygon);
          nodeIndices.push(nodeIndex); // the node index of the adjacent region
          // add node for this region to the graph if necessary

          if (graph.hasNode(this.getNodeIndex(edge.polygon)) === false) {
            const node = new NavNode(this.getNodeIndex(edge.polygon), edge.polygon.centroid);
            graph.addNode(node);
          }
        }

        edge = edge.next;
      } while (edge !== region.edge);
    } // add navigation edges


    for (let i = 0, il = regionNeighbourhood.length; i < il; i++) {
      const indices = regionNeighbourhood[i];
      const from = i;

      for (let j = 0, jl = indices.length; j < jl; j++) {
        const to = indices[j];

        if (from !== to) {
          if (graph.hasEdge(from, to) === false) {
            const nodeFrom = graph.getNode(from);
            const nodeTo = graph.getNode(to);
            const cost = nodeFrom.position.distanceTo(nodeTo.position);
            graph.addEdge(new NavEdge(from, to, cost));
          }
        }
      }
    }

    return this;
  }

  _getClosestBorderEdge(point, closestBorderEdge) {
    let borderEdges;
    let minDistance = Infinity;

    if (this.spatialIndex !== null) {
      edges.length = 0;
      const index = this.spatialIndex.getIndexForPosition(point);
      const regions = this.spatialIndex.cells[index].entries;

      for (let i = 0, l = regions.length; i < l; i++) {
        const region = regions[i];
        let edge = region.edge;

        do {
          if (edge.twin === null) edges.push(edge);
          edge = edge.next;
        } while (edge !== region.edge);
      } // use only border edges from adjacent convex regions (fast)


      borderEdges = edges;
    } else {
      // use all border edges (slow)
      borderEdges = this._borderEdges;
    } //


    for (let i = 0, l = borderEdges.length; i < l; i++) {
      const edge = borderEdges[i];
      lineSegment.set(edge.prev.vertex, edge.vertex);
      const t = lineSegment.closestPointToPointParameter(point);
      lineSegment.at(t, pointOnLineSegment);
      const distance = pointOnLineSegment.squaredDistanceTo(point);

      if (distance < minDistance) {
        minDistance = distance;
        closestBorderEdge.edge = edge;
        closestBorderEdge.closestPoint.copy(pointOnLineSegment);
      }
    }

    return this;
  } // Determines the portal edge that can be used to reach the given polygon over its twin reference.


  _getPortalEdge(region1, region2, portalEdge) {
    let edge = region1.edge;

    do {
      if (edge.twin !== null) {
        if (edge.twin.polygon === region2) {
          // the direction of portal edges are reversed. so "left" is the edge's origin vertex and "right"
          // is the destintation vertex. More details in issue #5
          portalEdge.left = edge.prev.vertex;
          portalEdge.right = edge.vertex;
          return portalEdge;
        }
      }

      edge = edge.next;
    } while (edge !== region1.edge);

    portalEdge.left = null;
    portalEdge.right = null;
    return portalEdge;
  }

} //


exports.NavMesh = NavMesh;

function descending(a, b) {
  return a.cost < b.cost ? 1 : a.cost > b.cost ? -1 : 0;
}
/**
* Class for loading navigation meshes as glTF assets. The loader supports
* *glTF* and *glb* files, embedded buffers, index and non-indexed geometries.
* Interleaved geometry data are not yet supported.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


class NavMeshLoader {
  /**
  * Loads a {@link NavMesh navigation mesh} from the given URL. The second parameter can be used
  * to influence the parsing of the navigation mesh.
  *
  * @param {String} url - The URL of the glTF asset.
  * @param {Object} options - The (optional) configuration object.
  * @return {Promise} A promise representing the loading and parsing process.
  */
  load(url, options) {
    return new Promise((resolve, reject) => {
      fetch(url).then(response => {
        if (response.status >= 200 && response.status < 300) {
          return response.arrayBuffer();
        } else {
          const error = new Error(response.statusText || response.status);
          error.response = response;
          return Promise.reject(error);
        }
      }).then(arrayBuffer => {
        return this.parse(arrayBuffer, url, options);
      }).then(data => {
        resolve(data);
      }).catch(error => {
        Logger.error('YUKA.NavMeshLoader: Unable to load navigation mesh.', error);
        reject(error);
      });
    });
  }
  /**
  * Use this method if you are loading the contents of a navmesh not via {@link NavMeshLoader#load}.
  * This is for example useful in a node environment.
  *
  * It's mandatory to use glb files with embedded buffer data if you are going to load nav meshes
  * in node.js.
  *
  * @param {ArrayBuffer} arrayBuffer - The array buffer.
  * @param {String} url - The (optional) URL.
  * @param {Object} options - The (optional) configuration object.
  * @return {Promise} A promise representing the parsing process.
  */


  parse(arrayBuffer, url, options) {
    const parser = new Parser();
    const decoder = new TextDecoder();
    let data;
    const magic = decoder.decode(new Uint8Array(arrayBuffer, 0, 4));

    if (magic === BINARY_EXTENSION_HEADER_MAGIC) {
      parser.parseBinary(arrayBuffer);
      data = parser.extensions.get('BINARY').content;
    } else {
      data = decoder.decode(new Uint8Array(arrayBuffer));
    }

    const json = JSON.parse(data);

    if (json.asset === undefined || json.asset.version[0] < 2) {
      throw new Error('YUKA.NavMeshLoader: Unsupported asset version.');
    } else {
      const path = extractUrlBase(url);
      return parser.parse(json, path, options);
    }
  }

}

exports.NavMeshLoader = NavMeshLoader;

class Parser {
  constructor() {
    this.json = null;
    this.path = null;
    this.cache = new Map();
    this.extensions = new Map();
  }

  parse(json, path, options) {
    this.json = json;
    this.path = path; // read the first mesh in the glTF file

    return this.getDependency('mesh', 0).then(data => {
      // parse the raw geometry data into a bunch of polygons
      const polygons = this.parseGeometry(data); // create and config navMesh

      const navMesh = new NavMesh();

      if (options) {
        if (options.epsilonCoplanarTest !== undefined) navMesh.epsilonCoplanarTest = options.epsilonCoplanarTest;
        if (options.mergeConvexRegions !== undefined) navMesh.mergeConvexRegions = options.mergeConvexRegions;
      } // use polygons to setup the nav mesh


      return navMesh.fromPolygons(polygons);
    });
  }

  parseGeometry(data) {
    const index = data.index;
    const position = data.position;
    const vertices = new Array();
    const polygons = new Array(); // vertices

    for (let i = 0, l = position.length; i < l; i += 3) {
      const v = new Vector3();
      v.x = position[i + 0];
      v.y = position[i + 1];
      v.z = position[i + 2];
      vertices.push(v);
    } // polygons


    if (index) {
      // indexed geometry
      for (let i = 0, l = index.length; i < l; i += 3) {
        const a = index[i + 0];
        const b = index[i + 1];
        const c = index[i + 2];
        const contour = [vertices[a], vertices[b], vertices[c]];
        const polygon = new Polygon().fromContour(contour);
        polygons.push(polygon);
      }
    } else {
      // non-indexed geometry //todo test
      for (let i = 0, l = vertices.length; i < l; i += 3) {
        const contour = [vertices[i + 0], vertices[i + 1], vertices[i + 2]];
        const polygon = new Polygon().fromContour(contour);
        polygons.push(polygon);
      }
    }

    return polygons;
  }

  getDependencies(type) {
    const cache = this.cache;
    let dependencies = cache.get(type);

    if (!dependencies) {
      const definitions = this.json[type + (type === 'mesh' ? 'es' : 's')] || new Array();
      dependencies = Promise.all(definitions.map((definition, index) => {
        return this.getDependency(type, index);
      }));
      cache.set(type, dependencies);
    }

    return dependencies;
  }

  getDependency(type, index) {
    const cache = this.cache;
    const key = type + ':' + index;
    let dependency = cache.get(key);

    if (dependency === undefined) {
      switch (type) {
        case 'accessor':
          dependency = this.loadAccessor(index);
          break;

        case 'buffer':
          dependency = this.loadBuffer(index);
          break;

        case 'bufferView':
          dependency = this.loadBufferView(index);
          break;

        case 'mesh':
          dependency = this.loadMesh(index);
          break;

        default:
          throw new Error('Unknown type: ' + type);
      }

      cache.set(key, dependency);
    }

    return dependency;
  }

  loadBuffer(index) {
    const json = this.json;
    const definition = json.buffers[index];

    if (definition.uri === undefined && index === 0) {
      return Promise.resolve(this.extensions.get('BINARY').body);
    }

    return new Promise((resolve, reject) => {
      const url = resolveURI(definition.uri, this.path);
      fetch(url).then(response => {
        return response.arrayBuffer();
      }).then(arrayBuffer => {
        resolve(arrayBuffer);
      }).catch(error => {
        Logger.error('YUKA.NavMeshLoader: Unable to load buffer.', error);
        reject(error);
      });
    });
  }

  loadBufferView(index) {
    const json = this.json;
    const definition = json.bufferViews[index];
    return this.getDependency('buffer', definition.buffer).then(buffer => {
      const byteLength = definition.byteLength || 0;
      const byteOffset = definition.byteOffset || 0;
      return buffer.slice(byteOffset, byteOffset + byteLength);
    });
  }

  loadAccessor(index) {
    const json = this.json;
    const definition = json.accessors[index];
    return this.getDependency('bufferView', definition.bufferView).then(bufferView => {
      const itemSize = WEBGL_TYPE_SIZES[definition.type];
      const TypedArray = WEBGL_COMPONENT_TYPES[definition.componentType];
      const byteOffset = definition.byteOffset || 0;
      return new TypedArray(bufferView, byteOffset, definition.count * itemSize);
    });
  }

  loadMesh(index) {
    const json = this.json;
    const definition = json.meshes[index];
    return this.getDependencies('accessor').then(accessors => {
      // assuming a single primitive
      const primitive = definition.primitives[0];

      if (primitive.mode !== undefined && primitive.mode !== 4) {
        throw new Error('YUKA.NavMeshLoader: Invalid geometry format. Please ensure to represent your geometry as triangles.');
      }

      return {
        index: accessors[primitive.indices],
        position: accessors[primitive.attributes.POSITION],
        normal: accessors[primitive.attributes.NORMAL]
      };
    });
  }

  parseBinary(data) {
    const chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);
    let chunkIndex = 0;
    const decoder = new TextDecoder();
    let content = null;
    let body = null;

    while (chunkIndex < chunkView.byteLength) {
      const chunkLength = chunkView.getUint32(chunkIndex, true);
      chunkIndex += 4;
      const chunkType = chunkView.getUint32(chunkIndex, true);
      chunkIndex += 4;

      if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {
        const contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);
        content = decoder.decode(contentArray);
      } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {
        const byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
        body = data.slice(byteOffset, byteOffset + chunkLength);
      }

      chunkIndex += chunkLength;
    }

    this.extensions.set('BINARY', {
      content: content,
      body: body
    });
  }

} // helper functions


function extractUrlBase(url = '') {
  const index = url.lastIndexOf('/');
  if (index === -1) return './';
  return url.substr(0, index + 1);
}

function resolveURI(uri, path) {
  if (typeof uri !== 'string' || uri === '') return '';
  if (/^(https?:)?\/\//i.test(uri)) return uri;
  if (/^data:.*,.*$/i.test(uri)) return uri;
  if (/^blob:.*$/i.test(uri)) return uri;
  return path + uri;
} //


const WEBGL_TYPE_SIZES = {
  'SCALAR': 1,
  'VEC2': 2,
  'VEC3': 3,
  'VEC4': 4,
  'MAT2': 4,
  'MAT3': 9,
  'MAT4': 16
};
const WEBGL_COMPONENT_TYPES = {
  5120: Int8Array,
  5121: Uint8Array,
  5122: Int16Array,
  5123: Uint16Array,
  5125: Uint32Array,
  5126: Float32Array
};
const BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
const BINARY_EXTENSION_HEADER_LENGTH = 12;
const BINARY_EXTENSION_CHUNK_TYPES = {
  JSON: 0x4E4F534A,
  BIN: 0x004E4942
};
/**
* Class for representing a single partition in context of cell-space partitioning.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class Cell {
  /**
  * Constructs a new cell with the given values.
  *
  * @param {AABB} aabb - The bounding volume of the cell.
  */
  constructor(aabb = new AABB()) {
    /**
    * The bounding volume of the cell.
    * @type {AABB}
    */
    this.aabb = aabb;
    /**
    * The list of entries which belong to this cell.
    * @type {Array<Any>}
    * @readonly
    */

    this.entries = new Array();
  }
  /**
  * Adds an entry to this cell.
  *
  * @param {Any} entry - The entry to add.
  * @return {Cell} A reference to this cell.
  */


  add(entry) {
    this.entries.push(entry);
    return this;
  }
  /**
  * Removes an entry from this cell.
  *
  * @param {Any} entry - The entry to remove.
  * @return {Cell} A reference to this cell.
  */


  remove(entry) {
    const index = this.entries.indexOf(entry);
    this.entries.splice(index, 1);
    return this;
  }
  /**
  * Removes all entries from this cell.
  *
  * @return {Cell} A reference to this cell.
  */


  makeEmpty() {
    this.entries.length = 0;
    return this;
  }
  /**
  * Returns true if this cell is empty.
  *
  * @return {Boolean} Whether this cell is empty or not.
  */


  empty() {
    return this.entries.length === 0;
  }
  /**
  * Returns true if the given AABB intersects the internal bounding volume of this cell.
  *
  * @param {AABB} aabb - The AABB to test.
  * @return {Boolean} Whether this cell intersects with the given AABB or not.
  */


  intersects(aabb) {
    return this.aabb.intersectsAABB(aabb);
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      type: this.constructor.name,
      aabb: this.aabb.toJSON(),
      entries: new Array()
    };
    const entries = this.entries;

    for (let i = 0, l = entries.length; i < l; i++) {
      json.entries.push(entries[i].uuid);
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {Cell} A reference to this game entity.
  */


  fromJSON(json) {
    this.aabb.fromJSON(json.aabb);
    this.entries = json.entries.slice();
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {Cell} A reference to this cell.
  */


  resolveReferences(entities) {
    const entries = this.entries;

    for (let i = 0, l = entries.length; i < l; i++) {
      entries[i] = entities.get(entries[i]);
    }

    return this;
  }

}

exports.Cell = Cell;
const clampedPosition = new Vector3();
const aabb$2 = new AABB();
const contour = new Array();
/**
* This class is used for cell-space partitioning, a basic approach for implementing
* a spatial index. The 3D space is divided up into a number of cells. A cell contains a
* list of references to all the entities it contains. Compared to other spatial indices like
* octrees, the division of the 3D space is coarse and often not balanced but the computational
* overhead for calculating the index of a specific cell based on a position vector is very fast.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/

class CellSpacePartitioning {
  /**
  * Constructs a new spatial index with the given values.
  *
  * @param {Number} width - The width of the entire spatial index.
  * @param {Number} height - The height of the entire spatial index.
  * @param {Number} depth - The depth of the entire spatial index.
  * @param {Number} cellsX - The amount of cells along the x-axis.
  * @param {Number} cellsY - The amount of cells along the y-axis.
  * @param {Number} cellsZ - The amount of cells along the z-axis.
  */
  constructor(width, height, depth, cellsX, cellsY, cellsZ) {
    /**
    * The list of partitions.
    * @type {Array<Cell>}
    */
    this.cells = new Array();
    /**
    * The width of the entire spatial index.
    * @type {Number}
    */

    this.width = width;
    /**
    * The height of the entire spatial index.
    * @type {Number}
    */

    this.height = height;
    /**
    * The depth of the entire spatial index.
    * @type {Number}
    */

    this.depth = depth;
    /**
    * The amount of cells along the x-axis.
    * @type {Number}
    */

    this.cellsX = cellsX;
    /**
    * The amount of cells along the y-axis.
    * @type {Number}
    */

    this.cellsY = cellsY;
    /**
    * The amount of cells along the z-axis.
    * @type {Number}
    */

    this.cellsZ = cellsZ;
    this._halfWidth = this.width / 2;
    this._halfHeight = this.height / 2;
    this._halfDepth = this.depth / 2;
    this._min = new Vector3(-this._halfWidth, -this._halfHeight, -this._halfDepth);
    this._max = new Vector3(this._halfWidth, this._halfHeight, this._halfDepth); //

    const cellSizeX = this.width / this.cellsX;
    const cellSizeY = this.height / this.cellsY;
    const cellSizeZ = this.depth / this.cellsZ;

    for (let i = 0; i < this.cellsX; i++) {
      const x = i * cellSizeX - this._halfWidth;

      for (let j = 0; j < this.cellsY; j++) {
        const y = j * cellSizeY - this._halfHeight;

        for (let k = 0; k < this.cellsZ; k++) {
          const z = k * cellSizeZ - this._halfDepth;
          const min = new Vector3();
          const max = new Vector3();
          min.set(x, y, z);
          max.x = min.x + cellSizeX;
          max.y = min.y + cellSizeY;
          max.z = min.z + cellSizeZ;
          const aabb = new AABB(min, max);
          const cell = new Cell(aabb);
          this.cells.push(cell);
        }
      }
    }
  }
  /**
  * Updates the partitioning index of a given game entity.
  *
  * @param {GameEntity} entity - The entity to update.
  * @param {Number} currentIndex - The current partition index of the entity.
  * @return {Number} The new partitioning index for the given game entity.
  */


  updateEntity(entity, currentIndex = -1) {
    const newIndex = this.getIndexForPosition(entity.position);

    if (currentIndex !== newIndex) {
      this.addEntityToPartition(entity, newIndex);

      if (currentIndex !== -1) {
        this.removeEntityFromPartition(entity, currentIndex);
      }
    }

    return newIndex;
  }
  /**
  * Adds an entity to a specific partition.
  *
  * @param {GameEntity} entity - The entity to add.
  * @param {Number} index - The partition index.
  * @return {CellSpacePartitioning} A reference to this spatial index.
  */


  addEntityToPartition(entity, index) {
    const cell = this.cells[index];
    cell.add(entity);
    return this;
  }
  /**
  * Removes an entity from a specific partition.
  *
  * @param {GameEntity} entity - The entity to remove.
  * @param {Number} index - The partition index.
  * @return {CellSpacePartitioning} A reference to this spatial index.
  */


  removeEntityFromPartition(entity, index) {
    const cell = this.cells[index];
    cell.remove(entity);
    return this;
  }
  /**
  * Computes the partition index for the given position vector.
  *
  * @param {Vector3} position - The given position.
  * @return {Number} The partition index.
  */


  getIndexForPosition(position) {
    clampedPosition.copy(position).clamp(this._min, this._max);
    let indexX = Math.abs(Math.floor(this.cellsX * (clampedPosition.x + this._halfWidth) / this.width));
    let indexY = Math.abs(Math.floor(this.cellsY * (clampedPosition.y + this._halfHeight) / this.height));
    let indexZ = Math.abs(Math.floor(this.cellsZ * (clampedPosition.z + this._halfDepth) / this.depth)); // handle index overflow

    if (indexX === this.cellsX) indexX = this.cellsX - 1;
    if (indexY === this.cellsY) indexY = this.cellsY - 1;
    if (indexZ === this.cellsZ) indexZ = this.cellsZ - 1; // calculate final index

    return indexX * this.cellsY * this.cellsZ + indexY * this.cellsZ + indexZ;
  }
  /**
  * Performs a query to the spatial index according the the given position and
  * radius. The method approximates the query position and radius with an AABB and
  * then performs an intersection test with all non-empty cells in order to determine
  * relevant partitions. Stores the result in the given result array.
  *
  * @param {Vector3} position - The given query position.
  * @param {Number} radius - The given query radius.
  * @param {Array<Any>} result - The result array.
  * @return {Array<Any>} The result array.
  */


  query(position, radius, result) {
    const cells = this.cells;
    result.length = 0; // approximate range with an AABB which allows fast intersection test

    aabb$2.min.copy(position).subScalar(radius);
    aabb$2.max.copy(position).addScalar(radius); // test all non-empty cells for an intersection

    for (let i = 0, l = cells.length; i < l; i++) {
      const cell = cells[i];

      if (cell.empty() === false && cell.intersects(aabb$2) === true) {
        result.push(...cell.entries);
      }
    }

    return result;
  }
  /**
  * Removes all entities from all partitions.
  *
  * @return {CellSpacePartitioning} A reference to this spatial index.
  */


  makeEmpty() {
    const cells = this.cells;

    for (let i = 0, l = cells.length; i < l; i++) {
      cells[i].makeEmpty();
    }

    return this;
  }
  /**
  * Adds a polygon to the spatial index. A polygon is approximated with an AABB.
  *
  * @param {Polygon} polygon - The polygon to add.
  * @return {CellSpacePartitioning} A reference to this spatial index.
  */


  addPolygon(polygon) {
    const cells = this.cells;
    polygon.getContour(contour);
    aabb$2.fromPoints(contour);

    for (let i = 0, l = cells.length; i < l; i++) {
      const cell = cells[i];

      if (cell.intersects(aabb$2) === true) {
        cell.add(polygon);
      }
    }

    return this;
  }
  /**
   * Transforms this instance into a JSON object.
   *
   * @return {Object} The JSON object.
   */


  toJSON() {
    const json = {
      type: this.constructor.name,
      cells: new Array(),
      width: this.width,
      height: this.height,
      depth: this.depth,
      cellsX: this.cellsX,
      cellsY: this.cellsY,
      cellsZ: this.cellsZ,
      _halfWidth: this._halfWidth,
      _halfHeight: this._halfHeight,
      _halfDepth: this._halfDepth,
      _min: this._min.toArray(new Array()),
      _max: this._max.toArray(new Array())
    };

    for (let i = 0, l = this.cells.length; i < l; i++) {
      json.cells.push(this.cells[i].toJSON());
    }

    return json;
  }
  /**
   * Restores this instance from the given JSON object.
   *
   * @param {Object} json - The JSON object.
   * @return {CellSpacePartitioning} A reference to this spatial index.
   */


  fromJSON(json) {
    this.cells.length = 0;
    this.width = json.width;
    this.height = json.height;
    this.depth = json.depth;
    this.cellsX = json.cellsX;
    this.cellsY = json.cellsY;
    this.cellsZ = json.cellsZ;
    this._halfWidth = json._halfWidth;
    this._halfHeight = json._halfHeight;
    this._halfDepth = json._halfHeight;

    this._min.fromArray(json._min);

    this._max.fromArray(json._max);

    for (let i = 0, l = json.cells.length; i < l; i++) {
      this.cells.push(new Cell().fromJSON(json.cells[i]));
    }

    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {CellSpacePartitioning} A reference to this cell space portioning.
  */


  resolveReferences(entities) {
    for (let i = 0, l = this.cells.length; i < l; i++) {
      this.cells[i].resolveReferences(entities);
    }

    return this;
  }

}
/**
* Class for representing the memory information about a single game entity.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.CellSpacePartitioning = CellSpacePartitioning;

class MemoryRecord {
  /**
  * Constructs a new memory record.
  *
  * @param {GameEntity} entity - The game entity that is represented by this memory record.
  */
  constructor(entity = null) {
    /**
    * The game entity that is represented by this memory record.
    * @type {?GameEntity}
    * @default null
    */
    this.entity = entity;
    /**
    * Records the time the entity became visible. Useful in combination with a reaction time
    * in order to prevent immediate actions.
    * @type {Number}
    * @default - Infinity
    */

    this.timeBecameVisible = -Infinity;
    /**
    * Records the time the entity was last sensed (e.g. seen or heard). Used to determine
    * if a game entity can "remember" this record or not.
    * @type {Number}
    * @default - Infinity
    */

    this.timeLastSensed = -Infinity;
    /**
    * Marks the position where the opponent was last sensed.
    * @type {Vector3}
    */

    this.lastSensedPosition = new Vector3();
    /**
    * Whether this game entity is visible or not.
    * @type {Boolean}
    * @default false
    */

    this.visible = false;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    return {
      type: this.constructor.name,
      entity: this.entity.uuid,
      timeBecameVisible: this.timeBecameVisible.toString(),
      timeLastSensed: this.timeLastSensed.toString(),
      lastSensedPosition: this.lastSensedPosition.toArray(new Array()),
      visible: this.visible
    };
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {MemoryRecord} A reference to this memory record.
  */


  fromJSON(json) {
    this.entity = json.entity; // uuid

    this.timeBecameVisible = parseFloat(json.timeBecameVisible);
    this.timeLastSensed = parseFloat(json.timeLastSensed);
    this.lastSensedPosition.fromArray(json.lastSensedPosition);
    this.visible = json.visible;
    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {MemoryRecord} A reference to this memory record.
  */


  resolveReferences(entities) {
    this.entity = entities.get(this.entity) || null;
    return this;
  }

}
/**
* Class for representing the memory system of a game entity. It is used for managing,
* filtering, and remembering sensory input.
*
* @author {@link https://github.com/Mugen87|Mugen87}
*/


exports.MemoryRecord = MemoryRecord;

class MemorySystem {
  /**
  * Constructs a new memory system.
  *
  * @param {GameEntity} owner - The game entity that owns this memory system.
  */
  constructor(owner = null) {
    /**
    * The game entity that owns this memory system.
    * @type {?GameEntity}
    * @default null
    */
    this.owner = owner;
    /**
    * Used to simulate memory of sensory events. It contains {@link MemoryRecord memory records}
    * of all relevant game entities in the environment. The records are usually update by
    * the owner of the memory system.
    * @type {Array<MemoryRecord>}
    */

    this.records = new Array();
    /**
    * Same as {@link MemorySystem#records} but used for fast access via the game entity.
    * @type {Map<GameEntity,MemoryRecord>}
    */

    this.recordsMap = new Map();
    /**
    * Represents the duration of the game entities short term memory in seconds.
    * When a bot requests a list of all recently sensed game entities, this value
    * is used to determine if the bot is able to remember a game entity or not.
    * @type {Number}
    * @default 1
    */

    this.memorySpan = 1;
  }
  /**
  * Returns the memory record of the given game entity.
  *
  * @param {GameEntity} entity - The game entity.
  * @return {MemoryRecord} The memory record for this game entity.
  */


  getRecord(entity) {
    return this.recordsMap.get(entity);
  }
  /**
  * Creates a memory record for the given game entity.
  *
  * @param {GameEntity} entity - The game entity.
  * @return {MemorySystem} A reference to this memory system.
  */


  createRecord(entity) {
    const record = new MemoryRecord(entity);
    this.records.push(record);
    this.recordsMap.set(entity, record);
    return this;
  }
  /**
  * Deletes the memory record for the given game entity.
  *
  * @param {GameEntity} entity - The game entity.
  * @return {MemorySystem} A reference to this memory system.
  */


  deleteRecord(entity) {
    const record = this.getRecord(entity);
    const index = this.records.indexOf(record);
    this.records.splice(index, 1);
    this.recordsMap.delete(entity);
    return this;
  }
  /**
  * Returns true if there is a memory record for the given game entity.
  *
  * @param {GameEntity} entity - The game entity.
  * @return {Boolean} Whether the game entity has a memory record or not.
  */


  hasRecord(entity) {
    return this.recordsMap.has(entity);
  }
  /**
  * Removes all memory records from the memory system.
  *
  * @return {MemorySystem} A reference to this memory system.
  */


  clear() {
    this.records.length = 0;
    this.recordsMap.clear();
    return this;
  }
  /**
  * Determines all valid memory record and stores the result in the given array.
  *
  * @param {Number} currentTime - The current elapsed time.
  * @param {Array<MemoryRecord>} result - The result array.
  * @return {Array<MemoryRecord>} The result array.
  */


  getValidMemoryRecords(currentTime, result) {
    const records = this.records;
    result.length = 0;

    for (let i = 0, l = records.length; i < l; i++) {
      const record = records[i];

      if (currentTime - record.timeLastSensed <= this.memorySpan) {
        result.push(record);
      }
    }

    return result;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = {
      type: this.constructor.name,
      owner: this.owner.uuid,
      records: new Array(),
      memorySpan: this.memorySpan
    };
    const records = this.records;

    for (let i = 0, l = records.length; i < l; i++) {
      const record = records[i];
      json.records.push(record.toJSON());
    }

    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {MemorySystem} A reference to this memory system.
  */


  fromJSON(json) {
    this.owner = json.owner; // uuid

    this.memorySpan = json.memorySpan;
    const recordsJSON = json.records;

    for (let i = 0, l = recordsJSON.length; i < l; i++) {
      const recordJSON = recordsJSON[i];
      const record = new MemoryRecord().fromJSON(recordJSON);
      this.records.push(record);
    }

    return this;
  }
  /**
  * Restores UUIDs with references to GameEntity objects.
  *
  * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
  * @return {MemorySystem} A reference to this memory system.
  */


  resolveReferences(entities) {
    this.owner = entities.get(this.owner) || null; // records

    const records = this.records;

    for (let i = 0, l = records.length; i < l; i++) {
      const record = records[i];
      record.resolveReferences(entities);
      this.recordsMap.set(record.entity, record);
    }

    return this;
  }

}

exports.MemorySystem = MemorySystem;
const toPoint = new Vector3();
const direction$1 = new Vector3();
const ray$1 = new Ray();
const intersectionPoint$1 = new Vector3();
const worldPosition = new Vector3();
/**
 * Class for representing the vision component of a game entity.
 *
 * @author {@link https://github.com/Mugen87|Mugen87}
 */

class Vision {
  /**
   * Constructs a new vision object.
   *
   * @param {GameEntity} owner - The owner of this vision instance.
   */
  constructor(owner = null) {
    /**
     * The game entity that owns this vision instance.
     * @type {?GameEntity}
    * @default null
     */
    this.owner = owner;
    /**
     * The field of view in radians.
     * @type {Number}
     * @default π
     */

    this.fieldOfView = Math.PI;
    /**
     * The visual range in world units.
     * @type {Number}
     * @default Infinity
     */

    this.range = Infinity;
    /**
     * An array of obstacles. An obstacle is a game entity that
     * implements the {@link GameEntity#lineOfSightTest} method.
     * @type {Array<GameEntity>}
     */

    this.obstacles = new Array();
  }
  /**
   * Adds an obstacle to this vision instance.
   *
   * @param {GameEntity} obstacle - The obstacle to add.
   * @return {Vision} A reference to this vision instance.
   */


  addObstacle(obstacle) {
    this.obstacles.push(obstacle);
    return this;
  }
  /**
   * Removes an obstacle from this vision instance.
   *
   * @param {GameEntity} obstacle - The obstacle to remove.
   * @return {Vision} A reference to this vision instance.
   */


  removeObstacle(obstacle) {
    const index = this.obstacles.indexOf(obstacle);
    this.obstacles.splice(index, 1);
    return this;
  }
  /**
   * Performs a line of sight test in order to determine if the given point
   * in 3D space is visible for the game entity.
   *
   * @param {Vector3} point - The point to test.
   * @return {Boolean} Whether the given point is visible or not.
   */


  visible(point) {
    const owner = this.owner;
    const obstacles = this.obstacles;
    owner.getWorldPosition(worldPosition); // check if point lies within the game entity's visual range

    toPoint.subVectors(point, worldPosition);
    const distanceToPoint = toPoint.length();
    if (distanceToPoint > this.range) return false; // next, check if the point lies within the game entity's field of view

    owner.getWorldDirection(direction$1);
    const angle = direction$1.angleTo(toPoint);
    if (angle > this.fieldOfView * 0.5) return false; // the point lies within the game entity's visual range and field
    // of view. now check if obstacles block the game entity's view to the given point.

    ray$1.origin.copy(worldPosition);
    ray$1.direction.copy(toPoint).divideScalar(distanceToPoint || 1); // normalize

    for (let i = 0, l = obstacles.length; i < l; i++) {
      const obstacle = obstacles[i];
      const intersection = obstacle.lineOfSightTest(ray$1, intersectionPoint$1);

      if (intersection !== null) {
        // if an intersection point is closer to the game entity than the given point,
        // something is blocking the game entity's view
        const squaredDistanceToIntersectionPoint = intersectionPoint$1.squaredDistanceTo(worldPosition);
        if (squaredDistanceToIntersectionPoint <= distanceToPoint * distanceToPoint) return false;
      }
    }

    return true;
  }
  /**
   * Transforms this instance into a JSON object.
   *
   * @return {Object} The JSON object.
   */


  toJSON() {
    const json = {
      type: this.constructor.name,
      owner: this.owner.uuid,
      fieldOfView: this.fieldOfView,
      range: this.range.toString()
    };
    json.obstacles = new Array();

    for (let i = 0, l = this.obstacles.length; i < l; i++) {
      const obstacle = this.obstacles[i];
      json.obstacles.push(obstacle.uuid);
    }

    return json;
  }
  /**
   * Restores this instance from the given JSON object.
   *
   * @param {Object} json - The JSON object.
   * @return {Vision} A reference to this vision.
   */


  fromJSON(json) {
    this.owner = json.owner;
    this.fieldOfView = json.fieldOfView;
    this.range = parseFloat(json.range);

    for (let i = 0, l = json.obstacles.length; i < l; i++) {
      const obstacle = json.obstacles[i];
      this.obstacles.push(obstacle);
    }

    return this;
  }
  /**
   * Restores UUIDs with references to GameEntity objects.
   *
   * @param {Map<String,GameEntity>} entities - Maps game entities to UUIDs.
   * @return {Vision} A reference to this vision.
   */


  resolveReferences(entities) {
    this.owner = entities.get(this.owner) || null;
    const obstacles = this.obstacles;

    for (let i = 0, l = obstacles.length; i < l; i++) {
      obstacles[i] = entities.get(obstacles[i]);
    }

    return this;
  }

}

exports.Vision = Vision;
const translation$1 = new Vector3();
const predictedPosition$3 = new Vector3();
const normalPoint = new Vector3();
const lineSegment$1 = new LineSegment();
const closestNormalPoint = new Vector3();
/**
* This steering behavior produces a force that keeps a vehicle close to its path. It is intended
* to use it in combination with {@link FollowPathBehavior} in order to realize a more strict path following.
*
* @author {@link https://github.com/Mugen87|Mugen87}
* @augments SteeringBehavior
*/

class OnPathBehavior extends SteeringBehavior {
  /**
  * Constructs a new on path behavior.
  *
  * @param {Path} path - The path to stay close to.
  * @param {Number} radius - Defines the width of the path. With a smaller radius, the vehicle will have to follow the path more closely.
  * @param {Number} predictionFactor - Determines how far the behavior predicts the movement of the vehicle.
  */
  constructor(path = new Path(), radius = 0.1, predictionFactor = 1) {
    super();
    /**
    * The path to stay close to.
    * @type {Path}
    */

    this.path = path;
    /**
    * Defines the width of the path. With a smaller radius, the vehicle will have to follow the path more closely.
    * @type {Number}
    * @default 0.1
    */

    this.radius = radius;
    /**
    * Determines how far the behavior predicts the movement of the vehicle.
    * @type {Number}
    * @default 1
    */

    this.predictionFactor = predictionFactor; // internal behaviors

    this._seek = new SeekBehavior();
  }
  /**
  * Calculates the steering force for a single simulation step.
  *
  * @param {Vehicle} vehicle - The game entity the force is produced for.
  * @param {Vector3} force - The force/result vector.
  * @param {Number} delta - The time delta.
  * @return {Vector3} The force/result vector.
  */


  calculate(vehicle, force
  /*, delta */
  ) {
    const path = this.path; // predicted future position

    translation$1.copy(vehicle.velocity).multiplyScalar(this.predictionFactor);
    predictedPosition$3.addVectors(vehicle.position, translation$1); // compute closest line segment and normal point. the normal point is computed by projecting
    // the predicted position of the vehicle on a line segment.

    let minDistance = Infinity;
    let l = path._waypoints.length; // handle looped paths differently since they have one line segment more

    l = path.loop === true ? l : l - 1;

    for (let i = 0; i < l; i++) {
      lineSegment$1.from = path._waypoints[i]; // the last waypoint needs to be handled differently for a looped path.
      // connect the last point with the first one in order to create the last line segment

      if (path.loop === true && i === l - 1) {
        lineSegment$1.to = path._waypoints[0];
      } else {
        lineSegment$1.to = path._waypoints[i + 1];
      }

      lineSegment$1.closestPointToPoint(predictedPosition$3, true, normalPoint);
      const distance = predictedPosition$3.squaredDistanceTo(normalPoint);

      if (distance < minDistance) {
        minDistance = distance;
        closestNormalPoint.copy(normalPoint);
      }
    } // seek towards the projected point on the closest line segment if
    // the predicted position of the vehicle is outside the valid range.
    // also ensure that the path length is greater than zero when performing a seek


    if (minDistance > this.radius * this.radius && path._waypoints.length > 1) {
      this._seek.target = closestNormalPoint;

      this._seek.calculate(vehicle, force);
    }

    return force;
  }
  /**
  * Transforms this instance into a JSON object.
  *
  * @return {Object} The JSON object.
  */


  toJSON() {
    const json = super.toJSON();
    json.path = this.path.toJSON();
    json.radius = this.radius;
    json.predictionFactor = this.predictionFactor;
    return json;
  }
  /**
  * Restores this instance from the given JSON object.
  *
  * @param {Object} json - The JSON object.
  * @return {OnPathBehavior} A reference to this behavior.
  */


  fromJSON(json) {
    super.fromJSON(json);
    this.path.fromJSON(json.path);
    this.radius = json.radius;
    this.predictionFactor = json.predictionFactor;
    return this;
  }

}
/**
* Base class for representing tasks. A task is an isolated unit of work that is
* processed in an asynchronous way. Tasks are managed within a {@link TaskQueue task queue}.
*
* @author {@link https://github.com/robp94|robp94}
*/


exports.OnPathBehavior = OnPathBehavior;

class Task {
  /**
  * This method represents the actual unit of work.
  * Must be implemented by all concrete tasks.
  */
  execute() {}

}
/**
* This class is used for task management. Tasks are processed in an asynchronous
* way when there is idle time within a single simulation step or after a defined amount
* of time (deadline). The class is a wrapper around {@link https://w3.org/TR/requestidlecallback|requestidlecallback()},
* a JavaScript API for cooperative scheduling of background tasks.
*
* @author {@link https://github.com/robp94|robp94}
*/


exports.Task = Task;

class TaskQueue {
  /**
  * Constructs a new task queue.
  */
  constructor() {
    /**
    * A list of pending tasks.
    * @type {Array<Task>}
    * @readonly
    */
    this.tasks = new Array();
    /**
    * Used to control the asynchronous processing.
    * - timeout: After this amount of time (in ms), a scheduled task is executed even if
    * doing so risks causing a negative performance impact (e.g. bad frame time).
    * @type {Object}
    */

    this.options = {
      timeout: 1000 // ms

    }; //

    this._active = false;
    this._handler = runTaskQueue.bind(this);
    this._taskHandle = 0;
  }
  /**
  * Adds the given task to the task queue.
  *
  * @param {Task} task - The task to add.
  * @return {TaskQueue} A reference to this task queue.
  */


  enqueue(task) {
    this.tasks.push(task);
    return this;
  }
  /**
  * Updates the internal state of the task queue. Should be called
  * per simulation step.
  *
  * @return {TaskQueue} A reference to this task queue.
  */


  update() {
    if (this.tasks.length > 0) {
      if (this._active === false) {
        this._taskHandle = requestIdleCallback(this._handler, this.options);
        this._active = true;
      }
    } else {
      this._active = false;
    }

    return this;
  }

}
/**
* This function controls the processing of tasks. It schedules tasks when there
* is idle time at the end of a simulation step.
*
* @param {Object} deadline - This object contains a function which returns
* a number indicating how much time remains for task processing.
*/


exports.TaskQueue = TaskQueue;

function runTaskQueue(deadline) {
  const tasks = this.tasks;

  while (deadline.timeRemaining() > 0 && tasks.length > 0) {
    const task = tasks[0];
    task.execute();
    tasks.shift();
  }

  if (tasks.length > 0) {
    this._taskHandle = requestIdleCallback(this._handler, this.options);
    this._active = true;
  } else {
    this._taskHandle = 0;
    this._active = false;
  }
}
},{}],"js/scripts.js":[function(require,module,exports) {
"use strict";

var THREE = _interopRequireWildcard(require("three"));

var YUKA = _interopRequireWildcard(require("yuka"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var renderer = new THREE.WebGLRenderer({
  antialias: true
});
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
var scene = new THREE.Scene();
renderer.setClearColor(0xA3A3A3);
var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 20, 0);
camera.lookAt(scene.position);
var vehicleGeometry = new THREE.ConeBufferGeometry(0.1, 0.5, 5);
vehicleGeometry.rotateX(Math.PI * 0.5);
var vehicleMaterial = new THREE.MeshNormalMaterial();
var vehicleMesh = new THREE.Mesh(vehicleGeometry, vehicleMaterial);
vehicleMesh.matrixAutoUpdate = false;
scene.add(vehicleMesh);
var vehicle = new YUKA.Vehicle();
vehicle.setRenderComponent(vehicleMesh, sync);

function sync(entity, renderComponent) {
  renderComponent.matrix.copy(entity.worldMatrix);
}

var path = new YUKA.Path();
path.add(new YUKA.Vector3(-4, 0, 1));
path.add(new YUKA.Vector3(-1, 0, 0));
path.add(new YUKA.Vector3(-4, 0, -4));
path.add(new YUKA.Vector3(0, 0, 0));
path.add(new YUKA.Vector3(4, 0, -3));
path.add(new YUKA.Vector3(5, 0, 0));
path.add(new YUKA.Vector3(4, 0, 3));
path.add(new YUKA.Vector3(0, 0, 3));
path.loop = true;
vehicle.position.copy(path.current());
vehicle.maxSpeed = 5;
var followPathBehavior = new YUKA.FollowPathBehavior(path, 1.1);
vehicle.steering.add(followPathBehavior);
var onPathBehavior = new YUKA.OnPathBehavior(path);
onPathBehavior.radius = 2;
vehicle.steering.add(onPathBehavior);
var entityManager = new YUKA.EntityManager();
entityManager.add(vehicle);
var position = [];

for (var i = 0; i < path._waypoints.length; i++) {
  var waypoint = path._waypoints[i];
  position.push(waypoint.x, waypoint.y, waypoint.z);
}

var lineGeometry = new THREE.BufferGeometry();
lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
var lineMaterial = new THREE.LineBasicMaterial({
  color: 0xFFFFFF
});
var lines = new THREE.LineLoop(lineGeometry, lineMaterial);
scene.add(lines);
var time = new YUKA.Time();

function animate() {
  var delta = time.update().getDelta();
  entityManager.update(delta);
  renderer.render(scene, camera);
}

renderer.setAnimationLoop(animate);
window.addEventListener('resize', function () {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
},{"three":"../node_modules/three/build/three.module.js","yuka":"../node_modules/yuka/build/yuka.module.js"}],"C:/Users/CatalinFestila/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "53408" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["C:/Users/CatalinFestila/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","js/scripts.js"], null)
//# sourceMappingURL=/scripts.cd665a19.js.map